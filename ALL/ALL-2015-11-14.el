'(
  (xtide [cl-struct-package-desc xtide (24) "XTide display in Emacs" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/xtide/index.html")) nil])
  (xml-coding [cl-struct-package-desc xml-coding (9) "coding system from tag in xml files (for Emacs 21)" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/xml-coding/index.html")) nil])
  (wx-look [cl-struct-package-desc wx-look (6) "lookup wxWidgets functions in its manual." nil single "user42" nil ((:url . "http://user42.tuxfamily.org/wx-look/index.html")) nil])
  (weblint [cl-struct-package-desc weblint (5) "run the weblint program" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/weblint/index.html")) nil])
  (variable-at-point-tick [cl-struct-package-desc variable-at-point-tick (4) "variable-at-point on a 'foo (for Emacs 23)" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/variable-at-point-tick/index.html")) nil])
  (upstr [cl-struct-package-desc upstr (4) "up-list out of a string or TeX maths too" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/upstr/index.html")) nil])
  (unicode-disp [cl-struct-package-desc unicode-disp (10) "display-table fallbacks for some unicode chars" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/unicode-disp/index.html")) nil])
  (tty-format [cl-struct-package-desc tty-format (10) "text file backspacing and ANSI SGR as faces" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/tty-format/index.html")) nil])
  (texinfo-warn [cl-struct-package-desc texinfo-warn (9) "warn about tabs and more in texinfo" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/texinfo-warn/index.html")) nil])
  (texinfo-nobreak [cl-struct-package-desc texinfo-nobreak (8) "texinfo line break workarounds for past makeinfo" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/texinfo-nobreak/index.html")) nil])
  (tex-math-preview [cl-struct-package-desc tex-math-preview (16) "preview TeX math expressions." nil single "user42" nil ((:url . "http://user42.tuxfamily.org/tex-math-preview/index.html")) nil])
  (tcd-format [cl-struct-package-desc tcd-format (7) "view XTide .tcd tide constituent database files" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/tcd-format/index.html")) nil])
  (startup-file-name-history [cl-struct-package-desc startup-file-name-history (5) "command line files into file-name-history" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/startup-file-name-history/index.html")) nil])
  (sqlite-dump [cl-struct-package-desc sqlite-dump (9) "view dump of sqlite database file" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/sqlite-dump/index.html")) nil])
  (sh-autoconf [cl-struct-package-desc sh-autoconf (8) "autoconf flavour for sh-mode" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/sh-autoconf/index.html")) nil])
  (scroll-1 [cl-struct-package-desc scroll-1 (9) "bind j and k to scroll the window up and down" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/scroll-1/index.html")) nil])
  (quick-yes [cl-struct-package-desc quick-yes (9) "M-y to answer \"yes\" to `yes-or-no-p'." nil single "user42" nil ((:url . "http://user42.tuxfamily.org/quick-yes/index.html")) nil])
  (pst-format [cl-struct-package-desc pst-format (8) "view perl Storable files as human readable text" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/pst-format/index.html")) nil])
  (perl-use-utf8-coding [cl-struct-package-desc perl-use-utf8-coding (5) "coding system from \"use utf8\" in perl code" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/perl-use-utf8-coding/index.html")) nil])
  (perl-quote [cl-struct-package-desc perl-quote (5) "helpers for Perl quoted strings" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/perl-quote/index.html")) nil])
  (perl-pod-preview [cl-struct-package-desc perl-pod-preview (17) "preview perl pod documentation" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/perl-pod-preview/index.html")) nil])
  (perl-pod-gt [cl-struct-package-desc perl-pod-gt (18) "helpers for Perl POD <> markup" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/perl-pod-gt/index.html")) nil])
  (perl-pod-coding [cl-struct-package-desc perl-pod-coding (8) "coding system from =encoding in perl files" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/perl-pod-coding/index.html")) nil])
  (perl-env-substitute [cl-struct-package-desc perl-env-substitute (3) "Perl style $ENV{VARNAME} in substitute-in-filename" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/perl-env-substitute/index.html")) nil])
  (pcf2bdf [cl-struct-package-desc pcf2bdf (13) "view .pcf compiled font files as bdf" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/pcf2bdf/index.html")) nil])
  (parasep [cl-struct-package-desc parasep (5) "more paragraph separators" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/parasep/index.html")) nil])
  (oeis [cl-struct-package-desc oeis (7) "helpers for the Online Encyclopedia of Integer Sequences" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/oeis-el/index.html")) nil])
  (nroff-filladapt [cl-struct-package-desc nroff-filladapt (5) "nroff comment prefixes for filladapt" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/nroff-filladapt/index.html")) nil])
  (nobreak-fade [cl-struct-package-desc nobreak-fade (9) "some functions for `fill-nobreak-predicate'" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/nobreak-fade/index.html")) nil])
  (mo-mode [cl-struct-package-desc mo-mode (14) "view and edit gettext .mo message files" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/mo-mode/index.html")) nil])
  (mine-sweeper-auto [cl-struct-package-desc mine-sweeper-auto (6) "automated mine sweeping for mine-sweeper.el" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/mine-sweeper-auto/index.html")) nil])
  (man-preview [cl-struct-package-desc man-preview (10) "preview nroff man file source" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/man-preview/index.html")) nil])
  (man-completion [cl-struct-package-desc man-completion (35) "completion for M-x man" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/man-completion/index.html")) nil])
  (makeinfo-info [cl-struct-package-desc makeinfo-info (9) "use Info-mode with makeinfo-buffer." nil single "user42" nil ((:url . "http://user42.tuxfamily.org/makeinfo-info/index.html")) nil])
  (make-mode-fillindent [cl-struct-package-desc make-mode-fillindent (5) "filling indented makefile comments" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/make-mode-fillindent/index.html")) nil])
  (mailcap-mode [cl-struct-package-desc mailcap-mode (4) "mailcap file editing mode" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/mailcap-mode/index.html")) nil])
  (localedef-overlay [cl-struct-package-desc localedef-overlay (4) "mode for glibc locale definition files" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/localedef-overlay/index.html")) nil])
  (jka-compr-dictzip [cl-struct-package-desc jka-compr-dictzip (2) "dictzip .dz for jka-compr" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/jka-compr-dictzip/index.html")) nil])
  (ispell-stopwords [cl-struct-package-desc ispell-stopwords (9) "use perl POD \"=for stopwords\" in ispell" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/ispell-stopwords/index.html")) nil])
  (info-lookmore [cl-struct-package-desc info-lookmore (6) "more things for info-look.el" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/info-lookmore/index.html")) nil])
  (imagetext [cl-struct-package-desc imagetext (11) "show text parts of image files" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/imagetext/index.html")) nil])
  (html-smarter-href [cl-struct-package-desc html-smarter-href (1) "smarter html-href-anchor reading" nil single "user42" nil ((:url . "http://www.geocities.com/user42_kevin/html-smarter-href/")) nil])
  (html-sizes [cl-struct-package-desc html-sizes (16) "maintain file sizes shown for html links" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/html-sizes/index.html")) nil])
  (html-coding [cl-struct-package-desc html-coding (13) "coding system from meta in html files (for Emacs 21)" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/html-coding/index.html")) nil])
  (help-xref-elfiles [cl-struct-package-desc help-xref-elfiles (4) "buttonize foo.el and .emacs filenames in docstrings" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/help-xref-elfiles/index.html")) nil])
  (gutenberg-coding [cl-struct-package-desc gutenberg-coding (15) "coding system for Project Gutenberg EBooks." nil single "user42" nil ((:url . "http://user42.tuxfamily.org/gutenberg-coding/index.html")) nil])
  (gtk-look [cl-struct-package-desc gtk-look (28) "lookup Gtk and Gnome documentation." nil single "user42" nil ((:url . "http://user42.tuxfamily.org/gtk-look/index.html")) nil])
  (formfeed-hline [cl-struct-package-desc formfeed-hline (5) "display formfeed with horizontal line" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/formfeed-hline/index.html")) nil])
  (filladapt-pat [cl-struct-package-desc filladapt-pat (6) "add or remove some filladapt patterns" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/filladapt-pat/index.html")) nil])
  (ffap-rfc-space [cl-struct-package-desc ffap-rfc-space (12) "recognise RFC with a space, like \"RFC 1234\"" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/ffap-rfc-space/index.html")) nil])
  (ffap-rfc-directories [cl-struct-package-desc ffap-rfc-directories (9) "look for RFCs in local directories too (for Emacs 22)" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/ffap-rfc-directories/index.html")) nil])
  (ffap-pod-F [cl-struct-package-desc ffap-pod-F (5) "follow Perl pod F<filename>" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/ffap-pod-F/index.html")) nil])
  (ffap-perl-module [cl-struct-package-desc ffap-perl-module (23) "find perl module at point with ffap" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/ffap-perl-module/index.html")) nil])
  (ffap-mml [cl-struct-package-desc ffap-mml (10) "find Gnus message MML attached file at point" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/ffap-mml/index.html")) nil])
  (ffap-makefile-vars [cl-struct-package-desc ffap-makefile-vars (5) "find file with makefile variables expanded" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/ffap-makefile-vars/index.html")) nil])
  (ffap-include-start [cl-struct-package-desc ffap-include-start (11) "recognise C #include when at start of line" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/ffap-include-start/index.html")) nil])
  (ffap-href [cl-struct-package-desc ffap-href (5) "find href URL/link anywhere in the tag" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/ffap-href/index.html")) nil])
  (ffap-gcc-path [cl-struct-package-desc ffap-gcc-path (8) "get gcc's include path for ffap-c-path" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/ffap-gcc-path/index.html")) nil])
  (ffap-I-option [cl-struct-package-desc ffap-I-option (2) "recognise -I/usr/include/foo" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/ffap-I-option/index.html")) nil])
  (elisp-docstring-preview [cl-struct-package-desc elisp-docstring-preview (5) "preview Emacs Lisp docstring" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/elisp-docstring-preview/index.html")) nil])
  (do-not-edit [cl-struct-package-desc do-not-edit (15) "read-only buffer for generated files" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/do-not-edit/index.html")) nil])
  (dired-visit-history [cl-struct-package-desc dired-visit-history (4) "add dired visited files to find-file history" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/dired-visit-history/index.html")) nil])
  (diff-save-buffer [cl-struct-package-desc diff-save-buffer (15) "default filename when saving a diff." nil single "user42" nil ((:url . "http://user42.tuxfamily.org/diff-save-buffer/index.html")) nil])
  (copyright-both-ends [cl-struct-package-desc copyright-both-ends (5) "update copyright at start and end of file" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/copyright-both-ends/index.html")) nil])
  (completion-ignored-build [cl-struct-package-desc completion-ignored-build (13) "some built completion-ignored-extensions" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/completion-ignored-build/index.html")) nil])
  (compile-command-default [cl-struct-package-desc compile-command-default (13) "establish a default for M-x compile" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/compile-command-default/index.html")) nil])
  (compilation-weblint [cl-struct-package-desc compilation-weblint (6) "error regexps for weblint" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/compilation-weblint/index.html")) nil])
  (compilation-recenter-end [cl-struct-package-desc compilation-recenter-end (7) "compilation-mode window recentre" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/compilation-recenter-end/index.html")) nil])
  (compilation-perl [cl-struct-package-desc compilation-perl (14) "extra error regexps for Perl" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/compilation-perl/index.html")) nil])
  (compilation-onewin [cl-struct-package-desc compilation-onewin (4) "whole-frame window for compile buffer" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/compilation-onewin/index.html")) nil])
  (compilation-ledger [cl-struct-package-desc compilation-ledger (3) "error regexps for ledger" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/compilation-ledger/index.html")) nil])
  (compilation-emacs21-batch [cl-struct-package-desc compilation-emacs21-batch (6) "error regexps for emacs21 byte compiler" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/compilation-emacs21-batch/index.html")) nil])
  (compilation-always-kill [cl-struct-package-desc compilation-always-kill (6) "kill compilation without prompting" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/compilation-always-kill/index.html")) nil])
  (cl-loop-aplist [cl-struct-package-desc cl-loop-aplist (5) "cl loop macro alist and plist support" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/cl-loop-aplist/index.html")) nil])
  (checkdoc-url-buttonize [cl-struct-package-desc checkdoc-url-buttonize (2) "check URL `' linking in docstrings" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/checkdoc-url-buttonize/index.html")) nil])
  (checkdoc-keywords [cl-struct-package-desc checkdoc-keywords (7) "check for known values in Keywords header" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/checkdoc-keywords/index.html")) nil])
  (checkdoc-batch [cl-struct-package-desc checkdoc-batch (7) "batch report of M-x checkdoc things" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/checkdoc-batch/index.html")) nil])
  (checkdoc-autoload [cl-struct-package-desc checkdoc-autoload (3) "check for various autoload cookies" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/checkdoc-autoload/index.html")) nil])
  (bytecomp-simplify [cl-struct-package-desc bytecomp-simplify (18) "byte compile warnings for simplifications" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/bytecomp-simplify/index.html")) nil])
  (areabrowse [cl-struct-package-desc areabrowse (4) "browse diku mud .are area files" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/areabrowse/index.html")) nil])
  (arc-lzh-exe [cl-struct-package-desc arc-lzh-exe (8) "archive-mode support for LHa self-extracting .exe" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/arc-lzh-exe/index.html")) nil])
  (align-let [cl-struct-package-desc align-let (13) "align expressions in a lisp \"let\"" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/align-let/index.html")) nil])
  (accjournal [cl-struct-package-desc accjournal (8) "double entry journal accounting" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/accjournal/index.html")) nil])
  (ac-tex-ref [cl-struct-package-desc ac-tex-ref (2) "auto-complete for tex-mode \\ref and \\cite labels" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/ac-tex-ref/index.html")) nil])
  (0blayout [cl-struct-package-desc 0blayout (20151021 349) "Layout grouping with ease" nil single "melpa" nil ((:url . "https://github.com/etu/0blayout") (:keywords "convenience" "window-management")) nil])
  (2048-game [cl-struct-package-desc 2048-game (20151026 1233) "play 2048 in Emacs" nil single "melpa" nil ((:url . "https://bitbucket.org/zck/2048.el")) nil])
  (4clojure [cl-struct-package-desc 4clojure (20131014 1507) "Open and evaluate 4clojure.com questions" ((json (1 2)) (request (0 2 0))) single "melpa" nil ((:keywords "languages" "data")) nil])
  (@ [cl-struct-package-desc @ (20140707 520) "multiple-inheritance prototype-based objects DSL" ((queue (0 1)) (emacs (24))) tar "melpa" nil ((:url . "https://github.com/skeeto/at-el")) nil])
  (abc-mode [cl-struct-package-desc abc-mode (20140225 944) "Major mode for editing abc music files" nil single "melpa-stable" nil ((:keywords "local" "docs")) nil] [cl-struct-package-desc abc-mode (20140225 944) "Major mode for editing abc music files" nil single "melpa" nil ((:keywords "local" "docs")) nil])
  (abyss-theme [cl-struct-package-desc abyss-theme (20151007 408) "A dark theme with contrasting colours." ((emacs (24))) single "melpa" nil ((:url . "https://github.com/mgrbyte/emacs-abyss-theme") (:keywords "theme" "dark" "contrasting colours")) nil])
  (ac-alchemist [cl-struct-package-desc ac-alchemist (20150907 2356) "auto-complete source for alchemist" ((auto-complete (1 5 0)) (alchemist (1 5 0)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-ac-alchemist")) nil] [cl-struct-package-desc ac-alchemist (0 1) "auto-complete source for alchemist" ((auto-complete (1 5 0)) (alchemist (1 3 1)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-ac-alchemist")) nil])
  (ac-anaconda [cl-struct-package-desc ac-anaconda (20150912 108) "Anaconda sources for auto-complete-mode" ((auto-complete (1 4 0)) (anaconda-mode (0 1 1)) (dash (2 6 0))) single "melpa" nil ((:url . "https://github.com/proofit404/ac-anaconda")) nil] [cl-struct-package-desc ac-anaconda (0 1 0) "Anaconda sources for auto-complete-mode" ((auto-complete (1 4 0)) (anaconda-mode (0 1 1)) (dash (2 6 0))) single "melpa-stable" nil ((:url . "https://github.com/proofit404/ac-anaconda")) nil])
  (ac-c-headers [cl-struct-package-desc ac-c-headers (20151021 134) "auto-complete source for C headers" ((auto-complete (1 3 1))) single "melpa" nil ((:url . "http://hins11.yu-yake.com/")) nil])
  (ac-cake [cl-struct-package-desc ac-cake (20140315 929) "CakePHP Minor Mode auto-complete.el source" ((cake (1 4 2)) (auto-complete (1 4 0))) single "melpa" nil ((:url . "http://code.101000lab.org")) nil] [cl-struct-package-desc ac-cake (1 0 0) "CakePHP Minor Mode auto-complete.el source" ((cake (1 4 2)) (auto-complete (1 4))) single "melpa-stable" nil ((:url . "http://code.101000lab.org")) nil])
  (ac-cake2 [cl-struct-package-desc ac-cake2 (20140320 8) "CakePHP 2 Minor Mode auto-complete.el source" ((cake2 (1 1 2)) (auto-complete (1 4 0))) single "melpa" nil ((:url . "http://code.101000lab.org")) nil] [cl-struct-package-desc ac-cake2 (1 0 1) "CakePHP 2 Minor Mode auto-complete.el source" ((cake2 (1 1 2)) (auto-complete (1 4 0))) single "melpa-stable" nil ((:url . "http://code.101000lab.org")) nil])
  (ac-capf [cl-struct-package-desc ac-capf (20151031 1917) "auto-complete source with completion-at-point" ((auto-complete (1 4)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-ac-capf")) nil] [cl-struct-package-desc ac-capf (0 1) "auto-complete source with completion-at-point" ((auto-complete (1 4)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-ac-capf")) nil])
  (ac-clang [cl-struct-package-desc ac-clang (20150906 1008) "Auto Completion source by libclang for GNU Emacs" ((emacs (24)) (cl-lib (0 5)) (auto-complete (1 4 0)) (pos-tip (0 4 6)) (yasnippet (0 8 0))) tar "melpa" nil ((:url . "https://github.com/yaruopooner/ac-clang") (:keywords "completion" "convenience" "intellisense")) nil] [cl-struct-package-desc ac-clang (1 6 0) "Auto Completion source by libclang for GNU Emacs" ((emacs (24)) (cl-lib (0 5)) (auto-complete (1 4 0)) (pos-tip (0 4 6)) (yasnippet (0 8 0))) tar "melpa-stable" nil ((:url . "https://github.com/yaruopooner/ac-clang") (:keywords "completion" "convenience" "intellisense")) nil])
  (ac-dabbrev [cl-struct-package-desc ac-dabbrev (20130905 2218) "auto-complete.el source for dabbrev" nil single "melpa" nil nil nil])
  (ac-dcd [cl-struct-package-desc ac-dcd (20150702 724) "Auto Completion source for dcd for GNU Emacs" ((auto-complete (1 3 1)) (flycheck-dmd-dub (0 7))) single "melpa" nil ((:url . "http://github.com/atilaneves/ac-dcd") (:keywords "languages")) nil] [cl-struct-package-desc ac-dcd (0 4) "Auto Completion source for dcd for GNU Emacs" ((auto-complete (1 3 1)) (flycheck-dmd-dub (0 7))) single "melpa-stable" nil ((:url . "http://github.com/atilaneves/ac-dcd") (:keywords "languages")) nil])
  (ac-emmet [cl-struct-package-desc ac-emmet (20131015 858) "auto-complete sources for emmet-mode's snippets" ((emmet-mode (1 0 2)) (auto-complete (1 4))) single "melpa" nil ((:url . "https://github.com/yasuyk/ac-emmet") (:keywords "completion" "convenience" "emmet")) nil])
  (ac-emoji [cl-struct-package-desc ac-emoji (20150823 11) "auto-complete source of Emoji" ((auto-complete (1 5 0)) (cl-lib (0 5))) tar "melpa" nil ((:url . "https://github.com/syohex/emacs-ac-emoji")) nil] [cl-struct-package-desc ac-emoji (0 2) "auto-complete source of Emoji" ((auto-complete (1 5 0)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-ac-emoji")) nil])
  (ac-etags [cl-struct-package-desc ac-etags (20151031 1921) "etags/ctags completion source for auto-complete" ((auto-complete (1 4))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-ac-etags")) nil] [cl-struct-package-desc ac-etags (0 6) "etags/ctags completion source for auto-complete" ((auto-complete (1 4))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-ac-etags")) nil])
  (ac-haskell-process [cl-struct-package-desc ac-haskell-process (20150423 702) "Haskell auto-complete source which uses the current haskell process" ((auto-complete (1 4)) (haskell-mode (13))) single "melpa" nil ((:keywords "languages")) nil] [cl-struct-package-desc ac-haskell-process (0 7) "Haskell auto-complete source which uses the current haskell process" ((auto-complete (1 4)) (haskell-mode (13))) single "melpa-stable" nil ((:keywords "languages")) nil])
  (ac-helm [cl-struct-package-desc ac-helm (20140919 917) "Helm interface for auto-complete" ((helm (1 6 3)) (auto-complete (1 4 0)) (popup (0 5 0)) (cl-lib (0 5))) single "melpa" nil ((:keywords "completion" "convenience" "helm")) nil] [cl-struct-package-desc ac-helm (2 1) "Auto Complete with Helm" ((helm (20130328)) (auto-complete (1 4 0)) (popup (0 5 0))) single "melpa-stable" nil ((:keywords "completion" "convenience" "helm")) nil])
  (ac-html [cl-struct-package-desc ac-html (20151005 31) "auto complete source for html tags and attributes" ((auto-complete (1 4)) (s (1 9)) (f (0 17)) (dash (2 10))) tar "melpa" nil ((:url . "https://github.com/cheunghy/ac-html") (:keywords "html" "auto-complete" "slim" "haml" "jade")) nil] [cl-struct-package-desc ac-html (0 31) "auto complete source for html tags and attributes" ((auto-complete (1 4)) (web-completion-data (0 1))) tar "melpa-stable" nil ((:url . "https://github.com/cheunghy/ac-html") (:keywords "html" "auto-complete" "rails" "ruby")) nil])
  (ac-html-bootstrap [cl-struct-package-desc ac-html-bootstrap (20150930 41) "auto complete bootstrap3/fontawesome classes for `ac-html' and `company-web'" ((web-completion-data (0 1))) tar "melpa" nil ((:url . "https://github.com/osv/ac-html-bootstrap") (:keywords "html" "auto-complete" "bootstrap" "cssx")) nil] [cl-struct-package-desc ac-html-bootstrap (0 9 3) "auto complete bootstrap3/fontawesome classes for `ac-html' and `company-web'" ((web-completion-data (0 1))) tar "melpa-stable" nil ((:url . "https://github.com/osv/ac-html-bootstrap") (:keywords "html" "auto-complete" "bootstrap" "cssx")) nil])
  (ac-html-csswatcher [cl-struct-package-desc ac-html-csswatcher (20150930 37) "css/less class/id completion with `ac-html' or `company-web'" ((web-completion-data (0 1))) single "melpa" nil ((:url . "https://github.com/osv/ac-html-csswatcher") (:keywords "html" "css" "less" "auto-complete")) nil] [cl-struct-package-desc ac-html-csswatcher (0 1 7) "css/less class/id completion with `ac-html' or `company-web'" ((web-completion-data (0 1))) single "melpa-stable" nil ((:url . "https://github.com/osv/ac-html-csswatcher") (:keywords "html" "css" "less" "auto-complete")) nil])
  (ac-ispell [cl-struct-package-desc ac-ispell (20151031 1926) "ispell completion source for auto-complete" ((auto-complete (1 4)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-ac-ispell")) nil] [cl-struct-package-desc ac-ispell (0 7) "ispell completion source for auto-complete" ((auto-complete (1 4)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-ac-ispell")) nil])
  (ac-js2 [cl-struct-package-desc ac-js2 (20140906 442) "Auto-complete source for Js2-mode, with navigation" ((js2-mode (20090723)) (skewer-mode (1 4))) tar "melpa" nil ((:url . "https://github.com/ScottyB/ac-js2")) nil])
  (ac-math [cl-struct-package-desc ac-math (20141116 1327) "Auto-complete sources for input of mathematical symbols and latex tags" ((auto-complete (1 4)) (math-symbol-lists (1 0))) single "melpa" nil ((:url . "https://github.com/vitoshka/ac-math") (:keywords "latex" "auto-complete" "unicode" "symbols")) nil])
  (ac-mozc [cl-struct-package-desc ac-mozc (20150227 819) "auto-complete sources for Japanese input using Mozc" ((cl-lib (0 5)) (auto-complete (1 4)) (mozc (0))) single "melpa" nil ((:url . "https://github.com/igjit/ac-mozc")) nil] [cl-struct-package-desc ac-mozc (0 0 4) "auto-complete sources for Japanese input using Mozc" ((cl-lib (0 5)) (auto-complete (1 4)) (mozc (0))) single "melpa-stable" nil ((:url . "https://github.com/igjit/ac-mozc")) nil])
  (ac-octave [cl-struct-package-desc ac-octave (20150111 1708) "An auto-complete source for Octave" ((auto-complete (1 4 0))) single "melpa" nil ((:url . "https://github.com/coldnew/ac-octave") (:keywords "octave" "auto-complete" "completion")) nil] [cl-struct-package-desc ac-octave (0 4) "An auto-complete source for Octave" ((auto-complete (1 4 0))) single "melpa-stable" nil ((:url . "https://github.com/coldnew/ac-octave") (:keywords "octave" "auto-complete" "completion")) nil])
  (ac-php [cl-struct-package-desc ac-php (20151111 118) "Auto Completion source for php for GNU Emacs" ((emacs (24)) (php-mode (1)) (auto-complete (1 4 0)) (yasnippet (0 8 0)) (xcscope (1)) (s (1)) (f (1))) tar "melpa" nil ((:url . "https://github.com/xcwen/ac-php") (:keywords "completion" "convenience" "intellisense")) nil] [cl-struct-package-desc ac-php (1 6 0) "Auto Completion source for php for GNU Emacs" ((emacs (24)) (php-mode (1)) (auto-complete (1 4 0)) (yasnippet (0 8 0)) (xcscope (1)) (s (1)) (f (1))) tar "melpa-stable" nil ((:url . "https://github.com/xcwen/ac-php") (:keywords "completion" "convenience" "intellisense")) nil])
  (ac-racer [cl-struct-package-desc ac-racer (20150831 141) "auto-complete source of racer" ((auto-complete (1 5 0)) (racer (0 0 2)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-ac-racer")) nil] [cl-struct-package-desc ac-racer (0 1) "auto-complete source of racer" ((auto-complete (1 5 0)) (racer (0 0 2)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-ac-racer")) nil])
  (ac-skk [cl-struct-package-desc ac-skk (20141229 1719) "auto-complete-mode source for DDSKK a.k.a Japanese input method" ((auto-complete (1 3 1)) (ddskk (16 0 50)) (tinysegmenter (0)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/myuhe/ac-skk.el") (:keywords "convenience" "auto-complete")) nil])
  (ac-sly [cl-struct-package-desc ac-sly (20150421 1322) "An auto-complete source using sly completions" ((sly (1 0 0 -3)) (auto-complete (1 4)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/qoocku/ac-sly")) nil])
  (ace-flyspell [cl-struct-package-desc ace-flyspell (20150523 1115) "Jump to and correct spelling errors using `ace-jump-mode' and flyspell" ((ace-jump-mode (2 0))) single "melpa" nil ((:url . "https://github.com/cute-jumper/ace-flyspell") (:keywords "extensions")) nil] [cl-struct-package-desc ace-flyspell (0 1 2) "Jump to and correct spelling errors using `ace-jump-mode' and flyspell" ((ace-jump-mode (2 0))) single "melpa-stable" nil ((:url . "https://github.com/cute-jumper/ace-flyspell") (:keywords "extensions")) nil])
  (ace-isearch [cl-struct-package-desc ace-isearch (20150808 556) "A seamless bridge between isearch, ace-jump-mode, avy and helm-swoop" ((ace-jump-mode (2 0)) (avy (0 3)) (helm-swoop (1 4)) (emacs (24))) single "melpa" nil ((:url . "https://github.com/tam17aki/ace-isearch")) nil] [cl-struct-package-desc ace-isearch (0 1 4) "A seamless bridge between isearch, ace-jump-mode, avy and helm-swoop" ((ace-jump-mode (2 0)) (avy (0 3)) (helm-swoop (1 4)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/tam17aki/ace-isearch")) nil])
  (ace-jump-buffer [cl-struct-package-desc ace-jump-buffer (20150214 2234) "fast buffer switching extension to `ace-jump-mode'" ((ace-jump-mode (1 0)) (dash (2 4 0))) single "melpa" nil ((:url . "https://github.com/waymondo/ace-jump-buffer")) nil] [cl-struct-package-desc ace-jump-buffer (0 3 1) "fast buffer switching extension to `ace-jump-mode'" ((ace-jump-mode (1 0)) (dash (2 4 0))) single "melpa-stable" nil ((:url . "https://github.com/waymondo/ace-jump-buffer")) nil])
  (ace-jump-helm-line [cl-struct-package-desc ace-jump-helm-line (20151113 1100) "Ace-jump to a candidate in helm window" ((avy (0 2 0)) (helm (1 6 3))) single "melpa" nil ((:url . "https://github.com/cute-jumper/ace-jump-helm-line") (:keywords "extensions")) nil] [cl-struct-package-desc ace-jump-helm-line (0 3 3) "Ace-jump to a candidate in helm window" ((avy (0 2 0)) (helm (1 6 3))) single "melpa-stable" nil ((:url . "https://github.com/cute-jumper/ace-jump-helm-line") (:keywords "extensions")) nil])
  (ace-jump-zap [cl-struct-package-desc ace-jump-zap (20150330 1342) "Character zapping, `ace-jump-mode` style" ((ace-jump-mode (1 0)) (dash (2 10 0))) single "melpa" nil ((:url . "https://github.com/waymondo/ace-jump-zap") (:keywords "convenience" "tools" "extensions")) nil] [cl-struct-package-desc ace-jump-zap (0 1 1) "Character zapping, `ace-jump-mode` style" ((ace-jump-mode (1 0)) (dash (2 10 0))) single "melpa-stable" nil ((:url . "https://github.com/waymondo/ace-jump-zap") (:keywords "convenience" "tools" "extensions")) nil])
  (ace-link [cl-struct-package-desc ace-link (20151019 835) "Quickly follow links" ((avy (0 2 0))) single "melpa" nil ((:url . "https://github.com/abo-abo/ace-link") (:keywords "convenience" "links")) nil] [cl-struct-package-desc ace-link (0 3 0) "Quickly follow links using `ace-jump-mode'" ((ace-jump-mode (2 0))) single "melpa-stable" nil ((:url . "https://github.com/abo-abo/ace-link") (:keywords "convenience" "links")) nil])
  (ace-pinyin [cl-struct-package-desc ace-pinyin (20151110 847) "Jump to Chinese characters using ace-jump-char-mode or avy-goto-char" ((ace-jump-mode (2 0)) (avy (0 2 0))) single "melpa" nil ((:url . "https://github.com/cute-jumper/ace-pinyin") (:keywords "extensions")) nil] [cl-struct-package-desc ace-pinyin (0 2 3) "Jump to Chinese characters using ace-jump-char-mode or avy-goto-char" ((ace-jump-mode (2 0)) (avy (0 2 0))) single "melpa-stable" nil ((:url . "https://github.com/cute-jumper/ace-pinyin") (:keywords "extensions")) nil])
  (ace-popup-menu [cl-struct-package-desc ace-popup-menu (20150910 527) "Replace GUI popup menu in Emacs with something more efficient" ((emacs (24 4)) (cl-lib (0 5)) (avy (0 3 0))) single "melpa" nil ((:url . "https://github.com/mrkkrp/ace-popup-menu") (:keywords "convenience" "popup" "menu")) nil] [cl-struct-package-desc ace-popup-menu (0 1 1) "Replace GUI popup menu in Emacs with something more efficient" ((emacs (24 4)) (cl-lib (0 5)) (avy (0 3 0))) single "melpa-stable" nil ((:url . "https://github.com/mrkkrp/ace-popup-menu") (:keywords "convenience" "popup" "menu")) nil])
  (achievements [cl-struct-package-desc achievements (20150530 1126) "Achievements for emacs usage." ((keyfreq (0 0 3))) tar "melpa" nil nil nil])
  (ack-menu [cl-struct-package-desc ack-menu (20150504 1322) "A menu-based front-end for ack" ((mag-menu (0 1 0))) single "melpa" nil ((:url . "https://github.com/chumpage/ack-menu") (:keywords "tools" "matching" "convenience")) nil])
  (actionscript-mode [cl-struct-package-desc actionscript-mode (20140605 1128) "A simple mode for editing Actionscript 3 files" nil single "melpa" nil ((:keywords "language" "modes")) nil] [cl-struct-package-desc actionscript-mode (7 2 2) "A simple mode for editing Actionscript 3 files" nil single "melpa-stable" nil ((:keywords "language" "modes")) nil])
  (addressbook-bookmark [cl-struct-package-desc addressbook-bookmark (20141205 2108) "An address book based on Standard Emacs bookmarks." ((emacs (24))) single "melpa" nil ((:url . "https://github.com/thierryvolpiatto/addressbook-bookmark")) nil])
  (aes [cl-struct-package-desc aes (20150529 237) "Implementation of AES" nil single "melpa" nil ((:url . "https://github.com/Sauermann/emacs-aes") (:keywords "data" "tools")) nil] [cl-struct-package-desc aes (0 8) "Implementation of AES" nil single "melpa-stable" nil ((:url . "https://github.com/Sauermann/emacs-aes") (:keywords "data" "tools")) nil])
  (afternoon-theme [cl-struct-package-desc afternoon-theme (20140104 1059) "Dark color theme with a deep blue background" ((emacs (24 1))) single "melpa" nil ((:url . "http://github.com/osener/emacs-afternoon-theme") (:keywords "themes")) nil])
  (aggressive-fill-paragraph [cl-struct-package-desc aggressive-fill-paragraph (20151111 2341) "A mode to automatically keep paragraphs filled" ((dash (2 10 0))) single "melpa" nil ((:url . "https://github.com/davidshepherd7/aggressive-fill-paragraph-mode") (:keywords "fill-paragraph" "automatic" "comments")) nil])
  (ahk-mode [cl-struct-package-desc ahk-mode (20151104 1537) "Major mode for editing AHK (AutoHotkey and AutoHotkey_L)" ((emacs (24 3)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/ralesi/ahk-mode") (:keywords "ahk" "autohotkey" "hotkey" "keyboard shortcut" "automation")) nil] [cl-struct-package-desc ahk-mode (1 5 5) "Major mode for editing AHK (AutoHotkey and AutoHotkey_L)" nil single "melpa-stable" nil ((:url . "https://github.com/ralesi/ahk-mode") (:keywords "ahk" "autohotkey" "hotkey" "keyboard shortcut" "automation")) nil])
  (airline-themes [cl-struct-package-desc airline-themes (20150920 745) "vim-airline themes for emacs powerline" ((powerline (2 3))) tar "melpa" nil ((:url . "http://github.com/AnthonyDiGirolamo/airline-themes") (:keywords "evil" "mode-line" "powerline" "airline" "themes")) nil] [cl-struct-package-desc airline-themes (1 2) "vim-airline themes for emacs powerline" ((powerline (2 3))) tar "melpa-stable" nil ((:url . "http://github.com/AnthonyDiGirolamo/airline-themes.el") (:keywords "evil" "mode-line" "powerline" "airline" "themes")) nil])
  (airplay [cl-struct-package-desc airplay (20130212 426) "Airplay bindings to Emacs" ((request (20130110 2144)) (simple-httpd (1 4 1)) (deferred (0 3 1))) tar "melpa" nil ((:url . "https://github.com/gongo/airplay-el") (:keywords "appletv" "airplay")) nil])
  (alect-themes [cl-struct-package-desc alect-themes (20150920 1124) "Configurable light, dark and black themes for Emacs 24 or later" ((emacs (24 0))) tar "melpa" nil ((:url . "https://github.com/alezost/alect-themes") (:keywords "color" "theme")) nil] [cl-struct-package-desc alect-themes (0 7) "Configurable light, dark and black themes for Emacs 24 or later" ((emacs (24 0))) tar "melpa-stable" nil ((:url . "https://github.com/alezost/alect-themes") (:keywords "color" "theme")) nil])
  (alert [cl-struct-package-desc alert (20151018 912) "Growl-style notification system for Emacs" ((gntp (0 1)) (log4e (0 3 0))) single "melpa" nil ((:url . "https://github.com/jwiegley/alert") (:keywords "notification" "emacs" "message")) nil] [cl-struct-package-desc alert (1 2) "Growl-style notification system for Emacs" ((gntp (0 1)) (log4e (0 3 0))) single "melpa-stable" nil ((:url . "https://github.com/jwiegley/alert") (:keywords "notification" "emacs" "message")) nil])
  (all-ext [cl-struct-package-desc all-ext (20130824 506) "Extension of M-x all" ((all (1 0))) single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/all-ext.el") (:keywords "all" "search" "replace" "anything" "helm" "occur")) nil])
  (amd-mode [cl-struct-package-desc amd-mode (20151028 549) "Minor mode for handling JavaScript AMD module requirements." ((projectile (0 10 0)) (s (1 9 0)) (f (0 16 2)) (dash (2 5 0)) (makey (0 3)) (js2-mode (20140114)) (js2-refactor (0 6 1))) single "melpa" nil ((:keywords "javascript" "amd" "projectile")) nil] [cl-struct-package-desc amd-mode (1 0) "Minor mode for handling JavaScript AMD module requirements." ((projectile (0 10 0)) (s (1 9 0)) (f (0 16 2)) (dash (2 5 0)) (makey (0 3)) (js2-mode (20140114)) (js2-refactor (0 6 1))) single "melpa-stable" nil ((:keywords "javascript" "amd" "projectile")) nil])
  (ample-regexps [cl-struct-package-desc ample-regexps (20151023 300) "ample regular expressions for Emacs" nil tar "melpa" nil ((:keywords "regexps" "extensions" "tools")) nil])
  (anaconda-mode [cl-struct-package-desc anaconda-mode (20150922 537) "Code navigation, documentation lookup and completion for Python" ((emacs (24)) (pythonic (0 1 0)) (dash (2 6 0)) (s (1 9)) (f (0 16 2))) single "melpa" nil ((:url . "https://github.com/proofit404/anaconda-mode")) nil] [cl-struct-package-desc anaconda-mode (0 1 1) "Code navigation, documentation lookup and completion for Python" ((emacs (24)) (pythonic (0 1 0)) (dash (2 6 0)) (s (1 9)) (f (0 16 2))) single "melpa-stable" nil ((:url . "https://github.com/proofit404/anaconda-mode")) nil])
  (anchored-transpose [cl-struct-package-desc anchored-transpose (20080904 2254) "Transposes a phrase around an anchor phrase" nil single "melpa" nil ((:keywords "tools" "convenience")) nil])
  (angry-police-captain [cl-struct-package-desc angry-police-captain (20120829 552) "Show quote from http://theangrypolicecaptain.com in the minibuffer" nil single "melpa" nil ((:keywords "games" "web" "fun")) nil])
  (angularjs-mode [cl-struct-package-desc angularjs-mode (20150909 602) "No description available." nil tar "melpa" nil nil nil] [cl-struct-package-desc angularjs-mode (1 0) "No description available." nil tar "melpa-stable" nil nil nil])
  (annoying-arrows-mode [cl-struct-package-desc annoying-arrows-mode (20151113 902) "Ring the bell if using arrows too much" nil single "melpa" nil nil nil] [cl-struct-package-desc annoying-arrows-mode (0 1 0) "Ring the bell if using arrows too much" nil single "melpa-stable" nil nil nil])
  (ansi [cl-struct-package-desc ansi (20150703 126) "Turn string into ansi strings" ((s (1 6 1)) (dash (1 5 0))) single "melpa" nil ((:url . "http://github.com/rejeep/ansi") (:keywords "color" "ansi")) nil] [cl-struct-package-desc ansi (0 4 1) "Turn string into ansi strings" ((s (1 6 1)) (dash (1 5 0))) single "melpa-stable" nil ((:url . "http://github.com/rejeep/ansi") (:keywords "color" "ansi")) nil])
  (ansible [cl-struct-package-desc ansible (20150319 133) "Ansible minor mode" ((s (1 9 0)) (f (0 16 2))) tar "melpa" nil ((:url . "http://101000lab.org")) nil] [cl-struct-package-desc ansible (0 0 3) "Ansible minor mode" ((s (1 9 0)) (f (0 16 2))) tar "melpa-stable" nil ((:url . "http://101000lab.org")) nil])
  (ant [cl-struct-package-desc ant (20131227 2307) "helpers for compiling with ant" nil single "melpa" nil ((:keywords "compilation" "ant" "java")) nil])
  (anti-zenburn-theme [cl-struct-package-desc anti-zenburn-theme (20151103 1646) "Low-contrast Zenburn-inverted theme" nil single "melpa" nil ((:url . "https://github.com/m00natic/anti-zenburn-theme")) nil] [cl-struct-package-desc anti-zenburn-theme (2 3) "Low-contrast Zenburn-inverted theme" nil single "melpa-stable" nil ((:url . "https://github.com/m00natic/anti-zenburn-theme")) nil])
  (anx-api [cl-struct-package-desc anx-api (20140208 714) "Interact with the AppNexus API from Emacs." nil single "melpa" nil ((:keywords "convenience" "json" "rest" "api" "appnexus")) nil])
  (anyins [cl-struct-package-desc anyins (20131229 241) "Insert content at multiple places from shell command or kill-ring" nil single "melpa" nil ((:url . "http://github.com/antham/anyins") (:keywords "insert" "rectangular")) nil] [cl-struct-package-desc anyins (0 1 1) "Insert content at multiple places from shell command or kill-ring" nil single "melpa-stable" nil ((:url . "http://github.com/antham/anyins") (:keywords "insert" "rectangular")) nil])
  (anything [cl-struct-package-desc anything (20151018 1903) "open anything / QuickSilver-like candidate-selection framework" nil tar "melpa" nil ((:url . "http://repo.or.cz/w/anything-config.git") (:keywords "files" "frames" "help" "matching" "outlines")) nil] [cl-struct-package-desc anything (1 3 9) "open anything / QuickSilver-like candidate-selection framework" nil tar "melpa-stable" nil ((:url . "http://repo.or.cz/w/anything-config.git") (:keywords "files" "frames" "help" "matching" "outlines")) nil])
  (anything-exuberant-ctags [cl-struct-package-desc anything-exuberant-ctags (20140316 1637) "Exuberant ctags anything.el interface" ((anything (1 3 9))) single "melpa" nil ((:url . "http://code.101000lab.org") (:keywords "anything" "exuberant ctags")) nil] [cl-struct-package-desc anything-exuberant-ctags (0 1 2) "Exuberant ctags anything.el interface" ((anything (1 3 9))) single "melpa-stable" nil ((:url . "http://code.101000lab.org") (:keywords "anything" "exuberant ctags")) nil])
  (anything-git-files [cl-struct-package-desc anything-git-files (20130609 243) "anything for git files" ((anything (1 3 9))) single "melpa" nil ((:keywords "anything" "git")) nil])
  (anything-git-grep [cl-struct-package-desc anything-git-grep (20130608 1940) "anything for git grep" ((anything (1 3 9))) tar "melpa" nil ((:url . "https://github.com/mechairoi/anything-git-grep") (:keywords "anything" "git")) nil])
  (anything-milkode [cl-struct-package-desc anything-milkode (20140518 743) "Command line search with Milkode" ((milkode (0 3)) (anything (1 3 9))) single "melpa" nil ((:keywords "milkode" "anything" "search" "grep" "jump" "keyword")) nil])
  (anything-project [cl-struct-package-desc anything-project (20141024 227) "finding any resource of a project" ((imakado (0 12)) (anything (1 3 9))) single "melpa" nil ((:url . "https://github.com/imakado/anything-project") (:keywords "convenience")) nil])
  (anything-prosjekt [cl-struct-package-desc anything-prosjekt (20140129 4) "Anything integration for prosjekt." ((prosjekt (0 3)) (anything (0))) single "melpa" nil ((:url . "https://github.com/abingham/prosjekt")) nil])
  (anything-replace-string [cl-struct-package-desc anything-replace-string (20140317 336) "`replace-string' and `query-replace' `anything.el' interface" ((anything (1 3 9))) single "melpa" nil ((:url . "http://code.101000lab.org")) nil] [cl-struct-package-desc anything-replace-string (0 9 2) "`replace-string' and `query-replace' `anything.el' interface" ((anything (1 3 9))) single "melpa-stable" nil ((:url . "http://code.101000lab.org")) nil])
  (anything-sage [cl-struct-package-desc anything-sage (20141005 413) "An anything extension for sage-shell-mode." ((cl-lib (0 5)) (anything (1 3 9)) (sage-shell-mode (0 0 1))) single "melpa" nil ((:url . "https://github.com/stakemori/anything-sage") (:keywords "sage" "math" "anything")) nil] [cl-struct-package-desc anything-sage (0 0 1) "An anything extension for sage-shell-mode." ((cl-lib (0 5)) (anything (1 3 9)) (sage-shell-mode (0 0 1))) single "melpa-stable" nil ((:url . "https://github.com/stakemori/anything-sage") (:keywords "sage" "math" "anything")) nil])
  (aozora-view [cl-struct-package-desc aozora-view (20140310 617) "Aozora Bunko text Emacs viewer." nil tar "melpa" nil ((:url . "https://github.com/kawabata/aozora-view") (:keywords "text")) nil])
  (apel [cl-struct-package-desc apel (20141024 1642) "APEL (A Portable Emacs Library) provides support for portable Emacs Lisp programs" nil tar "melpa" nil nil nil])
  (apples-mode [cl-struct-package-desc apples-mode (20110120 2018) "Major mode for editing and executing AppleScript code" nil tar "melpa" nil ((:keywords "applescript" "languages")) nil] [cl-struct-package-desc apples-mode (0 0 2) "Major mode for editing and executing AppleScript code" nil tar "melpa-stable" nil ((:keywords "applescript" "languages")) nil])
  (aproject [cl-struct-package-desc aproject (20150605 206) "Basic project framework for Emacs" nil tar "melpa" nil ((:url . "https://github.com/vietor/aproject") (:keywords "environment" "project")) nil] [cl-struct-package-desc aproject (0 3) "Basic project framework for Emacs" nil tar "melpa-stable" nil ((:url . "https://github.com/vietor/aproject") (:keywords "environment" "project")) nil])
  (apropos-fn+var [cl-struct-package-desc apropos-fn+var (20150425 1101) "Apropos for functions and variables" nil single "melpa" nil ((:url . "http://www.emacswiki.org/apropos-fn+var.el") (:keywords "apropos")) nil])
  (apropospriate-theme [cl-struct-package-desc apropospriate-theme (20151112 859) "A colorful, low-contrast, light & dark theme set for Emacs with a fun name." nil tar "melpa" nil nil nil])
  (apu [cl-struct-package-desc apu (20150710 1951) "Apropos Unicode characters." nil single "melpa" nil ((:url . "http://www.emacswiki.org/apu.el") (:keywords "unicode" "characters" "encoding" "commands" "ucs-names")) nil])
  (archive-region [cl-struct-package-desc archive-region (20140201 1545) "Move region to archive file instead of killing" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/archive-region.el") (:keywords "languages")) nil])
  (arduino-mode [cl-struct-package-desc arduino-mode (20151017 2335) "Major mode for the Arduino language" nil single "melpa" nil ((:keywords "languages" "arduino")) nil])
  (aria2 [cl-struct-package-desc aria2 (20141107 1517) "Control aria2c commandline tool from Emacs" ((emacs (24 4))) single "melpa" nil ((:url . "https://bitbucket.org/ukaszg/aria2-mode") (:keywords "download" "bittorrent" "aria2")) nil])
  (arjen-grey-theme [cl-struct-package-desc arjen-grey-theme (20150731 645) "A soothing dark grey theme" nil single "melpa" nil ((:url . "https://github.com/credmp/arjen-grey") (:keywords "faces")) nil])
  (artbollocks-mode [cl-struct-package-desc artbollocks-mode (20141212 1332) "Improve your writing (especially about art)" nil single "melpa" nil ((:url . "https://github.com/sachac/artbollocks-mode")) nil] [cl-struct-package-desc artbollocks-mode (1 1 2) "Improve your writing (especially about art)" nil single "melpa-stable" nil ((:url . "https://github.com/sachac/artbollocks-mode")) nil])
  (asilea [cl-struct-package-desc asilea (20150105 725) "Find best compiler options using simulated annealing" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/Fanael/asilea")) nil] [cl-struct-package-desc asilea (0 2 1) "Find best compiler options using simulated annealing" ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/Fanael/asilea")) nil])
  (asn1-mode [cl-struct-package-desc asn1-mode (20131218 420) "ASN.1/GDMO mode for GNU Emacs" ((emacs (24 3))) single "melpa" nil ((:url . "https://github.com/kawabata/asn1-mode/") (:keywords "languages" "processes" "tools")) nil])
  (atom-dark-theme [cl-struct-package-desc atom-dark-theme (20150825 1105) "An Emacs port of the Atom Dark theme from Atom.io." nil single "melpa" nil ((:url . "https://github.com/whitlockjc/atom-dark-theme-emacs") (:keywords "themes" "atom" "dark")) nil])
  (atom-one-dark-theme [cl-struct-package-desc atom-one-dark-theme (20151109 720) "Atom One Dark color theme" nil single "melpa" nil ((:url . "https://github.com/jonathanchu/atom-one-dark-theme")) nil])
  (auctex-latexmk [cl-struct-package-desc auctex-latexmk (20150812 650) "Add LatexMk support to AUCTeX" ((auctex (11 87))) single "melpa" nil ((:url . "https://github.com/tom-tan/auctex-latexmk/") (:keywords "tex")) nil])
  (auctex-lua [cl-struct-package-desc auctex-lua (20130818 1120) "Lua editing support for AUCTeX" nil single "melpa" nil ((:url . "http://github.com/vermiculus/auctex-lua") (:keywords "latex" "lua")) nil])
  (audio-notes-mode [cl-struct-package-desc audio-notes-mode (20140204 1154) "Play audio notes synced from somewhere else." nil single "melpa" nil ((:url . "http://github.com/Bruce-Connor/audio-notes-mode") (:keywords "hypermedia" "convenience")) nil])
  (aurel [cl-struct-package-desc aurel (20151006 1315) "Search, get info, vote and download AUR packages" nil single "melpa" nil ((:url . "https://github.com/alezost/aurel") (:keywords "tools")) nil] [cl-struct-package-desc aurel (0 7) "Search, get info, vote and download AUR packages" nil single "melpa-stable" nil ((:url . "https://github.com/alezost/aurel") (:keywords "tools")) nil])
  (aurora-config-mode [cl-struct-package-desc aurora-config-mode (20140520 203) "Major mode for Apache Aurora configuration files" nil single "melpa" nil ((:url . "https://github.com/bdd/aurora-config.el") (:keywords "languages" "configuration")) nil] [cl-struct-package-desc aurora-config-mode (0 0 2) "Major mode for Apache Aurora configuration files" nil single "melpa-stable" nil ((:url . "https://github.com/bdd/aurora-config.el") (:keywords "languages" "configuration")) nil])
  (aurora-theme [cl-struct-package-desc aurora-theme (20151015 1102) "A theme inspired by SublimeText's Material theme" nil single "melpa" nil ((:url . "http://github.com/xzerocode/aurora-theme")) nil])
  (auth-password-store [cl-struct-package-desc auth-password-store (20151112 1347) "Integrate auth-source with password-store" ((emacs (24 4)) (password-store (0 1)) (seq (1 9)) (cl-lib (0 5))) single "melpa" nil ((:keywords "pass" "password-store" "auth-source" "username" "password" "login")) nil] [cl-struct-package-desc auth-password-store (1 0 3) "Integrate auth-source with password-store" ((emacs (24 4)) (password-store (0 1)) (seq (1 9)) (cl-lib (0 5))) single "melpa-stable" nil ((:keywords "pass" "password-store" "auth-source" "username" "password" "login")) nil])
  (auto-async-byte-compile [cl-struct-package-desc auto-async-byte-compile (20151029 716) "Automatically byte-compile when saved" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/auto-async-byte-compile.el") (:keywords "lisp" "convenience")) nil])
  (auto-auto-indent [cl-struct-package-desc auto-auto-indent (20131106 1103) "Indents code as you type" ((es-lib (0 1)) (cl-lib (1 0))) single "melpa" nil ((:url . "https://github.com/sabof/auto-auto-indent")) nil])
  (auto-capitalize [cl-struct-package-desc auto-capitalize (20131013 2205) "Automatically capitalize (or upcase) words" nil single "melpa" nil ((:keywords "text" "wp" "convenience rcs $id: auto-capitalize.el" "v 2.20 2005/05/25 18:47:22 kevinr exp $")) nil])
  (auto-compile [cl-struct-package-desc auto-compile (20151107 1408) "automatically compile Emacs Lisp libraries" ((emacs (24 3)) (dash (2 1)) (packed (0 3 5))) single "melpa" nil ((:url . "https://github.com/tarsius/auto-compile") (:keywords "compile" "convenience" "lisp")) nil] [cl-struct-package-desc auto-compile (1 3 0) "automatically compile Emacs Lisp libraries" ((emacs (24 3)) (dash (2 1)) (packed (0 3 5))) single "melpa-stable" nil ((:url . "https://github.com/tarsius/auto-compile") (:keywords "compile" "convenience" "lisp")) nil])
  (auto-complete-auctex [cl-struct-package-desc auto-complete-auctex (20140223 958) "auto-completion for auctex" ((yasnippet (0 6 1)) (auto-complete (1 4))) single "melpa" nil nil nil])
  (auto-complete-c-headers [cl-struct-package-desc auto-complete-c-headers (20150911 2023) "An auto-complete source for C/C++ header files" ((auto-complete (1 4))) single "melpa" nil ((:keywords "c")) nil])
  (auto-complete-chunk [cl-struct-package-desc auto-complete-chunk (20140225 146) "Auto-completion for dot.separated.words." ((auto-complete (1 4))) single "melpa" nil ((:url . "https://github.com/tkf/auto-complete-chunk")) nil])
  (auto-complete-clang [cl-struct-package-desc auto-complete-clang (20140409 52) "Auto Completion source for clang for GNU Emacs" ((auto-complete (1 3 1))) single "melpa" nil ((:url . "https://github.com/brianjcj/auto-complete-clang") (:keywords "completion" "convenience")) nil])
  (auto-complete-clang-async [cl-struct-package-desc auto-complete-clang-async (20130526 814) "Auto Completion source for clang for GNU Emacs" nil single "melpa" nil ((:keywords "completion" "convenience")) nil] [cl-struct-package-desc auto-complete-clang-async (0 5) "Auto Completion source for clang for GNU Emacs" nil single "melpa-stable" nil ((:keywords "completion" "convenience")) nil])
  (auto-complete-exuberant-ctags [cl-struct-package-desc auto-complete-exuberant-ctags (20140320 24) "Exuberant ctags auto-complete.el source" ((auto-complete (1 4 0))) single "melpa" nil ((:url . "http://code.101000lab.org") (:keywords "anto-complete" "exuberant ctags")) nil] [cl-struct-package-desc auto-complete-exuberant-ctags (0 0 7) "Exuberant ctags auto-complete.el source" ((auto-complete (1 4 0))) single "melpa-stable" nil ((:url . "http://code.101000lab.org") (:keywords "anto-complete" "exuberant ctags")) nil])
  (auto-complete-nxml [cl-struct-package-desc auto-complete-nxml (20140220 2058) "do completion by auto-complete.el on nXML-mode" ((auto-complete (1 4))) single "melpa" nil ((:url . "https://github.com/aki2o/auto-complete-nxml") (:keywords "completion" "html" "xml")) nil] [cl-struct-package-desc auto-complete-nxml (0 5 0) "do completion by auto-complete.el on nXML-mode" ((auto-complete (1 4))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/auto-complete-nxml") (:keywords "completion" "html" "xml")) nil])
  (auto-complete-pcmp [cl-struct-package-desc auto-complete-pcmp (20140226 2251) "Provide auto-complete sources using pcomplete results" ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 1))) single "melpa" nil ((:url . "https://github.com/aki2o/auto-complete-pcmp") (:keywords "completion")) nil] [cl-struct-package-desc auto-complete-pcmp (0 0 2) "Provide auto-complete sources using pcomplete results" ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 1))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/auto-complete-pcmp") (:keywords "completion")) nil])
  (auto-complete-rst [cl-struct-package-desc auto-complete-rst (20140225 144) "Auto-complete extension for ReST and Sphinx" ((auto-complete (1 4))) tar "melpa" nil ((:url . "https://github.com/tkf/auto-complete-rst")) nil])
  (auto-complete-sage [cl-struct-package-desc auto-complete-sage (20150419 804) "An auto-complete source for sage-shell-mode." ((auto-complete (1 5 0)) (sage-shell-mode (0 0 8))) single "melpa" nil ((:url . "https://github.com/stakemori/auto-complete-sage") (:keywords "sage" "math" "auto-complete")) nil] [cl-struct-package-desc auto-complete-sage (0 0 4 1) "An auto-complete source for sage-shell-mode." ((auto-complete (1 5 0)) (sage-shell-mode (0 0 8))) single "melpa-stable" nil ((:url . "https://github.com/stakemori/auto-complete-sage") (:keywords "sage" "math" "auto-complete")) nil])
  (auto-dictionary [cl-struct-package-desc auto-dictionary (20150410 910) "automatic dictionary switcher for flyspell" nil single "melpa" nil ((:url . "http://nschum.de/src/emacs/auto-dictionary/") (:keywords "wp")) nil] [cl-struct-package-desc auto-dictionary (1 1) "automatic dictionary switcher for flyspell" nil single "melpa-stable" nil ((:url . "http://nschum.de/src/emacs/auto-dictionary/") (:keywords "wp")) nil])
  (auto-dim-other-buffers [cl-struct-package-desc auto-dim-other-buffers (20140619 902) "Makes non-current buffers less prominent" nil single "melpa" nil ((:url . "https://github.com/mina86/auto-dim-other-buffers.el")) nil])
  (auto-install [cl-struct-package-desc auto-install (20150418 1702) "Auto install elisp file" nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/auto-install.el") (:keywords "auto-install")) nil])
  (auto-package-update [cl-struct-package-desc auto-package-update (20151025 2311) "Automatically update Emacs packages." ((emacs (24 4)) (dash (2 1 0))) single "melpa" nil ((:url . "http://github.com/rranelli/auto-package-update.el") (:keywords "package" "update")) nil] [cl-struct-package-desc auto-package-update (1 6 1) "Automatically update Emacs packages." ((emacs (24 4)) (dash (2 1 0))) single "melpa-stable" nil ((:url . "http://github.com/rranelli/auto-package-update.el") (:keywords "package" "update")) nil])
  (auto-save-buffers-enhanced [cl-struct-package-desc auto-save-buffers-enhanced (20130607 1949) "Automatically save buffers in a decent way" nil single "melpa" nil nil nil])
  (auto-shell-command [cl-struct-package-desc auto-shell-command (20150416 1057) "Run the shell command asynchronously that you specified when you save the file." ((deferred (20130312)) (popwin (20130329))) single "melpa" nil ((:keywords "shell" "save" "async" "deferred" "auto")) nil] [cl-struct-package-desc auto-shell-command (1 0 2) "Run the shell command asynchronously that you specified when you save the file." ((deferred (20130312)) (popwin (20130329))) single "melpa-stable" nil ((:keywords "shell" "save" "async" "deferred" "auto")) nil])
  (auto-yasnippet [cl-struct-package-desc auto-yasnippet (20151109 410) "Quickly create disposable yasnippets" ((yasnippet (0 8 0))) single "melpa" nil ((:url . "https://github.com/abo-abo/auto-yasnippet")) nil] [cl-struct-package-desc auto-yasnippet (0 3 0) "Quickly create disposable yasnippets" ((yasnippet (0 8 0))) single "melpa-stable" nil ((:url . "https://github.com/abo-abo/auto-yasnippet")) nil])
  (autobookmarks [cl-struct-package-desc autobookmarks (20150814 1304) "Save recently visited files and buffers" ((dash (2 10 0))) single "melpa" nil ((:keywords "files")) nil])
  (autodisass-java-bytecode [cl-struct-package-desc autodisass-java-bytecode (20151005 912) "Automatically disassemble Java bytecode" nil tar "melpa" nil nil nil] [cl-struct-package-desc autodisass-java-bytecode (1 3) "Automatically disassemble Java bytecode" nil tar "melpa-stable" nil nil nil])
  (autodisass-llvm-bitcode [cl-struct-package-desc autodisass-llvm-bitcode (20150410 1825) "Automatically disassemble LLVM bitcode" nil tar "melpa" nil nil nil] [cl-struct-package-desc autodisass-llvm-bitcode (1 1) "Automatically disassemble LLVM bitcode" nil tar "melpa-stable" nil nil nil])
  (autofit-frame [cl-struct-package-desc autofit-frame (20150104 1308) "Automatically resize one-window frames to fit" ((fit-frame (0))) single "melpa" nil ((:url . "http://www.emacswiki.org/autofit-frame.el") (:keywords "internal" "extensions" "convenience" "local")) nil])
  (automargin [cl-struct-package-desc automargin (20131112 14) "add margins to windows not-splitted, and center them" nil single "melpa" nil ((:url . "http://hins11.yu-yake.com/")) nil])
  (autotest [cl-struct-package-desc autotest (20150130 225) "ZenTest's autotest integration with emacs." nil single "melpa" nil ((:url . "https://github.com/zenspider/elisp/blob/master/autotest.el") (:keywords "testing" "ruby" "convenience")) nil])
  (autotetris-mode [cl-struct-package-desc autotetris-mode (20141114 846) "automatically play tetris" ((cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/skeeto/autotetris-mode")) nil])
  (autumn-light-theme [cl-struct-package-desc autumn-light-theme (20150515 747) "A light color theme with muted, autumnal colors." nil single "melpa" nil ((:url . "http://github.com/aalpern/emacs-color-theme-autumn-light") (:keywords "color" "theme")) nil])
  (avy-migemo [cl-struct-package-desc avy-migemo (20151111 736) "avy with migemo" ((emacs (24 4)) (avy (0 3)) (migemo (1 9))) tar "melpa" nil ((:url . "https://github.com/momomo5717/avy-migemo") (:keywords "avy" "migemo")) nil] [cl-struct-package-desc avy-migemo (0 2 11) "avy with migemo" ((emacs (24 4)) (avy (0 3)) (migemo (1 9))) tar "melpa-stable" nil ((:url . "https://github.com/momomo5717/avy-migemo") (:keywords "avy" "migemo")) nil])
  (avy-zap [cl-struct-package-desc avy-zap (20151029 741) "Zap to char using `avy'" ((avy (0 2 0))) single "melpa" nil ((:url . "https://github.com/cute-jumper/avy-zap") (:keywords "extensions")) nil] [cl-struct-package-desc avy-zap (0 1 4) "Zap to char using `avy'" ((avy (0 2 0))) single "melpa-stable" nil ((:url . "https://github.com/cute-jumper/avy-zap") (:keywords "extensions")) nil])
  (axiom-environment [cl-struct-package-desc axiom-environment (20150815 203) "An environment for using Axiom/OpenAxiom/FriCAS" ((emacs (24 2))) tar "melpa" nil ((:keywords "axiom" "openaxiom" "fricas")) nil])
  (babel [cl-struct-package-desc babel (20131231 725) "interface to web translation services such as Babelfish" nil single "melpa" nil ((:url . "http://github.com/juergenhoetzel/babel.el") (:keywords "translation" "web")) nil] [cl-struct-package-desc babel (1 4) "interface to web translation services such as Babelfish" nil single "melpa-stable" nil ((:keywords "translation" "web")) nil])
  (babel-repl [cl-struct-package-desc babel-repl (20150712 800) "Run babel REPL" ((emacs (24))) single "melpa" nil ((:url . "https://github.com/hung-phan/babel-repl/") (:keywords "babel" "javascript" "es6")) nil])
  (backup-each-save [cl-struct-package-desc backup-each-save (20130704 732) "backup each savepoint of a file" nil single "melpa" nil nil nil])
  (backup-walker [cl-struct-package-desc backup-walker (20130720 816) "quickly traverse all backups of a file" nil single "melpa" nil ((:url . "https://github.com/lewang/backup-walker") (:keywords "backup")) nil])
  (badger-theme [cl-struct-package-desc badger-theme (20140716 1932) "A dark theme for Emacs 24." nil single "melpa" nil ((:url . "https://github.com/ccann/badger-theme")) nil])
  (base16-theme [cl-struct-package-desc base16-theme (20151019 711) "Collection of themes built on combinations of 16 base colors" nil tar "melpa" nil ((:url . "https://github.com/mkaito/base16-emacs")) nil])
  (bash-completion [cl-struct-package-desc bash-completion (20150514 728) "BASH completion for the shell buffer" nil tar "melpa" nil nil nil] [cl-struct-package-desc bash-completion (2 0 0) "BASH completion for the shell buffer" nil tar "melpa-stable" nil nil nil])
  (basic-theme [cl-struct-package-desc basic-theme (20151010 107) "Minimalistic light color theme" ((emacs (24))) single "melpa" nil ((:url . "http://github.com/fgeller/basic-theme.el") (:keywords "theme" "basic" "minimal" "colors")) nil])
  (bats-mode [cl-struct-package-desc bats-mode (20141115 701) "Emacs mode for editing and running Bats tests" nil single "melpa" nil ((:url . "https://github.com/dougm/bats-mode") (:keywords "bats" "tests")) nil])
  (bbdb- [cl-struct-package-desc bbdb- (20140221 1554) "provide interface for more easily search/choice than BBDB." ((bbdb (20140123 1541)) (log4e (0 2 0)) (yaxception (0 1))) single "melpa" nil ((:url . "https://github.com/aki2o/bbdb-") (:keywords "bbdb" "news" "mail")) nil] [cl-struct-package-desc bbdb- (0 0 2) "provide interface for more easily search/choice than BBDB." ((bbdb (20140123 1541)) (log4e (0 2 0)) (yaxception (0 1))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/bbdb-") (:keywords "bbdb" "news" "mail")) nil])
  (bbdb [cl-struct-package-desc bbdb (20151108 1435) "The Insidious Big Brother Database for GNU Emacs" nil tar "melpa" nil nil nil])
  (bbdb-android [cl-struct-package-desc bbdb-android (20150705 2224) "Android phone contacts import/export for BBDB" ((bbdb-vcard (20150705 341))) single "melpa" nil ((:url . "https://github.com/tumashu/bbdb-android")) nil])
  (bbdb-china [cl-struct-package-desc bbdb-china (20150615 1856) "BBDB utils, which let Chinese BBDB users feel easy" ((bbdb-vcard (0 4 1)) (chinese-pyim (0 0 1))) single "melpa" nil ((:url . "https://github.com/tumashu/bbdb-china")) nil])
  (bbdb-csv-import [cl-struct-package-desc bbdb-csv-import (20140802 442) "import csv to bbdb version 3+" ((pcsv (1 3 3)) (dash (2 5 0)) (bbdb (20140412 1949))) single "melpa" nil ((:url . "https://gitlab.com/iankelling/bbdb-csv-import") (:keywords "csv" "util" "bbdb")) nil])
  (bbdb-handy [cl-struct-package-desc bbdb-handy (20150707 1752) "BBDB window as email-address chooser when write an email" ((bbdb (3 1))) single "melpa" nil ((:url . "https://github.com/tumashu/bbdb-handy")) nil])
  (bbdb-vcard [cl-struct-package-desc bbdb-vcard (20150713 1350) "vCard import/export for BBDB" ((bbdb (3 0))) tar "melpa" nil ((:url . "http://github.com/vgeddes/bbdb-vcard") (:keywords "data" "calendar" "mail" "news")) nil] [cl-struct-package-desc bbdb-vcard (0 3) "vCard import/export for BBDB" nil tar "melpa-stable" nil ((:url . "http://github.com/trebb/bbdb-vcard") (:keywords "data" "calendar" "mail" "news")) nil])
  (bbyac [cl-struct-package-desc bbyac (20150316 301) "Type a little Bit, and Bang! You Are Completed." ((browse-kill-ring (1 3)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/baohaojun/bbyac") (:keywords "abbrev")) nil])
  (bdo [cl-struct-package-desc bdo (20140126 101) "Do things to a browser page from Emacs. BETA!" nil tar "melpa" nil ((:keywords "development")) nil])
  (beeminder [cl-struct-package-desc beeminder (20150104 1434) "Emacs interface for Beeminder" ((org (7))) single "melpa" nil ((:url . "http://www.philnewton.net/code/beeminder-el/") (:keywords "beeminder")) nil] [cl-struct-package-desc beeminder (1 0 0) "Emacs interface for Beeminder" nil single "melpa-stable" nil ((:keywords "beeminder")) nil])
  (beginend [cl-struct-package-desc beginend (20150607 1001) "Redefine M-< and M-> for some modes" ((emacs (24 4))) single "melpa" nil ((:keywords "dired" "message" "mu4e" "begin" "end" "beginning" "buffer")) nil] [cl-struct-package-desc beginend (1 0 0) "Redefine M-< and M-> for some modes" ((emacs (24 4))) single "melpa-stable" nil ((:keywords "dired" "message" "mu4e" "begin" "end" "beginning" "buffer")) nil])
  (benchmark-init [cl-struct-package-desc benchmark-init (20150905 238) "Benchmarks Emacs require and load calls" nil tar "melpa" nil ((:keywords "benchmark")) nil])
  (better-registers [cl-struct-package-desc better-registers (20140813 119) "facilities for more powerful registers" nil single "melpa" nil ((:keywords "register" "macro")) nil])
  (bf-mode [cl-struct-package-desc bf-mode (20130403 742) "Browse file persistently on dired" nil single "melpa" nil ((:url . "https://github.com/emacs-jp/bf-mode") (:keywords "convenience")) nil])
  (bfbuilder [cl-struct-package-desc bfbuilder (20150924 950) "A brainfuck development environment with interactive debugger" ((cl-lib (0 3))) single "melpa" nil ((:url . "http://hins11.yu-yake.com/")) nil])
  (bibretrieve [cl-struct-package-desc bibretrieve (20131013 1132) "Retrieving BibTeX entries from the web" ((auctex (11 87)) (emacs (24 3))) tar "melpa" nil ((:keywords "bibtex" "latex" "mathscinet" "arxiv" "zbmath")) nil])
  (bibslurp [cl-struct-package-desc bibslurp (20130904 1053) "retrieve BibTeX entries from NASA ADS" ((s (1 6 0)) (dash (1 5 0))) single "melpa" nil ((:url . "https://github.com/mkmcc/bibslurp") (:keywords "bibliography" "nasa ads")) nil])
  (bibtex-utils [cl-struct-package-desc bibtex-utils (20150924 647) "Provides utilities for extending BibTeX mode" nil single "melpa" nil ((:url . "https://github.com/plantarum/bibtex-utils") (:keywords "bibtex")) nil])
  (bind-chord [cl-struct-package-desc bind-chord (20151111 807) "key-chord binding helper for use-package-chords" ((bind-key (1 0)) (key-chord (0 6))) single "melpa" nil ((:url . "https://github.com/waymondo/use-package-chords") (:keywords "convenience" "tools" "extensions")) nil])
  (bind-key [cl-struct-package-desc bind-key (20150321 213) "A simple way to manage personal keybindings" nil single "melpa" nil ((:url . "https://github.com/jwiegley/use-package") (:keywords "keys" "keybinding" "config" "dotemacs")) nil] [cl-struct-package-desc bind-key (2 1) "A simple way to manage personal keybindings" nil single "melpa-stable" nil ((:url . "https://github.com/jwiegley/use-package") (:keywords "keys" "keybinding" "config" "dotemacs")) nil])
  (bing-dict [cl-struct-package-desc bing-dict (20150621 1111) "Minimalists' English-Chinese Bing dictionary" nil single "melpa" nil ((:url . "https://github.com/cute-jumper/bing-dict.el") (:keywords "extensions")) nil] [cl-struct-package-desc bing-dict (0 2 1) "Minimalists' English-Chinese Bing dictionary" nil single "melpa-stable" nil ((:url . "https://github.com/cute-jumper/bing-dict.el") (:keywords "extensions")) nil])
  (birds-of-paradise-plus-theme [cl-struct-package-desc birds-of-paradise-plus-theme (20130419 1429) "A brown/orange light-on-dark theme for Emacs 24 (deftheme)." nil single "melpa" nil ((:url . "https://github.com/jimeh/birds-of-paradise-plus-theme.el") (:keywords "themes")) nil] [cl-struct-package-desc birds-of-paradise-plus-theme (0 1 1) "A brown/orange light-on-dark theme for Emacs 24 (deftheme)." nil single "melpa-stable" nil ((:url . "https://github.com/jimeh/birds-of-paradise-plus-theme.el") (:keywords "themes")) nil])
  (bison-mode [cl-struct-package-desc bison-mode (20141119 43) "Major mode for editing bison, yacc and lex files." nil single "melpa" nil ((:keywords "bison-mode" "yacc-mode")) nil])
  (blank-mode [cl-struct-package-desc blank-mode (20130824 459) "minor mode to visualize TAB, (HARD) SPACE, NEWLINE" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/ViniciusJoseLatorre") (:keywords "data" "wp")) nil])
  (blgrep [cl-struct-package-desc blgrep (20150401 716) "Block grep" ((clmemo (20140321 715))) tar "melpa" nil ((:keywords "tools" "convenience")) nil])
  (bliss-theme [cl-struct-package-desc bliss-theme (20141115 2301) "an Emacs 24 theme based on Bliss (tmTheme)" ((emacs (24 0))) single "melpa" nil ((:url . "https://github.com/emacsfodder/tmtheme-to-deftheme")) nil])
  (bog [cl-struct-package-desc bog (20150918 1530) "Extensions for research notes in Org mode" ((cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/kyleam/bog") (:keywords "bib" "outlines")) nil] [cl-struct-package-desc bog (1 0 0) "Extensions for research notes in Org mode" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/kyleam/bog") (:keywords "bib" "outlines")) nil])
  (bongo [cl-struct-package-desc bongo (20151112 417) "play music with Emacs" nil tar "melpa" nil nil nil] [cl-struct-package-desc bongo (1 0) "play music with Emacs" nil tar "melpa-stable" nil nil nil])
  (bonjourmadame [cl-struct-package-desc bonjourmadame (20150914 308) "Say \"Hello ma'am!\"" nil single "melpa" nil nil nil])
  (boogie-friends [cl-struct-package-desc boogie-friends (20151029 1119) "Collection of programming modes for Boogie and one related language (Dafny)." ((cl-lib (0 5)) (dash (2 10 0)) (flycheck (0 23)) (yasnippet (0 9 0 1)) (company (0 8 12))) tar "melpa" nil nil nil])
  (bookmark+ [cl-struct-package-desc bookmark+ (20151107 847) "Bookmark+: extensions to standard library `bookmark.el'." nil tar "melpa" nil ((:url . "http://www.emacswiki.org/bookmark+.el") (:keywords "bookmarks" "bookmark+" "projects" "placeholders" "annotations" "search" "info" "url" "w3m" "gnus")) nil])
  (boon [cl-struct-package-desc boon (20151111 1328) "Ergonomic Command Mode for Emacs." ((emacs (24 5)) (expand-region (0 10 0)) (multiple-cursors (1 3 0))) tar "melpa" nil nil nil] [cl-struct-package-desc boon (0 2) "Ergonomic Command Mode for Emacs." ((emacs (24 5)) (expand-region (0 10 0))) tar "melpa-stable" nil nil nil])
  (boron-theme [cl-struct-package-desc boron-theme (20150117 952) "an Emacs 24 theme based on Boron (tmTheme)" ((emacs (24 0))) single "melpa" nil ((:url . "https://github.com/emacsfodder/tmtheme-to-deftheme")) nil])
  (bpe [cl-struct-package-desc bpe (20141228 1405) "Blog from Org mode to Blogger" ((emacs (24 1))) single "melpa" nil ((:url . "https://github.com/yuutayamada/bpe") (:keywords "blogger" "blog")) nil])
  (bpr [cl-struct-package-desc bpr (20151110 151) "Background Process Runner" ((emacs (24))) tar "melpa" nil ((:url . "https://github.com/ilya-babanov/emacs-bpr") (:keywords "background" "async" "process" "management")) nil])
  (bracketed-paste [cl-struct-package-desc bracketed-paste (20140222 1801) "bracketed paste mode support within emacs -nw" ((emacs (24 3))) single "melpa" nil ((:keywords "terminals")) nil])
  (brainfuck-mode [cl-struct-package-desc brainfuck-mode (20150113 42) "Brainfuck mode for Emacs" ((langdoc (20130601 1450))) single "melpa" nil ((:url . "https://github.com/tom-tan/brainfuck-mode/") (:keywords "brainfuck" "langdoc")) nil])
  (broadcast [cl-struct-package-desc broadcast (20150313 1659) "Links buffers together for simultaneous editing." ((emacs (24 4))) single "melpa" nil ((:url . "https://github.com/killdash9/broadcast.el") (:keywords "convenience" "frames" "link" "cursors")) nil])
  (browse-at-remote [cl-struct-package-desc browse-at-remote (20151008 1017) "Open page at github/bitbucket from emacs buffers" ((f (0 17 2)) (s (1 9 0))) single "melpa" nil ((:keywords "github" "bitbucket" "convenience")) nil])
  (browse-kill-ring+ [cl-struct-package-desc browse-kill-ring+ (20150104 1332) "Extensions to `browse-kill-ring.el'." ((browse-kill-ring (0))) single "melpa" nil ((:url . "http://www.emacswiki.org/browse-kill-ring+.el") (:keywords "convenience")) nil])
  (btc-ticker [cl-struct-package-desc btc-ticker (20151113 659) "Shows latest bitcoin price" ((json (1 2)) (request (0 2 0))) single "melpa" nil ((:keywords "news")) nil])
  (bts [cl-struct-package-desc bts (20151109 533) "A unified UI for various bug tracking systems" ((widget-mvc (0 0 2)) (log4e (0 3 0)) (yaxception (0 3 3)) (dash (2 9 0)) (s (1 9 0)) (pos-tip (0 4 5))) single "melpa" nil ((:url . "https://github.com/aki2o/emacs-bts") (:keywords "convenience")) nil])
  (bts-github [cl-struct-package-desc bts-github (20150108 27) "A plugin of bts.el for GitHub" ((bts (0 0 1)) (gh (0 8 2))) single "melpa" nil ((:url . "https://github.com/aki2o/emacs-bts-github") (:keywords "convenience")) nil])
  (buffer-buttons [cl-struct-package-desc buffer-buttons (20150106 639) "Define, save, and load code-safe buttons in files for emacs" nil single "melpa" nil ((:url . "https://github.com/rpav/buffer-buttons")) nil])
  (bundler [cl-struct-package-desc bundler (20151111 712) "Interact with Bundler from Emacs" ((inf-ruby (2 1)) (cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/tobiassvn/") (:keywords "bundler" "ruby")) nil] [cl-struct-package-desc bundler (1 1 0) "Interact with Bundler from Emacs" ((inf-ruby (2 1))) single "melpa-stable" nil ((:url . "http://github.com/tobiassvn/") (:keywords "bundler" "ruby")) nil])
  (bury-successful-compilation [cl-struct-package-desc bury-successful-compilation (20150328 1728) "Bury the *compilation* buffer after successful compilation" nil single "melpa" nil ((:keywords "compilation")) nil] [cl-struct-package-desc bury-successful-compilation (0 1) "Bury the *compilation* buffer after successful compilation" nil single "melpa-stable" nil ((:keywords "compilation")) nil])
  (buster-mode [cl-struct-package-desc buster-mode (20140928 513) "Minor mode to speed up development when writing tests with Buster.js" nil single "melpa" nil ((:keywords "buster" "testing" "javascript")) nil])
  (buster-snippets [cl-struct-package-desc buster-snippets (20141208 238) "Yasnippets for the Buster javascript testing framework" nil tar "melpa" nil ((:keywords "snippets")) nil])
  (busybee-theme [cl-struct-package-desc busybee-theme (20130920 942) "port of vim's mustang theme" nil single "melpa" nil ((:url . "http://github.com/mswift42/busybee-theme")) nil])
  (c0-mode [cl-struct-package-desc c0-mode (20151110 1052) "Major mode for editing C0 files" nil tar "melpa" nil ((:url . "http://c0.typesafety.net/") (:keywords "c0" "languages")) nil])
  (cake [cl-struct-package-desc cake (20140603 2131) "CakePHP Minor Mode" ((cake-inflector (1 1 0)) (historyf (0 0 8)) (anything (1 3 9))) tar "melpa" nil ((:url . "https://github.com/k1LoW/emacs-cake")) nil] [cl-struct-package-desc cake (1 4 3) "CakePHP Minor Mode" ((cake-inflector (1 1 0)) (historyf (0 0 8)) (anything (1 3 9))) tar "melpa-stable" nil ((:url . "https://github.com/k1LoW/emacs-cake")) nil])
  (cake-inflector [cl-struct-package-desc cake-inflector (20140415 158) "Lazy porting CakePHP infrector.php to el" ((s (1 9 0))) single "melpa" nil ((:url . "https://github.com/k1LoW/emacs-cake-inflector")) nil] [cl-struct-package-desc cake-inflector (1 1 1) "Lazy porting CakePHP infrector.php to el" ((s (1 9 0))) single "melpa-stable" nil ((:url . "https://github.com/k1LoW/emacs-cake-inflector")) nil])
  (cake2 [cl-struct-package-desc cake2 (20140626 542) "CakePHP2 Minor Mode" ((dash (2 6 0)) (s (1 9 0)) (f (0 16 2)) (ht (2 0)) (json (1 2)) (cake-inflector (1 1 0)) (historyf (0 0 8)) (anything (1 3 9))) tar "melpa" nil ((:url . "http://code.101000lab.org")) nil] [cl-struct-package-desc cake2 (2 1 0) "CakePHP2 Minor Mode" ((dash (2 6 0)) (s (1 9 0)) (f (0 16 2)) (ht (2 0)) (json (1 2)) (cake-inflector (1 1 0)) (historyf (0 0 8)) (anything (1 3 9))) tar "melpa-stable" nil ((:url . "http://code.101000lab.org")) nil])
  (cal-china-x [cl-struct-package-desc cal-china-x (20151106 1244) "Chinese localization, lunar/horoscope/zodiac info and more..." ((cl-lib (0 5))) tar "melpa" nil ((:url . "https://github.com/xwl/cal-china-x")) nil])
  (calfw [cl-struct-package-desc calfw (20150923 1949) "Calendar view framework on Emacs" ((google-maps (20130412 230))) tar "melpa" nil ((:url . "https://github.com/kiwanami/emacs-calfw") (:keywords "calendar")) nil] [cl-struct-package-desc calfw (1 5) "Calendar view framework on Emacs" ((google-maps (20130412 230))) tar "melpa-stable" nil ((:url . "https://github.com/kiwanami/emacs-calfw") (:keywords "calendar")) nil])
  (calmer-forest-theme [cl-struct-package-desc calmer-forest-theme (20130925 2210) "Darkish theme with green/orange tint" nil single "melpa" nil ((:url . "https://github.com/caldwell/calmer-forest-theme")) nil])
  (camcorder [cl-struct-package-desc camcorder (20150919 1812) "Record screencasts in gif or other formats." ((emacs (24)) (names (20150000)) (cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/Bruce-Connor/camcorder.el") (:keywords "multimedia" "screencast")) nil] [cl-struct-package-desc camcorder (0 2) "Record screencasts in gif or other formats." ((emacs (24)) (names (20150000)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "http://github.com/Bruce-Connor/camcorder.el") (:keywords "multimedia" "screencast")) nil])
  (capture [cl-struct-package-desc capture (20130828 944) "screencasting with \"avconv\" or \"ffmpeg\"" nil tar "melpa" nil nil nil])
  (cargo [cl-struct-package-desc cargo (20151017 1420) "Emacs Minor Mode for Cargo, Rust's Package Manager." ((emacs (24 3))) tar "melpa" nil ((:keywords "tools")) nil])
  (caroline-theme [cl-struct-package-desc caroline-theme (20151030 1604) "A trip down to New Orleans..." ((emacs (24))) single "melpa" nil ((:url . "https://github.com/xjackk/carolines-theme")) nil])
  (cask [cl-struct-package-desc cask (20151009 202) "Cask: Project management for Emacs package development" ((s (1 8 0)) (dash (2 2 0)) (f (0 16 0)) (epl (0 5)) (shut-up (0 1 0)) (cl-lib (0 3)) (package-build (0 1))) tar "melpa" nil ((:url . "http://github.com/cask/cask") (:keywords "speed" "convenience")) nil] [cl-struct-package-desc cask (0 7 3) "Cask: Project management for Emacs package development" ((s (1 8 0)) (dash (2 2 0)) (f (0 16 0)) (epl (0 5)) (shut-up (0 1 0)) (cl-lib (0 3)) (package-build (0 1))) tar "melpa-stable" nil ((:url . "http://github.com/cask/cask") (:keywords "speed" "convenience")) nil])
  (cask-package-toolset [cl-struct-package-desc cask-package-toolset (20150708 616) "Toolsettize your package" ((emacs (24)) (cl-lib (0 3)) (s (1 6 1)) (dash (1 8 0)) (f (0 10 0)) (commander (0 2 0)) (ansi (0 1 0)) (shut-up (0 1 0))) tar "melpa" nil ((:url . "http://github.com/AdrieanKhisbe/cask-package-toolset.el") (:keywords "convenience" "tools")) nil] [cl-struct-package-desc cask-package-toolset (0 6 5) "Toolsettize your package" ((emacs (24)) (cl-lib (0 3)) (s (1 6 1)) (dash (1 8 0)) (f (0 10 0)) (commander (0 2 0)) (ansi (0 1 0)) (shut-up (0 1 0))) tar "melpa-stable" nil ((:url . "http://github.com/AdrieanKhisbe/cask-package-toolset.el") (:keywords "convenience" "tools")) nil])
  (caskxy [cl-struct-package-desc caskxy (20140513 839) "Control Cask in Emacs" ((log4e (0 2 0)) (yaxception (0 1))) single "melpa" nil ((:url . "https://github.com/aki2o/caskxy") (:keywords "convenience")) nil] [cl-struct-package-desc caskxy (0 0 5) "Control Cask in Emacs" ((log4e (0 2 0)) (yaxception (0 1))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/caskxy") (:keywords "convenience")) nil])
  (cbm [cl-struct-package-desc cbm (20150715 1204) "Cycle through buffers with the same `major-mode'." nil single "melpa" nil ((:url . "http://github.com/akermu/cbm.el") (:keywords "buffers" "cycling")) nil])
  (ccc [cl-struct-package-desc ccc (20150112 533) "buffer local cursor color control library" nil single "melpa" nil ((:url . "https://github.com/skk-dev/ddskk/blob/master/READMEs/README.ccc.org") (:keywords "cursor" "last" "modified:" "$date:" "2015/01/12" "09:41:07" "$")) nil])
  (cd-compile [cl-struct-package-desc cd-compile (20141108 1157) "run compile in a specific directory" nil single "melpa" nil nil nil])
  (cdb [cl-struct-package-desc cdb (20141201 754) "constant database (cdb) reader for Emacs Lisp" nil single "melpa" nil ((:keywords "cdb")) nil])
  (cdnjs [cl-struct-package-desc cdnjs (20140217 1312) "A front end for http://cdnjs.com" ((cl-lib (0 3)) (dash (2 5 0)) (deferred (0 3 2)) (f (0 16 0)) (pkg-info (0 4))) single "melpa" nil ((:url . "https://github.com/yasuyk/cdnjs.el") (:keywords "tools")) nil])
  (centered-window-mode [cl-struct-package-desc centered-window-mode (20140730 247) "Center the text when there's only one window" nil single "melpa" nil ((:url . "https://github.com/ikame/centered-window-mode") (:keywords "faces" "windows")) nil])
  (centimacro [cl-struct-package-desc centimacro (20140306 627) "Assign multiple macros as global key bindings" nil single "melpa" nil ((:url . "https://github.com/abo-abo/centimacro") (:keywords "macros")) nil])
  (cerbere [cl-struct-package-desc cerbere (20140418 715) "Unit testing in Emacs for several programming languages" ((s (1 9 0)) (f (0 16 0)) (pkg-info (0 5))) tar "melpa" nil ((:url . "https://github.com/nlamirault/cerbere") (:keywords "python" "go" "php" "tests" "tdd")) nil] [cl-struct-package-desc cerbere (0 1 0) "Unit testing in Emacs for several programming languages" ((s (1 9 0)) (f (0 16 0)) (go-mode (20140409)) (pkg-info (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/nlamirault/cerbere") (:keywords "python" "go" "php" "tests" "tdd")) nil])
  (cfengine-code-style [cl-struct-package-desc cfengine-code-style (20131209 411) "C code style for CFEngine project." nil single "melpa" nil ((:url . "https://github.com/cfengine/core")) nil] [cl-struct-package-desc cfengine-code-style (3 8 0 2 1) "C code style for CFEngine project." nil single "melpa-stable" nil ((:url . "https://github.com/cfengine/core")) nil])
  (cg [cl-struct-package-desc cg (20150819 404) "major mode for editing Constraint Grammar files" nil single "melpa" nil ((:url . "http://beta.visl.sdu.dk/constraint_grammar.html") (:keywords "languages")) nil])
  (change-inner [cl-struct-package-desc change-inner (20150707 844) "Change contents based on semantic units" ((expand-region (0 7))) single "melpa" nil ((:keywords "convenience" "extensions")) nil])
  (chatwork [cl-struct-package-desc chatwork (20150807 1948) "ChatWork client for Emacs" nil single "melpa" nil ((:url . "https://github.com/ataka/chatwork") (:keywords "web")) nil])
  (chef-mode [cl-struct-package-desc chef-mode (20111121 700) "minor mode for editing an opscode chef repository" nil single "melpa" nil ((:keywords "chef" "knife")) nil])
  (cherry-blossom-theme [cl-struct-package-desc cherry-blossom-theme (20150621 2042) "a soothing color theme for Emacs24." ((emacs (24 0))) single "melpa" nil ((:url . "https://github.com/inlinestyle/emacs-cherry-blossom-theme")) nil])
  (chinese-fonts-setup [cl-struct-package-desc chinese-fonts-setup (20151024 2035) "A fonts config tool enforcing double-width Chinese character display" ((cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/tumashu/chinese-fonts-setup") (:keywords "convenience" "chinese" "font")) nil])
  (chinese-pyim [cl-struct-package-desc chinese-pyim (20151104 34) "Chinese pinyin input method" ((cl-lib (0 5)) (pos-tip (0 4))) tar "melpa" nil ((:url . "https://github.com/tumashu/chinese-pyim") (:keywords "convenience" "chinese" "pinyin" "input-method")) nil])
  (chinese-remote-input [cl-struct-package-desc chinese-remote-input (20150110 2103) "Input Chinese with a remote input method (e.g. Android Voice Input Method)" nil single "melpa" nil ((:url . "https://github.com/tumashu/chinese-remote-input") (:keywords "convenience" "chinese")) nil])
  (chinese-wbim [cl-struct-package-desc chinese-wbim (20150623 2050) "Enable Wubi Input Method in Emacs." nil tar "melpa" nil nil nil])
  (chinese-word-at-point [cl-struct-package-desc chinese-word-at-point (20150618 1838) "Add `chinese-word' thing to `thing-at-point'" ((cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/xuchunyang/chinese-word-at-point.el") (:keywords "convenience" "chinese")) nil] [cl-struct-package-desc chinese-word-at-point (0 2 3) "Add `chinese-word' thing to `thing-at-point'" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/xuchunyang/chinese-word-at-point.el") (:keywords "convenience" "chinese")) nil])
  (chinese-yasdcv [cl-struct-package-desc chinese-yasdcv (20150702 616) "Yet another frontend for the StarDict command-line program" ((cl-lib (0 5)) (chinese-pyim (0 0 1))) single "melpa" nil ((:url . "https://github.com/tumashu/chinese-yasdcv") (:keywords "convenience" "chinese" "dictionary")) nil])
  (chronos [cl-struct-package-desc chronos (20150602 829) "multiple simultaneous countdown / countup timers" nil tar "melpa" nil ((:url . "http://github.com/dxknight/chronos") (:keywords "calendar")) nil])
  (chruby [cl-struct-package-desc chruby (20141126 57) "Emacs integration for chruby" nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/ChrubyEl") (:keywords "ruby" "chruby")) nil])
  (cider-decompile [cl-struct-package-desc cider-decompile (20131116 1002) "decompilation extension for cider" ((cider (0 3 0)) (javap-mode (9))) single "melpa" nil ((:url . "http://www.github.com/clojure-emacs/cider-decompile") (:keywords "languages" "clojure" "cider")) nil])
  (cider-eval-sexp-fu [cl-struct-package-desc cider-eval-sexp-fu (20150320 2015) "Briefly highlights an evaluated sexps." ((emacs (24)) (highlight (0)) (eval-sexp-fu (0 4 0))) single "melpa" nil ((:keywords "languages" "clojure" "cider")) nil] [cl-struct-package-desc cider-eval-sexp-fu (1 0) "Briefly highlights an evaluated sexps." ((emacs (24)) (highlight (0)) (eval-sexp-fu (0 4 0))) single "melpa-stable" nil ((:keywords "languages" "clojure" "cider")) nil])
  (cider-profile [cl-struct-package-desc cider-profile (20141120 625) "CIDER profiling support" ((cider (0 8 0))) single "melpa" nil ((:url . "http://github.com/thunknyc/nrepl-profile") (:keywords "cider" "clojure" "profiling")) nil])
  (cider-spy [cl-struct-package-desc cider-spy (20150625 758) "Spy on CIDER to get info" ((cider (0 5 0)) (dash (2 5 0)) (cl-lib (0 5))) single "melpa" nil ((:url . "http://www.github.com/jonpither/cider-spy") (:keywords "languages" "clojure" "cider" "nrepl")) nil])
  (cil-mode [cl-struct-package-desc cil-mode (20150223 250) "Common Intermediate Language mode" nil single "melpa" nil ((:url . "https://github.com/ForNeVeR/cil-mode") (:keywords "languages")) nil] [cl-struct-package-desc cil-mode (0 3) "Common Intermediate Language mode" nil single "melpa-stable" nil ((:url . "https://github.com/ForNeVeR/cil-mode") (:keywords "languages")) nil])
  (cinspect [cl-struct-package-desc cinspect (20150715 1933) "Use cinspect to look at the CPython source of builtins and other C objects!" ((emacs (24)) (cl-lib (0 5)) (deferred (0 3 1)) (python-environment (0 0 2))) single "melpa" nil ((:url . "https://github.com/inlinestyle/cinspect-mode") (:keywords "python")) nil])
  (clang-format [cl-struct-package-desc clang-format (20151007 1000) "Format code using clang-format" ((cl-lib (0 3))) single "melpa" nil ((:keywords "tools" "c")) nil])
  (clean-aindent-mode [cl-struct-package-desc clean-aindent-mode (20150816 2029) "Simple indent and unindent, trims indent white-space" nil single "melpa" nil ((:url . "https://github.com/pmarinov/clean-aindent-mode") (:keywords "indentation" "whitespace" "backspace")) nil])
  (clevercss [cl-struct-package-desc clevercss (20131228 1755) "A major mode for editing CleverCSS files" nil single "melpa" nil ((:keywords "languages" "css")) nil])
  (cliphist [cl-struct-package-desc cliphist (20151012 529) "Read clipboard history from Parcellite on Linux and Flycut on OS X" ((popup (0 5 0))) tar "melpa" nil ((:url . "http://github.com/redguardtoo/cliphist") (:keywords "clipboard" "manager" "history")) nil] [cl-struct-package-desc cliphist (0 1 1) "Read clipboard history from Parcellite on Linux and Flycut on OS X" ((popup (0 5 0))) tar "melpa-stable" nil ((:url . "http://github.com/redguardtoo/cliphist") (:keywords "clipboard" "manager" "history")) nil])
  (clipmon [cl-struct-package-desc clipmon (20150306 1223) "Clipboard monitor - watch system clipboard, add changes to kill ring/autoinsert" nil tar "melpa" nil ((:url . "https://github.com/bburns/clipmon") (:keywords "convenience")) nil])
  (clippy [cl-struct-package-desc clippy (20140417 414) "Show tooltip with function documentation at point" ((pos-tip (1 0))) single "melpa" nil ((:url . "https://github.com/Fuco1/clippy.el") (:keywords "docs")) nil])
  (cljr-helm [cl-struct-package-desc cljr-helm (20150425 1307) "Wraps clojure refactor commands with helm" ((clj-refactor (0 13 0)) (helm (1 5 6))) single "melpa" nil ((:url . "https://github.com/philjackson/cljr-helm") (:keywords "helm" "clojure" "refactor")) nil] [cl-struct-package-desc cljr-helm (0 7) "Wraps clojure refactor commands with helm" ((clj-refactor (0 13 0)) (helm (1 5 6))) single "melpa-stable" nil ((:url . "https://github.com/philjackson/cljr-helm") (:keywords "helm" "clojure" "refactor")) nil])
  (clmemo [cl-struct-package-desc clmemo (20150220 547) "Change Log MEMO" nil tar "melpa" nil ((:url . "https://github.com/ataka/clmemo") (:keywords "convenience")) nil])
  (cloc [cl-struct-package-desc cloc (20151007 201) "count lines of code over emacs buffers" ((cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/cosmicexplorer/cloc-emacs") (:keywords "cloc" "count" "source" "code" "lines")) nil])
  (clocker [cl-struct-package-desc clocker (20150505 843) "Note taker and clock-in enforcer" ((projectile (0 11 0)) (dash (2 10))) single "melpa" nil ((:keywords "org")) nil] [cl-struct-package-desc clocker (0 0 10) "Note taker and clock-in enforcer" ((projectile (0 11 0)) (dash (2 10))) single "melpa-stable" nil ((:keywords "org")) nil])
  (clojure-cheatsheet [cl-struct-package-desc clojure-cheatsheet (20151112 517) "The Clojure Cheatsheet for Emacs" ((helm (1 7 7)) (cider (0 9 0))) single "melpa" nil ((:url . "https://github.com/krisajenkins/clojure-cheatsheet") (:keywords "clojure" "nrepl" "cheatsheet" "helm")) nil] [cl-struct-package-desc clojure-cheatsheet (0 4 0) "The Clojure Cheatsheet for Emacs" ((helm (1 7 7)) (cider (0 9 0))) single "melpa-stable" nil ((:url . "https://github.com/krisajenkins/clojure-cheatsheet") (:keywords "clojure" "nrepl" "cheatsheet" "helm")) nil])
  (clojure-quick-repls [cl-struct-package-desc clojure-quick-repls (20150814 36) "Quickly create Clojure and ClojureScript repls for a project." ((cider (0 8 1)) (dash (2 9 0))) single "melpa" nil ((:url . "https://github.com/symfrog/clojure-quick-repls") (:keywords "languages" "clojure" "cider" "clojurescript")) nil] [cl-struct-package-desc clojure-quick-repls (0 1 0) "Quickly create Clojure and ClojureScript repls for a project." ((cider (0 8 1)) (dash (2 9 0))) single "melpa-stable" nil ((:url . "https://github.com/symfrog/clojure-quick-repls") (:keywords "languages" "clojure" "cider" "clojurescript")) nil])
  (clojure-snippets [cl-struct-package-desc clojure-snippets (20150504 144) "Yasnippets for clojure" ((yasnippet (0 8 0))) tar "melpa" nil nil nil] [cl-struct-package-desc clojure-snippets (1 0 0) "Yasnippets for clojure" ((yasnippet (0 8 0))) tar "melpa-stable" nil nil nil])
  (cmake-font-lock [cl-struct-package-desc cmake-font-lock (20150828 1327) "Advanced, type aware, highlight support for CMake" ((cmake-mode (0 0))) single "melpa" nil ((:url . "https://github.com/Lindydancer/cmake-font-lock") (:keywords "faces" "languages")) nil])
  (cmake-ide [cl-struct-package-desc cmake-ide (20151026 1311) "Calls CMake to find out include paths and other compiler flags" ((emacs (24 1))) single "melpa" nil ((:url . "http://github.com/atilaneves/cmake-ide") (:keywords "languages")) nil] [cl-struct-package-desc cmake-ide (0 2) "No description available." nil single "melpa-stable" nil nil nil])
  (cmds-menu [cl-struct-package-desc cmds-menu (20150104 1334) "`Recent Commands' submenu for the menu-bar `Tools' menu." nil single "melpa" nil ((:url . "http://www.emacswiki.org/cmds-menu.el") (:keywords "convenience" "command" "menu")) nil])
  (cmm-mode [cl-struct-package-desc cmm-mode (20150224 2346) "Major mode for C-- source code" nil single "melpa" nil nil nil])
  (cn-outline [cl-struct-package-desc cn-outline (20100321 914) "No description available." nil single "melpa" nil nil nil])
  (codebug [cl-struct-package-desc codebug (20140929 1437) "Interact with codebug" nil single "melpa" nil ((:url . "http://www.shanedowling.com/")) nil])
  (codesearch [cl-struct-package-desc codesearch (20151109 554) "Easy access to the codesearch tools" ((dash (2 8 0))) single "melpa" nil ((:url . "https://github.com/abingham/codesearch.el") (:keywords "tools" "development" "search")) nil])
  (codic [cl-struct-package-desc codic (20150926 427) "Search Codic (codic.jp) naming dictionaries" ((emacs (24)) (cl-lib (0 5))) tar "melpa" nil ((:url . "https://github.com/syohex/emacs-codic")) nil] [cl-struct-package-desc codic (0 3) "Search Codic (codic.jp) naming dictionaries" ((emacs (24)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-codic")) nil])
  (coffee-fof [cl-struct-package-desc coffee-fof (20131012 530) "A coffee-mode configuration for `ff-find-other-file'." ((coffee-mode (0 4 1))) single "melpa" nil ((:url . "http://github.com/yasuyk/coffee-fof") (:keywords "coffee-mode")) nil])
  (colemak-evil [cl-struct-package-desc colemak-evil (20140508 1612) "Colemak-friendly keybindings for Evil." ((evil (1 0 8))) single "melpa" nil ((:url . "https://github.com/patbl/colemak-evil")) nil])
  (colonoscopy-theme [cl-struct-package-desc colonoscopy-theme (20141115 2301) "an Emacs 24 theme based on Colonoscopy (tmTheme)" ((emacs (24 0))) single "melpa" nil ((:url . "https://github.com/emacsfodder/tmtheme-to-deftheme")) nil])
  (color-identifiers-mode [cl-struct-package-desc color-identifiers-mode (20150602 1804) "Color identifiers based on their names" ((dash (2 5 0)) (emacs (24))) single "melpa" nil ((:url . "https://github.com/ankurdave/color-identifiers-mode") (:keywords "faces" "languages")) nil])
  (color-moccur [cl-struct-package-desc color-moccur (20141222 1635) "multi-buffer occur (grep) mode" nil single "melpa" nil ((:url . "http://www.bookshelf.jp/elc/color-moccur.el") (:keywords "convenience")) nil])
  (color-theme-approximate [cl-struct-package-desc color-theme-approximate (20140227 2036) "Makes Emacs theme works on terminal transparently" nil single "melpa" nil nil nil])
  (color-theme-modern [cl-struct-package-desc color-theme-modern (20151109 1906) "Reimplement colortheme with Emacs 24 theme framework." ((emacs (24))) tar "melpa" nil ((:url . "https://github.com/emacs-jp/replace-colorthemes/")) nil] [cl-struct-package-desc color-theme-modern (0 0 1) "Reimplement colortheme with Emacs 24 theme framework." ((emacs (24))) tar "melpa-stable" nil ((:url . "https://github.com/emacs-jp/replace-colorthemes/")) nil])
  (colorsarenice-theme [cl-struct-package-desc colorsarenice-theme (20150421 1336) "A colorful color theme." ((emacs (24))) tar "melpa" nil nil nil] [cl-struct-package-desc colorsarenice-theme (1 0 20) "A colorful color theme." ((emacs (24))) tar "melpa-stable" nil nil nil])
  (column-enforce-mode [cl-struct-package-desc column-enforce-mode (20140902 949) "Highlight text that extends beyond a  column" nil single "melpa" nil ((:url . "www.github.com/jordonbiondo/column-enforce-mode")) nil])
  (column-marker [cl-struct-package-desc column-marker (20121128 43) "Highlight certain character columns" nil single "melpa" nil ((:keywords "tools" "convenience" "highlight")) nil])
  (command-log-mode [cl-struct-package-desc command-log-mode (20150615 716) "log keyboard commands to buffer" nil single "melpa" nil ((:url . "https://github.com/lewang/command-log-mode") (:keywords "help")) nil])
  (commander [cl-struct-package-desc commander (20140120 1052) "Emacs command line parser" ((s (1 6 0)) (dash (2 0 0)) (cl-lib (0 3)) (f (0 6 1))) single "melpa" nil ((:url . "http://github.com/rejeep/commander.el") (:keywords "cli" "argv")) nil] [cl-struct-package-desc commander (0 7 0) "Emacs command line parser" ((s (1 6 0)) (dash (2 0 0)) (cl-lib (0 3)) (f (0 6 1))) single "melpa-stable" nil ((:url . "http://github.com/rejeep/commander.el") (:keywords "cli" "argv")) nil])
  (comment-dwim-2 [cl-struct-package-desc comment-dwim-2 (20150825 1549) "An all-in-one comment command to rule them all" nil single "melpa" nil ((:url . "https://github.com/remyferre/comment-dwim-2") (:keywords "convenience")) nil] [cl-struct-package-desc comment-dwim-2 (1 2 2) "An all-in-one comment command to rule them all" nil single "melpa-stable" nil ((:url . "https://github.com/remyferre/comment-dwim-2") (:keywords "convenience")) nil])
  (commify [cl-struct-package-desc commify (20151110 138) "Toggle grouping commas in numbers" ((s (1 9 0))) single "melpa" nil ((:url . "https://github.com/ddoherty03/commify") (:keywords "convenience" "editing" "numbers" "grouping" "commas")) nil])
  (common-lisp-snippets [cl-struct-package-desc common-lisp-snippets (20150910 347) "Yasnippets for Common Lisp" ((yasnippet (0 8 0))) tar "melpa" nil ((:url . "https://github.com/mrkkrp/common-lisp-snippets") (:keywords "snippets")) nil] [cl-struct-package-desc common-lisp-snippets (0 1 1) "Yasnippets for Common Lisp" ((yasnippet (0 8 0))) tar "melpa-stable" nil ((:url . "https://github.com/mrkkrp/common-lisp-snippets") (:keywords "snippets")) nil])
  (company-anaconda [cl-struct-package-desc company-anaconda (20151004 158) "Anaconda backend for company-mode" ((company (0 8 0)) (anaconda-mode (0 1 1)) (cl-lib (0 5 0)) (dash (2 6 0)) (s (1 9))) single "melpa" nil ((:url . "https://github.com/proofit404/anaconda-mode")) nil] [cl-struct-package-desc company-anaconda (0 1 0) "Anaconda backend for company-mode" ((company (0 8 0)) (anaconda-mode (0 1 1)) (cl-lib (0 5 0)) (dash (2 6 0)) (s (1 9))) single "melpa-stable" nil ((:url . "https://github.com/proofit404/anaconda-mode")) nil])
  (company-ansible [cl-struct-package-desc company-ansible (20150901 250) "A company back-end for ansible" ((emacs (24 4)) (company (0 8 12))) tar "melpa" nil ((:url . "https://github.com/krzysztof-magosa/company-ansible") (:keywords "ansible")) nil] [cl-struct-package-desc company-ansible (0 1 1) "A company back-end for ansible" ((emacs (24 4)) (company (0 8 12))) tar "melpa-stable" nil ((:url . "https://github.com/krzysztof-magosa/company-ansible") (:keywords "ansible")) nil])
  (company-arduino [cl-struct-package-desc company-arduino (20150614 126) "company-mode for Arduino" ((emacs (24 1)) (company (0 8 0)) (irony (0 1 0)) (cl-lib (0 5)) (company-irony (0 1 0)) (company-c-headers (20140930)) (arduino-mode (1 0))) single "melpa" nil ((:url . "https://github.com/yuutayamada/company-arduino") (:keywords "convenience" "development" "company")) nil])
  (company-auctex [cl-struct-package-desc company-auctex (20151102 643) "Company-mode auto-completion for AUCTeX" ((yasnippet (0 8 0)) (company (0 8 0)) (auctex (11 87))) single "melpa" nil ((:url . "https://github.com/alexeyr/company-auctex/")) nil])
  (company-c-headers [cl-struct-package-desc company-c-headers (20150801 901) "Company mode backend for C/C++ header files" ((emacs (24 1)) (company (0 8))) single "melpa" nil ((:keywords "development" "company")) nil])
  (company-cabal [cl-struct-package-desc company-cabal (20151002 429) "company-mode cabal backend" ((cl-lib (0 5)) (company (0 8 0)) (emacs (24))) tar "melpa" nil ((:url . "https://github.com/iquiw/company-cabal")) nil] [cl-struct-package-desc company-cabal (0 1 1) "company-mode cabal backend" ((cl-lib (0 5)) (company (0 8 0)) (emacs (24))) tar "melpa-stable" nil ((:url . "https://github.com/iquiw/company-cabal")) nil])
  (company-coq [cl-struct-package-desc company-coq (20150718 1931) "Company-mode backend for Proof General's coq-mode" ((company-math (0)) (company (0 8 12)) (yasnippet (0 9 0 1)) (dash (2 10 0)) (cl-lib (0 5))) tar "melpa" nil nil nil])
  (company-dcd [cl-struct-package-desc company-dcd (20150901 404) "Company backend for Dlang using DCD." ((company (0 9)) (flycheck-dmd-dub (0 7)) (yasnippet (0 8)) (popwin (0 7)) (cl-lib (0 5)) (helm (1 5 6))) tar "melpa" nil ((:url . "http://github.com/tsukimizake/company-dcd") (:keywords "languages")) nil])
  (company-edbi [cl-struct-package-desc company-edbi (20150525 214) "Edbi backend for company-mode" ((company (0 8 5)) (edbi (0 1 3)) (cl-lib (0 5 0)) (s (1 9 0))) single "melpa" nil ((:url . "https://github.com/proofit404/company-edbi")) nil])
  (company-emoji [cl-struct-package-desc company-emoji (20151107 2220) "company-mode backend for emoji" ((cl-lib (0 5)) (company (0 8 0))) single "melpa" nil ((:url . "https://github.com/dunn/company-emoji.git") (:keywords "emoji" "company" "honk")) nil] [cl-struct-package-desc company-emoji (2 3 0) "company-mode backend for emoji" ((cl-lib (0 5)) (company (0 8 0))) single "melpa-stable" nil ((:url . "https://github.com/dunn/company-emoji.git") (:keywords "emoji" "company" "honk")) nil])
  (company-flx [cl-struct-package-desc company-flx (20151020 1101) "flx based fuzzy matching for company" ((emacs (24)) (company (0 8 12)) (flx (0 5))) single "melpa" nil ((:url . "https://github.com/PythonNut/company-flx") (:keywords "convenience" "company" "fuzzy" "flx")) nil])
  (company-ghc [cl-struct-package-desc company-ghc (20151008 508) "company-mode ghc-mod backend" ((cl-lib (0 5)) (company (0 8 0)) (ghc (5 4 0 0)) (emacs (24))) single "melpa" nil ((:url . "https://github.com/iquiw/company-ghc") (:keywords "haskell" "completion")) nil] [cl-struct-package-desc company-ghc (1 1 0) "company-mode ghc-mod backend" ((cl-lib (0 5)) (company (0 8 0)) (ghc (5 1 0)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/iquiw/company-ghc") (:keywords "haskell" "completion")) nil])
  (company-ghci [cl-struct-package-desc company-ghci (20151031 2212) "company backend which uses the current ghci process." ((company (0 8 11)) (haskell-mode (13))) single "melpa" nil nil nil])
  (company-go [cl-struct-package-desc company-go (20150903 1944) "company-mode backend for Go (using gocode)" ((company (0 8 0)) (go-mode (1 0 0))) single "melpa" nil ((:keywords "languages")) nil] [cl-struct-package-desc company-go (20150303) "company-mode backend for Go (using gocode)" ((company (0 8 0))) single "melpa-stable" nil ((:keywords "languages")) nil])
  (company-irony [cl-struct-package-desc company-irony (20150810 239) "company-mode completion back-end for irony-mode" ((emacs (24 1)) (company (0 8 0)) (irony (0 1 0)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/Sarcasm/company-irony/") (:keywords "convenience")) nil] [cl-struct-package-desc company-irony (0 1 0) "company-mode completion back-end for irony-mode" ((emacs (24 1)) (company (0 8 0)) (irony (0 1 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/Sarcasm/company-irony/") (:keywords "convenience")) nil])
  (company-irony-c-headers [cl-struct-package-desc company-irony-c-headers (20151018 209) "Company mode backend for C/C++ header files with Irony" ((cl-lib (0 5)) (company (0 9 0)) (irony (0 2 0))) single "melpa" nil ((:url . "https://github.com/hotpxl/company-irony-c-headers") (:keywords "c" "company")) nil])
  (company-jedi [cl-struct-package-desc company-jedi (20151021 1441) "company-mode completion back-end for Python JEDI" ((emacs (24)) (cl-lib (0 5)) (company (0 8 11)) (jedi-core (0 2 5))) single "melpa" nil nil nil] [cl-struct-package-desc company-jedi (0 3) "company-mode completion back-end for Python JEDI" ((emacs (24)) (cl-lib (0 5)) (company (0 8 11)) (jedi-core (0 2 5))) single "melpa-stable" nil nil nil])
  (company-nand2tetris [cl-struct-package-desc company-nand2tetris (20151027 1436) "Company backend for nand2tetris major mode" ((names (0 3 0)) (nand2tetris (0 0 1)) (company (0 5)) (cl-lib (0 5 0))) single "melpa" nil ((:url . "http://www.github.com/CestDiego/nand2tetris.el/") (:keywords "nand2tetris" "hdl" "company")) nil])
  (company-nixos-options [cl-struct-package-desc company-nixos-options (20151013 1609) "Company Backend for nixos-options" ((company (0 8 0)) (nixos-options (0 0 1)) (cl-lib (0 5 0))) single "melpa" nil ((:url . "http://www.github.com/travisbhartwell/nix-emacs/") (:keywords "unix")) nil] [cl-struct-package-desc company-nixos-options (0 0 1) "Company Backend for nixos-options" ((company (0 8 0)) (nixos-options (0 0 1)) (cl-lib (0 5 0))) single "melpa-stable" nil ((:url . "http://www.github.com/travisbhartwell/nix-emacs/") (:keywords "unix")) nil])
  (company-qml [cl-struct-package-desc company-qml (20151027 835) "Company backend for QML files" ((qml-mode (0 1)) (company (0 8 12))) tar "melpa" nil ((:keywords "extensions")) nil])
  (company-quickhelp [cl-struct-package-desc company-quickhelp (20150804 319) "Popup documentation for completion candidates" ((emacs (24 4)) (company (0 8 9)) (pos-tip (0 4 6))) single "melpa" nil ((:url . "https://www.github.com/expez/company-quickhelp") (:keywords "company" "popup" "documentation" "quickhelp")) nil] [cl-struct-package-desc company-quickhelp (1 2 0) "Popup documentation for completion candidates" ((emacs (24 4)) (company (0 8 9)) (pos-tip (0 4 6))) single "melpa-stable" nil ((:url . "https://www.github.com/expez/company-quickhelp") (:keywords "company" "popup" "documentation" "quickhelp")) nil])
  (company-racer [cl-struct-package-desc company-racer (20150628 1933) "Company integration for racer" ((emacs (24)) (cl-lib (0 5)) (company (0 8 0)) (deferred (0 3 1))) single "melpa" nil ((:url . "https://github.com/emacs-pe/company-racer") (:keywords "convenience")) nil])
  (company-restclient [cl-struct-package-desc company-restclient (20150127 647) "company-mode completion back-end for restclient-mode" ((cl-lib (0 5)) (company (0 8 0)) (emacs (24)) (know-your-http-well (0 2 0)) (restclient (0 0 0))) single "melpa" nil ((:url . "https://github.com/iquiw/company-restclient")) nil] [cl-struct-package-desc company-restclient (0 0 2) "company-mode completion back-end for restclient-mode" ((cl-lib (0 5)) (company (0 8 0)) (emacs (24)) (know-your-http-well (0 2 0))) single "melpa-stable" nil ((:url . "https://github.com/iquiw/company-restclient")) nil])
  (company-tern [cl-struct-package-desc company-tern (20150525 216) "Tern backend for company-mode" ((company (0 8 0)) (tern (0 0 1)) (dash (2 8 0)) (dash-functional (2 8 0)) (s (1 9 0)) (cl-lib (0 5 0))) single "melpa" nil ((:url . "https://github.com/proofit404/company-tern")) nil] [cl-struct-package-desc company-tern (0 2 0) "Tern backend for company-mode" ((company (0 8 0)) (tern (0 0 1)) (dash (2 8 0)) (dash-functional (2 8 0)) (s (1 9 0)) (cl-lib (0 5 0))) single "melpa-stable" nil ((:url . "https://github.com/proofit404/company-tern")) nil])
  (company-try-hard [cl-struct-package-desc company-try-hard (20150902 1506) "get all completions from company backends" ((emacs (24 3)) (company (0 8 0)) (dash (2 0))) single "melpa" nil ((:keywords "matching")) nil])
  (company-web [cl-struct-package-desc company-web (20151023 1346) "Company version of ac-html, complete for web,html,emmet,jade,slim modes" ((company (0 8 0)) (dash (2 8 0)) (cl-lib (0 5 0)) (web-completion-data (0 1 0))) tar "melpa" nil ((:url . "https://github.com/osv/company-web") (:keywords "html" "company")) nil] [cl-struct-package-desc company-web (0 9) "Company version of ac-html, complete for web,html,emmet,jade,slim modes" ((company (0 8 0)) (dash (2 8 0)) (cl-lib (0 5 0)) (web-completion-data (0 1 0))) tar "melpa-stable" nil ((:url . "https://github.com/osv/company-web") (:keywords "html" "company")) nil])
  (company-ycm [cl-struct-package-desc company-ycm (20140904 1117) "company-ycm" ((ycm (0 1))) single "melpa" nil ((:keywords "abbrev")) nil])
  (company-ycmd [cl-struct-package-desc company-ycmd (20151022 1010) "company-mode backend for ycmd" ((ycmd (0 1)) (company (0 8 3)) (deferred (0 2 0)) (s (1 9 0)) (dash (1 2 0))) single "melpa" nil ((:url . "https://github.com/abingham/emacs-ycmd")) nil] [cl-struct-package-desc company-ycmd (0 9) "company-mode backend for ycmd" ((ycmd (0 1)) (company (0 8 3)) (deferred (0 2 0)) (s (1 0 0))) single "melpa-stable" nil ((:url . "https://github.com/abingham/emacs-ycmd")) nil])
  (conkeror-minor-mode [cl-struct-package-desc conkeror-minor-mode (20150114 804) "Mode for editing conkeror javascript files." nil single "melpa" nil ((:url . "http://github.com/Bruce-Connor/conkeror-minor-mode") (:keywords "programming" "tools")) nil] [cl-struct-package-desc conkeror-minor-mode (1 6 2) "Mode for editing conkeror javascript files." nil single "melpa-stable" nil ((:url . "http://github.com/Bruce-Connor/conkeror-minor-mode") (:keywords "programming" "tools")) nil])
  (connection [cl-struct-package-desc connection (20140717 2029) "TCP-based client connection" nil single "melpa" nil ((:keywords "network")) nil] [cl-struct-package-desc connection (1 10) "No description available." nil single "melpa-stable" nil nil nil])
  (control-mode [cl-struct-package-desc control-mode (20140218 607) "A \"control\" mode, similar to vim's \"normal\" mode" nil single "melpa" nil ((:url . "https://github.com/stephendavidmarsh/control-mode") (:keywords "convenience" "emulations")) nil])
  (corral [cl-struct-package-desc corral (20151104 349) "Quickly surround text with delimiters" nil single "melpa" nil ((:url . "http://github.com/nivekuil/corral")) nil] [cl-struct-package-desc corral (0 2) "Incrementally wrap delimiters around s-expressions" nil single "melpa-stable" nil ((:url . "http://github.com/nivekuil/corral")) nil])
  (counsel [cl-struct-package-desc counsel (20151111 638) "Various completion functions using Ivy" ((emacs (24 1)) (swiper (0 4 0))) single "melpa" nil ((:url . "https://github.com/abo-abo/swiper") (:keywords "completion" "matching")) nil] [cl-struct-package-desc counsel (0 6 0) "Various completion functions using Ivy" ((emacs (24 1)) (swiper (0 4 0))) single "melpa-stable" nil ((:url . "https://github.com/abo-abo/swiper") (:keywords "completion" "matching")) nil])
  (cp5022x [cl-struct-package-desc cp5022x (20120323 1635) "cp50220, cp50221, cp50222 coding system" nil single "melpa" nil ((:keywords "languages" "cp50220" "cp50221" "cp50222" "cp51932" "cp932")) nil])
  (cperl-mode [cl-struct-package-desc cperl-mode (20140309 122) "Perl code editing commands for Emacs" nil single "melpa" nil ((:keywords "languages" "perl")) nil] [cl-struct-package-desc cperl-mode (6 3) "Perl code editing commands for Emacs" nil single "melpa-stable" nil ((:keywords "languages" "perl")) nil])
  (crab [cl-struct-package-desc crab (20150126 2137) "WebSocket server to remotely control a browser" ((websocket (1 0)) (json (1 2))) single "melpa" nil ((:url . "https://github.com/puffnfresh/crab-emacs")) nil])
  (crappy-jsp-mode [cl-struct-package-desc crappy-jsp-mode (20140311 231) "A pretty crappy major-mode for jsp." nil single "melpa" nil ((:keywords "jsp" "major" "mode")) nil])
  (crm-custom [cl-struct-package-desc crm-custom (20140816 948) "Alternate `completing-read-multiple' that uses `completing-read'" nil single "melpa" nil ((:url . "https://github.com/DarwinAwardWinner") (:keywords "completion" "minibuffer" "multiple elements")) nil] [cl-struct-package-desc crm-custom (0 4) "Alternate `completing-read-multiple' that uses `completing-read'" nil single "melpa-stable" nil ((:url . "https://github.com/DarwinAwardWinner") (:keywords "completion" "minibuffer" "multiple elements")) nil])
  (cryptsy-public-api [cl-struct-package-desc cryptsy-public-api (20141008 528) "Library for working with the Cryptsy public API" ((json (1 2))) single "melpa" nil ((:keywords "cryptsy" "bitcoin" "litecoin" "dogecoin")) nil])
  (css-comb [cl-struct-package-desc css-comb (20150502 1328) "Sort CSS properties in a particular order using CSS Comb" nil single "melpa" nil ((:url . "https://github.com/channikhabra/css-comb.el")) nil])
  (css-eldoc [cl-struct-package-desc css-eldoc (20150124 1923) "an eldoc-mode plugin for CSS source code" nil tar "melpa" nil nil nil])
  (cssfmt [cl-struct-package-desc cssfmt (20150818 2128) "Cssfmt interface" nil single "melpa" nil ((:url . "https://github.com/KeenS/cssfmt.el") (:keywords "css" "code" "formatter")) nil])
  (cssh [cl-struct-package-desc cssh (20150810 1009) "clusterssh implementation for emacs" nil single "melpa" nil ((:url . "http://tapoueh.org/emacs/cssh.html") (:keywords "clusterssh" "ssh" "cssh")) nil])
  (csv-nav [cl-struct-package-desc csv-nav (20130407 1120) "navigate and edit CSV files" nil single "melpa" nil nil nil])
  (ctl-mode [cl-struct-package-desc ctl-mode (20131229 2316) "Major mode for editing GrADS script files" nil single "melpa" nil ((:keywords "grads" "script" "major-mode")) nil])
  (ctxmenu [cl-struct-package-desc ctxmenu (20140303 1342) "Provide a context menu like right-click." ((popup (20140205 103)) (log4e (0 2 0)) (yaxception (0 1))) tar "melpa" nil ((:url . "https://github.com/aki2o/emacs-ctxmenu") (:keywords "popup")) nil] [cl-struct-package-desc ctxmenu (0 3 0) "Provide a context menu like right-click." ((popup (20140205 103)) (log4e (0 2 0)) (yaxception (0 1))) tar "melpa-stable" nil ((:url . "https://github.com/aki2o/emacs-ctxmenu") (:keywords "popup")) nil])
  (cucumber-goto-step [cl-struct-package-desc cucumber-goto-step (20131209 2119) "Jump to cucumber step definition" ((pcre2el (1 5))) single "melpa" nil ((:url . "http://orthogonal.me")) nil])
  (cuda-mode [cl-struct-package-desc cuda-mode (20151112 1850) "NVIDIA CUDA Major Mode" nil single "melpa" nil ((:keywords "c" "languages")) nil] [cl-struct-package-desc cuda-mode (1 0 0) "NVIDIA CUDA Major Mode" nil single "melpa-stable" nil ((:keywords "c" "languages")) nil])
  (cursor-test [cl-struct-package-desc cursor-test (20131207 932) "testing library for cursor position in emacs." ((emacs (24))) single "melpa" nil ((:url . "https://github.com/ainame/cursor-test.el")) nil])
  (cus-edit+ [cl-struct-package-desc cus-edit+ (20150814 749) "Enhancements to `cus-edit.el'." nil single "melpa" nil ((:url . "http://www.emacswiki.org/cus-edit+.el") (:keywords "help" "customize" "help" "faces")) nil])
  (cyberpunk-theme [cl-struct-package-desc cyberpunk-theme (20150828 508) "Cyberpunk Color Theme" nil single "melpa" nil ((:keywords "color" "theme" "cyberpunk")) nil] [cl-struct-package-desc cyberpunk-theme (1 14) "Cyberpunk Color Theme" nil single "melpa-stable" nil ((:keywords "color" "theme" "cyberpunk")) nil])
  (cycle-resize [cl-struct-package-desc cycle-resize (20150602 1223) "Cycle resize the current window horizontally or vertically" nil single "melpa" nil ((:url . "https://github.com/pierre-lecocq/cycle-resize")) nil])
  (cycle-themes [cl-struct-package-desc cycle-themes (20150402 2009) "A global minor mode to make switching themes easier" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/toroidal-code/cycle-themes.el") (:keywords "themes" "utility" "global minor mode")) nil])
  (cyphejor [cl-struct-package-desc cyphejor (20150914 427) "Shorten major mode names using user-defined rules" ((emacs (24 4))) single "melpa" nil ((:url . "https://github.com/cyphejor") (:keywords "mode-line" "major-mode")) nil] [cl-struct-package-desc cyphejor (0 1 0) "Shorten major mode names using user-defined rules" ((emacs (24 4))) single "melpa-stable" nil ((:url . "https://github.com/cyphejor") (:keywords "mode-line" "major-mode")) nil])
  (cypher-mode [cl-struct-package-desc cypher-mode (20151110 342) "major mode for editing cypher scripts" nil single "melpa" nil ((:url . "http://github.com/fxbois/cypher-mode") (:keywords "cypher" "graph")) nil])
  (cython-mode [cl-struct-package-desc cython-mode (20140705 1229) "Major mode for editing Cython files" nil single "melpa" nil nil nil] [cl-struct-package-desc cython-mode (0 23 4) "Major mode for editing Cython files" nil single "melpa-stable" nil nil nil])
  (dactyl-mode [cl-struct-package-desc dactyl-mode (20140906 1025) "Major mode for editing Pentadactyl config files" nil single "melpa" nil ((:url . "https://github.com/luxbock/dactyl-mode") (:keywords "languages" "vim")) nil])
  (dakrone-theme [cl-struct-package-desc dakrone-theme (20140211 2045) "dakrone's custom dark theme" nil single "melpa" nil ((:url . "https://github.com/dakrone/dakrone-theme") (:keywords "color" "themes" "this" "file" "is" "not" "part" "of" "gnu" "emacs.")) nil])
  (darcsum [cl-struct-package-desc darcsum (20140315 2110) "a pcl-cvs like interface for managing darcs patches" nil tar "melpa" nil ((:keywords "completion" "convenience" "tools" "vc")) nil])
  (darcula-theme [cl-struct-package-desc darcula-theme (20150629 235) "Inspired by IntelliJ's Darcula theme" nil single "melpa" nil ((:url . "https://github.com/fommil/darcula-theme-emacs") (:keywords "faces")) nil] [cl-struct-package-desc darcula-theme (1 0) "Inspired by IntelliJ's Darcula theme" nil single "melpa-stable" nil ((:url . "https://github.com/fommil/darcula-theme-emacs") (:keywords "faces")) nil])
  (dark-krystal-theme [cl-struct-package-desc dark-krystal-theme (20141115 2301) "an Emacs 24 theme based on Dark Krystal (tmTheme)" ((emacs (24 0))) single "melpa" nil ((:url . "https://github.com/emacsfodder/tmtheme-to-deftheme")) nil])
  (dark-souls [cl-struct-package-desc dark-souls (20140314 428) "Prepare to die" nil single "melpa" nil ((:url . "http://github.com/tomjakubowski/dark-souls.el") (:keywords "games")) nil])
  (darkburn-theme [cl-struct-package-desc darkburn-theme (20151003 100) "A not-so-low contrast color theme for Emacs." nil single "melpa" nil ((:url . "http://github.com/gorauskas/darkburn-theme")) nil])
  (darkmine-theme [cl-struct-package-desc darkmine-theme (20151005 115) "Yet another emacs dark color theme." nil single "melpa" nil ((:url . "https://github.com/pierre-lecocq/darkmine-theme")) nil])
  (darktooth-theme [cl-struct-package-desc darktooth-theme (20151104 1818) "Color theme for Emacs, when soothe and gruvbox collide" nil single "melpa" nil ((:url . "http://github.com/emacsfodder/emacs-theme-darktooth")) nil] [cl-struct-package-desc darktooth-theme (0 1 35) "Color theme for Emacs, when soothe and gruvbox collide" nil single "melpa-stable" nil ((:url . "http://github.com/emacsfodder/emacs-theme-darktooth")) nil])
  (dash-at-point [cl-struct-package-desc dash-at-point (20140626 35) "Search the word at point with Dash" nil single "melpa" nil ((:url . "https://github.com/stanaka/dash-at-point")) nil])
  (date-at-point [cl-struct-package-desc date-at-point (20150108 418) "Add `date' to `thing-at-point' function" nil single "melpa" nil ((:url . "https://gitorious.org/alezost-emacs/date-at-point") (:keywords "convenience")) nil] [cl-struct-package-desc date-at-point (0 1) "Add `date' to `thing-at-point' function" nil single "melpa-stable" nil ((:url . "https://gitorious.org/alezost-emacs/date-at-point") (:keywords "convenience")) nil])
  (date-field [cl-struct-package-desc date-field (20141128 1705) "Date widget" ((dash (2 9 0)) (log4e (0 2 0)) (yaxception (0 3 2))) single "melpa" nil ((:url . "https://github.com/aki2o/emacs-date-field") (:keywords "widgets")) nil] [cl-struct-package-desc date-field (0 0 1) "Date widget" ((dash (2 9 0)) (log4e (0 2 0)) (yaxception (0 3 2))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/emacs-date-field") (:keywords "widgets")) nil])
  (datomic-snippets [cl-struct-package-desc datomic-snippets (20130707 1315) "Yasnippets for Datomic" ((s (1 4 0)) (dash (1 2 0)) (yasnippet (0 6 1))) tar "melpa" nil nil nil])
  (dayone [cl-struct-package-desc dayone (20131117 255) "Utility script for Day One" ((uuid (0 0 3)) (mustache (0 22)) (ht (1 5))) tar "melpa" nil ((:url . "https://github.com/mori-dev/emacs-dayone") (:keywords "day one" "tools" "convenience")) nil])
  (ddskk [cl-struct-package-desc ddskk (20151107 1936) "Simple Kana to Kanji conversion program." ((ccc (1 43)) (cdb (20141201 754))) tar "melpa" nil nil nil])
  (debpaste [cl-struct-package-desc debpaste (20140617 2258) "Interface for getting/posting/deleting pastes from paste.debian.net" ((xml-rpc (1 6 7))) single "melpa" nil ((:url . "http://github.com/alezost/debpaste.el") (:keywords "paste")) nil])
  (debug-print [cl-struct-package-desc debug-print (20140125 1619) "A nice printf debugging environment by the way Gauche do" ((emacs (24))) single "melpa" nil ((:url . "https://github.com/kenoss/debug-print") (:keywords "extensions" "lisp" "tools" "maint")) nil])
  (decl [cl-struct-package-desc decl (20151105 1046) "Library for organizing code declaratively" ((dash (2 5 0)) (emacs (24 3)) (cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/preetpalS/decl.el")) nil])
  (dedukti-mode [cl-struct-package-desc dedukti-mode (20150820 708) "Major mode for Dedukti files" nil single "melpa" nil nil nil])
  (default-text-scale [cl-struct-package-desc default-text-scale (20150227 956) "Easily adjust the font size in all frames" nil single "melpa" nil ((:keywords "frames" "faces")) nil] [cl-struct-package-desc default-text-scale (0 1) "Easily adjust the font size in all frames" nil single "melpa-stable" nil ((:keywords "frames" "faces")) nil])
  (define-word [cl-struct-package-desc define-word (20150709 1223) "display the definition of word at point." ((emacs (24 1))) single "melpa" nil ((:url . "https://github.com/abo-abo/define-word") (:keywords "dictionary" "convenience")) nil] [cl-struct-package-desc define-word (0 1 0) "display the definition of word at point." ((emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/abo-abo/define-word") (:keywords "dictionary" "convenience")) nil])
  (defproject [cl-struct-package-desc defproject (20151006 549) "Manager dir-locals and project specific variables" ((emacs (24))) single "melpa" nil ((:url . "https://github.com/kotfic/defproject") (:keywords "convenience")) nil])
  (delight [cl-struct-package-desc delight (20141128 637) "A dimmer switch for your lighter text." nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/DelightedModes")) nil])
  (delim-kill [cl-struct-package-desc delim-kill (20100516 2320) "Kill text between delimiters." nil single "melpa" nil ((:url . "http://github.com/thomas11/delim-kill/tree/master") (:keywords "convenience" "languages")) nil])
  (demangle-mode [cl-struct-package-desc demangle-mode (20151109 1253) "Automatically demangle C++ symbols" ((emacs (24)) (cl-lib (0 1))) single "melpa" nil ((:url . "https://github.com/liblit/demangle-mode") (:keywords "c" "tools")) nil] [cl-struct-package-desc demangle-mode (1 1) "Automatically demangle C++ symbols" ((emacs (24)) (cl-lib (0 1))) single "melpa-stable" nil ((:url . "https://github.com/liblit/demangle-mode") (:keywords "c" "tools")) nil])
  (demo-it [cl-struct-package-desc demo-it (20151020 1229) "Utility functions for creating demonstrations" nil single "melpa" nil ((:keywords "demonstration" "presentation")) nil])
  (describe-number [cl-struct-package-desc describe-number (20151031 1755) "Describe arbitrarily large number at point." ((yabin (1 1))) single "melpa" nil ((:url . "https://github.com/netromdk/describe-number") (:keywords "describe" "value" "help")) nil] [cl-struct-package-desc describe-number (0 3 1) "Describe arbitrarily large number at point." ((yabin (1 1))) single "melpa-stable" nil ((:url . "https://github.com/netromdk/describe-number") (:keywords "describe" "value" "help")) nil])
  (desktop+ [cl-struct-package-desc desktop+ (20151004 1240) "Handle special buffers when saving & restoring sessions" ((emacs (24 4)) (dash (2 11 0)) (f (0 17 2))) single "melpa" nil ((:url . "https://github.com/ffevotte/desktop-plus")) nil] [cl-struct-package-desc desktop+ (0 1) "improved sessions" nil single "melpa-stable" nil nil nil])
  (dic-lookup-w3m [cl-struct-package-desc dic-lookup-w3m (20150706 417) "look up dictionaries on the Internet" ((w3m (20120723 324)) (stem (20120826))) tar "melpa" nil ((:keywords "emacs-w3m" "w3m" "dictionary")) nil])
  (dictcc [cl-struct-package-desc dictcc (20150731 255) "Look up translations on dict.cc" ((emacs (24)) (cl-lib (0 5)) (s (1 0)) (dash (2 0)) (helm (1 0))) single "melpa" nil ((:keywords "convenience")) nil])
  (dictionary [cl-struct-package-desc dictionary (20140717 2029) "Client for rfc2229 dictionary servers" ((connection (1 10)) (link (1 10))) single "melpa" nil ((:keywords "interface" "dictionary")) nil] [cl-struct-package-desc dictionary (1 10) "No description available." nil single "melpa-stable" nil nil nil])
  (diffscuss-mode [cl-struct-package-desc diffscuss-mode (20141014 1657) "Major mode for diffscuss files." nil single "melpa" nil ((:keywords "tools")) nil])
  (diffview [cl-struct-package-desc diffview (20150928 2211) "View diffs in side-by-side format" nil single "melpa" nil ((:url . "https://github.com/mgalgs/diffview-mode") (:keywords "convenience" "diff")) nil] [cl-struct-package-desc diffview (1 0) "View diffs in side-by-side format" nil single "melpa-stable" nil ((:url . "https://github.com/mgalgs/diffview-mode") (:keywords "convenience" "diff")) nil])
  (digistar-mode [cl-struct-package-desc digistar-mode (20150402 1722) "major mode for Digistar scripts" nil single "melpa" nil ((:keywords "languages")) nil] [cl-struct-package-desc digistar-mode (0 4) "major mode for Digistar scripts" nil single "melpa-stable" nil ((:keywords "languages")) nil])
  (dim-autoload [cl-struct-package-desc dim-autoload (20150815 832) "dim complete autoload cookie lines" nil single "melpa" nil ((:url . "http://github.com/tarsius/dim-autoload") (:keywords "convenience")) nil] [cl-struct-package-desc dim-autoload (1 1 4) "dim complete autoload cookie lines" nil single "melpa-stable" nil ((:url . "http://github.com/tarsius/dim-autoload") (:keywords "convenience")) nil])
  (dionysos [cl-struct-package-desc dionysos (20151013 103) "Dionysos, a music player for Emacs" ((libmpdee (2 1 0)) (alert (1 2)) (s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (cl-lib (0 5))) tar "melpa" nil ((:url . "https://github.com/nlamirault/dionysos") (:keywords "music")) nil] [cl-struct-package-desc dionysos (0 3 0) "Dionysos, a music player for Emacs" ((libmpdee (2 1 0)) (s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0))) tar "melpa-stable" nil ((:url . "https://github.com/nlamirault/dionysos") (:keywords "music")) nil])
  (dired+ [cl-struct-package-desc dired+ (20151110 921) "Extensions to Dired." nil single "melpa" nil ((:url . "http://www.emacswiki.org/dired+.el") (:keywords "unix" "mouse" "directories" "diredp" "dired")) nil])
  (dired-avfs [cl-struct-package-desc dired-avfs (20141203 732) "AVFS support for dired" ((dash (2 5 0)) (dired-hacks-utils (0 0 1))) single "melpa" nil ((:keywords "files")) nil])
  (dired-details+ [cl-struct-package-desc dired-details+ (20150104 1350) "Enhancements to library `dired-details+.el'." ((dired-details (0))) single "melpa" nil ((:url . "http://www.emacswiki.org/dired-details+.el") (:keywords "dired" "frames")) nil])
  (dired-fdclone [cl-struct-package-desc dired-fdclone (20150417 132) "dired functions and settings to mimic FDclone" nil single "melpa" nil ((:url . "https://github.com/knu/dired-fdclone.el") (:keywords "unix" "directories" "dired")) nil] [cl-struct-package-desc dired-fdclone (1 5 2) "dired functions and settings to mimic FDclone" nil single "melpa-stable" nil ((:url . "https://github.com/knu/dired-fdclone.el") (:keywords "unix" "directories" "dired")) nil])
  (dired-filter [cl-struct-package-desc dired-filter (20150909 1136) "Ibuffer-like filtering for dired" ((dash (2 10 0)) (dired-hacks-utils (0 0 1))) single "melpa" nil ((:keywords "files")) nil])
  (dired-hacks-utils [cl-struct-package-desc dired-hacks-utils (20150819 948) "Utilities and helpers for dired-hacks collection" ((dash (2 5 0))) single "melpa" nil ((:keywords "files")) nil])
  (dired-imenu [cl-struct-package-desc dired-imenu (20140109 810) "imenu binding for dired mode" nil single "melpa" nil ((:url . "https://github.com/DamienCassou/dired-imenu") (:keywords "dired" "imenu")) nil] [cl-struct-package-desc dired-imenu (0 5 0) "imenu binding for dired mode" nil single "melpa-stable" nil ((:url . "https://github.com/DamienCassou/dired-imenu") (:keywords "dired" "imenu")) nil])
  (dired-k [cl-struct-package-desc dired-k (20151107 1836) "highlight dired buffer by file size, modified time, git status" ((cl-lib (0 5)) (emacs (24))) tar "melpa" nil ((:url . "https://github.com/syohex/emacs-dired-k")) nil] [cl-struct-package-desc dired-k (0 16) "highlight dired buffer by file size, modified time, git status" ((cl-lib (0 5)) (emacs (24))) tar "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-dired-k")) nil])
  (dired-narrow [cl-struct-package-desc dired-narrow (20150908 1353) "Live-narrowing of search results for dired" ((dash (2 7 0)) (dired-hacks-utils (0 0 1))) single "melpa" nil ((:keywords "files")) nil])
  (dired-open [cl-struct-package-desc dired-open (20150819 948) "Open files from dired using using custom actions" ((dash (2 5 0)) (dired-hacks-utils (0 0 1))) single "melpa" nil ((:keywords "files")) nil])
  (dired-rainbow [cl-struct-package-desc dired-rainbow (20141214 543) "Extended file highlighting according to its type" ((dash (2 5 0)) (dired-hacks-utils (0 0 1))) single "melpa" nil ((:keywords "files")) nil])
  (dired-ranger [cl-struct-package-desc dired-ranger (20150819 948) "Implementation of useful ranger features for dired" ((dash (2 7 0)) (dired-hacks-utils (0 0 1))) single "melpa" nil ((:keywords "files")) nil])
  (dired-sort [cl-struct-package-desc dired-sort (20090208 2038) "Sort files in dired." nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/dired-sort.el") (:keywords "dired" "sort")) nil])
  (dired-sort-menu+ [cl-struct-package-desc dired-sort-menu+ (20150104 1351) "Extensions to `dired-sort-menu.el'" ((dired-sort-menu (0))) single "melpa" nil ((:url . "http://www.emacswiki.org/dired-sort-menu+.el") (:keywords "directories" "diredp" "dired")) nil])
  (dired-sort-menu [cl-struct-package-desc dired-sort-menu (20130824 507) "provide menu/dialogue for dired sort options" nil single "melpa" nil ((:url . "http://centaur.maths.qmw.ac.uk/Emacs/") (:keywords "dired" "sort" "menu" "dialogue")) nil])
  (dired-subtree [cl-struct-package-desc dired-subtree (20150908 1033) "Insert subdirectories in a tree-like fashion" ((dash (2 5 0)) (dired-hacks-utils (0 0 1))) single "melpa" nil ((:keywords "files")) nil])
  (dired-toggle [cl-struct-package-desc dired-toggle (20140907 1349) "provide a simple way to toggle dired buffer for current directory" nil single "melpa" nil ((:url . "https://github.com/fasheng/dired-toggle") (:keywords "dired" "toggle")) nil])
  (dired-toggle-sudo [cl-struct-package-desc dired-toggle-sudo (20151109 206) "Browse directory with sudo privileges." nil single "melpa" nil ((:keywords "emacs" "dired")) nil])
  (direx [cl-struct-package-desc direx (20151023 1606) "Simple Directory Explorer" nil tar "melpa" nil ((:keywords "convenience")) nil] [cl-struct-package-desc direx (1 0 0) "Simple Directory Explorer" nil tar "melpa-stable" nil ((:keywords "convenience")) nil])
  (direx-grep [cl-struct-package-desc direx-grep (20140515 806) "Grep node of direx.el using incremental search like anything.el/helm.el" ((direx (0 1 -3))) single "melpa" nil ((:url . "https://github.com/aki2o/direx-grep") (:keywords "convenience")) nil] [cl-struct-package-desc direx-grep (0 1 0) "Grep node of direx.el using incremental search like anything.el/helm.el" ((direx (0 1 -3))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/direx-grep") (:keywords "convenience")) nil])
  (dirtree [cl-struct-package-desc dirtree (20140129 32) "Directory tree views" ((tree-mode (1 1 1 1)) (windata (0))) single "melpa" nil nil nil])
  (dirtree-prosjekt [cl-struct-package-desc dirtree-prosjekt (20140129 104) "dirtree integration for prosjekt." ((prosjekt (0 3)) (dirtree (0 1))) single "melpa" nil ((:url . "https://github.com/abingham/prosjekt")) nil])
  (disaster [cl-struct-package-desc disaster (20130509 1055) "Disassemble C/C++ code under cursor in Emacs" nil single "melpa" nil ((:url . "https://github.com/jart/disaster") (:keywords "tools")) nil])
  (discover [cl-struct-package-desc discover (20140103 1339) "discover more of Emacs" ((makey (0 3))) single "melpa" nil nil nil] [cl-struct-package-desc discover (0 3) "discover more of Emacs" ((makey (0 3))) single "melpa-stable" nil nil nil])
  (discover-clj-refactor [cl-struct-package-desc discover-clj-refactor (20150328 759) "Adds discover context menu for clj-refactor" ((clj-refactor (0 14 0)) (discover (0 3))) single "melpa" nil ((:keywords "clj-refactor" "discover" "convenience")) nil])
  (discover-js2-refactor [cl-struct-package-desc discover-js2-refactor (20140129 752) "Adds discover context menu for js2-refactor" ((js2-refactor (20131221 501)) (discover (20140103 1339))) single "melpa" nil ((:keywords "js2-refactor" "discover")) nil])
  (discover-my-major [cl-struct-package-desc discover-my-major (20151008 12) "Discover key bindings and their meaning for the current Emacs major mode" ((makey (0 2))) single "melpa" nil ((:url . "https://github.com/steckerhalter/discover-my-major") (:keywords "discover" "help" "major-mode" "keys")) nil] [cl-struct-package-desc discover-my-major (1 0) "Discover key bindings and their meaning for the current Emacs major mode" ((makey (0 2))) single "melpa-stable" nil ((:url . "https://github.com/steckerhalter/discover-my-major") (:keywords "discover" "help" "major-mode" "keys")) nil])
  (disk [cl-struct-package-desc disk (20081128 706) "simplified find-file, revert-file, save-buffer interface" nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/DiskKey") (:keywords "convenience")) nil])
  (display-theme [cl-struct-package-desc display-theme (20140115 756) "display current theme(s) at mode-line" ((emacs (24))) single "melpa" nil ((:url . "https://github.com/kawabata/emacs-display-theme/") (:keywords "tools")) nil])
  (distinguished-theme [cl-struct-package-desc distinguished-theme (20151007 248) "A dark and elegant theme for emacs." nil single "melpa" nil ((:url . "https://github.com/Lokaltog/distinguished-theme")) nil])
  (django-manage [cl-struct-package-desc django-manage (20151024 2330) "Django minor mode for commanding manage.py" ((hydra (0 13 2))) single "melpa" nil ((:keywords "languages")) nil])
  (django-mode [cl-struct-package-desc django-mode (20150207 517) "Major mode for Django web framework." nil tar "melpa" nil ((:keywords "languages")) nil])
  (django-snippets [cl-struct-package-desc django-snippets (20131229 811) "Yasnippets for django" ((yasnippet (0 8 0))) tar "melpa" nil ((:url . "https://github.com/myfreeweb/django-mode")) nil])
  (dkdo [cl-struct-package-desc dkdo (20131110 319) "Do List major mode based on org-mode." ((dkmisc (0 50)) (emacs (24 1))) tar "melpa" nil nil nil])
  (dklrt [cl-struct-package-desc dklrt (20131110 541) "Ledger Recurring Transactions." ((dkmisc (0 50)) (ledger-mode (20130908 1357)) (emacs (24 1))) tar "melpa" nil nil nil])
  (dkmisc [cl-struct-package-desc dkmisc (20131110 315) "Miscellaneous functions required by dk* packages." ((emacs (24 1))) tar "melpa" nil nil nil])
  (docbook-snippets [cl-struct-package-desc docbook-snippets (20150714 925) "Yasnippets for DocBook" ((yasnippet (0 8 0))) tar "melpa" nil ((:url . "https://github.com/jhradilek/emacs-docbook-snippets") (:keywords "snippets" "docbook")) nil])
  (docean [cl-struct-package-desc docean (20150927 1118) "Interact with DigitalOcean from Emacs." ((emacs (24)) (cl-lib (0 5)) (request (0 2 0))) single "melpa" nil ((:url . "https://github.com/emacs-pe/docean.el") (:keywords "convenience")) nil])
  (docker [cl-struct-package-desc docker (20151001 131) "Emacs interface to Docker" ((emacs (24 4)) (dash (1 5 0)) (magit-popup (2 0 50)) (s (1 9 0))) tar "melpa" nil nil nil] [cl-struct-package-desc docker (0 1 0) "Emacs interface to Docker" ((emacs (24 4)) (dash (1 5 0)) (magit-popup (2 0 50)) (s (1 9 0))) tar "melpa-stable" nil nil nil])
  (docker-tramp [cl-struct-package-desc docker-tramp (20150908 1955) "TRAMP integration for docker containers" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/emacs-pe/docker-tramp.el") (:keywords "docker" "convenience")) nil])
  (dockerfile-mode [cl-struct-package-desc dockerfile-mode (20151003 501) "Major mode for editing Docker's Dockerfiles" nil single "melpa" nil nil nil] [cl-struct-package-desc dockerfile-mode (1 2) "Major mode for editing Docker's Dockerfiles" nil single "melpa-stable" nil nil nil])
  (dokuwiki-mode [cl-struct-package-desc dokuwiki-mode (20140130 936) "Major mode for DokuWiki document" nil single "melpa" nil ((:url . "https://github.com/kbkbkbkb1/emacs-dokuwiki") (:keywords "dokuwiki")) nil])
  (dollaro [cl-struct-package-desc dollaro (20130620 1325) "simple text templates" ((s (1 6 0))) single "melpa" nil ((:keywords "tools" "convenience")) nil])
  (dom [cl-struct-package-desc dom (20150414 1610) "DOM implementation and manipulation library" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://www.github.com/toroidal-code/dom.el/") (:keywords "xml" "dom")) nil])
  (doremi [cl-struct-package-desc doremi (20150815 738) "Do Re Mi: Incremental change using arrow keys or mouse wheel." nil single "melpa" nil ((:url . "http://www.emacswiki.org/doremi.el") (:keywords "keys" "cycle" "repeat" "higher-order")) nil])
  (doremi-cmd [cl-struct-package-desc doremi-cmd (20150104 1352) "Miscellaneous Do Re Mi commands" ((doremi (0))) single "melpa" nil ((:url . "http://www.emacswiki.org/doremi-cmd.el") (:keywords "keys" "cycle" "repeat")) nil])
  (doremi-frm [cl-struct-package-desc doremi-frm (20150727 1354) "Incrementally adjust face attributes and frame parameters." ((doremi (0)) (faces+ (0)) (frame-fns (0)) (hexrgb (0))) single "melpa" nil ((:url . "http://www.emacswiki.org/doremi-frm.el") (:keywords "frames" "extensions" "convenience" "keys" "repeat" "cycle")) nil])
  (doremi-mac [cl-struct-package-desc doremi-mac (20150104 1353) "A macro for defining Do Re Mi commands." nil single "melpa" nil ((:url . "http://www.emacswiki.org/doremi-mac.el") (:keywords "extensions" "convenience" "keys" "repeat" "cycle")) nil])
  (dos [cl-struct-package-desc dos (20140808 1435) "Major mode for editing Dos scripts" nil single "melpa" nil ((:keywords "languages")) nil])
  (download-region [cl-struct-package-desc download-region (20150807 32) "Simple in-buffer download manager" ((cl-lib (0 3))) single "melpa" nil ((:url . "http://hins11.yu-yake.com/")) nil])
  (dpaste_de [cl-struct-package-desc dpaste_de (20131015 525) "Emacs mode to paste to dpaste.de" ((web (0 3 7))) single "melpa" nil ((:keywords "pastebin")) nil])
  (dracula-theme [cl-struct-package-desc dracula-theme (20151109 845) "Dracula Theme" ((emacs (24))) single "melpa" nil ((:url . "https://github.com/zenorocha/dracula-theme")) nil] [cl-struct-package-desc dracula-theme (1 2 0) "Dracula Theme" ((emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/zenorocha/dracula-theme")) nil])
  (draft-mode [cl-struct-package-desc draft-mode (20140609 756) "Rough drafting for Emacs." nil single "melpa" nil ((:url . "https://github.com/gaudecker/draft-mode") (:keywords "draft" "drafting")) nil])
  (drill-instructor-AZIK-force [cl-struct-package-desc drill-instructor-AZIK-force (20120907 1817) "Support AZIK input" ((popup (0 5))) tar "melpa" nil nil nil])
  (dropdown-list [cl-struct-package-desc dropdown-list (20120329 936) "Drop-down menu interface" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/dropdown-list.el") (:keywords "menu" "convenience" "dropdown")) nil])
  (dtrace-script-mode [cl-struct-package-desc dtrace-script-mode (20150213 2223) "DTrace code editing commands for Emacs" nil single "melpa" nil nil nil])
  (ducpel [cl-struct-package-desc ducpel (20140418 2216) "Logic game with sokoban elements" ((cl-lib (0 5))) tar "melpa" nil ((:url . "https://github.com/alezost/ducpel") (:keywords "games")) nil] [cl-struct-package-desc ducpel (0 1) "Logic game with sokoban elements" ((cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/alezost/ducpel") (:keywords "games")) nil])
  (dummy-h-mode [cl-struct-package-desc dummy-h-mode (20140816 533) "switch major mode to c-/c++-/objc-mode on .h file" nil single "melpa" nil ((:keywords "c-mode" "c++-mode" "objc-mode")) nil])
  (dummyparens [cl-struct-package-desc dummyparens (20141009 324) "parenthesis auto-pairing and wrapping" nil single "melpa" nil ((:url . "https://github.com/snosov1/dummyparens") (:keywords "dummyparens" "auto-pair" "wrapping")) nil])
  (duplicate-thing [cl-struct-package-desc duplicate-thing (20120515 948) "Duplicate current line & selection" nil single "melpa" nil ((:keywords "command" "duplicate" "line" "selection")) nil])
  (dyalog-mode [cl-struct-package-desc dyalog-mode (20151111 654) "Major mode for editing Dyalog APL source code" ((cl-lib (0 2))) tar "melpa" nil ((:url . "https://bitbucket.org/harsman/dyalog-mode/") (:keywords "languages")) nil] [cl-struct-package-desc dyalog-mode (0 3) "Major mode for editing Dyalog APL source code" nil single "melpa-stable" nil ((:url . "http://bitbucket.org/harsman/dyalog-mode") (:keywords "languages")) nil])
  (dylan-mode [cl-struct-package-desc dylan-mode (20140610 2237) "Major mode for editing Dylan programs." nil tar "melpa" nil nil nil])
  (dynamic-ruler [cl-struct-package-desc dynamic-ruler (20150826 1409) "Displays a dynamic ruler at point." nil single "melpa" nil ((:url . "http://rocher.github.io/dynamic-ruler") (:keywords "ruler" "tools" "convenience")) nil] [cl-struct-package-desc dynamic-ruler (0 1 4) "Displays a dynamic ruler at point." nil single "melpa-stable" nil ((:url . "http://rocher.github.io/dynamic-ruler") (:keywords "ruler" "tools" "convenience")) nil])
  (e2ansi [cl-struct-package-desc e2ansi (20150220 1513) "Syntax highlighting support for `less', powered by Emacs." nil tar "melpa" nil ((:url . "https://github.com/Lindydancer/e2ansi") (:keywords "faces" "languages")) nil])
  (e2wm [cl-struct-package-desc e2wm (20150608 1723) "simple window manager for emacs" ((window-layout (1 2))) tar "melpa" nil ((:keywords "tools" "window manager")) nil] [cl-struct-package-desc e2wm (1 3) "simple window manager for emacs" nil tar "melpa-stable" nil ((:keywords "tools" "window manager")) nil])
  (e2wm-R [cl-struct-package-desc e2wm-R (20130505 2208) "some e2wm plugin and perspective for GNU R" ((e2wm (20130225 1602)) (inlineR (20120520 2332)) (ess (20130225 1754))) single "melpa" nil ((:url . "https://github.com/myuhe/e2wm-R.el") (:keywords "convenience" "e2wm")) nil] [cl-struct-package-desc e2wm-R (0 4) "some e2wm plugin and perspective for GNU R" ((e2wm (1 2))) single "melpa-stable" nil ((:keywords "window manager" "convenience" "e2wm")) nil])
  (e2wm-bookmark [cl-struct-package-desc e2wm-bookmark (20120811 2350) "Bookmark plugin for e2wm.el" ((e2wm (1 2))) single "melpa" nil ((:keywords "convenience")) nil])
  (e2wm-direx [cl-struct-package-desc e2wm-direx (20140815 1613) "Plugin of e2wm.el for direx.el" ((e2wm (1 2)) (direx (0 1 -3))) single "melpa" nil ((:url . "https://github.com/aki2o/e2wm-direx") (:keywords "tools" "window manager" "convenience")) nil] [cl-struct-package-desc e2wm-direx (0 0 5) "Plugin of e2wm.el for direx.el" ((e2wm (1 2)) (direx (0 1 -3))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/e2wm-direx") (:keywords "tools" "window manager" "convenience")) nil])
  (e2wm-pkgex4pl [cl-struct-package-desc e2wm-pkgex4pl (20140525 347) "Plugin of e2wm.el for package explorer of Perl" ((e2wm (1 2)) (plsense-direx (0 2 0))) single "melpa" nil ((:url . "https://github.com/aki2o/e2wm-pkgex4pl") (:keywords "tools" "window manager" "perl")) nil] [cl-struct-package-desc e2wm-pkgex4pl (0 0 1) "Plugin of e2wm.el for package explorer of Perl" ((e2wm (1 2)) (plsense-direx (0 2 0))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/e2wm-pkgex4pl") (:keywords "tools" "window manager" "perl")) nil])
  (e2wm-svg-clock [cl-struct-package-desc e2wm-svg-clock (20150106 506) "e2wm plugin for svg-clock" ((e2wm (20130225 1602)) (svg-clock (0 4))) single "melpa" nil ((:url . "https://github.com/myuhe/e2wm-svg-clock.el") (:keywords "convenience" "e2wm")) nil])
  (e2wm-sww [cl-struct-package-desc e2wm-sww (20140524 158) "Plugin of e2wm.el to switch plugin quickly" ((e2wm (1 2))) single "melpa" nil ((:url . "https://github.com/aki2o/e2wm-sww") (:keywords "tools" "window manager")) nil] [cl-struct-package-desc e2wm-sww (0 0 2) "Plugin of e2wm.el to switch plugin quickly" ((e2wm (1 2))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/e2wm-sww") (:keywords "tools" "window manager")) nil])
  (e2wm-term [cl-struct-package-desc e2wm-term (20141009 608) "Perspective of e2wm.el for work in terminal" ((e2wm (1 2)) (log4e (0 2 0)) (yaxception (0 3 2))) single "melpa" nil ((:url . "https://github.com/aki2o/e2wm-term") (:keywords "tools" "window manager")) nil] [cl-struct-package-desc e2wm-term (0 0 5) "Perspective of e2wm.el for work in terminal" ((e2wm (1 2)) (log4e (0 2 0)) (yaxception (0 3 2))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/e2wm-term") (:keywords "tools" "window manager")) nil])
  (easy-after-load [cl-struct-package-desc easy-after-load (20121224 1849) "eval-after-load for all files in a directory" nil single "melpa" nil ((:url . "https://github.com/pd/easy-after-load")) nil])
  (easy-escape [cl-struct-package-desc easy-escape (20150718 1933) "Improve readability of escape characters in regular expressions" nil single "melpa" nil ((:url . "https://github.com/cpitclaudel/easy-escape") (:keywords "convenience" "lisp" "tools")) nil])
  (easy-kill-extras [cl-struct-package-desc easy-kill-extras (20150708 2318) "Extra functions for easy-kill." ((easy-kill (0 9 4))) tar "melpa" nil ((:url . "https://github.com/knu/easy-kill-extras.el") (:keywords "killing" "convenience")) nil] [cl-struct-package-desc easy-kill-extras (0 9 4) "Extra functions for easy-kill." ((easy-kill (0 9 4))) tar "melpa-stable" nil ((:url . "https://github.com/knu/easy-kill-extras.el") (:keywords "killing" "convenience")) nil])
  (easy-repeat [cl-struct-package-desc easy-repeat (20150516 148) "Repeat easily" ((emacs (24 4))) single "melpa" nil ((:url . "https://github.com/xuchunyang/easy-repeat.el") (:keywords "repeat" "convenience")) nil] [cl-struct-package-desc easy-repeat (0 2) "Repeat easily" ((emacs (24 4))) single "melpa-stable" nil ((:url . "https://github.com/xuchunyang/easy-repeat.el") (:keywords "repeat" "convenience")) nil])
  (ebal [cl-struct-package-desc ebal (20151020 735) "Emacs interface to Cabal and Stack" ((emacs (24 4)) (f (0 18 0)) (ido-completing-read+ (3 6))) single "melpa" nil ((:url . "https://github.com/mrkkrp/ebal") (:keywords "convenience" "cabal" "haskell")) nil] [cl-struct-package-desc ebal (0 1 2) "Emacs interface to Cabal" ((emacs (24 4)) (f (0 18 0)) (ido-completing-read+ (3 6))) single "melpa-stable" nil ((:url . "https://github.com/mrkkrp/ebal") (:keywords "convenience" "cabal" "haskell")) nil])
  (ebib [cl-struct-package-desc ebib (20151108 1318) "a BibTeX database manager" ((dash (2 5 0)) (parsebib (1 0)) (emacs (24 3))) tar "melpa" nil ((:keywords "text" "bibtex")) nil] [cl-struct-package-desc ebib (2 5 2) "a BibTeX database manager" ((dash (2 5 0)) (parsebib (1 0)) (emacs (24 3))) tar "melpa-stable" nil ((:keywords "text" "bibtex")) nil])
  (echo-bell [cl-struct-package-desc echo-bell (20151007 1825) "Show visual bell at right in the echo area." nil single "melpa" nil ((:url . "http://www.emacswiki.org/echo-bell.el") (:keywords "echo area" "bell" "ding")) nil])
  (eclipse-theme [cl-struct-package-desc eclipse-theme (20150929 601) "Theme based on Eclipse circa 2010" nil single "melpa" nil ((:url . "https://github.com/abo-abo/eclipse-theme") (:keywords "themes")) nil])
  (ecukes [cl-struct-package-desc ecukes (20150717 648) "Cucumber for Emacs." ((commander (0 6 1)) (espuds (0 2 2)) (ansi (0 3 0)) (dash (2 2 0)) (s (1 8 0)) (f (0 11 0))) tar "melpa" nil nil nil] [cl-struct-package-desc ecukes (0 6 15) "Cucumber for Emacs." ((commander (0 6 1)) (espuds (0 2 2)) (ansi (0 3 0)) (dash (2 2 0)) (s (1 8 0)) (f (0 11 0))) tar "melpa-stable" nil nil nil])
  (edbi-database-url [cl-struct-package-desc edbi-database-url (20150126 403) "Run edbi with database url" ((emacs (24)) (edbi (0 1 3))) single "melpa" nil ((:url . "https://github.com/proofit404/edbi-database-url")) nil])
  (edbi-django [cl-struct-package-desc edbi-django (20150115 1101) "Run edbi with django settings" ((emacs (24)) (edbi (0 1 3)) (f (0 17 1))) tar "melpa" nil ((:url . "https://github.com/proofit404/edbi-django")) nil])
  (edbi-minor-mode [cl-struct-package-desc edbi-minor-mode (20150421 503) "Use edbi with regular SQL files." ((edbi (0 1 3))) single "melpa" nil ((:url . "https://github.com/proofit404/edbi-minor-mode")) nil])
  (edbi-sqlite [cl-struct-package-desc edbi-sqlite (20150115 1101) "Open sqlite files with edbi" ((emacs (24)) (edbi (0 1 3))) single "melpa" nil ((:url . "https://github.com/proofit404/edbi-sqlite")) nil])
  (ede-compdb [cl-struct-package-desc ede-compdb (20150920 1333) "Support for compilation database projects in EDE" ((ede (1 2)) (semantic (2 2)) (cl-lib (0 4))) single "melpa" nil ((:keywords "development" "ninja" "build" "cedet" "ede")) nil])
  (edit-at-point [cl-struct-package-desc edit-at-point (20150716 624) "edit(copy,cut..) current things(word,symbol..) under cursor" nil single "melpa" nil ((:url . "http://github.com/enoson/edit-at-point.el")) nil])
  (edit-color-stamp [cl-struct-package-desc edit-color-stamp (20130529 1033) "Edit a hex color stamp, using a QT or the internal color picker" ((es-lib (0 2)) (cl-lib (1 0))) tar "melpa" nil ((:url . "https://github.com/sabof/edit-color-stamp")) nil])
  (edit-indirect [cl-struct-package-desc edit-indirect (20141213 1005) "Edit regions in separate buffers" ((emacs (24 3))) single "melpa" nil ((:url . "https://github.com/Fanael/edit-indirect")) nil] [cl-struct-package-desc edit-indirect (0 1 2) "Edit regions in separate buffers" ((emacs (24 3))) single "melpa-stable" nil ((:url . "https://github.com/Fanael/edit-indirect")) nil])
  (edit-server [cl-struct-package-desc edit-server (20141231 1358) "server that responds to edit requests from Chrome" nil single "melpa" nil ((:url . "https://github.com/stsquad/emacs_chrome")) nil] [cl-struct-package-desc edit-server (1 13) "server that responds to edit requests from Chrome" nil single "melpa-stable" nil ((:url . "https://github.com/stsquad/emacs_chrome")) nil])
  (edit-server-htmlize [cl-struct-package-desc edit-server-htmlize (20130329 1548) "(de)HTMLization hooks for edit-server.el" ((edit-server (1 9))) single "melpa" nil ((:url . "https://github.com/frobtech/edit-server-htmlize")) nil])
  (editorconfig-core [cl-struct-package-desc editorconfig-core (20151107 831) "EditorConfig Core library written purely in Emacs Lisp" ((editorconfig-fnmatch (20151023 1021)) (cl-lib (0 5))) tar "melpa" nil ((:url . "https://github.com/10sr/editorconfig-core-emacslisp") (:keywords "utility" "editorconfig")) nil] [cl-struct-package-desc editorconfig-core (0 1 5) "EditorConfig Core library written purely in Emacs Lisp" ((editorconfig-fnmatch (20151023 1021)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/10sr/editorconfig-core-emacslisp") (:keywords "utility" "editorconfig")) nil])
  (editorconfig-fnmatch [cl-struct-package-desc editorconfig-fnmatch (20151027 822) "Glob pattern matching in Emacs lisp" ((cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/10sr/editorconfig-fnmatch-el") (:keywords "utility" "shell" "fnmatch" "glob" "wildcard")) nil] [cl-struct-package-desc editorconfig-fnmatch (0 1 3) "Glob pattern matching in Emacs lisp" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/10sr/editorconfig-fnmatch-el") (:keywords "utility" "shell" "fnmatch" "glob" "wildcard")) nil])
  (edn [cl-struct-package-desc edn (20150929 146) "Support for reading and writing the edn data format from elisp" ((cl-lib (0 3)) (emacs (24 1)) (dash (2 10 0)) (peg (0 6)) (s (1 8 0))) single "melpa" nil ((:url . "https://www.github.com/expez/edn.el") (:keywords "edn" "clojure")) nil] [cl-struct-package-desc edn (1 1 2) "Support for reading and writing the edn data format from elisp" ((cl-lib (0 3)) (emacs (24 1)) (dash (2 10 0)) (peg (0 6)) (s (1 8 0))) single "melpa-stable" nil ((:url . "https://www.github.com/expez/edn.el") (:keywords "edn" "clojure")) nil])
  (edts [cl-struct-package-desc edts (20150830 510) "Erlang Development Tool Suite" ((auto-complete (1 3 1)) (auto-highlight-symbol (1 53)) (dash (1 5 0)) (eproject (1 5)) (erlang (2 4 1)) (f (0 16 0)) (popup (0 4)) (s (1 9 0))) tar "melpa" nil nil nil] [cl-struct-package-desc edts (0 1 0) "No description available." nil tar "melpa-stable" nil nil nil])
  (efire [cl-struct-package-desc efire (20151009 1331) "Use campfire from Emacs" ((circe (1 2))) single "melpa" nil ((:url . "https://github.com/capitaomorte/efire") (:keywords "convenience" "tools")) nil])
  (egg [cl-struct-package-desc egg (20150208 1815) "Emacs Got Git - Emacs interface to Git" nil tar "melpa" nil ((:keywords "git" "version control" "release management")) nil] [cl-struct-package-desc egg (1 0 9) "Emacs Got Git - Emacs interface to Git" nil tar "melpa-stable" nil ((:keywords "git" "version control" "release management")) nil])
  (eide [cl-struct-package-desc eide (20151112 1333) "IDE interface" nil tar "melpa" nil nil nil] [cl-struct-package-desc eide (2 1 0) "IDE interface" nil tar "melpa-stable" nil nil nil])
  (ein [cl-struct-package-desc ein (20150914 1116) "Emacs IPython Notebook" ((websocket (1 5)) (request (0 2))) tar "melpa" nil nil nil] [cl-struct-package-desc ein (0 7 0) "Emacs IPython Notebook" ((websocket (1 5)) (request (0 2))) tar "melpa-stable" nil nil nil])
  (ein-mumamo [cl-struct-package-desc ein-mumamo (20150301 1628) "Multiple major mode support for Emacs IPython Notebook" ((ein (0 4))) single "melpa" nil nil nil])
  (el-get [cl-struct-package-desc el-get (20151104 221) "Manage the external elisp bits and pieces you depend upon" nil tar "melpa" nil ((:url . "http://www.emacswiki.org/emacs/el-get") (:keywords "emacs" "package" "elisp" "install" "elpa" "git" "git-svn" "bzr" "cvs" "svn" "darcs" "hg" "apt-get" "fink" "pacman" "http" "http-tar" "emacswiki")) nil] [cl-struct-package-desc el-get (5 1) "Manage the external elisp bits and pieces you depend upon" nil tar "melpa-stable" nil ((:url . "http://www.emacswiki.org/emacs/el-get") (:keywords "emacs" "package" "elisp" "install" "elpa" "git" "git-svn" "bzr" "cvs" "svn" "darcs" "hg" "apt-get" "fink" "pacman" "http" "http-tar" "emacswiki")) nil])
  (el-init-viewer [cl-struct-package-desc el-init-viewer (20150303 28) "Record viewer for el-init" ((emacs (24)) (cl-lib (0 5)) (ctable (0 1 2)) (dash (2 10 0)) (anaphora (1 0 0)) (el-init (0 1 4))) single "melpa" nil ((:url . "https://github.com/HKey/el-init-viewer")) nil] [cl-struct-package-desc el-init-viewer (0 1 0) "Record viewer for el-init" ((emacs (24)) (cl-lib (0 5)) (ctable (0 1 2)) (dash (2 10 0)) (anaphora (1 0 0)) (el-init (0 1 4))) single "melpa-stable" nil nil nil])
  (el-mock [cl-struct-package-desc el-mock (20150906 321) "Tiny Mock and Stub framework in Emacs Lisp" nil single "melpa" nil ((:url . "http://github.com/rejeep/el-mock.el") (:keywords "lisp" "testing" "unittest")) nil] [cl-struct-package-desc el-mock (1 25 1) "Tiny Mock and Stub framework in Emacs Lisp" nil single "melpa-stable" nil ((:url . "http://github.com/rejeep/el-mock.el") (:keywords "lisp" "testing" "unittest")) nil])
  (el-pocket [cl-struct-package-desc el-pocket (20150202 1528) "Read and write to Pocket (getpocket.com) ;;" ((web (0 5 2)) (emacs (24))) single "melpa" nil ((:url . "http://github.com/pterygota/el-pocket") (:keywords "emacs" "pocket" "bookmarks")) nil])
  (el-spice [cl-struct-package-desc el-spice (20140805 1138) "Extra spice for emacs lisp programming" ((thingatpt+ (0))) tar "melpa" nil ((:url . "https://github.com/vedang/el-spice") (:keywords "languages" "extensions")) nil] [cl-struct-package-desc el-spice (0 2 2) "Extra spice for emacs lisp programming" ((thingatpt+ (0))) tar "melpa-stable" nil ((:url . "https://github.com/vedang/el-spice") (:keywords "configuration")) nil])
  (el-sprunge [cl-struct-package-desc el-sprunge (20140106 1739) "Command line paste server with Emacs highlighting" ((web-server (20140105 2246)) (htmlize (20130207 1202)) (emacs (24 3))) tar "melpa" nil nil nil])
  (el-spy [cl-struct-package-desc el-spy (20131226 1208) "Mocking framework for Emacs lisp. It also support spy, proxy." nil single "melpa" nil ((:url . "https://github.com/uk-ar/el-spy") (:keywords "test")) nil])
  (el2markdown [cl-struct-package-desc el2markdown (20150516 1338) "Convert commentary section of elisp files to markdown." nil single "melpa" nil ((:url . "https://github.com/Lindydancer/el2markdown")) nil])
  (eldoc-extension [cl-struct-package-desc eldoc-extension (20140306 645) "Some extension for eldoc" nil single "melpa" nil ((:keywords "eldoc")) nil])
  (electric-operator [cl-struct-package-desc electric-operator (20151113 29) "Automatically add spaces around operators" ((dash (2 10 0)) (names (20150618 0)) (emacs (24 4))) single "melpa" nil ((:url . "https://github.com/davidshepherd7/electric-operator") (:keywords "electric")) nil] [cl-struct-package-desc electric-operator (0 1) "Automatically add spaces around operators" ((dash (2 10 0)) (names (20150618 0)) (emacs (24 4))) single "melpa-stable" nil ((:url . "https://github.com/davidshepherd7/electric-operator") (:keywords "electric")) nil])
  (elfeed-org [cl-struct-package-desc elfeed-org (20151003 331) "Configure elfeed with one or more org-mode files" ((elfeed (1 1 1)) (org (8 2 7)) (dash (2 10 0)) (s (1 9 0))) single "melpa" nil ((:url . "https://github.com/remyhonig/elfeed-org") (:keywords "news")) nil])
  (elhome [cl-struct-package-desc elhome (20131202 1108) "A framework for a \"home\" Emacs configuration" ((initsplit (20120630))) tar "melpa" nil ((:url . "http://github.com/demyanrogozhin/elhome") (:keywords "lisp")) nil])
  (elisp-sandbox [cl-struct-package-desc elisp-sandbox (20131116 1042) "Evaluate EmacsLisp expressions in a sandbox" nil single "melpa" nil ((:url . "https://github.com/joelmccracken/elisp-sandbox") (:keywords "lisp")) nil])
  (elixir-yasnippets [cl-struct-package-desc elixir-yasnippets (20150417 539) "Yasnippets for Elixir" ((yasnippet (0 8 0))) tar "melpa" nil nil nil] [cl-struct-package-desc elixir-yasnippets (0 0 1) "Yasnippets for Elixir" ((yasnippet (0 8 0))) tar "melpa-stable" nil nil nil])
  (elm-mode [cl-struct-package-desc elm-mode (20151101 36) "Major mode for Elm" ((f (0 17)) (let-alist (1 0 4)) (s (1 7 0)) (emacs (24))) tar "melpa" nil ((:url . "https://github.com/jcollard/elm-mode")) nil])
  (elmacro [cl-struct-package-desc elmacro (20141109 806) "Convert keyboard macros to elisp" ((s (1 9 0)) (dash (1 5 0))) single "melpa" nil ((:url . "https://github.com/Silex/elmacro") (:keywords "macro" "elisp" "convenience")) nil] [cl-struct-package-desc elmacro (0 3 0) "Convert keyboard macros to elisp" ((s (1 9 0)) (dash (1 5 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/Silex/elmacro") (:keywords "macro" "elisp" "convenience")) nil])
  (elmine [cl-struct-package-desc elmine (20130330 1300) "Redmine API access via elisp." nil single "melpa" nil ((:url . "http://github.com/leoc/elmine") (:keywords "tools")) nil] [cl-struct-package-desc elmine (0 3) "No description available." nil single "melpa-stable" nil nil nil])
  (elog [cl-struct-package-desc elog (20151111 1503) "logging library extended from logito" ((eieio (1 3))) single "melpa" nil ((:keywords "lisp" "tool" "log")) nil])
  (elscreen-mew [cl-struct-package-desc elscreen-mew (20140629 816) "ElScreen Add-On for Mew" ((elscreen (20120413 807))) single "melpa" nil ((:url . "https://github.com/masutaka/elscreen-mew")) nil] [cl-struct-package-desc elscreen-mew (1 0 1) "ElScreen Add-On for Mew" ((elscreen (20120413 807))) single "melpa-stable" nil ((:url . "https://github.com/masutaka/elscreen-mew")) nil])
  (elscreen-multi-term [cl-struct-package-desc elscreen-multi-term (20151021 1933) "Multi term for elscreen" ((emacs (24 4)) (elscreen (1 4 6)) (multi-term (1 3))) single "melpa" nil ((:keywords "elscreen" "multi term")) nil])
  (elscreen-persist [cl-struct-package-desc elscreen-persist (20141220 38) "persist the elscreen across sessions" ((elscreen (1 4 6)) (revive (2 19))) single "melpa" nil ((:keywords "elscreen" "frames")) nil] [cl-struct-package-desc elscreen-persist (0 1 1) "persist the elscreen across sessions" ((elscreen (1 4 6)) (revive (2 19))) single "melpa-stable" nil ((:keywords "elscreen" "frames")) nil])
  (elscreen-separate-buffer-list [cl-struct-package-desc elscreen-separate-buffer-list (20150521 2345) "Separate buffer list manager for elscreen" ((emacs (24 4)) (elscreen (1 4 6))) single "melpa" nil ((:keywords "elscreen")) nil])
  (elwm [cl-struct-package-desc elwm (20150817 307) "Minimalistic window manager for emacs" ((dash (1 1 0))) single "melpa" nil ((:url . "https://github.com/Fuco1/elwm") (:keywords "docs")) nil] [cl-struct-package-desc elwm (0 0 2) "Minimalistic window manager for emacs" ((dash (1 1 0))) single "melpa-stable" nil ((:url . "https://github.com/Fuco1/elwm") (:keywords "docs")) nil])
  (elx [cl-struct-package-desc elx (20150101 705) "extract information from Emacs Lisp libraries" ((emacs (24 4))) single "melpa" nil ((:url . "https://github.com/tarsius/elx") (:keywords "docs" "libraries" "packages")) nil] [cl-struct-package-desc elx (0 10 0) "extract information from Emacs Lisp libraries" ((emacs (24 4))) single "melpa-stable" nil ((:url . "https://github.com/tarsius/elx") (:keywords "docs" "libraries" "packages")) nil])
  (emacs-eclim [cl-struct-package-desc emacs-eclim (20150816 220) "An interface to the Eclipse IDE." ((dash (2 11 0)) (json (1 2)) (popup (0 5 2)) (s (1 9 0))) tar "melpa" nil nil nil] [cl-struct-package-desc emacs-eclim (0 3) "An interface to the Eclipse IDE." ((dash (2 11 0)) (json (1 2)) (popup (0 5 2)) (s (1 9 0))) tar "melpa-stable" nil nil nil])
  (emacs-setup [cl-struct-package-desc emacs-setup (20120727 726) "Package for maintaining your emacs configuration. Clean up your .emacs!" nil tar "melpa" nil nil nil] [cl-struct-package-desc emacs-setup (1 0) "Package for maintaining your emacs configuration. Clean up your .emacs!" nil tar "melpa-stable" nil nil nil])
  (emacsagist [cl-struct-package-desc emacsagist (20140331 1130) "Search Packagist.org packages without leaving Emacs" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools")) nil] [cl-struct-package-desc emacsagist (1 0 0) "Search Packagist.org packages without leaving Emacs" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools")) nil])
  (emacsc [cl-struct-package-desc emacsc (20150807 257) "helper for emacsc(1)" nil tar "melpa" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil] [cl-struct-package-desc emacsc (1 2 20131027) "helper for emacsc(1)" nil tar "melpa-stable" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil])
  (emacsql [cl-struct-package-desc emacsql (20151003 1931) "high-level SQL database front-end" ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] [cl-struct-package-desc emacsql (2 0 0) "high-level SQL database front-end" ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) tar "melpa-stable" nil ((:url . "https://github.com/skeeto/emacsql")) nil])
  (emacsql-mysql [cl-struct-package-desc emacsql-mysql (20151004 715) "EmacSQL back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] [cl-struct-package-desc emacsql-mysql (2 0 0) "back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa-stable" nil ((:url . "https://github.com/skeeto/emacsql")) nil])
  (emacsql-psql [cl-struct-package-desc emacsql-psql (20151004 715) "EmacSQL back-end for PostgreSQL via psql and pg" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] [cl-struct-package-desc emacsql-psql (2 0 0) "back-end for PostgreSQL via psql" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa-stable" nil ((:url . "https://github.com/skeeto/emacsql")) nil])
  (emacsql-sqlite [cl-struct-package-desc emacsql-sqlite (20151004 715) "EmacSQL back-end for SQLite" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] [cl-struct-package-desc emacsql-sqlite (2 0 0) "No description available." nil tar "melpa-stable" nil nil nil])
  (emacsshot [cl-struct-package-desc emacsshot (20150516 1433) "Snapshot a frame or window from within Emacs" nil single "melpa" nil ((:url . "https://github.com/marcowahl/emacsshot") (:keywords "convenience")) nil])
  (emagician-fix-spell-memory [cl-struct-package-desc emagician-fix-spell-memory (20141229 1434) "Simple hack into ispell to fix (muscle) memory problems" nil single "melpa" nil ((:keywords "erc" "bitlbee" "bot")) nil])
  (emamux-ruby-test [cl-struct-package-desc emamux-ruby-test (20130812 939) "Ruby test with emamux" ((emamux (0 1)) (projectile (0 9 1))) single "melpa" nil ((:url . "https://github.com/syohex/emamux-ruby-test")) nil])
  (ember-mode [cl-struct-package-desc ember-mode (20151103 221) "Ember navigation mode for emacs" ((cl-lib (0 5))) single "melpa" nil ((:keywords "ember" "ember.js" "emberjs")) nil])
  (ember-yasnippets [cl-struct-package-desc ember-yasnippets (20150501 926) "Snippets for Ember.js development" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "tools" "abbrev" "languages")) nil])
  (emms [cl-struct-package-desc emms (20150810 832) "The Emacs Multimedia System" nil tar "melpa" nil ((:keywords "emms" "mp3" "mpeg" "multimedia")) nil])
  (emms-info-mediainfo [cl-struct-package-desc emms-info-mediainfo (20131223 500) "Info-method for EMMS using medianfo" ((emms (0))) single "melpa" nil ((:keywords "multimedia" "processes")) nil])
  (emms-mode-line-cycle [cl-struct-package-desc emms-mode-line-cycle (20151009 746) "Display the emms mode line as a ticker" ((emacs (24)) (emms (4 0))) single "melpa" nil ((:url . "https://github.com/momomo5717/emms-mode-line-cycle") (:keywords "emms" "mode-line")) nil] [cl-struct-package-desc emms-mode-line-cycle (0 2 4) "Display the emms mode line as a ticker" ((emacs (24)) (emms (4 0))) single "melpa-stable" nil ((:url . "https://github.com/momomo5717/emms-mode-line-cycle") (:keywords "emms" "mode-line")) nil])
  (emms-player-mpv [cl-struct-package-desc emms-player-mpv (20150803 109) "mpv support for EMMS" ((emms (0))) single "melpa" nil ((:url . "https://github.com/dochang/emms-player-mpv/") (:keywords "emms" "mpv")) nil] [cl-struct-package-desc emms-player-mpv (0 0 5) "mpv support for EMMS" ((emms (0))) single "melpa-stable" nil ((:url . "https://github.com/dochang/emms-player-mpv/") (:keywords "emms" "mpv")) nil])
  (emms-player-mpv-jp-radios [cl-struct-package-desc emms-player-mpv-jp-radios (20151113 801) "EMMS players and stream lists of Japan radio stations" ((emacs (24)) (cl-lib (0 5)) (emms (4 0)) (emms-player-simple-mpv (0 1 7))) tar "melpa" nil ((:url . "https://github.com/momomo5717/emms-player-mpv-jp-radios") (:keywords "emms" "mpv" "radio")) nil])
  (emms-player-simple-mpv [cl-struct-package-desc emms-player-simple-mpv (20151020 601) "An extension of emms-player-simple.el for mpv JSON IPC" ((emacs (24)) (cl-lib (0 5)) (emms (4 0))) tar "melpa" nil ((:url . "https://github.com/momomo5717/emms-player-simple-mpv") (:keywords "emms" "mpv")) nil] [cl-struct-package-desc emms-player-simple-mpv (0 3 0) "An extension of emms-player-simple.el for mpv JSON IPC" ((emacs (24)) (cl-lib (0 5)) (emms (4 0))) tar "melpa-stable" nil ((:url . "https://github.com/momomo5717/emms-player-simple-mpv") (:keywords "emms" "mpv")) nil])
  (emms-soundcloud [cl-struct-package-desc emms-soundcloud (20131221 345) "EMMS source for Soundcloud audio sharing platform" ((emms (20131016)) (json (1 2))) single "melpa" nil ((:url . "http://github.com/osener/emms-soundcloud") (:keywords "emms" "soundcloud")) nil])
  (emoji-cheat-sheet-plus [cl-struct-package-desc emoji-cheat-sheet-plus (20150617 631) "emoji-cheat-sheet for emacs" ((emacs (24)) (helm (1 6 4))) tar "melpa" nil ((:url . "https://github.com/syl20bnr/emacs-emoji-cheat-sheet-plus") (:keywords "emacs" "emoji")) nil] [cl-struct-package-desc emoji-cheat-sheet-plus (1 2 1) "emoji-cheat-sheet for emacs" ((emacs (24)) (helm (1 6 4))) tar "melpa-stable" nil ((:url . "https://github.com/syl20bnr/emacs-emoji-cheat-sheet-plus") (:keywords "emacs" "emoji")) nil])
  (emoji-display [cl-struct-package-desc emoji-display (20140117 213) "emoji displaying module" nil single "melpa" nil ((:url . "https://github.com/ikazuhiro/emoji-display") (:keywords "emoji")) nil])
  (emoji-fontset [cl-struct-package-desc emoji-fontset (20151107 2047) "Set font face for Emoji." nil single "melpa" nil ((:keywords "emoji" "font" "config")) nil] [cl-struct-package-desc emoji-fontset (0 1 0) "Set font face for Emoji." nil single "melpa-stable" nil ((:keywords "emoji" "font" "config")) nil])
  (empos [cl-struct-package-desc empos (20151011 1216) "Locate bibtex citations from within emacs" nil single "melpa" nil ((:url . "http://github.com/dimalik/empos/") (:keywords "citations" "reference" "bibtex" "reftex")) nil])
  (emr [cl-struct-package-desc emr (20140817 1604) "Emacs refactoring system." ((s (1 3 1)) (dash (1 2 0)) (cl-lib (0 2)) (popup (0 5 0)) (emacs (24 1)) (list-utils (0 3 0)) (redshank (1 0 0)) (paredit (24 0 0)) (projectile (0 9 1))) tar "melpa" nil ((:keywords "tools" "convenience" "refactoring")) nil])
  (engine-mode [cl-struct-package-desc engine-mode (20150902 1035) "Define and query search engines from within Emacs." nil single "melpa" nil ((:url . "https://github.com/hrs/engine-mode/engine-mode.el")) nil] [cl-struct-package-desc engine-mode (1 0 0) "Define and query search engines from within Emacs." nil single "melpa-stable" nil ((:url . "https://github.com/hrs/engine-mode/engine-mode.el")) nil])
  (enh-ruby-mode [cl-struct-package-desc enh-ruby-mode (20150711 1530) "Major mode for editing Ruby files" nil tar "melpa" nil ((:url . "http://github.com/zenspider/Enhanced-Ruby-Mode") (:keywords "languages elisp" "ruby")) nil])
  (enlive [cl-struct-package-desc enlive (20150824 549) "query html document with css selectors" nil single "melpa" nil ((:url . "http://github.com/zweifisch/enlive") (:keywords "css" "selector" "query")) nil] [cl-struct-package-desc enlive (0 0 1) "query html document with css selectors" nil single "melpa-stable" nil ((:url . "http://github.com/zweifisch/enlive") (:keywords "css" "selector" "query")) nil])
  (eno [cl-struct-package-desc eno (20150722 526) "Goto/copy/cut any word/symbol/line in view, similar to ace-jump/easymotion" ((dash (2 9 0)) (edit-at-point (1 0))) single "melpa" nil ((:url . "http://github.com/enoson/eno.el")) nil])
  (enotify [cl-struct-package-desc enotify (20130407 648) "A networked notification system for emacs" nil tar "melpa" nil nil nil] [cl-struct-package-desc enotify (0 1 3) "No description available." nil tar "melpa-stable" nil nil nil])
  (ensime [cl-struct-package-desc ensime (20151109 1242) "ENhanced Scala Interaction Mode for Emacs" ((scala-mode2 (0 22)) (sbt-mode (0 1)) (yasnippet (0 9 0 1)) (company (0 8 12)) (dash (2 11 0)) (s (1 10 0)) (popup (0 5 3))) tar "melpa" nil ((:url . "https://github.com/ensime/ensime-emacs") (:keywords "languages")) nil])
  (envdir [cl-struct-package-desc envdir (20150519 755) "Modify environment according to files in a specified directory" ((emacs (24)) (dash (2 10 0)) (f (0 17 2))) single "melpa" nil ((:url . "https://github.com/proofit404/envdir-mode")) nil])
  (eopengrok [cl-struct-package-desc eopengrok (20150804 250) "opengrok interface for emacs" ((s (1 9 0)) (dash (2 10 0)) (magit (2 1 0)) (cl-lib (0 5))) single "melpa" nil ((:keywords "tools")) nil])
  (epic [cl-struct-package-desc epic (20150503 37) "Evernote Picker for Cocoa Emacs" ((htmlize (1 47))) single "melpa" nil ((:url . "https://github.com/yoshinari-nomura/epic") (:keywords "evernote" "applescript")) nil])
  (epresent [cl-struct-package-desc epresent (20150324 610) "Simple presentation mode for Emacs Org-mode" nil single "melpa" nil ((:keywords "gui")) nil])
  (eproject [cl-struct-package-desc eproject (20141019 746) "assign files to projects, programatically" ((helm (1 6 4))) tar "melpa" nil ((:keywords "programming" "projects")) nil])
  (erc-colorize [cl-struct-package-desc erc-colorize (20150725 709) "Per user colorization of whole message" nil single "melpa" nil ((:url . "https://github.com/thisirs/erc-colorize.git") (:keywords "erc" "convenience")) nil])
  (erc-crypt [cl-struct-package-desc erc-crypt (20151030 1057) "Symmetric Encryption for ERC" nil single "melpa" nil ((:keywords "application")) nil] [cl-struct-package-desc erc-crypt (1 0) "Symmetric Encryption for ERC" nil single "melpa-stable" nil ((:keywords "application")) nil])
  (erc-image [cl-struct-package-desc erc-image (20150914 314) "Show received image urls in the ERC buffer" nil single "melpa" nil ((:keywords "multimedia")) nil])
  (erc-social-graph [cl-struct-package-desc erc-social-graph (20150508 504) "A social network graph module for ERC." nil single "melpa" nil ((:url . "https://github.com/vibhavp/erc-social-graph") (:keywords "erc" "graph")) nil])
  (erc-terminal-notifier [cl-struct-package-desc erc-terminal-notifier (20140115 224) "OSX notifications via the terminal-notifier gem for Emacs ERC." nil single "melpa" nil ((:url . "http://github.com/julienXX/") (:keywords "erc" "terminal-notifier" "nick")) nil])
  (erc-track-score [cl-struct-package-desc erc-track-score (20130328 515) "Add score support to tracked channel buffers" nil single "melpa" nil ((:url . "http://julien.danjou.info/erc-track-score.html")) nil])
  (erc-tweet [cl-struct-package-desc erc-tweet (20150920 558) "shows text of a tweet when an url is posted in erc buffers" nil single "melpa" nil ((:keywords "extensions")) nil])
  (erc-view-log [cl-struct-package-desc erc-view-log (20140227 1239) "Major mode for viewing ERC logs" nil single "melpa" nil ((:url . "http://github.com/Niluge-KiWi/erc-view-log/raw/master/erc-view-log.el") (:keywords "erc" "viewer" "logs" "colors")) nil])
  (erc-youtube [cl-struct-package-desc erc-youtube (20150603 1436) "Show info about a YouTube URL in an ERC buffer." nil single "melpa" nil ((:keywords "multimedia")) nil] [cl-struct-package-desc erc-youtube (0 -3) "Show received youtube urls in the ERC buffer" ((erc (5 3))) single "melpa-stable" nil ((:keywords "multimedia")) nil])
  (erc-yt [cl-struct-package-desc erc-yt (20150426 549) "An erc module to display youtube links nicely" ((dash (2 10 0))) single "melpa" nil ((:keywords "multimedia")) nil])
  (ert-async [cl-struct-package-desc ert-async (20151011 659) "Async support for ERT" nil single "melpa" nil ((:url . "http://github.com/rejeep/ert-async.el") (:keywords "test")) nil] [cl-struct-package-desc ert-async (0 1 2) "Async support for ERT" nil single "melpa-stable" nil ((:url . "http://github.com/rejeep/ert-async.el") (:keywords "test")) nil])
  (ert-expectations [cl-struct-package-desc ert-expectations (20130824 500) "The simplest unit test framework in the world" nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/ert-expectations.el") (:keywords "test" "unittest" "ert" "expectations")) nil])
  (ert-junit [cl-struct-package-desc ert-junit (20140830 1521) "JUnit XML reports from ert results" ((ert (0))) single "melpa" nil ((:url . "http://bitbucket.org/olanilsson/ert-junit") (:keywords "tools" "test" "unittest" "ert")) nil] [cl-struct-package-desc ert-junit (0 1 1) "JUnit XML reports from ert results" ((ert (0))) single "melpa-stable" nil ((:url . "http://bitbucket.org/olanilsson/ert-junit") (:keywords "tools" "test" "unittest" "ert")) nil])
  (ert-modeline [cl-struct-package-desc ert-modeline (20140115 215) "displays ert test results in the modeline." ((s (1 3 1)) (dash (1 2 0)) (emacs (24 1)) (projectile (0 9 1))) single "melpa" nil ((:keywords "tools" "tests" "convenience")) nil])
  (ert-runner [cl-struct-package-desc ert-runner (20151023 113) "Opinionated Ert testing workflow" ((s (1 6 1)) (dash (1 8 0)) (f (0 10 0)) (commander (0 2 0)) (ansi (0 1 0)) (shut-up (0 1 0))) tar "melpa" nil ((:url . "http://github.com/rejeep/ert-runner.el") (:keywords "test")) nil] [cl-struct-package-desc ert-runner (0 7 0) "Opinionated Ert testing workflow" ((s (1 6 1)) (dash (1 8 0)) (f (0 10 0)) (commander (0 2 0)) (ansi (0 1 0)) (shut-up (0 1 0))) tar "melpa-stable" nil ((:url . "http://github.com/rejeep/ert-runner.el") (:keywords "test")) nil])
  (es-lib [cl-struct-package-desc es-lib (20141111 1030) "A collection of emacs utilities" ((cl-lib (0 3))) tar "melpa" nil ((:url . "https://github.com/sabof/es-lib")) nil] [cl-struct-package-desc es-lib (0 4) "A collection of emacs utilities" ((cl-lib (0 3))) tar "melpa-stable" nil ((:url . "https://github.com/sabof/es-lib")) nil])
  (es-mode [cl-struct-package-desc es-mode (20150916 2033) "A major mode for editing Elasticsearch queries" ((dash (2 11 0))) tar "melpa" nil ((:url . "http://www.github.com/dakrone/es-mode") (:keywords "elasticsearch")) nil] [cl-struct-package-desc es-mode (4 0 0) "A major mode for editing Elasticsearch queries" nil tar "melpa-stable" nil ((:url . "http://www.github.com/dakrone/es-mode") (:keywords "elasticsearch")) nil])
  (escreen [cl-struct-package-desc escreen (20091203 1013) "emacs window session manager" nil single "melpa" nil ((:keywords "extensions")) nil])
  (esh-buf-stack [cl-struct-package-desc esh-buf-stack (20140107 218) "Add a buffer stack feature to Eshell" nil single "melpa" nil ((:keywords "eshell" "extensions")) nil])
  (esh-help [cl-struct-package-desc esh-help (20140107 222) "Add some help functions and support for Eshell" ((dash (1 4 0))) single "melpa" nil ((:url . "https://github.com/tom-tan/esh-help/") (:keywords "eshell" "extensions")) nil])
  (eshell-autojump [cl-struct-package-desc eshell-autojump (20150927 24) "autojump command for Eshell" nil single "melpa" nil ((:url . "http://github.com/coldnew/eshell-autojump")) nil] [cl-struct-package-desc eshell-autojump (0 2) "autojump command for Eshell" nil single "melpa-stable" nil ((:url . "http://github.com/coldnew/eshell-autojump")) nil])
  (eshell-did-you-mean [cl-struct-package-desc eshell-did-you-mean (20150915 1252) "command not found (\"did you mean…\" feature) in Eshell" ((emacs (24 1)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/xuchunyang/eshell-did-you-mean") (:keywords "eshell")) nil])
  (eshell-git-prompt [cl-struct-package-desc eshell-git-prompt (20150928 2247) "Some Eshell prompt for Git users" ((emacs (24 1)) (cl-lib (0 5)) (dash (2 11 0)) (s (1 9 0))) single "melpa" nil ((:url . "https://github.com/xuchunyang/eshell-git-prompt") (:keywords "eshell" "git")) nil])
  (eshell-prompt-extras [cl-struct-package-desc eshell-prompt-extras (20150725 2359) "Display extra information for your eshell prompt." nil single "melpa" nil ((:keywords "eshell" "prompt")) nil])
  (eshell-z [cl-struct-package-desc eshell-z (20151110 2046) "cd to frequent directory in eshell" ((cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/xuchunyang/eshell-z") (:keywords "convenience")) nil] [cl-struct-package-desc eshell-z (0 2 1) "cd to frequent directory in eshell" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/xuchunyang/eshell-z") (:keywords "convenience")) nil])
  (espresso-theme [cl-struct-package-desc espresso-theme (20130228 2348) "Espresso Tutti Colori port for Emacs" nil single "melpa" nil ((:url . "https://github.com/dgutov/espresso-theme")) nil])
  (espuds [cl-struct-package-desc espuds (20150717 834) "Ecukes step definitions" ((s (1 7 0)) (dash (2 2 0)) (f (0 12 1))) single "melpa" nil ((:url . "http://github.com/ecukes/espuds") (:keywords "test")) nil] [cl-struct-package-desc espuds (0 3 2) "Ecukes step definitions" ((s (1 7 0)) (dash (2 2 0)) (f (0 12 1))) single "melpa-stable" nil ((:url . "http://github.com/ecukes/espuds") (:keywords "test")) nil])
  (esqlite [cl-struct-package-desc esqlite (20151106 251) "Manipulate sqlite file from Emacs" ((pcsv (1 3 3))) single "melpa" nil ((:url . "https://github.com/mhayashi1120/Emacs-esqlite") (:keywords "data")) nil])
  (esqlite-helm [cl-struct-package-desc esqlite-helm (20151106 343) "Define helm source for sqlite database" ((esqlite (0 2 0)) (helm (20131207 845))) single "melpa" nil ((:url . "https://github.com/mhayashi1120/Emacs-esqlite") (:keywords "data")) nil])
  (ess-R-data-view [cl-struct-package-desc ess-R-data-view (20130509 458) "Data viewer for GNU R" ((ctable (20130313 1743)) (popup (20130324 1305)) (ess (20130225 1754))) single "melpa" nil ((:url . "https://github.com/myuhe/ess-R-data-view.el") (:keywords "convenience")) nil] [cl-struct-package-desc ess-R-data-view (1 0) "Data viewer for GNU R" ((ctable (20130313 1743)) (popup (20130324 1305)) (ess (20130225 1754))) single "melpa-stable" nil ((:url . "https://github.com/myuhe/ess-R-data-view.el") (:keywords "convenience")) nil])
  (ess-smart-equals [cl-struct-package-desc ess-smart-equals (20150201 2201) "better smart-assignment with =-key in R and S" ((emacs (24)) (ess (5 0))) single "melpa" nil ((:url . "https://github.com/genovese/ess-smart-equals") (:keywords "r" "s" "ess" "convenience")) nil])
  (esup [cl-struct-package-desc esup (20151005 1952) "the Emacs StartUp Profiler (ESUP)" ((cl-lib (0 5)) (emacs (24))) tar "melpa" nil ((:url . "http://github.com/jschaf/esup") (:keywords "convenience" "processes")) nil] [cl-struct-package-desc esup (0 4) "the Emacs StartUp Profiler (ESUP)" nil single "melpa-stable" nil ((:url . "http://github.com/jschaf/esup") (:keywords "emacs-lisp" "elisp" "profile" "startup")) nil])
  (etable [cl-struct-package-desc etable (20150327 1016) "Implementation of javax.swing.JTable for Emacs." ((dash (2 9 0)) (interval-list (0 1)) (emacs (24 4))) tar "melpa" nil nil nil])
  (ethan-wspace [cl-struct-package-desc ethan-wspace (20140709 543) "whitespace customizations for emacs" nil single "melpa" nil ((:keywords "whitespace" "tab" "newline" "trailing" "clean")) nil])
  (eval-in-repl [cl-struct-package-desc eval-in-repl (20150905 1525) "Consistent ESS-like eval interface for various REPLs" ((dash (0 0 0)) (paredit (0 0 0))) tar "melpa" nil ((:url . "https://github.com/kaz-yos/eval-in-repl/")) nil] [cl-struct-package-desc eval-in-repl (0 7 0) "Consistent ESS-like eval interface for various REPLs" ((dash (0 0 0)) (paredit (0 0 0))) tar "melpa-stable" nil ((:url . "https://github.com/kaz-yos/eval-in-repl/")) nil])
  (eval-sexp-fu [cl-struct-package-desc eval-sexp-fu (20131230 1351) "Tiny functionality enhancements for evaluating sexps." ((highlight (0))) single "melpa" nil ((:keywords "lisp" "highlight" "convenience")) nil] [cl-struct-package-desc eval-sexp-fu (0 4 0) "Tiny functionality enhancements for evaluating sexps." nil single "melpa-stable" nil ((:keywords "lisp" "highlight" "convenience")) nil])
  (evil-annoying-arrows [cl-struct-package-desc evil-annoying-arrows (20150509 1418) "Ring the bell if using arrows too much" ((cl-lib (0 5))) single "melpa" nil ((:keywords "learning")) nil])
  (evil-anzu [cl-struct-package-desc evil-anzu (20150124 1609) "anzu for evil-mode" ((evil (1 0 0)) (anzu (0 46))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-evil-anzu")) nil] [cl-struct-package-desc evil-anzu (0 3) "anzu for evil-mode" ((evil (1 0 0)) (anzu (0 46))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-evil-anzu")) nil])
  (evil-args [cl-struct-package-desc evil-args (20140329 1429) "Motions and text objects for delimited arguments in Evil." ((evil (1 0 8))) single "melpa" nil ((:url . "http://github.com/wcsmith/evil-args") (:keywords "evil" "vim-emulation")) nil] [cl-struct-package-desc evil-args (1 0) "Motions and text objects for delimited arguments in Evil." ((evil (1 0 8))) single "melpa-stable" nil ((:url . "http://github.com/wcsmith/evil-args") (:keywords "evil" "vim-emulation")) nil])
  (evil-avy [cl-struct-package-desc evil-avy (20150908 48) "set-based completion" ((emacs (24 1)) (cl-lib (0 5)) (avy (0 3 0)) (evil (1 2 3))) single "melpa" nil ((:url . "https://github.com/louy2/evil-avy") (:keywords "point" "location" "evil" "vim")) nil])
  (evil-cleverparens [cl-struct-package-desc evil-cleverparens (20151022 735) "Evil friendly minor-mode for editing lisp." ((evil (1 0)) (paredit (1)) (smartparens (1 6 1)) (emacs (24 4)) (dash (2 12 0))) tar "melpa" nil ((:url . "https://github.com/luxbock/evil-cleverparens") (:keywords "cleverparens" "parentheses" "evil" "paredit" "smartparens")) nil])
  (evil-commentary [cl-struct-package-desc evil-commentary (20151027 936) "Comment stuff out. A port of vim-commentary." ((evil (1 0 0))) single "melpa" nil ((:url . "http://github.com/linktohack/evil-commentary") (:keywords "evil" "comment" "commentary" "evil-commentary")) nil] [cl-struct-package-desc evil-commentary (1 2 0) "Comment stuff out. A port of vim-commentary." ((evil (1 0 0))) single "melpa-stable" nil ((:url . "http://github.com/linktohack/evil-commentary") (:keywords "evil" "comment" "commentary" "evil-commentary")) nil])
  (evil-dvorak [cl-struct-package-desc evil-dvorak (20151104 526) "evil keybindings for that work with dvorak mode" ((evil (1 0 8)) (helm (0)) (helm-swoop (0)) (ace-jump-mode (2 0)) (evil-surround (0))) tar "melpa" nil ((:keywords "evil" "vim-emulation" "dvorak" "keyboard") (:url . "https://github.com/jbranso/evil-dvorak.git")) nil])
  (evil-easymotion [cl-struct-package-desc evil-easymotion (20151016 2059) "A port of vim's easymotion to emacs" ((emacs (24)) (avy (0 3 0))) single "melpa" nil ((:url . "https://github.com/pythonnut/evil-easymotion.el") (:keywords "convenience" "evil")) nil])
  (evil-exchange [cl-struct-package-desc evil-exchange (20141127 2243) "Exchange text more easily within Evil" ((evil (1 0 7)) (cl-lib (0 3))) single "melpa" nil ((:url . "http://github.com/Dewdrops/evil-exchange") (:keywords "evil" "plugin")) nil])
  (evil-god-state [cl-struct-package-desc evil-god-state (20141116 1855) "use god-mode keybindings in evil-mode" ((evil (1 0 8)) (god-mode (2 12 0))) single "melpa" nil ((:url . "https://github.com/gridaphobe/evil-god-state") (:keywords "evil" "leader" "god-mode")) nil])
  (evil-iedit-state [cl-struct-package-desc evil-iedit-state (20141217 1734) "Evil states to interface iedit mode." ((evil (1 0 9)) (iedit (0 97))) single "melpa" nil ((:url . "https://github.com/syl20bnr/evil-iedit-state") (:keywords "convenience" "editing" "evil" "iedit" "mnemonic")) nil] [cl-struct-package-desc evil-iedit-state (1 0) "Evil states to interface iedit mode." ((evil (1 0 9)) (iedit (0 97))) single "melpa-stable" nil ((:url . "https://github.com/syl20bnr/evil-iedit-state") (:keywords "convenience" "editing" "evil" "iedit" "mnemonic")) nil])
  (evil-indent-plus [cl-struct-package-desc evil-indent-plus (20151109 1106) "Evil textobjects based on indentation" ((evil (0)) (cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/TheBB/evil-indent-plus") (:keywords "convenience" "evil")) nil])
  (evil-jumper [cl-struct-package-desc evil-jumper (20151025 802) "Jump like vimmers do!" ((evil (0)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/bling/evil-jumper") (:keywords "evil" "vim" "jumplist" "jump" "list")) nil] [cl-struct-package-desc evil-jumper (0 2 0) "Jump like vimmers do!" ((evil (0))) single "melpa-stable" nil ((:url . "https://github.com/bling/evil-jumper") (:keywords "evil" "vim" "jumplist" "jump" "list")) nil])
  (evil-lisp-state [cl-struct-package-desc evil-lisp-state (20150328 736) "An evil state to edit Lisp code" ((evil (1 0 9)) (evil-leader (0 4 3)) (smartparens (1 6 1))) single "melpa" nil ((:url . "https://github.com/syl20bnr/evil-lisp-state") (:keywords "convenience" "editing" "evil" "smartparens" "lisp" "mnemonic")) nil] [cl-struct-package-desc evil-lisp-state (7 1) "An evil state to edit Lisp code" ((evil (1 0 9)) (evil-leader (0 4 3)) (smartparens (1 6 1))) single "melpa-stable" nil ((:url . "https://github.com/syl20bnr/evil-lisp-state") (:keywords "convenience" "editing" "evil" "smartparens" "lisp" "mnemonic")) nil])
  (evil-magit [cl-struct-package-desc evil-magit (20151112 935) "evil-based key bindings for magit" ((evil (1 2 3)) (magit (2 2 2))) single "melpa" nil ((:url . "https://github.com/justbur/evil-magit")) nil])
  (evil-mark-replace [cl-struct-package-desc evil-mark-replace (20150424 18) "replace the thing in marked area" ((evil (1 0 8))) single "melpa" nil ((:url . "http://github.com/redguardtoo/evil-mark-replace") (:keywords "mark" "replace" "evil")) nil] [cl-struct-package-desc evil-mark-replace (0 0 4) "replace the thing in marked area" ((evil (1 0 8))) single "melpa-stable" nil ((:url . "http://github.com/redguardtoo/evil-mark-replace") (:keywords "mark" "replace" "evil")) nil])
  (evil-mc [cl-struct-package-desc evil-mc (20151111 2145) "Multiple cursors for evil-mode" ((emacs (24 3)) (evil (1 2 5)) (cl-lib (0 5))) tar "melpa" nil ((:url . "https://github.com/gabesoft/evil-mc") (:keywords "evil" "editing" "multiple-cursors" "vim" "evil-multiple-cursors" "evil-mc" "evil-mc")) nil])
  (evil-org [cl-struct-package-desc evil-org (20150513 1610) "evil keybindings for org-mode" ((evil (0)) (org (0))) single "melpa" nil ((:url . "https://github.com/edwtjo/evil-org-mode.git") (:keywords "evil" "vim-emulation" "org-mode" "key-bindings" "presets")) nil] [cl-struct-package-desc evil-org (0 1 1) "evil keybindings for org-mode" ((evil (0)) (org (0))) single "melpa-stable" nil ((:url . "https://github.com/edwtjo/evil-org-mode.git") (:keywords "evil" "vim-emulation" "org-mode" "key-bindings" "presets")) nil])
  (evil-quickscope [cl-struct-package-desc evil-quickscope (20150929 1248) "Highlight unique characters in words for f,F,t,T navigation" ((evil (0))) single "melpa" nil ((:url . "http://github.com/blorbx/evil-quickscope") (:keywords "faces" "emulation" "vim" "evil")) nil] [cl-struct-package-desc evil-quickscope (0 1 3) "Highlight unique characters in words for f,F,t,T navigation" ((evil (0))) single "melpa-stable" nil ((:url . "http://github.com/blorbx/evil-quickscope") (:keywords "faces" "emulation" "vim" "evil")) nil])
  (evil-rails [cl-struct-package-desc evil-rails (20150803 446) "Rails support for Evil Mode" ((evil (1 0)) (projectile-rails (1 0))) single "melpa" nil ((:url . "https://github.com/antono/evil-rails") (:keywords "ruby" "rails" "vim" "project" "convenience" "web" "evil" "projectile")) nil])
  (evil-rsi [cl-struct-package-desc evil-rsi (20151027 1519) "Use emacs motion keys in evil, inspired by vim-rsi" ((evil (1 0 0))) single "melpa" nil ((:url . "http://github.com/linktohack/evil-rsi") (:keywords "evil" "rsi" "evil-rsi")) nil] [cl-struct-package-desc evil-rsi (1 1 1) "Use emacs motion keys in evil, inspired by vim-rsi" ((evil (1 0 0))) single "melpa-stable" nil ((:url . "http://github.com/linktohack/evil-rsi") (:keywords "evil" "rsi" "evil-rsi")) nil])
  (evil-search-highlight-persist [cl-struct-package-desc evil-search-highlight-persist (20150815 1442) "Persistent highlights after search" ((highlight (0))) single "melpa" nil nil nil] [cl-struct-package-desc evil-search-highlight-persist (1 6) "Persistent highlights after search" ((highlight (0))) single "melpa-stable" nil nil nil])
  (evil-smartparens [cl-struct-package-desc evil-smartparens (20150913 58) "Evil support for smartparens" ((evil (1 0)) (cl-lib (0 3)) (emacs (24 4)) (smartparens (1 6 3))) single "melpa" nil ((:url . "https://www.github.com/expez/evil-smartparens") (:keywords "evil" "smartparens")) nil] [cl-struct-package-desc evil-smartparens (0 3 0) "Evil support for smartparens" ((evil (1 0)) (cl-lib (0 3)) (emacs (24 4)) (smartparens (1 6 3))) single "melpa-stable" nil ((:url . "https://www.github.com/expez/evil-smartparens") (:keywords "evil" "smartparens")) nil])
  (evil-snipe [cl-struct-package-desc evil-snipe (20151106 1402) "emulate vim-sneak & vim-seek" ((evil (1 1 3))) single "melpa" nil ((:url . "https://github.com/hlissner/evil-snipe") (:keywords "emulation" "vim" "evil" "sneak" "seek")) nil] [cl-struct-package-desc evil-snipe (1 0) "emulate vim-sneak & vim-seek" nil single "melpa-stable" nil ((:url . "https://github.com/hlissner/evil-snipe") (:keywords "emulation" "vim" "evil" "sneak" "seek")) nil])
  (evil-space [cl-struct-package-desc evil-space (20150617 534) "Repeat motion in Evil. Correct the behaviour of what SPC should do." ((evil (1 0 0))) single "melpa" nil ((:url . "http://github.com/linktohack/evil-space") (:keywords "space" "repeat" "motion")) nil] [cl-struct-package-desc evil-space (0 0 6) "Repeat motion in Evil. Correct the behaviour of what SPC should do." ((evil (1 0 0))) single "melpa-stable" nil ((:url . "http://github.com/linktohack/evil-space") (:keywords "space" "repeat" "motion")) nil])
  (evil-surround [cl-struct-package-desc evil-surround (20150605 2306) "emulate surround.vim from Vim" nil single "melpa" nil ((:keywords "emulation" "vi" "evil mailing list: <implementations-list at lists.ourproject.org> subscribe: http://tinyurl.com/implementations-list newsgroup: nntp://news.gmane.org/gmane.emacs.vim-emulation archives: http://dir.gmane.org/gmane.emacs.vim-emulation")) nil])
  (evil-tabs [cl-struct-package-desc evil-tabs (20150127 1346) "Integrating Vim-style tabs for Evil mode users." ((evil (0 0 0)) (elscreen (0 0 0))) single "melpa" nil ((:url . "https://github.com/krisajenkins/evil-tabs") (:keywords "evil" "tab" "tabs" "vim")) nil])
  (evil-terminal-cursor-changer [cl-struct-package-desc evil-terminal-cursor-changer (20150827 1951) "Change cursor shape and color by evil state in terminal" ((evil (1 0 8))) single "melpa" nil ((:url . "https://github.com/7696122/evil-terminal-cursor-changer") (:keywords "evil" "terminal" "cursor")) nil])
  (evil-textobj-anyblock [cl-struct-package-desc evil-textobj-anyblock (20151017 1417) "Textobject for the closest user-defined blocks." ((cl-lib (0 5)) (evil (1 1 0))) single "melpa" nil ((:url . "https://github.com/noctuid/evil-textobj-anyblock") (:keywords "evil")) nil] [cl-struct-package-desc evil-textobj-anyblock (0 1) "Textobject for the closest user-defined blocks." ((cl-lib (0 5)) (evil (1 1 0))) single "melpa-stable" nil ((:url . "https://github.com/noctuid/evil-textobj-anyblock") (:keywords "evil")) nil])
  (evil-tutor [cl-struct-package-desc evil-tutor (20150102 2250) "Vimtutor adapted to Evil and wrapped in a major-mode" ((evil (1 0 9))) tar "melpa" nil ((:url . "https://github.com/syl20bnr/evil-tutor") (:keywords "convenience" "editing" "evil")) nil] [cl-struct-package-desc evil-tutor (1 0) "Vimtutor adapted to Evil and wrapped in a major-mode" ((evil (1 0 9))) tar "melpa-stable" nil ((:url . "https://github.com/syl20bnr/evil-tutor") (:keywords "convenience" "editing" "evil")) nil])
  (evil-vimish-fold [cl-struct-package-desc evil-vimish-fold (20151006 2126) "Integrate vimish-fold with evil" ((emacs (24 4)) (evil (1 0 0)) (vimish-fold (0 2 0))) single "melpa" nil ((:url . "https://github.com/alexmurray/evil-vimish-fold")) nil])
  (evil-visual-mark-mode [cl-struct-package-desc evil-visual-mark-mode (20150202 1000) "Display evil marks on buffer" ((evil (1 0 9)) (dash (2 10))) single "melpa" nil ((:keywords "evil")) nil] [cl-struct-package-desc evil-visual-mark-mode (0 0 3) "Display evil marks on buffer" ((evil (1 0 9)) (dash (2 10))) single "melpa-stable" nil ((:keywords "evil")) nil])
  (evil-visualstar [cl-struct-package-desc evil-visualstar (20150514 1410) "Starts a * or # search from the visual selection" ((evil (0))) single "melpa" nil ((:url . "https://github.com/bling/evil-visualstar") (:keywords "evil" "vim" "visualstar")) nil] [cl-struct-package-desc evil-visualstar (0 1 0) "Starts a * or # search from the visual selection" ((evil (0))) single "melpa-stable" nil ((:url . "https://github.com/bling/evil-visualstar") (:keywords "evil" "vim" "visualstar")) nil])
  (evm [cl-struct-package-desc evm (20141007 456) "Emacs Version Manager" ((dash (2 3 0)) (f (0 13 0))) single "melpa" nil ((:url . "http://github.com/rejeep/evm")) nil] [cl-struct-package-desc evm (0 4 2) "Emacs Version Manager" ((dash (2 3 0)) (f (0 13 0))) single "melpa-stable" nil ((:url . "http://github.com/rejeep/evm")) nil])
  (ewmctrl [cl-struct-package-desc ewmctrl (20150630 138) "Use `wmctrl' to manage desktop windows." nil single "melpa" nil ((:url . "https://github.com/flexibeast/ewmctrl") (:keywords "desktop" "windows")) nil])
  (eww-lnum [cl-struct-package-desc eww-lnum (20150102 712) "Conkeror-like functionality for eww" nil single "melpa" nil ((:url . "https://github.com/m00natic/eww-lnum") (:keywords "eww" "browse" "conkeror")) nil] [cl-struct-package-desc eww-lnum (1 1) "Conkeror-like functionality for eww" nil single "melpa-stable" nil ((:url . "https://github.com/m00natic/eww-lnum") (:keywords "eww" "browse" "conkeror")) nil])
  (expand-line [cl-struct-package-desc expand-line (20151005 1907) "Expand selection by line" nil single "melpa" nil nil nil])
  (eyedropper [cl-struct-package-desc eyedropper (20150509 1345) "Pick foreground and background colors at cursor or pointer." ((hexrgb (0))) single "melpa" nil ((:url . "http://www.emacswiki.org/eyedropper.el") (:keywords "color" "rgb" "hsv" "hexadecimal" "face" "frame")) nil])
  (eyuml [cl-struct-package-desc eyuml (20141028 1527) "Write textual uml diagram from emacs using yuml.me" ((request (0 2 0)) (s (1 8 0))) single "melpa" nil ((:url . "http://github.com/antham/eyuml") (:keywords "uml")) nil])
  (ez-query-replace [cl-struct-package-desc ez-query-replace (20140810 517) "a smarter context-sensitive query-replace that can be reapplied" ((dash (1 2 0))) single "melpa" nil nil nil])
  (fabric [cl-struct-package-desc fabric (20141024 322) "Launch Fabric using Emacs" nil tar "melpa" nil ((:url . "https://github.com/nlamirault/fabric.el") (:keywords "python" "fabric")) nil] [cl-struct-package-desc fabric (0 2 0) "Launch Fabric using Emacs" nil tar "melpa-stable" nil ((:url . "https://github.com/nlamirault/fabric.el") (:keywords "python" "fabric")) nil])
  (face-remap+ [cl-struct-package-desc face-remap+ (20150104 1358) "Extensions to standard library `face-remap.el'." nil single "melpa" nil ((:url . "http://www.emacswiki.org/face-remap+.el") (:keywords "window" "frame" "face" "font")) nil])
  (facemenu+ [cl-struct-package-desc facemenu+ (20150816 1953) "Extensions to `facemenu.el'." nil single "melpa" nil ((:url . "http://www.emacswiki.org/facemenu+.el") (:keywords "faces" "extensions" "convenience" "menus" "local")) nil])
  (faces+ [cl-struct-package-desc faces+ (20150104 1400) "Extensions to `faces.el'." nil single "melpa" nil ((:url . "http://www.emacswiki.org/faces+.el") (:keywords "faces" "local")) nil])
  (faceup [cl-struct-package-desc faceup (20150215 1348) "Regression test system for font-lock" nil single "melpa" nil ((:url . "https://github.com/Lindydancer/faceup") (:keywords "faces" "languages")) nil])
  (factlog [cl-struct-package-desc factlog (20130209 1740) "File activity logger" ((deferred (0 3 1))) single "melpa" nil ((:url . "https://github.com/tkf/factlog")) nil] [cl-struct-package-desc factlog (0 0 1) "File activity logger" nil single "melpa-stable" nil nil nil])
  (faff-theme [cl-struct-package-desc faff-theme (20151027 517) "Light Emacs color theme on ivory3 background" nil single "melpa" nil ((:url . "https://github.com/WJCFerguson/emacs-faff-theme") (:keywords "color" "theme")) nil])
  (fakespace [cl-struct-package-desc fakespace (20120817 1706) "fake namespaces with defpackage" nil single "melpa" nil ((:url . "https://github.com/skeeto/elisp-fakespace")) nil])
  (fancy-narrow [cl-struct-package-desc fancy-narrow (20151021 333) "narrow-to-region with more eye candy." nil single "melpa" nil ((:url . "http://github.com/Bruce-Connor/fancy-narrow") (:keywords "faces" "convenience")) nil] [cl-struct-package-desc fancy-narrow (0 9 4) "narrow-to-region with more eye candy." nil single "melpa-stable" nil ((:url . "http://github.com/Bruce-Connor/fancy-narrow-region") (:keywords "faces" "convenience")) nil])
  (farmhouse-theme [cl-struct-package-desc farmhouse-theme (20150506 2127) "Farmhouse Theme, Emacs edition" nil tar "melpa" nil ((:keywords "color" "theme") (:url . "https://github.com/mattly/emacs-farmhouse-theme")) nil])
  (fasd [cl-struct-package-desc fasd (20150309 1113) "Emacs integration for the command-line productivity booster `fasd'" ((grizzl (0))) single "melpa" nil ((:url . "https://github.com/steckerhalter/emacs-fasd") (:keywords "cli" "bash" "zsh" "autojump")) nil])
  (fcitx [cl-struct-package-desc fcitx (20151103 701) "Make fcitx better in Emacs" nil single "melpa" nil ((:url . "https://github.com/cute-jumper/fcitx.el") (:keywords "extensions")) nil] [cl-struct-package-desc fcitx (0 2) "Make fcitx better in Emacs" nil single "melpa-stable" nil ((:url . "https://github.com/cute-jumper/fcitx.el") (:keywords "extensions")) nil])
  (fcopy [cl-struct-package-desc fcopy (20150304 603) "Funny Copy, set past point HERE then search copy text" nil single "melpa" nil ((:url . "https://github.com/ataka/fcopy") (:keywords "convenience")) nil])
  (fetch [cl-struct-package-desc fetch (20131130 2330) "Fetch and unpack resources" nil single "melpa" nil ((:url . "https://github.com/crshd/fetch.el")) nil])
  (fic-mode [cl-struct-package-desc fic-mode (20140421 922) "Show FIXME/TODO/BUG/KLUDGE in special face only in comments and strings" nil single "melpa" nil nil nil])
  (figlet [cl-struct-package-desc figlet (20141104 837) "Annoy people with big, ascii art text" nil single "melpa" nil nil nil])
  (files+ [cl-struct-package-desc files+ (20150104 1401) "Enhancements of standard library `files.el'." nil single "melpa" nil ((:url . "http://www.emacswiki.org/files+.el") (:keywords "internal" "extensions" "local")) nil])
  (filesets+ [cl-struct-package-desc filesets+ (20150104 1402) "Extensions to `filesets.el'." nil single "melpa" nil ((:url . "http://www.emacswiki.org/filesets+.el")) nil])
  (fillcode [cl-struct-package-desc fillcode (20150812 941) "Fill (wrap) function calls and expressions in source code" nil single "melpa" nil ((:url . "https://snarfed.org/fillcode")) nil])
  (find-by-pinyin-dired [cl-struct-package-desc find-by-pinyin-dired (20150202 216) "Find file by first Pinyin characters of Chinese Hanzi" nil tar "melpa" nil nil nil] [cl-struct-package-desc find-by-pinyin-dired (0 0 2) "Find file by first Pinyin characters of Chinese Hanzi" nil tar "melpa-stable" nil nil nil])
  (find-dired+ [cl-struct-package-desc find-dired+ (20150829 2155) "Extensions to `find-dired.el'." nil single "melpa" nil ((:url . "http://www.emacswiki.org/find-dired+.el") (:keywords "internal" "unix" "tools" "matching" "local")) nil])
  (find-temp-file [cl-struct-package-desc find-temp-file (20150101 601) "Open quickly a temporary file" nil single "melpa" nil ((:url . "https://github.com/thisirs/find-temp-file.git") (:keywords "convenience")) nil])
  (finder+ [cl-struct-package-desc finder+ (20150104 1404) "Extensions to standard library finder.el" nil single "melpa" nil ((:url . "http://www.emacswiki.org/finder+.el") (:keywords "help")) nil])
  (fingers [cl-struct-package-desc fingers (20150809 1716) "Modal editing with universal text manipulation helpers." nil tar "melpa" nil ((:url . "http://github.com/fgeller/fingers.el") (:keywords "fingers" "modal" "editing" "workman")) nil])
  (firebelly-theme [cl-struct-package-desc firebelly-theme (20140410 155) "a subdued, dark theme with pastelish colors." ((cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/startling/firebelly")) nil])
  (firecode-theme [cl-struct-package-desc firecode-theme (20141115 2302) "an Emacs 24 theme based on FireCode (tmTheme)" ((emacs (24 0))) single "melpa" nil ((:url . "https://github.com/emacsfodder/tmtheme-to-deftheme")) nil])
  (fish-mode [cl-struct-package-desc fish-mode (20151105 134) "Major mode for fish shell scripts" ((emacs (24))) single "melpa" nil ((:keywords "fish" "shell")) nil] [cl-struct-package-desc fish-mode (0 1 1) "Major mode for fish shell scripts" ((emacs (24))) single "melpa-stable" nil ((:keywords "fish" "shell")) nil])
  (fix-word [cl-struct-package-desc fix-word (20150716 602) "Convenient word transformation" ((emacs (24 1)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/mrkkrp/fix-word") (:keywords "word" "convenience")) nil] [cl-struct-package-desc fix-word (0 1 1) "Convenient word transformation" ((emacs (24 1)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/mrkkrp/fix-word") (:keywords "word" "convenience")) nil])
  (flappymacs [cl-struct-package-desc flappymacs (20140715 901) "flappybird clone for emacs" nil single "melpa" nil ((:url . "https://github.com/taksatou/flappymacs") (:keywords "games")) nil])
  (flash-region [cl-struct-package-desc flash-region (20130923 1117) "Flash a region" nil single "melpa" nil ((:keywords "utility")) nil])
  (flatland-black-theme [cl-struct-package-desc flatland-black-theme (20141115 2230) "an Emacs 24 theme based on Flatland Black (tmTheme)" ((emacs (24 0))) single "melpa" nil ((:url . "https://github.com/emacsfodder/flatland-black-theme")) nil])
  (flatui-theme [cl-struct-package-desc flatui-theme (20150531 143) "A color theme for Emacs based on flatuicolors.com" nil single "melpa" nil ((:url . "https://github.com/john2x/flatui-theme.el")) nil])
  (flex-isearch [cl-struct-package-desc flex-isearch (20130508 1503) "Flex matching (like ido) in isearch." nil single "melpa" nil ((:url . "https://bitbucket.org/jpkotta/flex-isearch") (:keywords "convenience" "search")) nil])
  (flim [cl-struct-package-desc flim (20150730 629) "A library to provide basic features about message representation or encoding." ((apel (10 8))) tar "melpa" nil nil nil])
  (fliptext [cl-struct-package-desc fliptext (20131113 1818) "Input method for flipping characters upside down" nil single "melpa" nil ((:keywords "games" "i18n")) nil])
  (floobits [cl-struct-package-desc floobits (20151016 1636) "Floobits plugin for real-time collaborative editing" ((json (1 2)) (highlight (0))) tar "melpa" nil ((:url . "http://github.com/Floobits/floobits-emacs") (:keywords "comm" "tools")) nil] [cl-struct-package-desc floobits (1 6 1) "Floobits plugin for real-time collaborative editing" ((json (1 2)) (highlight (0))) tar "melpa-stable" nil ((:url . "http://github.com/Floobits/floobits-emacs") (:keywords "comm" "tools")) nil])
  (flx-isearch [cl-struct-package-desc flx-isearch (20151016 2059) "Fuzzy incremental searching for emacs" ((emacs (24)) (flx (20140821)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/pythonnut/flx-isearch") (:keywords "convenience" "search" "flx")) nil])
  (flycheck-ats2 [cl-struct-package-desc flycheck-ats2 (20150628 1845) "Flycheck: ATS2 support" ((emacs (24 1)) (flycheck (0 22))) single "melpa" nil ((:url . "http://github.com/drvink/flycheck-ats2") (:keywords "convenience" "tools" "languages")) nil])
  (flycheck-clangcheck [cl-struct-package-desc flycheck-clangcheck (20150712 10) "A Flycheck checker difinition for ClangCheck." ((cl-lib (0 5)) (seq (1 7)) (flycheck (0 17))) single "melpa" nil ((:url . "https://github.com/kumar8600/flycheck-clangcheck")) nil])
  (flycheck-clojure [cl-struct-package-desc flycheck-clojure (20150831 631) "Flycheck: Clojure support" ((cider (0 8 1)) (flycheck (0 22 -3 1)) (let-alist (1 0 1)) (emacs (24))) single "melpa" nil ((:url . "https://github.com/clojure-emacs/squiggly-clojure")) nil] [cl-struct-package-desc flycheck-clojure (0 1 3) "Flycheck: Clojure support" ((cider (0 8 1)) (flycheck (0 22 -3 1)) (let-alist (1 0 1)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/clojure-emacs/squiggly-clojure")) nil])
  (flycheck-d-unittest [cl-struct-package-desc flycheck-d-unittest (20150708 2309) "Add D unittest support to flycheck" ((flycheck (0 21 -3 1)) (dash (1 4 0))) single "melpa" nil ((:url . "https://github.com/tom-tan/flycheck-d-unittest/") (:keywords "flycheck" "d")) nil])
  (flycheck-dedukti [cl-struct-package-desc flycheck-dedukti (20150106 651) "Flycheck integration of Dedukti" ((flycheck (0 19)) (dedukti-mode (0 1))) single "melpa" nil nil nil])
  (flycheck-dialyzer [cl-struct-package-desc flycheck-dialyzer (20151023 2237) "Support dialyzer in flycheck" ((flycheck (0 18))) single "melpa" nil nil nil])
  (flycheck-dmd-dub [cl-struct-package-desc flycheck-dmd-dub (20151019 622) "Sets flycheck-dmd-include-paths from dub package information" ((flycheck (0 24))) single "melpa" nil ((:url . "http://github.com/atilaneves/flycheck-dmd-dub") (:keywords "languages")) nil] [cl-struct-package-desc flycheck-dmd-dub (0 9) "Sets flycheck-dmd-include-paths from dub package information" ((flycheck (0 24))) single "melpa-stable" nil ((:url . "http://github.com/atilaneves/flycheck-dmd-dub") (:keywords "languages")) nil])
  (flycheck-elm [cl-struct-package-desc flycheck-elm (20150928 503) "Flycheck support for the elm language" ((flycheck (0 24)) (emacs (24 4))) single "melpa" nil ((:url . "https://github.com/bsermons/flycheck-elm")) nil])
  (flycheck-flow [cl-struct-package-desc flycheck-flow (20151027 1516) "Support Flow in flycheck" ((flycheck (0 18))) single "melpa" nil nil nil])
  (flycheck-ghcmod [cl-struct-package-desc flycheck-ghcmod (20150113 2232) "A flycheck checker for Haskell using ghcmod" ((flycheck (0 21 -3 1)) (dash (2 0))) single "melpa" nil ((:url . "https://github.com/scturtle/flycheck-ghcmod") (:keywords "convenience" "languages" "tools")) nil])
  (flycheck-google-cpplint [cl-struct-package-desc flycheck-google-cpplint (20140806 925) "Help to comply with the Google C++ Style Guide" ((flycheck (0 20 -3 1))) single "melpa" nil ((:url . "https://github.com/flycheck/flycheck-google-cpplint/") (:keywords "flycheck" "c" "c++")) nil])
  (flycheck-irony [cl-struct-package-desc flycheck-irony (20150728 1231) "Flycheck: C/C++ support via Irony" ((emacs (24 1)) (flycheck (0 22)) (irony (0 2 0 -3 4))) single "melpa" nil ((:url . "https://github.com/Sarcasm/flycheck-irony/") (:keywords "convenience" "tools" "c")) nil])
  (flycheck-mercury [cl-struct-package-desc flycheck-mercury (20150715 549) "Mercury support in Flycheck" ((flycheck (0 22)) (s (1 9 0)) (dash (2 4 0))) single "melpa" nil ((:url . "https://github.com/flycheck/flycheck-mercury") (:keywords "convenience" "languages" "tools")) nil])
  (flycheck-mypy [cl-struct-package-desc flycheck-mypy (20150915 133) "Support mypy in flycheck" ((flycheck (0 18))) single "melpa" nil nil nil])
  (flycheck-nim [cl-struct-package-desc flycheck-nim (20150911 1647) "Defines a flycheck syntax checker for nim" ((dash (2 4 0)) (flycheck (0 20))) single "melpa" nil ((:url . "https://github.com/ALSchwalm/flycheck-nim")) nil])
  (flycheck-package [cl-struct-package-desc flycheck-package (20151029 1138) "A Flycheck checker for elisp package authors" ((cl-lib (0 5)) (flycheck (0 22)) (emacs (24))) single "melpa" nil ((:keywords "lisp")) nil] [cl-struct-package-desc flycheck-package (0 8) "A Flycheck checker for elisp package authors" ((cl-lib (0 5)) (flycheck (0 22)) (emacs (24))) single "melpa-stable" nil ((:keywords "lisp")) nil])
  (flycheck-perl6 [cl-struct-package-desc flycheck-perl6 (20150414 1832) "Perl 6 support in Flycheck" ((emacs (24 3)) (flycheck (0 22))) single "melpa" nil ((:url . "https://github.com/hinrik/flycheck-perl6") (:keywords "tools" "convenience")) nil])
  (flycheck-pos-tip [cl-struct-package-desc flycheck-pos-tip (20151111 1027) "Flycheck errors display in tooltip" ((dash (2 12)) (flycheck (0 22)) (pos-tip (0 4 6))) single "melpa" nil ((:url . "https://github.com/flycheck/flycheck-pos-tip") (:keywords "tools" "convenience")) nil])
  (flycheck-processing [cl-struct-package-desc flycheck-processing (20151015 431) "Flycheck checker for processing-mode" ((processing-mode (1 3 0)) (flycheck (0 22))) single "melpa" nil ((:keywords "extensions")) nil])
  (flycheck-protobuf [cl-struct-package-desc flycheck-protobuf (20150731 312) "protobuf checker for flycheck" ((protobuf-mode (0))) single "melpa" nil ((:url . "https://github.com/edvorg/flycheck-protobuf") (:keywords "flycheck")) nil])
  (flycheck-pyflakes [cl-struct-package-desc flycheck-pyflakes (20140630 1521) "Support pyflakes in flycheck" ((flycheck (0 18))) single "melpa" nil nil nil])
  (flycheck-rust [cl-struct-package-desc flycheck-rust (20150609 1248) "Flycheck: Rust additions and Cargo support" ((emacs (24 1)) (flycheck (0 20)) (dash (2 4 0))) single "melpa" nil ((:url . "https://github.com/flycheck/flycheck-rust") (:keywords "tools" "convenience")) nil])
  (flycheck-status-emoji [cl-struct-package-desc flycheck-status-emoji (20150924 1114) "Show flycheck status using cute, compact emoji" ((emacs (24)) (flycheck (0 20)) (let-alist (1 0))) single "melpa" nil ((:url . "https://github.com/liblit/flycheck-status-emoji") (:keywords "convenience" "languages" "tools")) nil] [cl-struct-package-desc flycheck-status-emoji (1 1) "Show flycheck status using cute, compact emoji" ((emacs (24)) (flycheck (0 20)) (let-alist (1 0))) single "melpa-stable" nil ((:url . "https://github.com/liblit/flycheck-status-emoji") (:keywords "convenience" "languages" "tools")) nil])
  (flycheck-tip [cl-struct-package-desc flycheck-tip (20150726 156) "Show flycheck/flymake errors by tooltip" ((flycheck (0 13)) (emacs (24 1)) (popup (0 5 0))) tar "melpa" nil ((:url . "https://github.com/yuutayamada/flycheck-tip") (:keywords "flycheck")) nil] [cl-struct-package-desc flycheck-tip (0 5 0) "Show flycheck/flymake errors by tooltip" ((flycheck (0 13)) (emacs (24 1)) (popup (0 5 0))) tar "melpa-stable" nil ((:url . "https://github.com/yuutayamada/flycheck-tip") (:keywords "flycheck")) nil])
  (flycheck-ycmd [cl-struct-package-desc flycheck-ycmd (20150727 31) "flycheck integration for ycmd" ((emacs (24)) (dash (1 2 0)) (flycheck (0 22)) (ycmd (0 9))) single "melpa" nil ((:url . "https://github.com/abingham/emacs-ycmd")) nil] [cl-struct-package-desc flycheck-ycmd (0 9) "flycheck integration for ycmd" ((emacs (24)) (dash (1 2 0)) (flycheck (0 22)) (ycmd (20141217 453))) single "melpa-stable" nil ((:url . "https://github.com/abingham/emacs-ycmd")) nil])
  (flymake-cppcheck [cl-struct-package-desc flymake-cppcheck (20140415 557) "Flymake work with Cppcheck for C/C++" ((flymake-easy (0 9))) single "melpa" nil ((:url . "https://github.com/senda-akiha/flymake-cppcheck/") (:keywords "flymake" "cppcheck" "c" "c++")) nil])
  (flymake-gjshint [cl-struct-package-desc flymake-gjshint (20130327 532) "A flymake handler for javascript using both jshint and gjslint" nil single "melpa" nil ((:keywords "flymake" "javascript" "jshint" "gjslint")) nil] [cl-struct-package-desc flymake-gjshint (0 0 6) "A flymake handler for javascript using both jshint and gjslint" nil single "melpa-stable" nil ((:keywords "flymake" "javascript" "jshint" "gjslint")) nil])
  (flymake-google-cpplint [cl-struct-package-desc flymake-google-cpplint (20140205 525) "Help to comply with the Google C++ Style Guide" ((flymake-easy (0 9))) single "melpa" nil ((:url . "https://github.com/senda-akiha/flymake-google-cpplint/") (:keywords "flymake" "c" "c++")) nil])
  (flymake-rust [cl-struct-package-desc flymake-rust (20141004 1552) "A flymake handler for rust-mode files" ((flymake-easy (0 1))) single "melpa" nil ((:url . "https://github.com/joaoxsouls/flymake-rust")) nil])
  (flymake-vala [cl-struct-package-desc flymake-vala (20150325 2231) "A flymake handler for vala-mode files" ((flymake-easy (0 1))) single "melpa" nil ((:url . "https://github.com/daniellawrence/flymake-vala") (:keywords "convenience" "vala")) nil])
  (flymake-yaml [cl-struct-package-desc flymake-yaml (20130423 848) "A flymake handler for YAML" ((flymake-easy (0 1))) single "melpa" nil ((:url . "https://github.com/yasuyk/flymake-yaml") (:keywords "yaml")) nil])
  (flyparens [cl-struct-package-desc flyparens (20140723 1146) "Check for unbalanced parens on the fly" nil tar "melpa" nil ((:keywords "faces" "convenience" "lisp" "matching" "parentheses" "parens")) nil])
  (flyspell-popup [cl-struct-package-desc flyspell-popup (20150926 803) "Correcting words with Flyspell in popup menus" ((popup (0 5 0))) single "melpa" nil ((:url . "https://github.com/xuchunyang/flyspell-popup") (:keywords "convenience")) nil] [cl-struct-package-desc flyspell-popup (0 2) "Correcting words with Flyspell in popup menus" ((popup (0 5 0))) single "melpa-stable" nil ((:url . "https://github.com/xuchunyang/flyspell-popup") (:keywords "convenience")) nil])
  (fm-bookmarks [cl-struct-package-desc fm-bookmarks (20150715 146) "Use file manager bookmarks (eg Dolphin, Nautilus, PCManFM) in Dired" ((emacs (24 3)) (cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/kuanyui/fm-bookmarks.el") (:keywords "files" "convenience")) nil])
  (focus [cl-struct-package-desc focus (20150524 848) "Dim the font color of text in surrounding sections" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/larstvei/Focus")) nil])
  (focus-autosave-mode [cl-struct-package-desc focus-autosave-mode (20151012 242) "Automatically save files in focus-out-hook." ((emacs (24 4))) single "melpa" nil ((:keywords "convenience" "files" "frames" "mouse")) nil])
  (folding [cl-struct-package-desc folding (20140401 3) "A folding-editor-like minor mode." nil single "melpa" nil ((:keywords "tools")) nil])
  (font-lock+ [cl-struct-package-desc font-lock+ (20150104 1405) "Enhancements to standard library `font-lock.el'." nil single "melpa" nil ((:url . "http://www.emacswiki.org/font-lock+.el") (:keywords "languages" "faces" "highlighting")) nil])
  (font-lock-studio [cl-struct-package-desc font-lock-studio (20141201 1658) "interactive debugger for Font Lock keywords." ((emacs (24 3))) single "melpa" nil ((:url . "https://github.com/Lindydancer/font-lock-studio") (:keywords "faces" "tools")) nil])
  (fontawesome [cl-struct-package-desc fontawesome (20151031 2018) "fontawesome utility" ((helm-core (1 7 7)) (cl-lib (0 5))) tar "melpa" nil ((:url . "https://github.com/syohex/emacs-fontawesome")) nil] [cl-struct-package-desc fontawesome (0 3) "fontawesome utility" ((helm-core (1 7 7)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-fontawesome")) nil])
  (forecast [cl-struct-package-desc forecast (20151105 1435) "Display a forecast.io weather report in a buffer" ((emacs (24 4))) single "melpa" nil ((:url . "http://gkayaalp.com/emacs.html#forecast.el") (:keywords "weather" "forecast")) nil] [cl-struct-package-desc forecast (0 1 9) "Display a forecast.io weather report in a buffer" ((emacs (24 4))) single "melpa-stable" nil ((:url . "http://gkayaalp.com/emacs.html#forecast.el") (:keywords "weather" "forecast")) nil])
  (foreign-regexp [cl-struct-package-desc foreign-regexp (20140823 1742) "search and replace by foreign regexp." nil tar "melpa" nil ((:keywords "convenience" "emulations" "matching" "tools" "unix" "wp")) nil])
  (foreman-mode [cl-struct-package-desc foreman-mode (20150611 156) "View and manage Procfile-based applications" ((s (1 9 0)) (dash (2 10 0)) (dash-functional (1 2 0)) (f (0 17 2)) (emacs (24))) single "melpa" nil ((:url . "http://github.com/zweifisch/foreman-mode") (:keywords "foreman")) nil] [cl-struct-package-desc foreman-mode (0 0 1) "View and manage Procfile-based applications" ((s (1 9 0)) (dash (2 10 0)) (dash-functional (1 2 0)) (f (0 17 2)) (emacs (24))) single "melpa-stable" nil ((:url . "http://github.com/zweifisch/foreman-mode") (:keywords "foreman")) nil])
  (format-sql [cl-struct-package-desc format-sql (20150422 633) "Use format-sql to make your SQL readable in directly Emacs." nil single "melpa" nil ((:url . "https://github.com/paetzke/format-sql.el")) nil] [cl-struct-package-desc format-sql (0 4) "Use format-sql to make your SQL readable in directly Emacs." nil single "melpa-stable" nil ((:url . "https://github.com/paetzke/format-sql.el")) nil])
  (fortpy [cl-struct-package-desc fortpy (20150715 1332) "a Fortran auto-completion for Emacs" ((epc (0 1 0)) (auto-complete (1 4)) (python-environment (0 0 2)) (pos-tip (0 4 5))) tar "melpa" nil nil nil])
  (fortune-cookie [cl-struct-package-desc fortune-cookie (20151110 2235) "Print a fortune in your scratch buffer." nil single "melpa" nil ((:url . "https://github.com/andschwa/fortune-cookie") (:keywords "fortune" "cowsay" "scratch" "startup")) nil])
  (fountain-mode [cl-struct-package-desc fountain-mode (20150618 116) "Major mode for screenwriting in Fountain markup" ((s (1 9 0))) single "melpa" nil ((:url . "https://github.com/rnkn/fountain-mode") (:keywords "wp")) nil] [cl-struct-package-desc fountain-mode (1 5 0) "Major mode for screenwriting in Fountain markup" ((s (1 9 0))) single "melpa-stable" nil ((:url . "https://github.com/rnkn/fountain-mode") (:keywords "wp")) nil])
  (frame-cmds [cl-struct-package-desc frame-cmds (20150814 752) "Frame and window commands (interactive functions)." ((frame-fns (0))) single "melpa" nil ((:url . "http://www.emacswiki.org/frame-cmds.el") (:keywords "internal" "extensions" "mouse" "frames" "windows" "convenience")) nil])
  (frame-fns [cl-struct-package-desc frame-fns (20150104 1408) "Non-interactive frame and window functions." nil single "melpa" nil ((:url . "http://www.emacswiki.org/frame-fns.el") (:keywords "internal" "extensions" "local" "frames")) nil])
  (framemove [cl-struct-package-desc framemove (20130328 433) "directional frame selection routines" nil single "melpa" nil ((:keywords "frame" "movement" "convenience")) nil])
  (free-keys [cl-struct-package-desc free-keys (20140309 1051) "Show free keybindings for modkeys or prefixes" ((cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/Fuco1/free-keys") (:keywords "convenience")) nil])
  (fringe-current-line [cl-struct-package-desc fringe-current-line (20140110 2011) "show current line on the fringe." nil single "melpa" nil ((:url . "http://github.com/kyanagi/fringe-current-line/raw/master/fringe-current-line.el")) nil])
  (fsharp-mode [cl-struct-package-desc fsharp-mode (20151024 419) "F# mode for Emacs" ((auto-complete (1 4)) (popup (0 5)) (pos-tip (0 4 5)) (s (1 3 1)) (dash (1 1 0))) tar "melpa" nil nil nil] [cl-struct-package-desc fsharp-mode (1 6 1) "F# mode for Emacs" ((auto-complete (1 4)) (popup (0 5)) (pos-tip (0 4 5)) (s (1 3 1)) (dash (1 1 0))) tar "melpa-stable" nil nil nil])
  (fstar-mode [cl-struct-package-desc fstar-mode (20151023 753) "Support for F* programming" ((emacs (24 3)) (cl-lib (0 3)) (dash (2 11))) single "melpa" nil ((:url . "https://github.com/FStarLang/fstar.el") (:keywords "convenience" "languages")) nil])
  (fuel [cl-struct-package-desc fuel (20151028 1644) "Major mode for the Factor programming language." ((cl-lib (0 2)) (emacs (24 2))) tar "melpa" nil nil nil] [cl-struct-package-desc fuel (0 96) "No description available." nil tar "melpa-stable" nil nil nil])
  (fullframe [cl-struct-package-desc fullframe (20140619 305) "Generalized automatic execution in a single frame" ((cl-lib (0 5))) single "melpa" nil ((:keywords "fullscreen")) nil] [cl-struct-package-desc fullframe (0 1 1) "Generalized automatic execution in a single frame" ((cl-lib (0 5))) single "melpa-stable" nil ((:keywords "fullscreen")) nil])
  (function-args [cl-struct-package-desc function-args (20151022 551) "C++ completion for GNU Emacs" ((swiper (0 2 0))) tar "melpa" nil ((:url . "https://github.com/abo-abo/function-args")) nil])
  (fvwm-mode [cl-struct-package-desc fvwm-mode (20141105 2036) "major mode for editing Fvwm configuration files" nil single "melpa" nil ((:keywords "files")) nil] [cl-struct-package-desc fvwm-mode (1 6 4) "major mode for editing Fvwm configuration files" nil single "melpa-stable" nil ((:keywords "files")) nil])
  (fwb-cmds [cl-struct-package-desc fwb-cmds (20131209 1600) "misc frame, window and buffer commands" nil single "melpa" nil ((:url . "http://github.com/tarsius/fwb-cmds") (:keywords "convenience")) nil] [cl-struct-package-desc fwb-cmds (0 4 0) "misc frame, window and buffer commands" nil single "melpa-stable" nil ((:url . "http://github.com/tarsius/fwb-cmds") (:keywords "convenience")) nil])
  (fyure [cl-struct-package-desc fyure (20130216 514) "An interface to fix Japanese hyoki-yure" nil tar "melpa" nil ((:keywords "languages")) nil])
  (fzf [cl-struct-package-desc fzf (20151027 2046) "A front-end for fzf." ((emacs (24 4))) single "melpa" nil ((:url . "https://github.com/bling/fzf.el") (:keywords "fzf" "fuzzy" "search")) nil])
  (gap-mode [cl-struct-package-desc gap-mode (20140913 1258) "Major mode for editing files in the GAP programing language." nil tar "melpa" nil ((:url . "https://bitbucket.org/gvol/gap-mode") (:keywords "gap")) nil])
  (geeknote [cl-struct-package-desc geeknote (20150223 815) "Use Evernote in Emacs through geeknote" ((emacs (24))) single "melpa" nil ((:url . "http://github.com/avendael/emacs-geeknote") (:keywords "evernote" "geeknote" "note" "emacs-evernote" "evernote-mode")) nil])
  (general-close [cl-struct-package-desc general-close (20150922 13) "Insert closing delimiter" nil tar "melpa" nil ((:keywords "languages" "lisp")) nil])
  (genrnc [cl-struct-package-desc genrnc (20140612 537) "generate RELAX NG Compact Schema from RELAX NG Schema, XML Schema and DTD." ((deferred (0 3 1)) (concurrent (0 3)) (log4e (0 2 0)) (yaxception (0 1))) tar "melpa" nil ((:url . "https://github.com/aki2o/emacs-genrnc") (:keywords "xml")) nil] [cl-struct-package-desc genrnc (0 1 0) "generate RELAX NG Compact Schema from RELAX NG Schema, XML Schema and DTD." ((deferred (0 3 1)) (concurrent (0 3)) (log4e (0 2 0)) (yaxception (0 1))) tar "melpa-stable" nil ((:url . "https://github.com/aki2o/emacs-genrnc") (:keywords "xml")) nil])
  (german-holidays [cl-struct-package-desc german-holidays (20151102 743) "German holidays for Emacs calendar" nil single "melpa" nil ((:url . "https://github.com/rudolfochrist/german-holidays")) nil] [cl-struct-package-desc german-holidays (0 2 0) "German holidays for Emacs calendar" nil single "melpa-stable" nil ((:url . "https://github.com/rudolfochrist/german-holidays")) nil])
  (ggo-mode [cl-struct-package-desc ggo-mode (20130524 443) "Gengetopt major mode" nil single "melpa" nil ((:keywords "extensions" "convenience" "local")) nil] [cl-struct-package-desc ggo-mode (20130521) "Gengetopt major mode" nil single "melpa-stable" nil ((:keywords "extensions" "convenience" "local")) nil])
  (gh-md [cl-struct-package-desc gh-md (20151103 2026) "Render markdown using the Github api" ((emacs (24))) single "melpa" nil ((:url . "https://github.com/emacs-pe/gh-md.el") (:keywords "convenience")) nil])
  (ghc-imported-from [cl-struct-package-desc ghc-imported-from (20141124 1132) "Haskell documentation lookup with ghc-imported-from" ((emacs (24 1))) single "melpa" nil ((:keywords "languages")) nil] [cl-struct-package-desc ghc-imported-from (0 1 2) "Haskell documentation lookup with ghc-imported-from" ((emacs (24 1))) single "melpa-stable" nil ((:keywords "languages")) nil])
  (gherkin-mode [cl-struct-package-desc gherkin-mode (20140107 804) "An emacs major mode for editing gherkin files." nil single "melpa" nil ((:keywords "languages")) nil])
  (gildas-mode [cl-struct-package-desc gildas-mode (20150919 1501) "Major mode for Gildas" ((polymode (0)) (emacs (24 3))) single "melpa" nil ((:url . "https://github.com/smaret/gildas-mode") (:keywords "languages" "gildas")) nil])
  (git [cl-struct-package-desc git (20140128 241) "An Elisp API for programmatically using Git" ((s (1 7 0)) (dash (2 2 0)) (f (0 10 0))) single "melpa" nil ((:url . "http://github.com/rejeep/git.el") (:keywords "git")) nil] [cl-struct-package-desc git (0 1 1) "An Elisp API for programmatically using Git" ((s (1 7 0)) (dash (2 2 0)) (f (0 10 0))) single "melpa-stable" nil ((:url . "http://github.com/rejeep/git.el") (:keywords "git")) nil])
  (git-annex [cl-struct-package-desc git-annex (20131119 1445) "Mode for easy editing of git-annex'd files" nil single "melpa" nil ((:url . "https://github.com/jwiegley/git-annex-el") (:keywords "files" "data" "git" "annex")) nil])
  (git-blame [cl-struct-package-desc git-blame (20110509 926) "Minor mode for incremental blame for Git" nil single "melpa" nil ((:keywords "git" "version control" "release management")) nil])
  (git-commit-insert-issue [cl-struct-package-desc git-commit-insert-issue (20151008 1303) "Get issues list when typing \"Fixes #\"" ((helm (0)) (projectile (0)) (s (0))) tar "melpa" nil ((:url . "https://gitlab.com/emacs-stuff/git-commit-insert-issue/") (:keywords "git" "commit" "issues")) nil])
  (git-dwim [cl-struct-package-desc git-dwim (20130130 1350) "Context-aware git commands such as branch handling" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/git-dwim.el") (:keywords "git" "tools" "convenience")) nil])
  (git-gutter+ [cl-struct-package-desc git-gutter+ (20150925 231) "Manage Git hunks straight from the buffer" ((git-commit (0)) (dash (0))) single "melpa" nil ((:url . "https://github.com/nonsequitur/git-gutter-plus") (:keywords "git" "vc")) nil] [cl-struct-package-desc git-gutter+ (0 4) "Manage Git hunks straight from the buffer" ((git-commit (0))) single "melpa-stable" nil ((:url . "https://github.com/nonsequitur/git-gutter-plus") (:keywords "git" "vc")) nil])
  (git-gutter-fringe+ [cl-struct-package-desc git-gutter-fringe+ (20140729 403) "Fringe version of git-gutter+.el" ((git-gutter+ (0 1)) (fringe-helper (1 0 1))) single "melpa" nil ((:url . "https://github.com/nonsequitur/git-gutter-fringe-plus")) nil] [cl-struct-package-desc git-gutter-fringe+ (0 1) "Fringe version of git-gutter+.el" ((git-gutter+ (0 1)) (fringe-helper (20130519 1641))) single "melpa-stable" nil ((:url . "https://github.com/nonsequitur/git-gutter-fringe-plus")) nil])
  (git-lens [cl-struct-package-desc git-lens (20150817 14) "Show new, deleted or modified files in branch" ((emacs (24 4))) single "melpa" nil ((:keywords "vc" "convenience")) nil] [cl-struct-package-desc git-lens (0 4) "Show new, deleted or modified files in branch" ((emacs (24 4))) single "melpa-stable" nil ((:keywords "vc" "convenience")) nil])
  (git-link [cl-struct-package-desc git-link (20150927 1025) "Get the GitHub/Bitbucket/GitLab URL for a buffer location" nil single "melpa" nil ((:url . "http://github.com/sshaw/git-link") (:keywords "git")) nil] [cl-struct-package-desc git-link (0 3 0) "Get the GitHub/Bitbucket/Gitorious URL for a buffer location" nil single "melpa-stable" nil ((:url . "http://github.com/sshaw/git-link") (:keywords "git")) nil])
  (git-messenger [cl-struct-package-desc git-messenger (20150314 602) "Pop up last commit information of current line" ((popup (0 5 0)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-git-messenger")) nil] [cl-struct-package-desc git-messenger (0 16) "Pop up last commit information of current line" ((popup (0 5 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-git-messenger")) nil])
  (git-ps1-mode [cl-struct-package-desc git-ps1-mode (20150421 2101) "Global minor-mode to print __git_ps1" nil single "melpa" nil ((:url . "https://github.com/10sr/git-ps1-mode-el") (:keywords "utility" "mode-line" "git")) nil] [cl-struct-package-desc git-ps1-mode (0 1 1) "Global minor-mode to print __git_ps1" nil single "melpa-stable" nil ((:url . "https://github.com/10sr/git-ps1-mode-el") (:keywords "utility" "mode-line" "git")) nil])
  (git-timemachine [cl-struct-package-desc git-timemachine (20151004 2229) "Walk through git revisions of a file" nil single "melpa" nil ((:url . "https://github.com/pidu/git-timemachine") (:keywords "git")) nil] [cl-struct-package-desc git-timemachine (2 7) "Walk through git revisions of a file" nil single "melpa-stable" nil ((:url . "https://github.com/pidu/git-timemachine") (:keywords "git")) nil])
  (git-wip-timemachine [cl-struct-package-desc git-wip-timemachine (20150408 306) "Walk through git-wip revisions of a file" ((s (1 9 0))) single "melpa" nil ((:url . "https://github.com/itsjeyd/git-wip-timemachine") (:keywords "git")) nil] [cl-struct-package-desc git-wip-timemachine (1 0) "Walk through git-wip revisions of a file" ((s (1 9 0))) single "melpa-stable" nil ((:url . "https://github.com/itsjeyd/git-wip-timemachine") (:keywords "git")) nil])
  (github-clone [cl-struct-package-desc github-clone (20150705 1705) "Fork and clone github repos" ((gh (0 7 2)) (magit (2 1 0)) (emacs (24 4))) single "melpa" nil ((:url . "https://github.com/dgtized/github-clone.el") (:keywords "vc" "tools")) nil] [cl-struct-package-desc github-clone (0 2) "Fork and clone github repos" ((gh (0 7 2)) (magit (1 2 0)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/dgtized/github-clone.el") (:keywords "vc" "tools")) nil])
  (github-notifier [cl-struct-package-desc github-notifier (20151109 323) "Displays your GitHub notifications unread count in mode-line" ((emacs (24))) single "melpa" nil ((:url . "https://github.com/xuchunyang/github-notifier.el") (:keywords "github" "mode-line")) nil])
  (gitlab [cl-struct-package-desc gitlab (20151012 752) "Emacs client for Gitlab" ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) tar "melpa" nil ((:url . "https://github.com/nlamirault/emacs-gitlab") (:keywords "gitlab")) nil] [cl-struct-package-desc gitlab (0 7 0) "Emacs client for Gitlab" ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) tar "melpa-stable" nil ((:url . "https://github.com/nlamirault/emacs-gitlab") (:keywords "gitlab")) nil])
  (gitolite-clone [cl-struct-package-desc gitolite-clone (20150819 639) "Clone gitolite repositories from a completing list" ((dash (2 10 0)) (s (1 9 0)) (pcache (0 3 1)) (emacs (24))) single "melpa" nil ((:url . "https://github.com/IvanMalison/gitolite-clone") (:keywords "gitolite" "clone" "git")) nil])
  (glsl-mode [cl-struct-package-desc glsl-mode (20150114 833) "major mode for Open GLSL shader files" nil single "melpa" nil ((:url . "http://artis.inrialpes.fr/~Xavier.Decoret/resources/glsl-mode/") (:keywords "languages")) nil])
  (gmail-message-mode [cl-struct-package-desc gmail-message-mode (20140815 816) "A major-mode for editing gmail messages using markdown syntax." ((ham-mode (1 0))) single "melpa" nil ((:url . "http://github.com/Bruce-Connor/gmail-message-mode") (:keywords "mail" "convenience" "emulation")) nil] [cl-struct-package-desc gmail-message-mode (1 3 2) "A major-mode for editing gmail messages using markdown syntax." ((ham-mode (1 0))) single "melpa-stable" nil ((:url . "http://github.com/Bruce-Connor/gmail-message-mode") (:keywords "mail" "convenience" "emulation")) nil])
  (gmail2bbdb [cl-struct-package-desc gmail2bbdb (20150909 1839) "import email and name into bbdb from vcard." nil single "melpa" nil ((:url . "http://github.com/redguardtoo/gmail2bbdb") (:keywords "vcard" "bbdb" "email" "contact" "gmail")) nil] [cl-struct-package-desc gmail2bbdb (0 0 4) "import email and name into bbdb from vcard." nil single "melpa-stable" nil ((:url . "http://github.com/redguardtoo/gmail2bbdb") (:keywords "vcard" "bbdb" "email" "contact" "gmail")) nil])
  (gmpl-mode [cl-struct-package-desc gmpl-mode (20151111 1311) "Major mode for editing GMPL(MathProg) files" nil single "melpa" nil ((:keywords "extensions")) nil] [cl-struct-package-desc gmpl-mode (0 1 0) "Major mode for editing GMPL(MathProg) files" nil single "melpa-stable" nil ((:keywords "extensions")) nil])
  (gnome-calendar [cl-struct-package-desc gnome-calendar (20140112 359) "Integration with the GNOME Shell calendar" nil single "melpa" nil ((:keywords "gnome" "calendar")) nil] [cl-struct-package-desc gnome-calendar (0 2) "Integration with the GNOME Shell calendar" nil single "melpa-stable" nil ((:keywords "gnome" "calendar")) nil])
  (gntp [cl-struct-package-desc gntp (20141024 1950) "Growl Notification Protocol for Emacs" nil single "melpa" nil nil nil] [cl-struct-package-desc gntp (0 1) "Growl Notification Protocol for Emacs" nil single "melpa-stable" nil nil nil])
  (gnu-apl-mode [cl-struct-package-desc gnu-apl-mode (20150625 2044) "Integrate GNU APL with Emacs" ((emacs (24))) tar "melpa" nil ((:keywords "languages" "apl") (:url . "https://github.com/lokedhs/gnu-apl-mode")) nil])
  (gnuplot-mode [cl-struct-package-desc gnuplot-mode (20131203 2159) "Major mode for editing gnuplot scripts" nil single "melpa" nil ((:url . "https://github.com/mkmcc/gnuplot") (:keywords "gnuplot" "plotting")) nil])
  (gnus-alias [cl-struct-package-desc gnus-alias (20150315 1742) "an alternative to gnus-posting-styles" nil single "melpa" nil ((:keywords "personality" "identity" "news" "mail" "gnus")) nil])
  (gnus-desktop-notify [cl-struct-package-desc gnus-desktop-notify (20150703 654) "Gnus Desktop Notification global minor mode" ((gnus (1 0))) single "melpa" nil ((:url . "http://www.thregr.org/~wavexx/software/gnus-desktop-notify.el/")) nil] [cl-struct-package-desc gnus-desktop-notify (1 4) "Gnus Desktop Notification global minor mode" ((gnus (1 0))) single "melpa-stable" nil ((:url . "http://www.thregr.org/~wavexx/hacks/gnus-desktop-notify/")) nil])
  (gnus-spotlight [cl-struct-package-desc gnus-spotlight (20130901 735) "Search mail with Spotlight" nil single "melpa" nil ((:keywords "mail" "searching" "spotlight")) nil])
  (gnus-x-gm-raw [cl-struct-package-desc gnus-x-gm-raw (20140610 31) "Search mail of Gmail using X-GM-RAW as web interface" ((log4e (0 2 0)) (yaxception (0 1))) single "melpa" nil ((:url . "https://github.com/aki2o/gnus-x-gm-raw") (:keywords "gnus")) nil] [cl-struct-package-desc gnus-x-gm-raw (0 0 1) "Search mail of Gmail using X-GM-RAW as web interface" ((log4e (0 2 0)) (yaxception (0 1))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/gnus-x-gm-raw") (:keywords "gnus")) nil])
  (go-autocomplete [cl-struct-package-desc go-autocomplete (20150903 1940) "auto-complete-mode backend for go-mode" ((auto-complete (1 4 0))) single "melpa" nil ((:keywords "languages")) nil] [cl-struct-package-desc go-autocomplete (20150303) "auto-complete-mode backend for go-mode" ((auto-complete (1 4 0))) single "melpa-stable" nil ((:keywords "languages")) nil])
  (go-complete [cl-struct-package-desc go-complete (20151015 228) "Native code completion for Go" ((go-mode (0)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/vibhavp/go-complete") (:keywords "go" "golang" "completion")) nil])
  (go-direx [cl-struct-package-desc go-direx (20150315 1843) "Tree style source code viewer for Go language" ((direx (1 0 0)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-go-direx")) nil] [cl-struct-package-desc go-direx (0 4) "Tree style source code viewer for Go language" ((direx (1 0 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-go-direx")) nil])
  (go-dlv [cl-struct-package-desc go-dlv (20151030 59) "Go Delve - Debug Go programs interactively with the GUD." ((go-mode (1 3 1))) single "melpa" nil ((:url . "https://github.com/benma/go-dlv.el/") (:keywords "go" "debug" "debugger" "delve" "interactive" "gud")) nil])
  (go-eldoc [cl-struct-package-desc go-eldoc (20151028 10) "eldoc for go-mode" ((go-mode (1 0 0)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-go-eldoc")) nil] [cl-struct-package-desc go-eldoc (0 26) "eldoc for go-mode" ((go-mode (1 0 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-go-eldoc")) nil])
  (go-errcheck [cl-struct-package-desc go-errcheck (20150828 1135) "errcheck integration for go-mode" nil single "melpa" nil nil nil] [cl-struct-package-desc go-errcheck (1 1 2) "errcheck integration for go-mode" nil single "melpa-stable" nil nil nil])
  (go-playground [cl-struct-package-desc go-playground (20151031 1410) "Local Golang playground for short snippets." ((emacs (24)) (go-mode (1 0 0)) (gotest (0 40 0))) single "melpa" nil ((:url . "https://github.com/grafov/go-playground") (:keywords "tools" "golang")) nil])
  (go-projectile [cl-struct-package-desc go-projectile (20151026 1135) "Go add-ons for Projectile" ((projectile (0 10 0)) (go-mode (0)) (go-eldoc (0 16)) (go-rename (0))) single "melpa" nil ((:url . "https://github.com/dougm/go-projectile") (:keywords "project" "convenience")) nil])
  (go-rename [cl-struct-package-desc go-rename (20151027 638) "Integration of the 'gorename' tool into Emacs." ((go-mode (1 3 1))) single "melpa" nil ((:keywords "tools")) nil])
  (go-scratch [cl-struct-package-desc go-scratch (20150809 2140) "*scratch* buffer for Go" ((go-mode (1 3 1)) (emacs (24))) single "melpa" nil ((:keywords "languages" "go")) nil] [cl-struct-package-desc go-scratch (0 0 1) "*scratch* buffer for Go" ((go-mode (1 3 1)) (emacs (24))) single "melpa-stable" nil ((:keywords "languages" "go")) nil])
  (go-snippets [cl-struct-package-desc go-snippets (20130821 844) "Yasnippets for go" ((yasnippet (0 8 0))) tar "melpa" nil nil nil])
  (go-stacktracer [cl-struct-package-desc go-stacktracer (20150430 1442) "parse Go stack traces" nil single "melpa" nil ((:url . "https://github.com/samertm/go-stacktracer.el") (:keywords "tools")) nil])
  (gold-mode [cl-struct-package-desc gold-mode (20140606 1906) "Major mode for editing .gold files" ((sws-mode (0))) single "melpa" nil ((:url . "https://github.com/yuutayamada/gold-mode-el") (:keywords "golang" "template" "gold")) nil])
  (golden-ratio [cl-struct-package-desc golden-ratio (20150819 420) "Automatic resizing of Emacs windows to the golden ratio" nil single "melpa" nil ((:keywords "window" "resizing")) nil] [cl-struct-package-desc golden-ratio (1 0) "Automatic resizing of Emacs windows to the golden ratio" nil single "melpa-stable" nil ((:keywords "window" "resizing")) nil])
  (golint [cl-struct-package-desc golint (20150414 1730) "lint for the Go source code" nil single "melpa" nil ((:url . "https://github.com/golang/lint")) nil])
  (gom-mode [cl-struct-package-desc gom-mode (20131007 1953) "Major mode for Gomfile" nil single "melpa" nil ((:url . "https://github.com/syohex/emacs-gom-mode")) nil])
  (google [cl-struct-package-desc google (20140330 856) "Emacs interface to the Google API" nil single "melpa" nil ((:keywords "comm" "processes" "tools")) nil])
  (google-c-style [cl-struct-package-desc google-c-style (20140929 1118) "Google's C/C++ style for c-mode" nil single "melpa" nil ((:keywords "c" "tools")) nil])
  (google-contacts [cl-struct-package-desc google-contacts (20140530 233) "Support for Google Contacts in Emacs" ((oauth2 (0 10))) tar "melpa" nil ((:url . "http://julien.danjou.info/projects/emacs-packages#google-contacts") (:keywords "comm")) nil])
  (google-maps [cl-struct-package-desc google-maps (20130412 230) "Access Google Maps from Emacs" nil tar "melpa" nil ((:keywords "comm")) nil])
  (google-this [cl-struct-package-desc google-this (20150522 240) "A set of functions and bindings to google under point." ((emacs (24 1))) single "melpa" nil ((:url . "http://github.com/Malabarba/emacs-google-this") (:keywords "convenience" "hypermedia")) nil] [cl-struct-package-desc google-this (1 10) "A set of functions and bindings to google under point." ((emacs (24 1))) single "melpa-stable" nil ((:url . "http://github.com/Malabarba/emacs-google-this") (:keywords "convenience" "hypermedia")) nil])
  (gore-mode [cl-struct-package-desc gore-mode (20131027 2227) "Simple mode for gore, a command-line evaluator for golang." nil single "melpa" nil ((:keywords "go" "repl")) nil])
  (gorepl-mode [cl-struct-package-desc gorepl-mode (20151102 314) "Go REPL Interactive Development in top of Gore" ((emacs (24))) single "melpa" nil ((:url . "http://www.github.com/manute/gorepl-mode") (:keywords "languages" "go" "golang" "gorepl")) nil])
  (gotest [cl-struct-package-desc gotest (20151109 505) "Launch GO unit tests" ((emacs (24 3)) (s (1 10 0)) (f (0 18 0)) (go-mode (1 3 1))) single "melpa" nil ((:url . "https://github.com/nlamirault/gotest.el") (:keywords "languages" "go" "tests")) nil] [cl-struct-package-desc gotest (0 7 0) "Launch GO unit tests" ((emacs (24 3)) (s (1 10 0)) (f (0 18 0)) (go-mode (1 3 1))) single "melpa-stable" nil ((:url . "https://github.com/nlamirault/gotest.el") (:keywords "languages" "go" "tests")) nil])
  (goto-gem [cl-struct-package-desc goto-gem (20140729 1145) "Open dired in gem directory" ((s (1 9 0))) single "melpa" nil ((:keywords "gemfile" "convenience")) nil] [cl-struct-package-desc goto-gem (1 2) "Open dired in gem directory" ((s (1 9 0))) single "melpa-stable" nil ((:keywords "gemfile" "convenience")) nil])
  (govet [cl-struct-package-desc govet (20150428 1159) "linter/problem finder for the Go source code" nil single "melpa" nil ((:url . "https://godoc.org/golang.org/x/tools/cmd/vet")) nil])
  (gradle-mode [cl-struct-package-desc gradle-mode (20150313 1205) "Gradle integration with Emacs' compile" ((s (1 8 0))) single "melpa" nil ((:url . "http://github.com/jacobono/emacs-gradle-mode") (:keywords "gradle")) nil] [cl-struct-package-desc gradle-mode (0 5 5) "Gradle integration with Emacs' compile" ((s (1 8 0))) single "melpa-stable" nil ((:url . "http://github.com/jacobono/emacs-gradle-mode") (:keywords "gradle")) nil])
  (grails-projectile-mode [cl-struct-package-desc grails-projectile-mode (20141229 1129) "Grails mode with Projectile for projects management." ((projectile (0 10 0)) (emacs (24)) (cl-lib (0 5))) tar "melpa" nil ((:url . "https://github.com/yveszoundi/grails-projectile-mode") (:keywords "grails" "projectile")) nil] [cl-struct-package-desc grails-projectile-mode (1 1 1) "Grails mode with Projectile for projects management." ((projectile (0 10 0)) (emacs (24)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/yveszoundi/grails-projectile-mode") (:keywords "grails" "projectile")) nil])
  (grandshell-theme [cl-struct-package-desc grandshell-theme (20150404 501) "Dark color theme for Emacs > 24 with intensive colors." nil tar "melpa" nil nil nil] [cl-struct-package-desc grandshell-theme (1 0) "Dark color theme for Emacs > 24 with intensive colors." nil tar "melpa-stable" nil nil nil])
  (graphene [cl-struct-package-desc graphene (20151108 2340) "Friendly Emacs defaults" ((dash (2 10 0)) (exec-path-from-shell (1 9)) (ppd-sr-speedbar (0 0 6)) (sr-speedbar (20140505)) (ido-ubiquitous (3 6)) (smex (3 0)) (web-mode (11 2)) (smartparens (1 6 3)) (graphene-meta-theme (0 0 2)) (flycheck (0 23)) (company (0 8 12))) tar "melpa" nil nil nil] [cl-struct-package-desc graphene (0 9 5) "Friendly Emacs defaults" ((dash (2 10 0)) (exec-path-from-shell (1 9)) (ppd-sr-speedbar (0 0 6)) (sr-speedbar (20140505)) (ido-ubiquitous (3 6)) (smex (3 0)) (web-mode (11 2)) (smartparens (1 6 3)) (graphene-meta-theme (0 0 2)) (flycheck (0 23)) (company (0 8 12))) tar "melpa-stable" nil nil nil])
  (graphene-meta-theme [cl-struct-package-desc graphene-meta-theme (20151108 200) "Integrated theming for common packages" nil single "melpa" nil ((:url . "https://github.com/rdallasgray/graphene") (:keywords "defaults")) nil] [cl-struct-package-desc graphene-meta-theme (0 0 2) "Integrated theming for common packages" nil single "melpa-stable" nil ((:url . "https://github.com/rdallasgray/graphene") (:keywords "defaults")) nil])
  (grass-mode [cl-struct-package-desc grass-mode (20151030 920) "Provides Emacs modes for interacting with the GRASS GIS program" ((cl-lib (0 2)) (dash (2 8 0))) single "melpa" nil ((:keywords "grass" "gis")) nil] [cl-struct-package-desc grass-mode (0 1) "Provides Emacs modes for interacting with the GRASS GIS program" ((cl-lib (0 2))) single "melpa-stable" nil ((:keywords "grass" "gis")) nil])
  (green-phosphor-theme [cl-struct-package-desc green-phosphor-theme (20150515 747) "A light color theme with muted, autumnal colors." nil single "melpa" nil ((:url . "http://github.com/aalpern/emacs-color-theme-green-phosphor") (:keywords "color" "theme")) nil])
  (gregorio-mode [cl-struct-package-desc gregorio-mode (20151026 720) "Gregorio Mode for .gabc files" nil single "melpa" nil ((:url . "http://chant.fsspx.pl/gregorio-mode/docs/") (:keywords "gregorio" "chant")) nil])
  (grep+ [cl-struct-package-desc grep+ (20150104 1410) "Extensions to standard library `grep.el'." nil single "melpa" nil ((:url . "http://www.emacswiki.org/grep+.el") (:keywords "tools" "processes" "compile")) nil])
  (greymatters-theme [cl-struct-package-desc greymatters-theme (20150621 423) "Emacs 24 theme with a light background." ((emacs (24))) single "melpa" nil nil nil])
  (grunt [cl-struct-package-desc grunt (20151110 829) "Some glue to stick Emacs and Gruntfiles together" ((dash (2 9 0)) (ansi-color (3 4 2)) (emacs (24 3))) single "melpa" nil ((:url . "https://github.com/gempesaw/grunt.el") (:keywords "convenience" "grunt")) nil] [cl-struct-package-desc grunt (1 3 2) "Some glue to stick Emacs and Gruntfiles together" ((dash (2 9 0)) (ansi-color (3 4 2))) single "melpa-stable" nil ((:url . "https://github.com/gempesaw/grunt.el") (:keywords "convenience" "grunt")) nil])
  (gruvbox-theme [cl-struct-package-desc gruvbox-theme (20150729 341) "A retro-groove colour theme for Emacs" nil single "melpa" nil ((:url . "http://github.com/Greduan/emacs-theme-gruvbox")) nil])
  (gs-mode [cl-struct-package-desc gs-mode (20141026 235) "Major mode for editing GrADS script files" nil single "melpa" nil ((:keywords "grads" "script" "major-mode")) nil])
  (gscholar-bibtex [cl-struct-package-desc gscholar-bibtex (20151022 1025) "Retrieve BibTeX from Google Scholar and other online sources(ACM, IEEE, DBLP)" nil single "melpa" nil ((:keywords "extensions")) nil] [cl-struct-package-desc gscholar-bibtex (0 3 1) "Retrieve BibTeX from Google Scholar and other online sources(ACM, IEEE, DBLP)" nil single "melpa-stable" nil ((:keywords "extensions")) nil])
  (guide-key [cl-struct-package-desc guide-key (20150107 2235) "Guide the following key bindings automatically and dynamically" ((dash (2 10 0)) (popwin (0 3 0)) (s (1 9 0))) single "melpa" nil ((:url . "https://github.com/kai2nenobu/guide-key") (:keywords "help" "convenience")) nil] [cl-struct-package-desc guide-key (1 2 5) "Guide the following key bindings automatically and dynamically" ((popwin (0 3 0))) single "melpa-stable" nil ((:url . "https://github.com/kai2nenobu/guide-key") (:keywords "help" "convenience")) nil])
  (guide-key-tip [cl-struct-package-desc guide-key-tip (20140406 1820) "Show guide-key.el hints using pos-tip.el" ((guide-key (1 2 3)) (pos-tip (0 4 5))) single "melpa" nil ((:url . "https://github.com/aki2o/guide-key-tip") (:keywords "help" "convenience" "tooltip")) nil] [cl-struct-package-desc guide-key-tip (0 0 1) "Show guide-key.el hints using pos-tip.el" ((guide-key (1 2 3)) (pos-tip (0 4 5))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/guide-key-tip") (:keywords "help" "convenience" "tooltip")) nil])
  (ham-mode [cl-struct-package-desc ham-mode (20150811 606) "Html As Markdown. Transparently edit an html file using markdown" ((html-to-markdown (1 2)) (markdown-mode (2 0))) single "melpa" nil ((:url . "http://github.com/Bruce-Connor/ham-mode") (:keywords "convenience" "emulation" "wp")) nil] [cl-struct-package-desc ham-mode (1 1 2) "Html As Markdown. Transparently edit an html file using markdown" ((html-to-markdown (1 2)) (markdown-mode (2 0))) single "melpa-stable" nil ((:url . "http://github.com/Bruce-Connor/ham-mode") (:keywords "convenience" "emulation" "wp")) nil])
  (hamlet-mode [cl-struct-package-desc hamlet-mode (20131207 2324) "Hamlet editing mode" ((cl-lib (0 3)) (dash (2 3 0)) (s (1 7 0))) single "melpa" nil ((:url . "https://github.com/lightquake/hamlet-mode") (:keywords "wp" "languages" "comm")) nil])
  (handoff [cl-struct-package-desc handoff (20150916 2300) "Get your hand off that mouse, damn it!" nil single "melpa" nil ((:url . "http://github.com/rejeep/handoff.el")) nil])
  (haskell-emacs [cl-struct-package-desc haskell-emacs (20151004 1030) "Write emacs extensions in haskell" nil tar "melpa" nil ((:url . "https://github.com/knupfer/haskell-emacs") (:keywords "haskell" "emacs" "ffi")) nil] [cl-struct-package-desc haskell-emacs (3 1 2) "Write emacs extensions in haskell" nil tar "melpa-stable" nil ((:url . "https://github.com/knupfer/haskell-emacs") (:keywords "haskell" "emacs" "ffi")) nil])
  (haskell-emacs-base [cl-struct-package-desc haskell-emacs-base (20150714 859) "Haskell functions from Prelude" ((haskell-emacs (2 4 0))) tar "melpa" nil ((:url . "https://github.com/knupfer/haskell-emacs/modules/base") (:keywords "haskell" "emacs" "ffi")) nil] [cl-struct-package-desc haskell-emacs-base (3 1 2) "Haskell functions from Prelude" ((haskell-emacs (2 4 0))) tar "melpa-stable" nil ((:url . "https://github.com/knupfer/haskell-emacs/modules/base") (:keywords "haskell" "emacs" "ffi")) nil])
  (haskell-emacs-text [cl-struct-package-desc haskell-emacs-text (20150713 716) "Haskell functions from Data.Text" ((haskell-emacs (2 4 0))) tar "melpa" nil ((:url . "https://github.com/knupfer/haskell-emacs/modules/text") (:keywords "haskell" "emacs" "ffi")) nil] [cl-struct-package-desc haskell-emacs-text (3 1 2) "Haskell functions from Data.Text" ((haskell-emacs (2 4 0))) tar "melpa-stable" nil ((:url . "https://github.com/knupfer/haskell-emacs/modules/text") (:keywords "haskell" "emacs" "ffi")) nil])
  (haskell-snippets [cl-struct-package-desc haskell-snippets (20150612 1239) "Yasnippets for Haskell" ((yasnippet (0 8 0))) tar "melpa" nil ((:url . "https://github.com/haskell/haskell-snippets") (:keywords "snippets" "haskell")) nil] [cl-struct-package-desc haskell-snippets (0 1 0) "Yasnippets for Haskell" ((yasnippet (0 8 0))) tar "melpa-stable" nil ((:url . "https://github.com/haskell/haskell-snippets") (:keywords "snippets" "haskell")) nil])
  (hayoo [cl-struct-package-desc hayoo (20140831 521) "Query hayoo and show results in a tabulated buffer." ((emacs (24)) (json (1 3))) single "melpa" nil ((:url . "https://github.com/benma/hayoo.el/") (:keywords "hayoo" "haskell")) nil])
  (hc-zenburn-theme [cl-struct-package-desc hc-zenburn-theme (20150928 933) "An higher contrast version of the Zenburn theme." nil single "melpa" nil ((:url . "https:github.com/edran/hc-zenburn-emacs")) nil])
  (hcl-mode [cl-struct-package-desc hcl-mode (20151002 2049) "Major mode for Hashicorp" ((cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-hcl-mode")) nil] [cl-struct-package-desc hcl-mode (0 1) "Major mode for Hashicorp" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-hcl-mode")) nil])
  (headlong [cl-struct-package-desc headlong (20150417 826) "reckless completion" nil single "melpa" nil ((:url . "https://github.com/abo-abo/headlong") (:keywords "completion")) nil])
  (helm [cl-struct-package-desc helm (20151106 2158) "Helm is an Emacs incremental and narrowing framework" ((emacs (24)) (cl-lib (0 5)) (async (1 5)) (helm-core (1 8 0))) tar "melpa" nil ((:url . "https://emacs-helm.github.io/helm/")) nil] [cl-struct-package-desc helm (1 8 0) "Helm is an Emacs incremental and narrowing framework" ((emacs (24)) (cl-lib (0 5)) (async (1 5)) (helm-core (1 8 0))) tar "melpa-stable" nil ((:url . "https://emacs-helm.github.io/helm/")) nil])
  (helm-R [cl-struct-package-desc helm-R (20120819 1714) "helm-sources and some utilities for GNU R." ((helm (20120517)) (ess (20120509))) single "melpa" nil ((:url . "https://github.com/myuhe/helm-R.el") (:keywords "convenience")) nil])
  (helm-ack [cl-struct-package-desc helm-ack (20141030 526) "Ack command with helm interface" ((helm (1 0)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-helm-ack")) nil] [cl-struct-package-desc helm-ack (0 13) "Ack command with helm interface" ((helm (1 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-helm-ack")) nil])
  (helm-ad [cl-struct-package-desc helm-ad (20140807 230) "helm source for Active Directory" ((dash (2 8 0)) (helm (1 6 2))) single "melpa" nil ((:keywords "comm")) nil])
  (helm-ag-r [cl-struct-package-desc helm-ag-r (20131123 731) "Search something by ag and display by helm" ((helm (1 0))) single "melpa" nil ((:url . "https://github.com/yuutayamada/helm-ag-r") (:keywords "searching")) nil])
  (helm-anything [cl-struct-package-desc helm-anything (20141126 231) "Bridge between anything and helm" ((helm (20130406)) (anything (20120101))) single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/helm-anything.el") (:keywords "helm" "anything" "convenience" "search" "tools")) nil])
  (helm-aws [cl-struct-package-desc helm-aws (20141206 1208) "Manage AWS EC2 server instances directly from Emacs" ((helm (1 5 3))) single "melpa" nil ((:url . "https://github.com/istib/helm-aws")) nil] [cl-struct-package-desc helm-aws (1 0 0) "Manage AWS EC2 server instances directly from Emacs" ((helm (1 5 3))) single "melpa-stable" nil ((:url . "https://github.com/istib/helm-aws")) nil])
  (helm-backup [cl-struct-package-desc helm-backup (20151110 1) "Backup each file change using git" ((helm (1 5 5)) (s (1 8 0)) (cl-lib (0))) single "melpa" nil ((:url . "http://github.com/antham/helm-backup") (:keywords "backup" "convenience" "files" "tools" "vc")) nil] [cl-struct-package-desc helm-backup (0 2 0) "Backup each file change using git" ((helm (1 5 5)) (s (1 8 0))) single "melpa-stable" nil ((:url . "http://github.com/antham/helm-backup") (:keywords "backup")) nil])
  (helm-bibtex [cl-struct-package-desc helm-bibtex (20151111 1812) "A BibTeX bibliography manager based on Helm" ((helm (1 5 5)) (parsebib (1 0)) (s (1 9 0)) (dash (2 6 0)) (f (0 16 2)) (cl-lib (0 5))) single "melpa" nil nil nil])
  (helm-bibtexkey [cl-struct-package-desc helm-bibtexkey (20140214 704) "Bibtexkey source for helm" ((helm (1 5 8))) tar "melpa" nil ((:url . "https://github.com/kenbeese/helm-bibtexkey") (:keywords "bib" "tex")) nil])
  (helm-bind-key [cl-struct-package-desc helm-bind-key (20141108 2115) "helm-source for for bind-key." ((bind-key (1 0)) (helm (1 6 4))) single "melpa" nil ((:keywords "convenience" "emulation")) nil])
  (helm-bm [cl-struct-package-desc helm-bm (20131224 705) "helm sources for bm.el" ((bm (1 0)) (cl-lib (0 3)) (helm (1 5 7)) (s (1 8 0))) single "melpa" nil ((:url . "https://github.com/yasuyk/helm-bm") (:keywords "helm" "bookmark")) nil])
  (helm-bundle-show [cl-struct-package-desc helm-bundle-show (20150816 526) "bundle show with helm interface" ((helm (1 7 6))) single "melpa" nil ((:url . "https://github.com/masutaka/emacs-helm-bundle-show")) nil] [cl-struct-package-desc helm-bundle-show (1 1 1) "bundle show with helm interface" ((helm (1 7 6))) single "melpa-stable" nil ((:url . "https://github.com/masutaka/emacs-helm-bundle-show")) nil])
  (helm-c-moccur [cl-struct-package-desc helm-c-moccur (20150213 1942) "helm source for color-moccur.el" ((helm (20120811)) (color-moccur (2 71))) single "melpa" nil ((:keywords "convenience" "emulation")) nil])
  (helm-c-yasnippet [cl-struct-package-desc helm-c-yasnippet (20151001 802) "helm source for yasnippet.el" ((helm-core (1 7 7)) (yasnippet (0 8 0)) (cl-lib (0 3))) single "melpa" nil ((:keywords "convenience" "emulation")) nil] [cl-struct-package-desc helm-c-yasnippet (0 6 7) "helm source for yasnippet.el" ((helm-core (1 7 7)) (yasnippet (0 8 0)) (cl-lib (0 3))) single "melpa-stable" nil ((:keywords "convenience" "emulation")) nil])
  (helm-chrome [cl-struct-package-desc helm-chrome (20151014 2127) "Helm interface for Chrome bookmarks" ((helm (1 5)) (cl-lib (0 3)) (emacs (24))) single "melpa" nil ((:url . "https://github.com/kawabata/helm-chrome") (:keywords "tools")) nil])
  (helm-chronos [cl-struct-package-desc helm-chronos (20150528 1336) "helm interface for chronos timers" ((chronos (1 2)) (helm (1 7 1))) tar "melpa" nil ((:url . "http://github.com/dxknight/helm-chronos") (:keywords "calendar")) nil])
  (helm-cider-history [cl-struct-package-desc helm-cider-history (20150719 1420) "Helm interface for cider history" ((helm (1 4 0)) (cider (0 9 0))) single "melpa" nil ((:url . "https://github.com/Kungi/helm-cider-history") (:keywords "convenience")) nil])
  (helm-circe [cl-struct-package-desc helm-circe (20150316 2244) "helm circe buffer management." ((emacs (24)) (helm (0 0)) (circe (0 0)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/lesharris/helm-circe") (:keywords "helm" "circe")) nil] [cl-struct-package-desc helm-circe (0 3) "helm circe buffer management." ((emacs (24)) (helm (0 0)) (circe (0 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/lesharris/helm-circe") (:keywords "helm" "circe")) nil])
  (helm-cmd-t [cl-struct-package-desc helm-cmd-t (20150823 1157) "cmd-t style completion" nil tar "melpa" nil ((:url . "https://github.com/lewang/helm-cmd-t") (:keywords "helm" "project-management" "completion" "convenience" "cmd-t" "textmate")) nil])
  (helm-commandlinefu [cl-struct-package-desc helm-commandlinefu (20150610 2245) "Search and browse commandlinefu.com from helm" ((emacs (24 1)) (helm (1 7 0)) (json (1 3)) (let-alist (1 0 3))) single "melpa" nil ((:url . "https://github.com/xuchunyang/helm-commandlinefu") (:keywords "commandlinefu.com")) nil] [cl-struct-package-desc helm-commandlinefu (0 3) "Search and browse commandlinefu.com from helm" ((emacs (24 1)) (helm (1 7 0)) (json (1 3)) (let-alist (1 0 3))) single "melpa-stable" nil ((:url . "https://github.com/xuchunyang/helm-commandlinefu") (:keywords "commandlinefu.com")) nil])
  (helm-company [cl-struct-package-desc helm-company (20150917 408) "Helm interface for company-mode" ((helm (1 5 9)) (company (0 6 13))) single "melpa" nil ((:url . "https://github.com/yasuyk/helm-company")) nil])
  (helm-core [cl-struct-package-desc helm-core (20151104 0) "Development files for Helm" ((emacs (24)) (cl-lib (0 5)) (async (1 5))) tar "melpa" nil ((:url . "https://emacs-helm.github.io/helm/")) nil] [cl-struct-package-desc helm-core (1 8 0) "Development files for Helm" ((emacs (24)) (cl-lib (0 5)) (async (1 5))) tar "melpa-stable" nil ((:url . "https://emacs-helm.github.io/helm/")) nil])
  (helm-cscope [cl-struct-package-desc helm-cscope (20150609 649) "Helm interface for xcscope.el." ((xcscope (1 0)) (helm (1 6 7)) (cl-lib (0 5)) (emacs (24 1))) single "melpa" nil ((:url . "https://github.com/alpha22jp/helm-cscope.el") (:keywords "cscope" "helm")) nil] [cl-struct-package-desc helm-cscope (0 1 1) "Helm interface for xcscope.el." ((xcscope (1 0)) (helm (1 6 7)) (cl-lib (0 5)) (emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/alpha22jp/helm-cscope.el") (:keywords "cscope" "helm")) nil])
  (helm-css-scss [cl-struct-package-desc helm-css-scss (20140626 1725) "CSS/SCSS/LESS Selectors with helm interface" ((helm (1 0)) (emacs (24))) single "melpa" nil ((:url . "https://github.com/ShingoFukuyama/helm-css-scss") (:keywords "scss" "css" "less" "selector" "helm")) nil])
  (helm-ctest [cl-struct-package-desc helm-ctest (20150823 408) "Run ctest from within emacs" ((s (1 9 0)) (dash (2 11 0)) (helm-core (1 7 4))) single "melpa" nil ((:keywords "helm" "ctest")) nil])
  (helm-descbinds [cl-struct-package-desc helm-descbinds (20151019 230) "Yet Another `describe-bindings' with `helm'." ((helm (1 5))) single "melpa" nil ((:url . "https://github.com/emacs-helm/helm-descbinds") (:keywords "helm" "help")) nil] [cl-struct-package-desc helm-descbinds (1 7 1) "Yet Another `describe-bindings' with `helm'." nil single "melpa-stable" nil ((:keywords "helm" "help")) nil])
  (helm-dictionary [cl-struct-package-desc helm-dictionary (20141226 1136) "Helm source for looking up dictionaries" ((helm (1 5 5))) single "melpa" nil ((:url . "https://github.com/emacs-helm/helm-dictionary")) nil])
  (helm-dired-recent-dirs [cl-struct-package-desc helm-dired-recent-dirs (20131228 614) "Show recent dirs with helm.el support." ((helm (1 0))) single "melpa" nil ((:keywords "helm" "dired" "zsh")) nil])
  (helm-dirset [cl-struct-package-desc helm-dirset (20141204 1552) "helm sources for multi directories" ((f (0 16 2)) (helm (1 6 1)) (s (1 9 0))) single "melpa" nil ((:url . "http://101000lab.org") (:keywords "files" "directories")) nil])
  (helm-emmet [cl-struct-package-desc helm-emmet (20131013 2329) "helm sources for emmet-mode's snippets" ((helm (1 0)) (emmet-mode (1 0 2))) single "melpa" nil ((:url . "https://github.com/yasuyk/helm-emmet") (:keywords "convenience" "helm" "emmet")) nil])
  (helm-emms [cl-struct-package-desc helm-emms (20151001 1328) "Emms for Helm." ((helm (1 5)) (emms (0 0)) (cl-lib (0 5)) (emacs (24 1))) single "melpa" nil nil nil])
  (helm-filesets [cl-struct-package-desc helm-filesets (20140929 1135) "A helm source for emacs filesets" ((helm (1 6 3)) (filesets+ (0))) single "melpa" nil ((:url . "https://github.com/gcla/helm-filesets") (:keywords "filesets")) nil])
  (helm-firefox [cl-struct-package-desc helm-firefox (20150720 1118) "Firefox bookmarks" ((helm (1 5)) (cl-lib (0 5)) (emacs (24 1))) single "melpa" nil ((:url . "https://github.com/emacs-helm/helm-firefox")) nil] [cl-struct-package-desc helm-firefox (1 0) "Firefox bookmarks" ((helm (1 5)) (cl-lib (0 5)) (emacs (24 1))) single "melpa-stable" nil nil nil])
  (helm-flx [cl-struct-package-desc helm-flx (20151103 825) "Sort helm candidates by flx score" ((emacs (24 4)) (helm (1 7 9)) (flx (0 5))) single "melpa" nil ((:url . "https://github.com/PythonNut/helm-flx") (:keywords "convenience" "helm" "fuzzy" "flx")) nil])
  (helm-flycheck [cl-struct-package-desc helm-flycheck (20140915 752) "Show flycheck errors with helm" ((dash (2 4 0)) (flycheck (0 20 -3)) (helm (1 5 7))) single "melpa" nil ((:url . "https://github.com/yasuyk/helm-flycheck") (:keywords "helm" "flycheck")) nil])
  (helm-flymake [cl-struct-package-desc helm-flymake (20130716 2244) "helm interface for flymake" ((helm (1 0))) single "melpa" nil ((:url . "https://github.com/tam17aki")) nil])
  (helm-flyspell [cl-struct-package-desc helm-flyspell (20151026 912) "Helm extension for correcting words with flyspell" ((helm (1 6 5))) single "melpa" nil nil nil])
  (helm-fuzzier [cl-struct-package-desc helm-fuzzier (20151111 638) "Better fuzzy matching for Helm" ((emacs (24 3)) (helm (1 7 0))) single "melpa" nil ((:url . "http://github.com/EphramPerdition/helm-fuzzier") (:keywords "convenience" "helm" "fuzzy")) nil])
  (helm-fuzzy-find [cl-struct-package-desc helm-fuzzy-find (20150613 349) "Find file using Fuzzy Search" ((emacs (24 1)) (helm (1 7 0))) single "melpa" nil ((:url . "https://github.com/xuchunyang/helm-fuzzy-find") (:keywords "helm" "fuzzy" "find" "file")) nil])
  (helm-ghc [cl-struct-package-desc helm-ghc (20141105 659) "A Helm datasource for ghc-mod errors" ((emacs (24)) (cl-lib (0 5)) (helm (1 6 4)) (ghc (5 2 1 0))) single "melpa" nil ((:keywords "languages" "helm")) nil] [cl-struct-package-desc helm-ghc (0 1 0) "A Helm datasource for ghc-mod errors" ((emacs (24)) (cl-lib (0 5)) (helm (1 6 4)) (ghc (5 2 1 0))) single "melpa-stable" nil ((:keywords "languages" "helm")) nil])
  (helm-ghq [cl-struct-package-desc helm-ghq (20151113 638) "ghq with helm interface" ((helm (1 7 6))) single "melpa" nil ((:url . "https://github.com/masutaka/emacs-helm-ghq")) nil] [cl-struct-package-desc helm-ghq (1 4 6) "ghq with helm interface" ((helm (1 7 6))) single "melpa-stable" nil ((:url . "https://github.com/masutaka/emacs-helm-ghq")) nil])
  (helm-git [cl-struct-package-desc helm-git (20120630 1403) "Helm extension for Git." nil single "melpa" nil ((:url . "https://github.com/maio/helm-git") (:keywords "helm" "git")) nil])
  (helm-git-files [cl-struct-package-desc helm-git-files (20141212 517) "helm for git files" ((helm (1 5 9))) single "melpa" nil ((:keywords "helm" "git")) nil])
  (helm-git-grep [cl-struct-package-desc helm-git-grep (20140222 1822) "helm for git grep, an incremental git-grep(1)" ((helm (1 5 9))) single "melpa" nil ((:url . "https://github.com/yasuyk/helm-git-grep") (:keywords "helm" "git")) nil])
  (helm-github-stars [cl-struct-package-desc helm-github-stars (20150625 1523) "Helm integration for your starred repositories on github" ((helm (1 6 8)) (emacs (24 4))) single "melpa" nil ((:url . "https://github.com/Sliim/helm-github-stars") (:keywords "helm" "github" "stars")) nil] [cl-struct-package-desc helm-github-stars (1 3 2) "Helm integration for your starred repositories on github" ((helm (1 6 8)) (emacs (24 4))) single "melpa-stable" nil ((:url . "https://github.com/Sliim/helm-github-stars") (:keywords "helm" "github" "stars")) nil])
  (helm-gitignore [cl-struct-package-desc helm-gitignore (20150517 2056) "Generate .gitignore files with gitignore.io." ((gitignore-mode (1 1 0)) (helm (1 7 0)) (request (0 1 0)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/jupl/helm-gitignore") (:keywords "helm" "gitignore" "gitignore.io")) nil])
  (helm-gitlab [cl-struct-package-desc helm-gitlab (20150604 33) "Helm interface to Gitlab" ((s (1 9 0)) (dash (2 9 0)) (helm (1 0)) (gitlab (0))) single "melpa" nil ((:url . "https://github.com/nlamirault/emacs-gitlab") (:keywords "gitlab" "helm")) nil] [cl-struct-package-desc helm-gitlab (0 7 0) "Helm interface to Gitlab" ((s (1 9 0)) (dash (2 9 0)) (helm (1 0)) (gitlab (0))) single "melpa-stable" nil ((:url . "https://github.com/nlamirault/emacs-gitlab") (:keywords "gitlab" "helm")) nil])
  (helm-go-package [cl-struct-package-desc helm-go-package (20150603 604) "helm sources for Go programming language's package" ((helm (1 0)) (go-mode (9)) (deferred (0 3 2))) single "melpa" nil ((:url . "https://github.com/yasuyk/helm-go-package") (:keywords "helm" "go")) nil])
  (helm-google [cl-struct-package-desc helm-google (20141228 340) "Emacs Helm Interface for quick Google searches" ((helm (0)) (google (0))) single "melpa" nil ((:url . "https://github.com/steckerhalter/helm-google") (:keywords "helm" "google" "search" "browse")) nil])
  (helm-grepint [cl-struct-package-desc helm-grepint (20151030 937) "Generic helm interface to grep" ((helm (1 0)) (emacs (24))) single "melpa" nil ((:keywords "grep" "grepping" "searching" "helm")) nil])
  (helm-growthforecast [cl-struct-package-desc helm-growthforecast (20140119 1944) "helm extensions for growthforecast." ((helm (1 5 9))) single "melpa" nil ((:url . "https://github.com/daic-h/helm-growthforecast")) nil])
  (helm-hatena-bookmark [cl-struct-package-desc helm-hatena-bookmark (20150615 840) "Hatena::Bookmark with helm interface" ((helm (1 6 9))) single "melpa" nil ((:url . "https://github.com/masutaka/emacs-helm-hatena-bookmark")) nil] [cl-struct-package-desc helm-hatena-bookmark (2 0 3) "Hatena::Bookmark with helm interface" ((helm (1 6 9))) single "melpa-stable" nil ((:url . "https://github.com/masutaka/emacs-helm-hatena-bookmark")) nil])
  (helm-hayoo [cl-struct-package-desc helm-hayoo (20151013 2351) "Source and configured helm for searching hayoo" ((helm (1 6 0)) (json (1 2)) (haskell-mode (13 7))) single "melpa" nil ((:keywords "helm")) nil] [cl-struct-package-desc helm-hayoo (0 0 5) "Source and configured helm for searching hayoo" ((helm (1 6 0)) (json (1 2)) (haskell-mode (13 7))) single "melpa-stable" nil ((:keywords "helm")) nil])
  (helm-hoogle [cl-struct-package-desc helm-hoogle (20150919 221) "Use helm to navigate query results from Hoogle" ((helm (1 6 2)) (emacs (24 4))) single "melpa" nil ((:url . "https://github.com/jwiegley/haskell-config") (:keywords "haskell" "programming" "hoogle")) nil])
  (helm-idris [cl-struct-package-desc helm-idris (20141202 957) "A Helm datasource for Idris documentation, queried from the compiler" ((helm (0 0 0)) (idris-mode (0 9 14))) single "melpa" nil ((:keywords "languages" "helm")) nil])
  (helm-itunes [cl-struct-package-desc helm-itunes (20151012 2348) "Play local iTunes and Spotify tracks" ((helm (1 6 1))) single "melpa" nil ((:url . "https://github.com/daschwa/helm-itunes")) nil])
  (helm-j-cheatsheet [cl-struct-package-desc helm-j-cheatsheet (20131228 441) "Quick J reference for Emacs" ((helm (1 5 3))) single "melpa" nil ((:url . "https://github.com/abo-abo/helm-j-cheatsheet")) nil])
  (helm-jstack [cl-struct-package-desc helm-jstack (20150602 2122) "Helm interface to Jps & Jstack for Java/JVM processes" ((emacs (24)) (helm (1 7 0)) (cl-lib (0 5))) single "melpa" nil ((:keywords "java" "jps" "jstack" "jvm" "emacs" "elisp" "helm")) nil])
  (helm-lobsters [cl-struct-package-desc helm-lobsters (20150213 746) "helm front-end for lobste.rs" ((helm (1 0)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/julienXX/helm-lobste.rs")) nil])
  (helm-ls-git [cl-struct-package-desc helm-ls-git (20151031 2256) "list git files." ((helm (1 7 8))) single "melpa" nil nil nil] [cl-struct-package-desc helm-ls-git (1 8 0) "list git files." ((helm (1 7 8))) single "melpa-stable" nil nil nil])
  (helm-ls-hg [cl-struct-package-desc helm-ls-hg (20150908 2243) "List hg files in hg project." ((helm (1 7 8))) single "melpa" nil nil nil] [cl-struct-package-desc helm-ls-hg (1 7 8) "List hg files in hg project." ((helm (1 7 8))) single "melpa-stable" nil nil nil])
  (helm-ls-svn [cl-struct-package-desc helm-ls-svn (20150717 39) "helm extension to list svn files" ((emacs (24 1)) (helm (1 7 0)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://svn.macports.org/repository/macports/users/chunyang/helm-ls-svn.el/helm-ls-svn.el") (:keywords "helm" "svn")) nil])
  (helm-make [cl-struct-package-desc helm-make (20150915 9) "Select a Makefile target with helm" ((helm (1 5 3)) (projectile (0 11 0))) single "melpa" nil ((:url . "https://github.com/abo-abo/helm-make") (:keywords "makefile")) nil] [cl-struct-package-desc helm-make (0 1 0) "Select a Makefile target with helm" ((helm (1 5 3)) (projectile (0 11 0))) single "melpa-stable" nil ((:url . "https://github.com/abo-abo/helm-make") (:keywords "makefile")) nil])
  (helm-migemo [cl-struct-package-desc helm-migemo (20151009 2056) "Migemo plug-in for helm" ((emacs (24 4)) (helm-core (1 7 8)) (migemo (1 9)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/emacs-jp/helm-migemo") (:keywords "matching" "convenience" "tools" "i18n")) nil] [cl-struct-package-desc helm-migemo (1 22) "Migemo plug-in for helm" ((helm-core (1 7 8)) (migemo (1 9)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/emacs-jp/helm-migemo") (:keywords "matching" "convenience" "tools" "i18n")) nil])
  (helm-mode-manager [cl-struct-package-desc helm-mode-manager (20140224 1504) "Select and toggle major and minor modes with helm" ((helm (1 5 3))) single "melpa" nil ((:url . "https://github.com/istib/helm-mode-manager")) nil] [cl-struct-package-desc helm-mode-manager (1 0 0) "Select and toggle major and minor modes with helm" ((helm (1 5 3))) single "melpa-stable" nil ((:url . "https://github.com/istib/helm-mode-manager")) nil])
  (helm-mt [cl-struct-package-desc helm-mt (20151104 2120) "helm multi-term management." ((emacs (24)) (helm (0 0)) (multi-term (0 0)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/dfdeshom/helm-mt") (:keywords "helm" "multi-term")) nil] [cl-struct-package-desc helm-mt (0 6) "helm multi-term management." ((emacs (24)) (helm (0 0)) (multi-term (0 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/dfdeshom/helm-mt") (:keywords "helm" "multi-term")) nil])
  (helm-mu [cl-struct-package-desc helm-mu (20151019 944) "Helm sources for searching emails and contacts" ((helm (1 5 5))) single "melpa" nil ((:url . "https://github.com/emacs-helm/helm-mu")) nil])
  (helm-nixos-options [cl-struct-package-desc helm-nixos-options (20151013 1609) "Helm Interface for nixos-options" ((nixos-options (0 0 1)) (helm (1 5 6))) single "melpa" nil ((:url . "http://www.github.com/travisbhartwell/nix-emacs/") (:keywords "unix")) nil] [cl-struct-package-desc helm-nixos-options (0 0 1) "Helm Interface for nixos-options" ((nixos-options (0 0 1)) (helm (1 5 6))) single "melpa-stable" nil ((:url . "http://www.github.com/travisbhartwell/nix-emacs/") (:keywords "unix")) nil])
  (helm-open-github [cl-struct-package-desc helm-open-github (20151009 2331) "Utilities of Opening Github Page" ((helm-core (1 7 7)) (gh (0 8 2)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-helm-open-github")) nil] [cl-struct-package-desc helm-open-github (0 14) "Utilities of Opening Github Page" ((helm-core (1 7 7)) (gh (0 8 2)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-helm-open-github")) nil])
  (helm-orgcard [cl-struct-package-desc helm-orgcard (20151001 824) "browse the orgcard by helm" ((helm-core (1 7 7))) single "melpa" nil ((:url . "https://github.com/emacs-jp/helm-orgcard") (:keywords "convenience" "helm" "org")) nil] [cl-struct-package-desc helm-orgcard (0 2) "browse the orgcard by helm" ((helm-core (1 7 7))) single "melpa-stable" nil ((:url . "https://github.com/emacs-jp/helm-orgcard") (:keywords "convenience" "helm" "org")) nil])
  (helm-package [cl-struct-package-desc helm-package (20140108 2223) "Listing ELPA packages with helm interface" ((helm (1 0)) (cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-helm-package")) nil] [cl-struct-package-desc helm-package (0 2) "Listing ELPA packages with helm interface" ((helm (1 0)) (cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-helm-package")) nil])
  (helm-pages [cl-struct-package-desc helm-pages (20150117 1433) "Pages in current buffer as Helm datasource" ((helm (1 6 5)) (emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:keywords "convenience" "helm" "outlines")) nil] [cl-struct-package-desc helm-pages (0 1 1) "Pages in current buffer as Helm datasource" ((helm (1 6 5)) (emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:keywords "convenience" "helm" "outlines")) nil])
  (helm-perldoc [cl-struct-package-desc helm-perldoc (20151031 2027) "perldoc with helm interface" ((helm-core (1 7 7)) (deferred (0 3 1)) (cl-lib (0 5))) tar "melpa" nil ((:url . "https://github.com/syohex/emacs-helm-perldoc")) nil] [cl-struct-package-desc helm-perldoc (0 7) "perldoc with helm interface" ((helm (1 0)) (deferred (0 3 1)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-helm-perldoc")) nil])
  (helm-proc [cl-struct-package-desc helm-proc (20140504 157) "Helm interface for managing system processes" ((helm (1 6 0))) tar "melpa" nil nil nil] [cl-struct-package-desc helm-proc (0 0 4) "Helm interface for managing system processes" ((helm (1 6 0))) tar "melpa-stable" nil nil nil])
  (helm-project-persist [cl-struct-package-desc helm-project-persist (20150612 910) "Helm integration for project-persist package" ((helm (1 5 2)) (project-persist (0 1 4))) single "melpa" nil ((:keywords "project-persist" "project" "helm")) nil] [cl-struct-package-desc helm-project-persist (1 0 0) "Helm integration for project-persist package" ((helm (1 5 2)) (project-persist (0 1 4))) single "melpa-stable" nil ((:keywords "project-persist" "project" "helm")) nil])
  (helm-prosjekt [cl-struct-package-desc helm-prosjekt (20140128 2317) "Helm integration for prosjekt." ((prosjekt (0 3)) (helm (1 5 9))) single "melpa" nil ((:url . "https://github.com/abingham/prosjekt")) nil])
  (helm-pt [cl-struct-package-desc helm-pt (20150308 1915) "Helm interface to the platinum searcher" ((helm (1 5 6))) tar "melpa" nil ((:keywords "helm" "platinum searcher")) nil] [cl-struct-package-desc helm-pt (0 2) "Helm interface to the platinum searcher" ((helm (1 5 6))) tar "melpa-stable" nil ((:keywords "helm" "platinum searcher")) nil])
  (helm-pydoc [cl-struct-package-desc helm-pydoc (20151008 724) "pydoc with helm interface" ((helm-core (1 7 4)) (cl-lib (0 5))) tar "melpa" nil ((:url . "https://github.com/syohex/emacs-helm-pydoc")) nil] [cl-struct-package-desc helm-pydoc (0 7) "pydoc with helm interface" ((helm-core (1 7 4)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-helm-pydoc")) nil])
  (helm-rails [cl-struct-package-desc helm-rails (20130424 819) "Helm extension for Rails projects." ((helm (1 5 1)) (inflections (1 1))) single "melpa" nil ((:url . "https://github.com/asok/helm-rails") (:keywords "helm" "rails" "git")) nil])
  (helm-rb [cl-struct-package-desc helm-rb (20131123 839) "Search Ruby's method by ag and display helm" ((helm (1 0)) (helm-ag-r (20131123))) tar "melpa" nil ((:url . "https://github.com/yuutayamada/helm-rb") (:keywords "searching" "ruby")) nil])
  (helm-recoll [cl-struct-package-desc helm-recoll (20151113 541) "helm interface for the recoll desktop search tool." ((helm (1 7 7))) single "melpa" nil ((:url . "https://github.com/emacs-helm/helm-recoll") (:keywords "convenience")) nil] [cl-struct-package-desc helm-recoll (0 2) "helm interface for the recoll desktop search tool." ((helm (1 7 7))) single "melpa-stable" nil ((:url . "https://github.com/emacs-helm/helm-recoll") (:keywords "convenience")) nil])
  (helm-rhythmbox [cl-struct-package-desc helm-rhythmbox (20150813 608) "control Rhythmbox's play queue via Helm" ((helm (1 5 0)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/mrBliss/helm-rhythmbox")) nil])
  (helm-robe [cl-struct-package-desc helm-robe (20140805 659) "completing read function for robe" ((helm (1 0))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-helm-robe")) nil] [cl-struct-package-desc helm-robe (0 1) "completing read function for robe" ((helm (1 0))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-helm-robe")) nil])
  (helm-rubygems-local [cl-struct-package-desc helm-rubygems-local (20130711 1811) "Installed local rubygems find-file for helm" ((helm (1 5 3))) single "melpa" nil ((:url . "https://github.com/f-kubotar/helm-rubygems-local")) nil])
  (helm-rubygems-org [cl-struct-package-desc helm-rubygems-org (20140826 456) "Use helm to search rubygems.org" ((emacs (24)) (helm (1 6 3)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/neomantic/helm-rubygems-org") (:keywords "ruby" "rubygems" "gemfile" "helm")) nil] [cl-struct-package-desc helm-rubygems-org (0 0 1) "Use helm to search rubygems.org" ((emacs (24)) (helm (1 6 3)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/neomantic/helm-rubygems-org") (:keywords "ruby" "rubygems" "gemfile" "helm")) nil])
  (helm-sage [cl-struct-package-desc helm-sage (20150827 2034) "A helm extension for sage-shell-mode." ((cl-lib (0 5)) (helm (1 5 6)) (sage-shell-mode (0 0 8))) single "melpa" nil ((:url . "https://github.com/stakemori/helm-sage") (:keywords "sage" "math" "helm")) nil] [cl-struct-package-desc helm-sage (0 0 4) "A helm extension for sage-shell-mode." ((cl-lib (0 5)) (helm (1 5 6)) (sage-shell-mode (0 0 8))) single "melpa-stable" nil ((:url . "https://github.com/stakemori/helm-sage") (:keywords "sage" "math" "helm")) nil])
  (helm-sheet [cl-struct-package-desc helm-sheet (20130630 539) "helm sources for sheet" ((helm (1 0))) single "melpa" nil ((:url . "https://github.com/yasuyk/helm-sheet") (:keywords "helm" "sheet")) nil])
  (helm-spaces [cl-struct-package-desc helm-spaces (20130605 900) "helm sources for spaces" ((helm (1 0)) (spaces (0 1 0))) single "melpa" nil ((:url . "https://github.com/yasuyk/helm-spaces") (:keywords "helm" "frames" "convenience")) nil] [cl-struct-package-desc helm-spaces (0 2) "helm sources for spaces" ((helm (1 0)) (spaces (0 1 0))) single "melpa-stable" nil ((:url . "https://github.com/yasuyk/helm-spaces") (:keywords "helm" "frames" "convenience")) nil])
  (helm-spotify [cl-struct-package-desc helm-spotify (20131014 1421) "Control Spotify with Helm." ((helm (0 0 0)) (multi (2 0 0))) single "melpa" nil ((:url . "https://github.com/krisajenkins/helm-spotify") (:keywords "helm" "spotify")) nil])
  (helm-swoop [cl-struct-package-desc helm-swoop (20151022 1750) "Efficiently hopping squeezed lines powered by helm interface" ((helm (1 0)) (emacs (24))) single "melpa" nil ((:url . "https://github.com/ShingoFukuyama/helm-swoop") (:keywords "helm" "swoop" "inner" "buffer" "search")) nil] [cl-struct-package-desc helm-swoop (1 5 1) "Efficiently hopping squeezed lines powered by helm interface" ((helm (1 0)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/ShingoFukuyama/helm-swoop") (:keywords "helm" "swoop" "inner" "buffer" "search")) nil])
  (helm-themes [cl-struct-package-desc helm-themes (20151008 2321) "Color theme selection with helm interface" ((helm-core (1 7 7))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-helm-themes")) nil] [cl-struct-package-desc helm-themes (0 5) "Color theme selection with helm interface" ((helm (1 0))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-helm-themes")) nil])
  (helm-unicode [cl-struct-package-desc helm-unicode (20150428 1154) "Helm command for unicode characters." ((helm (1 6)) (emacs (24 4))) single "melpa" nil nil nil] [cl-struct-package-desc helm-unicode (0 0 2) "Helm command for unicode characters." ((helm (1 6)) (emacs (24 4))) single "melpa-stable" nil nil nil])
  (helm-w32-launcher [cl-struct-package-desc helm-w32-launcher (20141223 1214) "Start Menu entry launcher using Helm" ((emacs (24)) (helm (1 6 5)) (cl-lib (0 5))) tar "melpa" nil ((:url . "https://github.com/Fanael/helm-w32-launcher")) nil] [cl-struct-package-desc helm-w32-launcher (0 1 6) "Start Menu entry launcher using Helm" ((emacs (24)) (helm (1 6 5)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/Fanael/helm-w32-launcher")) nil])
  (helm-w3m [cl-struct-package-desc helm-w3m (20150722 824) "W3m bookmark - helm interface." ((helm (1 5)) (w3m (0 0)) (cl-lib (0 5)) (emacs (24 1))) single "melpa" nil nil nil])
  (helm-wordnet [cl-struct-package-desc helm-wordnet (20150921 1433) "Helm interface to local wordnet dictionary" ((emacs (24)) (helm (1 7 0)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/raghavgautam/helm-wordnet") (:keywords "dictionary" "wordnet" "emacs" "elisp" "helm")) nil])
  (helm-words [cl-struct-package-desc helm-words (20150413 1318) "No description available." nil single "melpa" nil nil nil])
  (helm-zhihu-daily [cl-struct-package-desc helm-zhihu-daily (20151006 119) "Helm interface for 知乎日报 (http://daily.zhihu.com)" ((helm (1 0)) (cl-lib (0 5)) (emacs (24 4))) single "melpa" nil ((:url . "https://github.com/xuchunyang/helm-zhihu-daily")) nil] [cl-struct-package-desc helm-zhihu-daily (0 2) "Helm interface for 知乎日报 (http://daily.zhihu.com)" ((helm (1 0)) (cl-lib (0 5)) (emacs (24 4))) tar "melpa-stable" nil ((:url . "https://github.com/xuchunyang/helm-zhihu-daily")) nil])
  (help+ [cl-struct-package-desc help+ (20150702 943) "Extensions to `help.el'." nil single "melpa" nil ((:url . "http://www.emacswiki.org/help+.el") (:keywords "help")) nil])
  (help-fns+ [cl-struct-package-desc help-fns+ (20150909 838) "Extensions to `help-fns.el'." nil single "melpa" nil ((:url . "http://www.emacswiki.org/help-fns+.el") (:keywords "help" "faces" "characters" "packages" "description")) nil])
  (help-mode+ [cl-struct-package-desc help-mode+ (20150104 1416) "Extensions to `help-mode.el'" nil single "melpa" nil ((:url . "http://www.emacswiki.org/help-mode+.el") (:keywords "help")) nil])
  (hemisu-theme [cl-struct-package-desc hemisu-theme (20130508 1144) "Hemisu for Emacs." nil tar "melpa" nil ((:url . "http://github/anrzejsliwa/django-theme")) nil])
  (hgignore-mode [cl-struct-package-desc hgignore-mode (20150412 1100) "a major mode for editing hgignore files" nil single "melpa" nil ((:url . "http://github.com/omajid/hgignore-mode") (:keywords "convenience" "vc" "hg")) nil])
  (hi2 [cl-struct-package-desc hi2 (20141005 1231) "indentation module for Haskell Mode" nil single "melpa" nil ((:url . "https://github.com/errge/hi2") (:keywords "indentation" "haskell")) nil] [cl-struct-package-desc hi2 (1 0) "indentation module for Haskell Mode" nil single "melpa-stable" nil ((:url . "https://github.com/errge/hi2") (:keywords "indentation" "haskell")) nil])
  (hide-region [cl-struct-package-desc hide-region (20140201 314) "hide regions of text using overlays" nil single "melpa" nil ((:url . "http://mathias.dahl.net/pgm/emacs/elisp/hide-region.el") (:keywords "hide" "region")) nil])
  (hideshow-org [cl-struct-package-desc hideshow-org (20120223 1450) "Provides org-mode like hide and show for hideshow.el" nil single "melpa" nil ((:keywords "c" "c++" "java" "lisp" "tools" "editing" "comments" "blocks" "hiding" "outlines" "org-mode")) nil])
  (highlight-blocks [cl-struct-package-desc highlight-blocks (20150701 1106) "Highlight the blocks point is in" ((emacs (24))) single "melpa" nil ((:url . "https://github.com/Fanael/highlight-blocks")) nil] [cl-struct-package-desc highlight-blocks (0 1 15) "Highlight the blocks point is in" ((emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/Fanael/highlight-blocks")) nil])
  (highlight-chars [cl-struct-package-desc highlight-chars (20150630 1435) "Highlight specified sets of characters, including whitespace." nil single "melpa" nil ((:url . "http://www.emacswiki.org/highlight-chars.el") (:keywords "highlight" "whitespace" "characters" "unicode")) nil])
  (highlight-cl [cl-struct-package-desc highlight-cl (20091012 1030) "Highlighting `cl' functions." nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/highlight-cl.el") (:keywords "faces")) nil])
  (highlight-defined [cl-struct-package-desc highlight-defined (20141225 730) "Syntax highlighting of known Elisp symbols" ((emacs (24))) single "melpa" nil ((:url . "https://github.com/Fanael/highlight-defined")) nil] [cl-struct-package-desc highlight-defined (0 1 5) "Syntax highlighting of known Elisp symbols" ((emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/Fanael/highlight-defined")) nil])
  (highlight-numbers [cl-struct-package-desc highlight-numbers (20150531 607) "Highlight numbers in source code" ((emacs (24)) (parent-mode (2 0))) single "melpa" nil ((:url . "https://github.com/Fanael/highlight-numbers")) nil] [cl-struct-package-desc highlight-numbers (0 2 1) "Highlight numbers in source code" ((emacs (24)) (parent-mode (2 0))) single "melpa-stable" nil ((:url . "https://github.com/Fanael/highlight-numbers")) nil])
  (highlight-quoted [cl-struct-package-desc highlight-quoted (20140916 1122) "Highlight Lisp quotes and quoted symbols" ((emacs (24))) single "melpa" nil ((:url . "https://github.com/Fanael/highlight-quoted")) nil] [cl-struct-package-desc highlight-quoted (0 1) "Highlight Lisp quotes and quoted symbols" ((emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/Fanael/highlight-quoted")) nil])
  (highlight-stages [cl-struct-package-desc highlight-stages (20150421 2057) "highlight staged (quasi-quoted) expressions" nil single "melpa" nil ((:url . "http://hins11.yu-yake.com/")) nil])
  (highlight-tail [cl-struct-package-desc highlight-tail (20140415 1841) "draw a colourful \"tail\" while you write" nil single "melpa" nil ((:keywords "highlight" "tail" "eye-candy" "visual-effect" "light" "color" "burn")) nil])
  (highlight-thing [cl-struct-package-desc highlight-thing (20151001 21) "Minimalistic minor mode to highlight current thing under point." nil single "melpa" nil ((:url . "https://github.com/fgeller/highlight-thing.el") (:keywords "highlight" "thing" "symbol")) nil])
  (highlight-unique-symbol [cl-struct-package-desc highlight-unique-symbol (20130611 2242) "highlight symbols which not appear in the repository" ((deferred (0 3 2))) single "melpa" nil ((:url . "https://github.com/hitode909/emacs-highlight-unique-symbol")) nil])
  (highlight2clipboard [cl-struct-package-desc highlight2clipboard (20151020 1140) "Copy text to clipboard with highlighting." ((htmlize (1 47))) tar "melpa" nil ((:keywords "tools")) nil])
  (hindent [cl-struct-package-desc hindent (20151113 24) "Indent haskell code using the \"hindent\" program" ((cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/chrisdone/hindent")) nil] [cl-struct-package-desc hindent (5 4 3) "Indent haskell code using the \"hindent\" program" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/chrisdone/hindent")) nil])
  (hippie-exp-ext [cl-struct-package-desc hippie-exp-ext (20151011 145) "Extension of hippie-expand" nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/hippie-exp-ext.el") (:keywords "abbrev" "convenience" "completions" "hippie-expand")) nil])
  (hipster-theme [cl-struct-package-desc hipster-theme (20141205 2005) "A low contrast color theme for Emacs." nil single "melpa" nil ((:url . "http://github.com/xzerocode/hispter-theme")) nil])
  (history [cl-struct-package-desc history (20150409 1734) "History utility for source code navigation" ((emacs (24 3))) tar "melpa" nil ((:url . "https://github.com/boyw165/history")) nil] [cl-struct-package-desc history (1 0 0) "History utility for source code navigation" ((emacs (24 3))) tar "melpa-stable" nil ((:url . "https://github.com/boyw165/history")) nil])
  (historyf [cl-struct-package-desc historyf (20131203 22) "file history library like browser" nil single "melpa" nil ((:url . "https://github.com/k1LoW/emacs-historyf")) nil] [cl-struct-package-desc historyf (0 0 8) "file history library like browser" nil single "melpa-stable" nil ((:url . "https://github.com/k1LoW/emacs-historyf")) nil])
  (hiwin [cl-struct-package-desc hiwin (20150825 127) "Visible active window mode." nil single "melpa" nil ((:keywords "faces" "editing" "emulating")) nil])
  (hl-anything [cl-struct-package-desc hl-anything (20150219 531) "Highlight symbols, selections, enclosing parens and more." ((emacs (24 3))) tar "melpa" nil nil nil] [cl-struct-package-desc hl-anything (0 0 9) "Highlight symbols, selections, enclosing parens and more." ((emacs (24 3))) tar "melpa-stable" nil nil nil])
  (hl-defined [cl-struct-package-desc hl-defined (20150104 1420) "Highlight defined or undefined symbols in Emacs-Lisp." nil single "melpa" nil ((:url . "http://www.emacswiki.org/hl-defined.el") (:keywords "highlight" "lisp" "functions")) nil])
  (hl-indent [cl-struct-package-desc hl-indent (20141227 1330) "Highlight irregular indentation." ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/ikirill/hl-indent") (:keywords "convenience" "faces")) nil])
  (hl-line+ [cl-struct-package-desc hl-line+ (20150104 1422) "Extensions to hl-line.el." nil single "melpa" nil ((:url . "http://www.emacswiki.org/hl-line+.el") (:keywords "highlight" "cursor" "accessibility")) nil])
  (hl-todo [cl-struct-package-desc hl-todo (20151025 1220) "highlight TODO keywords" nil single "melpa" nil ((:url . "http://github.com/tarsius/hl-todo") (:keywords "convenience")) nil] [cl-struct-package-desc hl-todo (1 4 5) "highlight TODO keywords" nil single "melpa-stable" nil ((:url . "http://github.com/tarsius/hl-todo") (:keywords "convenience")) nil])
  (hoa-pp-mode [cl-struct-package-desc hoa-pp-mode (20151027 36) "Major mode for Hoa PP grammars" ((emacs (24 1)) (names (20150723 0))) single "melpa" nil ((:url . "https://github.com/hoaproject/Contributions-Emacs-Pp") (:keywords "php" "hoa")) nil] [cl-struct-package-desc hoa-pp-mode (0 3 0) "Major mode for Hoa PP grammars" ((emacs (24 1)) (names (20150723 0))) single "melpa-stable" nil ((:url . "https://github.com/hoaproject/Contributions-Emacs-Pp") (:keywords "php" "hoa")) nil])
  (homebrew-mode [cl-struct-package-desc homebrew-mode (20151030 651) "minor mode for editing Homebrew formulae" ((emacs (24 4)) (inf-ruby (2 4 0)) (dash (1 2 0))) single "melpa" nil ((:url . "https://github.com/dunn/homebrew-mode") (:keywords "homebrew" "brew" "ruby")) nil] [cl-struct-package-desc homebrew-mode (1 3 2) "minor mode for editing Homebrew formulae" ((emacs (24 4)) (inf-ruby (2 4 0)) (dash (1 2 0))) single "melpa-stable" nil ((:url . "https://github.com/dunn/homebrew-mode") (:keywords "homebrew" "brew" "ruby")) nil])
  (hookify [cl-struct-package-desc hookify (20141216 1409) "Interactive commands to create temporary hooks" ((s (1 9 0)) (dash (1 5 0))) single "melpa" nil ((:url . "https://github.com/Silex/hookify") (:keywords "hook" "convenience")) nil] [cl-struct-package-desc hookify (0 2 1) "Interactive commands to create temporary hooks" ((s (1 9 0)) (dash (1 5 0))) single "melpa-stable" nil ((:url . "https://github.com/Silex/hookify") (:keywords "hook" "convenience")) nil])
  (hound [cl-struct-package-desc hound (20150217 949) "Display hound search results in a compilation window" ((web (1 0)) (cl-lib (0 5))) single "melpa" nil nil nil])
  (howdoi [cl-struct-package-desc howdoi (20150203 1643) "Instant coding answers via Emacs." nil tar "melpa" nil nil nil])
  (html-to-markdown [cl-struct-package-desc html-to-markdown (20151105 40) "HTML to Markdown converter written in Emacs-lisp." ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/Bruce-Connor/html-to-markdown") (:keywords "tools" "wp" "languages")) nil] [cl-struct-package-desc html-to-markdown (1 5 1) "HTML to Markdown converter written in Emacs-lisp." nil single "melpa-stable" nil ((:url . "http://github.com/Bruce-Connor/html-to-markdown") (:keywords "tools" "wp" "languages")) nil])
  (http [cl-struct-package-desc http (20150716 759) "Yet another HTTP client" ((emacs (24)) (cl-lib (0 5)) (request (0 2 0))) single "melpa" nil ((:url . "https://github.com/emacs-pe/http.el") (:keywords "convenience")) nil])
  (http-post-simple [cl-struct-package-desc http-post-simple (20131010 2058) "HTTP POST requests using the url library" nil single "melpa" nil ((:keywords "comm" "data" "processes" "hypermedia")) nil])
  (httprepl [cl-struct-package-desc httprepl (20141101 1034) "An HTTP REPL" ((s (1 9 0)) (dash (2 5 0)) (emacs (24))) single "melpa" nil ((:url . "https://github.com/gregsexton/httprepl.el") (:keywords "http" "repl")) nil] [cl-struct-package-desc httprepl (1 1) "An HTTP REPL" ((s (1 9 0)) (dash (2 5 0)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/gregsexton/httprepl.el") (:keywords "http" "repl")) nil])
  (hy-mode [cl-struct-package-desc hy-mode (20151025 543) "Major mode for Hy code" nil single "melpa" nil ((:url . "http://github.com/hylang/hy-mode") (:keywords "languages" "lisp")) nil])
  (hyai [cl-struct-package-desc hyai (20151112 425) "Haskell Yet Another Indentation" ((cl-lib (0 5)) (emacs (24))) single "melpa" nil ((:url . "https://github.com/iquiw/hyai")) nil] [cl-struct-package-desc hyai (1 0 0) "Haskell Yet Another Indentation" ((cl-lib (0 5)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/iquiw/hyai")) nil])
  (hyde [cl-struct-package-desc hyde (20150615 1025) "Major mode to help create and manage Jekyll blogs" nil tar "melpa" nil nil nil] [cl-struct-package-desc hyde (0 2) "No description available." nil tar "melpa-stable" nil nil nil])
  (i2b2-mode [cl-struct-package-desc i2b2-mode (20140709 1804) "Highlights corresponding PHI data in the text portion of an i2b2 XML Document." nil single "melpa" nil ((:keywords "xml" "phi" "i2b2" "deidi2b2")) nil])
  (ibuffer-git [cl-struct-package-desc ibuffer-git (20110508 31) "show git status in ibuffer column" nil single "melpa" nil ((:keywords "convenience")) nil])
  (ibuffer-projectile [cl-struct-package-desc ibuffer-projectile (20150121 837) "Group ibuffer's list by projectile root" ((projectile (0 11 0))) single "melpa" nil ((:url . "http://github.com/purcell/ibuffer-projectile") (:keywords "themes")) nil] [cl-struct-package-desc ibuffer-projectile (0 2) "Group ibuffer's list by projectile root" ((projectile (0 11 0))) single "melpa-stable" nil ((:url . "http://github.com/purcell/ibuffer-projectile") (:keywords "themes")) nil])
  (ibuffer-rcirc [cl-struct-package-desc ibuffer-rcirc (20150215 1318) "Ibuffer integration for rcirc" ((cl-lib (0 2))) single "melpa" nil ((:url . "https://github.com/fgallina/ibuffer-rcirc") (:keywords "buffer" "convenience" "comm")) nil])
  (ibuffer-tramp [cl-struct-package-desc ibuffer-tramp (20150527 1335) "Group ibuffer's list by TRAMP connection" nil single "melpa" nil ((:url . "http://github.com/svend/ibuffer-tramp") (:keywords "convenience")) nil])
  (icicles [cl-struct-package-desc icicles (20151015 1551) "Minibuffer input completion and cycling." nil tar "melpa" nil ((:url . "http://www.emacswiki.org/icicles.el") (:keywords "extensions" "help" "abbrev" "local" "minibuffer" "projects" "keys" "apropos" "completion" "matching" "regexp" "command")) nil])
  (icomplete+ [cl-struct-package-desc icomplete+ (20150619 803) "Extensions to `icomplete.el'." nil single "melpa" nil ((:url . "http://www.emacswiki.org/icomplete+.el") (:keywords "help" "abbrev" "internal" "extensions" "local" "completion" "matching")) nil])
  (id-manager [cl-struct-package-desc id-manager (20150605 2039) "id-password management" nil single "melpa" nil ((:keywords "password" "convenience")) nil])
  (identica-mode [cl-struct-package-desc identica-mode (20130204 1453) "Major mode API client for status.net open microblogging" nil tar "melpa" nil ((:url . "http://blog.gabrielsaldana.org/identica-mode-for-emacs/") (:keywords "identica" "web")) nil] [cl-struct-package-desc identica-mode (1 3 1) "Major mode API client for status.net open microblogging" nil tar "melpa-stable" nil ((:url . "http://blog.gabrielsaldana.org/identica-mode-for-emacs/") (:keywords "identica" "web")) nil])
  (ido-at-point [cl-struct-package-desc ido-at-point (20151021 57) "ido-style completion-at-point" ((emacs (24))) single "melpa" nil ((:url . "https://github.com/katspaugh/ido-at-point") (:keywords "convenience" "abbrev")) nil])
  (ido-clever-match [cl-struct-package-desc ido-clever-match (20151011 1026) "Alternative matcher for ido." ((emacs (24 4)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/Bogdanp/ido-clever-match") (:keywords "ido" "flex")) nil])
  (ido-complete-space-or-hyphen [cl-struct-package-desc ido-complete-space-or-hyphen (20130228 208) "Complete SPACE or HYPHEN when type SPACE in ido" nil single "melpa" nil ((:url . "https://github.com/doitian/ido-complete-space-or-hyphen") (:keywords "ido" "completion")) nil] [cl-struct-package-desc ido-complete-space-or-hyphen (1 1) "No description available." nil single "melpa-stable" nil nil nil])
  (ido-completing-read+ [cl-struct-package-desc ido-completing-read+ (20151005 2131) "A completing-read-function using ido" ((emacs (24 1))) single "melpa" nil ((:url . "https://github.com/DarwinAwardWinner/ido-ubiquitous") (:keywords "ido" "completion" "convenience")) nil] [cl-struct-package-desc ido-completing-read+ (3 7) "A completing-read-function using ido" ((emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/DarwinAwardWinner/ido-ubiquitous") (:keywords "ido" "completion" "convenience")) nil])
  (ido-describe-bindings [cl-struct-package-desc ido-describe-bindings (20150828 1238) "Yet another `describe-bindings' with `ido'." ((ido-vertical-mode (1 0 0)) (dash (2 11 0))) single "melpa" nil ((:url . "https://github.com/danil/ido-describe-bindings") (:keywords "help")) nil] [cl-struct-package-desc ido-describe-bindings (0 0 5) "Yet another `describe-bindings' with `ido'." ((ido-vertical-mode (1 0 0)) (dash (2 11 0))) single "melpa-stable" nil ((:url . "https://github.com/danil/ido-describe-bindings") (:keywords "help")) nil])
  (ido-exit-target [cl-struct-package-desc ido-exit-target (20150904 737) "Commands and keys for selecting other window and frame targets within ido" ((emacs (24 4))) single "melpa" nil ((:url . "https://github.com/waymondo/ido-exit-target") (:keywords "convenience" "tools" "extensions")) nil])
  (ido-grid-mode [cl-struct-package-desc ido-grid-mode (20151109 1344) "Display ido-prospects in the minibuffer in a grid." ((emacs (24 4))) single "melpa" nil ((:url . "https://github.com/larkery/ido-grid-mode.el") (:keywords "convenience")) nil] [cl-struct-package-desc ido-grid-mode (1 1 5) "Display ido-prospects in the minibuffer in a grid." ((emacs (24 4))) single "melpa-stable" nil ((:url . "https://github.com/larkery/ido-grid-mode.el") (:keywords "convenience")) nil])
  (ido-hacks [cl-struct-package-desc ido-hacks (20150331 1209) "Put more IDO in your IDO" nil single "melpa" nil ((:keywords "convenience")) nil])
  (ido-migemo [cl-struct-package-desc ido-migemo (20150921 1544) "Migemo plug-in for Ido" ((migemo (1 9 1))) single "melpa" nil ((:url . "https://github.com/myuhe/ido-migemo.el") (:keywords "files")) nil])
  (ido-occasional [cl-struct-package-desc ido-occasional (20150214 448) "Use ido where you choose." ((emacs (24 1))) single "melpa" nil ((:url . "https://github.com/abo-abo/ido-occasional") (:keywords "completion")) nil])
  (ido-occur [cl-struct-package-desc ido-occur (20150928 1443) "Yet another `occur' with `ido'." ((ido-vertical-mode (1 0 0)) (dash (2 11 0))) single "melpa" nil ((:url . "https://github.com/danil/ido-occur") (:keywords "inner" "buffer" "search")) nil] [cl-struct-package-desc ido-occur (0 1 0) "Yet another `occur' with `ido'." ((ido-vertical-mode (1 0 0)) (dash (2 11 0))) single "melpa-stable" nil ((:url . "https://github.com/danil/ido-occur") (:keywords "inner" "buffer" "search")) nil])
  (ido-skk [cl-struct-package-desc ido-skk (20151111 150) "ido interface for skk henkan" ((emacs (24 4)) (ddskk (20150912 1820))) single "melpa" nil ((:url . "https://github.com/tsukimizake/ido-skk") (:keywords "languages")) nil])
  (ido-sort-mtime [cl-struct-package-desc ido-sort-mtime (20131117 530) "Sort Ido's file list by modification time" nil single "melpa" nil ((:keywords "convenience" "files")) nil])
  (ido-springboard [cl-struct-package-desc ido-springboard (20150505 1011) "Temporarily change default-directory for one command" nil single "melpa" nil ((:url . "https://github.com/jwiegley/springboard") (:keywords "ido")) nil])
  (idris-mode [cl-struct-package-desc idris-mode (20151030 407) "Major mode for editing Idris code" ((emacs (24)) (prop-menu (0 1)) (cl-lib (0 5))) tar "melpa" nil ((:url . "https://github.com/idris-hackers/idris-mode") (:keywords "languages")) nil] [cl-struct-package-desc idris-mode (0 9 19) "Major mode for editing Idris code" ((emacs (24)) (prop-menu (0 1)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/idris-hackers/idris-mode") (:keywords "languages")) nil])
  (ids-edit [cl-struct-package-desc ids-edit (20141112 1642) "IDS (Ideographic Description Sequence) editing tool" ((emacs (24 3))) tar "melpa" nil ((:url . "http://github.com/kawabata/ids-edit") (:keywords "text")) nil])
  (ietf-docs [cl-struct-package-desc ietf-docs (20150928 257) "Fetch, Cache and Load IETF documents" nil single "melpa" nil ((:url . "https://github.com/choppsv1/ietf-docs") (:keywords "ietf" "rfc")) nil])
  (iflipb [cl-struct-package-desc iflipb (20141123 1316) "interactively flip between recently visited buffers" nil single "melpa" nil ((:url . "http://git.rosdahl.net/?p=joel/iflipb.git")) nil] [cl-struct-package-desc iflipb (1 3) "interactively flip between recently visited buffers" nil single "melpa-stable" nil ((:url . "http://git.rosdahl.net/?p=joel/iflipb.git")) nil])
  (igv [cl-struct-package-desc igv (20141210 427) "Control Integrative Genomic Viewer within Emacs" nil single "melpa" nil nil nil])
  (image+ [cl-struct-package-desc image+ (20150707 916) "Image manipulate extensions for Emacs" ((cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/mhayashi1120/Emacs-imagex") (:keywords "multimedia" "extensions")) nil] [cl-struct-package-desc image+ (0 6 2) "Image manipulate extensions for Emacs" ((cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-imagex") (:keywords "multimedia" "extensions")) nil])
  (image-archive [cl-struct-package-desc image-archive (20150218 2218) "Image thumbnails in archive file with non-blocking" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/mhayashi1120/Emacs-image-archive/raw/master/image-archive.el") (:keywords "multimedia")) nil] [cl-struct-package-desc image-archive (0 0 7) "Image thumbnails in archive file with non-blocking" ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-image-archive/raw/master/image-archive.el") (:keywords "multimedia")) nil])
  (image-dired+ [cl-struct-package-desc image-dired+ (20150429 2244) "Image-dired extensions" ((cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/mhayashi1120/Emacs-image-diredx") (:keywords "extensions" "multimedia")) nil] [cl-struct-package-desc image-dired+ (0 7 2) "Image-dired extensions" ((cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-image-diredx") (:keywords "extensions" "multimedia")) nil])
  (imakado [cl-struct-package-desc imakado (20141024 223) "imakado's usefull macros and functions" nil single "melpa" nil ((:url . "https://github.com/imakado/emacs-imakado") (:keywords "convenience")) nil])
  (imenu+ [cl-struct-package-desc imenu+ (20150104 1548) "Extensions to `imenu.el'." nil single "melpa" nil ((:url . "http://www.emacswiki.org/imenu+.el") (:keywords "tools" "menus")) nil])
  (imenu-anywhere [cl-struct-package-desc imenu-anywhere (20151030 1127) "ido/helm imenu tag selection across all buffers with the same mode" ((cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/vitoshka/imenu-anywhere") (:keywords "ido" "imenu" "tags")) nil] [cl-struct-package-desc imenu-anywhere (0 9 0) "ido/helm imenu tag selection across all buffers with the same mode" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/vitoshka/imenu-anywhere") (:keywords "ido" "imenu" "tags")) nil])
  (imenu-list [cl-struct-package-desc imenu-list (20150911 246) "Show imenu entries in a seperate buffer" ((cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/bmag/imenu-list")) nil] [cl-struct-package-desc imenu-list (0 4) "Show imenu entries in a seperate buffer" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/bmag/imenu-list")) nil])
  (imenus [cl-struct-package-desc imenus (20150107 939) "Imenu for multiple buffers" ((cl-lib (0 5))) single "melpa" nil ((:url . "https://gitorious.org/alezost-emacs/imenus") (:keywords "tools" "convenience")) nil] [cl-struct-package-desc imenus (0 1) "Imenu for multiple buffers" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://gitorious.org/alezost-emacs/imenus") (:keywords "tools" "convenience")) nil])
  (imgix [cl-struct-package-desc imgix (20141226 1332) "Major mode for editing images in emacs via imgix" ((json (1 2)) (ht (2 0)) (s (1 9 0)) (dash (2 9 0)) (cl-lib (0 5))) tar "melpa" nil ((:keywords "images" "image processing" "image editing" "sepia" "blur")) nil] [cl-struct-package-desc imgix (1 0 0) "Major mode for editing images in emacs via imgix" ((json (1 2)) (ht (2 0)) (s (1 9 0)) (dash (2 9 0)) (cl-lib (0 5))) tar "melpa-stable" nil ((:keywords "images" "image processing" "image editing" "sepia" "blur")) nil])
  (impatient-mode [cl-struct-package-desc impatient-mode (20150501 247) "Serve buffers live over HTTP" ((cl-lib (0 3)) (simple-httpd (1 4 0)) (htmlize (1 40))) tar "melpa" nil ((:url . "https://github.com/netguy204/imp.el")) nil])
  (import-popwin [cl-struct-package-desc import-popwin (20150716 233) "popwin buffer near by import statements with popwin" ((popwin (0 6)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-import-popwin")) nil] [cl-struct-package-desc import-popwin (0 9) "popwin buffer near by import statements with popwin" ((popwin (0 6)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-import-popwin")) nil])
  (indent-guide [cl-struct-package-desc indent-guide (20150713 2327) "show vertical lines to guide indentation" nil single "melpa" nil ((:url . "http://hins11.yu-yake.com/")) nil])
  (indicators [cl-struct-package-desc indicators (20130217 1405) "Display the buffer relative location of line in the fringe." nil single "melpa" nil ((:url . "https://github.com/Fuco1/indicators.el") (:keywords "fringe" "frames")) nil])
  (indy [cl-struct-package-desc indy (20150610 1006) "A minor mode and EDSL to manage your mode's indentation rules." nil single "melpa" nil ((:keywords "convenience" "matching" "tools")) nil])
  (inf-mongo [cl-struct-package-desc inf-mongo (20131216 228) "Run a MongoDB shell process in a buffer" nil single "melpa" nil ((:url . "http://github.com/tobiassvn/inf-mongo") (:keywords "databases" "mongodb")) nil])
  (inf-php [cl-struct-package-desc inf-php (20130414 21) "Run a php interactive shell in a buffer" ((php-mode (1 5 0))) single "melpa" nil ((:url . "https://github.com/taksatou/inf-php") (:keywords "languages" "php")) nil])
  (inflections [cl-struct-package-desc inflections (20121016 157) "convert english words between singular and plural" nil single "melpa" nil ((:url . "https://github.com/eschulte/jump.el") (:keywords "ruby" "rails" "languages" "oop")) nil] [cl-struct-package-desc inflections (2 3) "convert english words between singular and plural" nil single "melpa-stable" nil ((:url . "https://github.com/eschulte/jump.el") (:keywords "ruby" "rails" "languages" "oop")) nil])
  (info+ [cl-struct-package-desc info+ (20150914 1436) "Extensions to `info.el'." nil single "melpa" nil ((:url . "http://www.emacswiki.org/info+.el") (:keywords "help" "docs" "internal")) nil])
  (inform7-mode [cl-struct-package-desc inform7-mode (20131009 2354) "Major mode for editing Inform 7 source files" ((sws-mode (0 1))) single "melpa" nil ((:keywords "inform" "inform7" "interactive fiction")) nil])
  (init-loader [cl-struct-package-desc init-loader (20141030 2333) "Loader for configuration files" nil single "melpa" nil ((:url . "https://github.com/emacs-jp/init-loader/")) nil] [cl-struct-package-desc init-loader (0 2) "Loader for configuration files" nil single "melpa-stable" nil ((:url . "https://github.com/emacs-jp/init-loader/")) nil])
  (init-open-recentf [cl-struct-package-desc init-open-recentf (20151106 2023) "Open recentf immediately after Emacs is started" ((emacs (24 4))) single "melpa" nil ((:keywords "file" "recentf" "after-init-hook")) nil] [cl-struct-package-desc init-open-recentf (0 0 2) "Open recentf immediately after Emacs is started" ((emacs (24 4))) single "melpa-stable" nil ((:keywords "file" "recentf" "after-init-hook")) nil])
  (initsplit [cl-struct-package-desc initsplit (20141219 1629) "code to split customizations into different files" nil single "melpa" nil ((:url . "http://www.gci-net.com/users/j/johnw/emacs.html") (:keywords "lisp")) nil] [cl-struct-package-desc initsplit (1 6) "No description available." nil single "melpa-stable" nil nil nil])
  (inkpot-theme [cl-struct-package-desc inkpot-theme (20120505 708) "port of vim's inkpot theme" nil single "melpa" nil ((:url . "http://github.com/siovan/emacs24-inkpot.git")) nil])
  (inlineR [cl-struct-package-desc inlineR (20120520 732) "insert Tag for inline image of R graphics" nil single "melpa" nil ((:url . "https://github.com/myuhe/inlineR.el") (:keywords "convenience" "iimage.el" "cacoo.el")) nil] [cl-struct-package-desc inlineR (1 0) "insert Tag for inline image of R graphics" nil single "melpa-stable" nil ((:url . "https://github.com/myuhe/inlineR.el") (:keywords "convenience" "iimage.el" "cacoo.el")) nil])
  (insfactor [cl-struct-package-desc insfactor (20141116 1602) "Client for a Clojure project with insfactor in it" nil single "melpa" nil ((:url . "http://github.com/duelinmarkers/insfactor.el") (:keywords "clojure")) nil])
  (instapaper [cl-struct-package-desc instapaper (20130104 621) "add URLs to instapaper from emacs" nil single "melpa" nil ((:url . "htts://bitbucket.org/jfm/emacs-instapaper")) nil] [cl-struct-package-desc instapaper (0 9 5) "No description available." nil single "melpa-stable" nil nil nil])
  (interaction-log [cl-struct-package-desc interaction-log (20150603 1010) "exhaustive log of interactions with Emacs" ((cl-lib (0))) single "melpa" nil ((:url . "https://github.com/michael-heerdegen/interaction-log.el") (:keywords "convenience")) nil])
  (interleave [cl-struct-package-desc interleave (20150527 730) "Interleaving text books since 2015" nil single "melpa" nil ((:url . "https://github.com/rudolfochrist/interleave")) nil] [cl-struct-package-desc interleave (1 0 0) "Interleaving text books since 2015" nil single "melpa-stable" nil ((:url . "https://github.com/rudolfochrist/interleave")) nil])
  (interval-list [cl-struct-package-desc interval-list (20150327 1018) "Interval list data structure for 1D selections" ((dash (2 4 0)) (cl-lib (0 5)) (emacs (24 4))) single "melpa" nil ((:url . "https://github.com/Fuco1/interval-list") (:keywords "extensions" "data structure")) nil])
  (interval-tree [cl-struct-package-desc interval-tree (20130325 707) "Interval tree data structure for 1D range queries" ((dash (1 1 0))) single "melpa" nil ((:url . "https://github.com/Fuco1/interval-tree") (:keywords "extensions" "data structure")) nil])
  (io-mode [cl-struct-package-desc io-mode (20140814 321) "Major mode to edit Io language files in Emacs" nil single "melpa" nil ((:url . "https://github.com/superbobry/io-mode") (:keywords "languages" "io")) nil])
  (io-mode-inf [cl-struct-package-desc io-mode-inf (20140128 1134) "Interaction with an Io interpreter." nil single "melpa" nil ((:url . "https://github.com/slackorama/io-emacs") (:keywords "io" "languages")) nil])
  (iodine-theme [cl-struct-package-desc iodine-theme (20151031 939) "A light emacs color theme" ((emacs (24))) single "melpa" nil ((:url . "https://github.com/srdja/iodine-theme") (:keywords "themes")) nil])
  (iplayer [cl-struct-package-desc iplayer (20150101 255) "Browse and download BBC TV/radio shows" nil single "melpa" nil ((:url . "https://github.com/csrhodes/iplayer-el") (:keywords "multimedia" "bbc")) nil] [cl-struct-package-desc iplayer (0 1) "Browse and download BBC TV/radio shows" nil single "melpa-stable" nil ((:url . "https://github.com/csrhodes/iplayer-el") (:keywords "multimedia" "bbc")) nil])
  (ipretty [cl-struct-package-desc ipretty (20140406 2220) "Interactive Emacs Lisp pretty-printing" nil single "melpa" nil ((:url . "https://github.com/steckerhalter/ipretty") (:keywords "pretty-print" "elisp" "buffer")) nil])
  (irony [cl-struct-package-desc irony (20151016 1420) "C/C++ minor mode powered by libclang" ((cl-lib (0 5)) (json (1 2))) tar "melpa" nil ((:url . "https://github.com/Sarcasm/irony-mode") (:keywords "c" "convenience" "tools")) nil] [cl-struct-package-desc irony (0 1 2) "C/C++ minor mode powered by libclang" ((cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/Sarcasm/irony-mode") (:keywords "c" "convenience" "tools")) nil])
  (irony-eldoc [cl-struct-package-desc irony-eldoc (20141226 2219) "irony-mode support for eldoc-mode" ((emacs (24)) (cl-lib (0 5)) (irony (0 1))) single "melpa" nil ((:url . "https://github.com/ikirill/irony-eldoc") (:keywords "c" "c++" "objc" "convenience" "tools")) nil])
  (isearch+ [cl-struct-package-desc isearch+ (20151026 1026) "Extensions to `isearch.el' (incremental search)." nil single "melpa" nil ((:url . "http://www.emacswiki.org/isearch+.el") (:keywords "help" "matching" "internal" "local")) nil])
  (isearch-dabbrev [cl-struct-package-desc isearch-dabbrev (20141223 2222) "Use dabbrev in isearch" ((cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/Dewdrops/isearch-dabbrev") (:keywords "dabbrev" "isearch")) nil])
  (isearch-prop [cl-struct-package-desc isearch-prop (20151108 1105) "Search text-property or overlay-property contexts." nil single "melpa" nil ((:url . "http://www.emacswiki.org/isearch-prop.el") (:keywords "search" "matching" "invisible" "thing" "help")) nil])
  (isearch-symbol-at-point [cl-struct-package-desc isearch-symbol-at-point (20130728 1521) "Use isearch to search for the symbol at point" nil single "melpa" nil ((:url . "https://github.com/re5et/isearch-symbol-at-point") (:keywords "isearch")) nil])
  (isend-mode [cl-struct-package-desc isend-mode (20130419 258) "Interactively send parts of an Emacs buffer to an interpreter" nil single "melpa" nil ((:url . "https://github.com/ffevotte/isend-mode.el")) nil])
  (iss-mode [cl-struct-package-desc iss-mode (20141001 1213) "Mode for InnoSetup install scripts" nil single "melpa" nil nil nil])
  (itail [cl-struct-package-desc itail (20151113 835) "An interactive tail mode" nil single "melpa" nil ((:url . "https://github.com/re5et/itail") (:keywords "tail")) nil])
  (iterator [cl-struct-package-desc iterator (20150321 2125) "A library to create and use elisp iterators objects." ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/thierryvolpiatto/iterator")) nil])
  (ivariants [cl-struct-package-desc ivariants (20140720 2127) "Ideographic variants editor and browser" ((emacs (24 3)) (ivs-edit (1 0))) tar "melpa" nil ((:url . "http://github.com/kawabata/ivariants") (:keywords "i18n" "languages")) nil])
  (ivs-edit [cl-struct-package-desc ivs-edit (20140720 346) "IVS (Ideographic Variation Sequence) editing tool" ((emacs (24 3)) (dash (2 6 0)) (cl-lib (1 0))) tar "melpa" nil ((:url . "http://github.com/kawabata/ivs-edit") (:keywords "text")) nil])
  (jabber-otr [cl-struct-package-desc jabber-otr (20150918 444) "Off-The-Record messaging for jabber.el" ((emacs (24)) (jabber (0 8 92))) tar "melpa" nil ((:url . "https://github.com/legoscia/emacs-jabber-otr/") (:keywords "comm")) nil])
  (jack-connect [cl-struct-package-desc jack-connect (20141207 407) "Manage jack connections within Emacs" nil single "melpa" nil nil nil])
  (japanese-holidays [cl-struct-package-desc japanese-holidays (20150208 1737) "calendar functions for the Japanese calendar" ((cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/emacs-jp/japanese-holidays") (:keywords "calendar")) nil])
  (japanlaw [cl-struct-package-desc japanlaw (20150621 2141) "Japan law from law.e-gov.go.jp" nil single "melpa" nil ((:keywords "docs" "help")) nil] [cl-struct-package-desc japanlaw (0 9 1) "Japan law from law.e-gov.go.jp" nil single "melpa-stable" nil ((:keywords "docs" "help")) nil])
  (jape-mode [cl-struct-package-desc jape-mode (20140903 806) "An Emacs editing mode mode for GATE's JAPE files" nil single "melpa" nil ((:url . "http://github.com/tanzoniteblack/jape-mode") (:keywords "languages" "jape" "gate")) nil])
  (jar-manifest-mode [cl-struct-package-desc jar-manifest-mode (20150329 1533) "Major mode to edit JAR manifest files" nil single "melpa" nil ((:url . "http://github.com/omajid/jar-manifest-mode") (:keywords "convenience" "languages")) nil])
  (jasminejs-mode [cl-struct-package-desc jasminejs-mode (20150526 1705) "A minor mode for manipulating jasmine test files" nil tar "melpa" nil ((:url . "https://github.com/stoltene2/jasminejs-mode") (:keywords "javascript" "jasmine")) nil])
  (java-snippets [cl-struct-package-desc java-snippets (20140727 2236) "Yasnippets for Java" ((yasnippet (0 8 0))) tar "melpa" nil ((:url . "https://github.com/nekop/yasnippet-java-mode")) nil])
  (javadoc-lookup [cl-struct-package-desc javadoc-lookup (20150425 1003) "Javadoc Emacs integration with Maven" ((cl-lib (0 3))) tar "melpa" nil ((:url . "https://github.com/skeeto/javadoc-lookup")) nil])
  (jaword [cl-struct-package-desc jaword (20150325 718) "Minor-mode for handling Japanese words better" ((tinysegmenter (0 1))) single "melpa" nil ((:url . "http://hins11.yu-yake.com/")) nil])
  (jazz-theme [cl-struct-package-desc jazz-theme (20150910 844) "A warm color theme for Emacs 24." nil single "melpa" nil ((:url . "https://github.com/donderom/jazz-theme")) nil])
  (jbeans-theme [cl-struct-package-desc jbeans-theme (20151102 650) "Jbeans theme for GNU Emacs 24 (deftheme)" ((emacs (24))) single "melpa" nil ((:url . "https://github.com/synic/jbeans-emacs")) nil])
  (jdee [cl-struct-package-desc jdee (20151005 1237) "Java Development Environment for Emacs" ((emacs (24 3))) tar "melpa" nil ((:url . "http://github.com/jdee-emacs/jdee") (:keywords "java" "tools")) nil])
  (jedi-core [cl-struct-package-desc jedi-core (20151029 2202) "Common code of jedi.el and company-jedi.el" ((emacs (24)) (epc (0 1 0)) (python-environment (0 0 2)) (cl-lib (0 5))) tar "melpa" nil nil nil] [cl-struct-package-desc jedi-core (0 2 6) "Common code of jedi.el and company-jedi.el" ((emacs (24)) (epc (0 1 0)) (python-environment (0 0 2)) (cl-lib (0 5))) tar "melpa-stable" nil nil nil])
  (jedi-direx [cl-struct-package-desc jedi-direx (20140310 236) "Tree style source code viewer for Python buffer" ((jedi (0 1 2)) (direx (0 1 -3))) single "melpa" nil nil nil])
  (jekyll-modes [cl-struct-package-desc jekyll-modes (20141117 514) "Major modes (markdown and HTML) for authoring Jekyll content" ((polymode (0 2))) single "melpa" nil ((:url . "https://github.com/fred-o/jekyll-modes") (:keywords "docs")) nil])
  (jenkins [cl-struct-package-desc jenkins (20151109 2213) "Minimalistic Jenkins client for Emacs" ((dash (2 12)) (emacs (24 3)) (json (1 4))) single "melpa" nil ((:keywords "jenkins" "convenience")) nil])
  (jg-quicknav [cl-struct-package-desc jg-quicknav (20150217 1828) "Quickly navigate the file system to find a file." ((s (1 9 0)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/jeffgran/jg-quicknav") (:keywords "navigation")) nil])
  (jira-markup-mode [cl-struct-package-desc jira-markup-mode (20150601 1409) "Emacs Major mode for JIRA-markup-formatted text files" nil single "melpa" nil ((:url . "https://github.com/mnuessler/jira-markup-mode") (:keywords "jira" "markup")) nil])
  (jist [cl-struct-package-desc jist (20150927 1118) "Manage gists from Emacs" ((emacs (24)) (cl-lib (0 5)) (magit (2 1 0)) (request (0 2 0)) (pkg-info (0 4))) single "melpa" nil ((:url . "https://github.com/emacs-pe/jist.el") (:keywords "convenience")) nil])
  (jknav [cl-struct-package-desc jknav (20121006 1325) "Automatically enable j/k keys for line-based navigation" nil single "melpa" nil ((:keywords "keyboard" "navigation")) nil])
  (jonprl-mode [cl-struct-package-desc jonprl-mode (20150901 804) "A major mode for editing JonPRL files" ((emacs (24 3)) (cl-lib (0 5)) (yasnippet (0 8 0))) tar "melpa" nil ((:keywords "languages")) nil])
  (jq-mode [cl-struct-package-desc jq-mode (20151030 451) "Edit jq scripts." ((emacs (24 3))) tar "melpa" nil ((:url . "https://github.com/ljos/jq-mode")) nil])
  (jquery-doc [cl-struct-package-desc jquery-doc (20150812 58) "jQuery api documentation interface for emacs" nil tar "melpa" nil ((:keywords "docs" "jquery")) nil])
  (js-doc [cl-struct-package-desc js-doc (20131215 519) "Insert JsDoc style comment easily" nil single "melpa" nil ((:url . "https://github.com/mooz/js-doc") (:keywords "document" "comment")) nil])
  (js2-closure [cl-struct-package-desc js2-closure (20141027 1550) "Google Closure dependency manager" ((js2-mode (20140114))) single "melpa" nil ((:url . "http://github.com/jart/js2-closure")) nil] [cl-struct-package-desc js2-closure (1 4) "Google Closure dependency manager" ((js2-mode (20140114))) single "melpa-stable" nil ((:url . "http://github.com/jart/js2-closure")) nil])
  (js2-highlight-vars [cl-struct-package-desc js2-highlight-vars (20150914 108) "highlight occurrences of the variable under cursor" ((js2-mode (20150908))) single "melpa" nil ((:url . "http://mihai.bazon.net/projects/editing-javascript-with-emacs-js2-mode/js2-highlight-vars-mode")) nil] [cl-struct-package-desc js2-highlight-vars (0 1 0) "highlight occurrences of the variable under cursor" ((js2-mode (20150909))) single "melpa-stable" nil ((:url . "http://mihai.bazon.net/projects/editing-javascript-with-emacs-js2-mode/js2-highlight-vars-mode")) nil])
  (js2-refactor [cl-struct-package-desc js2-refactor (20151029 507) "A JavaScript refactoring library for emacs." ((js2-mode (20101228)) (s (1 9 0)) (multiple-cursors (1 0 0)) (dash (1 0 0)) (s (1 0 0)) (yasnippet (0 9 0 1))) tar "melpa" nil nil nil] [cl-struct-package-desc js2-refactor (0 7 1) "A JavaScript refactoring library for emacs." ((js2-mode (20101228)) (s (1 9 0)) (multiple-cursors (1 0 0)) (dash (1 0 0)) (s (1 0 0)) (yasnippet (0 9 0 1))) tar "melpa-stable" nil nil nil])
  (js3-mode [cl-struct-package-desc js3-mode (20150902 949) "An improved JavaScript editing mode" nil tar "melpa" nil ((:keywords "javascript" "languages")) nil] [cl-struct-package-desc js3-mode (1 1 0) "An improved JavaScript editing mode" nil tar "melpa-stable" nil ((:keywords "javascript" "languages")) nil])
  (jscs [cl-struct-package-desc jscs (20151015 1049) "Consistent JavaScript editing using JSCS" ((emacs (24 1)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/papaeye/emacs-jscs") (:keywords "languages" "convenience")) nil])
  (jsfmt [cl-struct-package-desc jsfmt (20150727 1525) "Interface to jsfmt command for javascript files" nil single "melpa" nil ((:url . "https://github.com/brettlangdon/jsfmt.el")) nil] [cl-struct-package-desc jsfmt (0 2 0) "No description available." nil single "melpa-stable" nil nil nil])
  (json-reformat [cl-struct-package-desc json-reformat (20151007 1728) "Reformatting tool for JSON" nil single "melpa" nil ((:url . "https://github.com/gongo/json-reformat") (:keywords "json")) nil] [cl-struct-package-desc json-reformat (0 0 5) "Reformatting tool for JSON" nil single "melpa-stable" nil ((:url . "https://github.com/gongo/json-reformat") (:keywords "json")) nil])
  (json-rpc [cl-struct-package-desc json-rpc (20150830 1401) "JSON-RPC library" ((emacs (24 1)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/skeeto/elisp-json-rpc")) nil])
  (jss [cl-struct-package-desc jss (20130508 723) "An emacs interface to webkit and mozilla debuggers" ((emacs (24 1)) (websocket (0)) (js2-mode (0))) tar "melpa" nil ((:keywords "languages")) nil])
  (jst [cl-struct-package-desc jst (20150604 438) "JS test mode" ((s (1 9)) (f (0 17)) (dash (2 10)) (pcache (0 3)) (emacs (24 4))) single "melpa" nil ((:url . "https://github.com/cheunghy/jst-mode") (:keywords "js" "javascript" "jasmine" "coffee" "coffeescript")) nil])
  (jsx-mode [cl-struct-package-desc jsx-mode (20130908 1024) "major mode for JSX" nil single "melpa" nil ((:url . "https://github.com/jsx/jsx-mode.el")) nil] [cl-struct-package-desc jsx-mode (0 1 10) "major mode for JSX" nil single "melpa-stable" nil ((:url . "https://github.com/jsx/jsx-mode.el")) nil])
  (jtags [cl-struct-package-desc jtags (20111208 1022) "enhanced tags functionality for Java development" nil tar "melpa" nil ((:url . "http://jtags.sourceforge.net") (:keywords "languages" "tools")) nil])
  (julia-mode [cl-struct-package-desc julia-mode (20150912 800) "Major mode for editing Julia source code" nil single "melpa" nil ((:url . "https://github.com/JuliaLang/julia") (:keywords "languages")) nil] [cl-struct-package-desc julia-mode (0 4 1) "Major mode for editing Julia source code" nil single "melpa-stable" nil ((:url . "https://github.com/JuliaLang/julia") (:keywords "languages")) nil])
  (julia-shell [cl-struct-package-desc julia-shell (20151104 1052) "Major mode for an inferior Julia shell" ((julia-mode (0 3))) tar "melpa" nil nil nil])
  (jumblr [cl-struct-package-desc jumblr (20140908 1352) "an anagram game for emacs" ((s (1 8 0)) (dash (2 2 0))) tar "melpa" nil ((:url . "https://github.com/mkmcc/jumblr") (:keywords "anagram" "word game" "games")) nil])
  (jump-to-line [cl-struct-package-desc jump-to-line (20130122 853) "Jump to line number at point." nil single "melpa" nil ((:keywords "jump" "line" "back" "file" "ruby" "csharp" "python" "perl")) nil] [cl-struct-package-desc jump-to-line (0 2 0) "Jump to line number at point." nil single "melpa-stable" nil ((:keywords "jump" "line" "back" "file" "ruby" "csharp" "python" "perl")) nil])
  (jvm-mode [cl-struct-package-desc jvm-mode (20150422 8) "Monitor and manage your JVMs" ((dash (2 6 0)) (emacs (24))) single "melpa" nil ((:url . "https://github.com/martintrojer/jvm-mode.el") (:keywords "convenience")) nil] [cl-struct-package-desc jvm-mode (0 2 0) "Monitor and manage your JVMs" ((dash (2 6 0)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/martintrojer/jvm-mode.el") (:keywords "convenience")) nil])
  (kaesar [cl-struct-package-desc kaesar (20150220 305) "Another AES algorithm encrypt/decrypt string with password." ((cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/mhayashi1120/Emacs-kaesar/raw/master/kaesar.el") (:keywords "data")) nil] [cl-struct-package-desc kaesar (0 9 0) "Another AES algorithm encrypt/decrypt string with password." ((cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-kaesar/raw/master/kaesar.el") (:keywords "data")) nil])
  (kaesar-file [cl-struct-package-desc kaesar-file (20150130 804) "Encrypt/Decrypt file by AES with password." ((kaesar (0 1 1))) single "melpa" nil ((:url . "https://github.com/mhayashi1120/Emacs-kaesar/raw/master/cipher/kaesar-file.el") (:keywords "data" "files")) nil] [cl-struct-package-desc kaesar-file (0 9 0) "Encrypt/Decrypt file by AES with password." ((kaesar (0 1 1))) single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-kaesar/raw/master/cipher/kaesar-file.el") (:keywords "data" "files")) nil])
  (kaesar-mode [cl-struct-package-desc kaesar-mode (20150220 305) "Encrypt/Decrypt buffer by AES with password." ((kaesar (0 1 4)) (cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/mhayashi1120/Emacs-kaesar/raw/master/cipher/kaesar-mode.el") (:keywords "data" "convenience")) nil] [cl-struct-package-desc kaesar-mode (0 9 0) "Encrypt/Decrypt buffer by AES with password." ((kaesar (0 1 4)) (cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-kaesar/raw/master/cipher/kaesar-mode.el") (:keywords "data" "convenience")) nil])
  (kakapo-mode [cl-struct-package-desc kakapo-mode (20150906 2152) "TABS (hard or soft) for indentation (leading whitespace), and SPACES for alignment." ((cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/listx/kakapo-mode") (:keywords "indentation")) nil] [cl-struct-package-desc kakapo-mode (1 2) "TABS (hard or soft) for indentation (leading whitespace), and SPACES for alignment." ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/listx/kakapo-mode") (:keywords "indentation")) nil])
  (kanji-mode [cl-struct-package-desc kanji-mode (20150202 25) "View stroke order for kanji characters at cursor" nil tar "melpa" nil ((:url . "http://github.com/wsgac/kanji-mode ")) nil])
  (kerl [cl-struct-package-desc kerl (20150424 1305) "Emacs integration for kerl" nil single "melpa" nil ((:url . "http://github.com/correl/kerl.el/") (:keywords "tools")) nil])
  (key-intercept [cl-struct-package-desc key-intercept (20140210 2349) "Intercept prefix keys" nil single "melpa" nil ((:url . "http://github.com/tarao/key-intercept-el") (:keywords "keyboard")) nil])
  (key-seq [cl-struct-package-desc key-seq (20150907 56) "map pairs of sequentially pressed keys to commands" ((key-chord (0 6))) single "melpa" nil ((:url . "http://github.com/vlevit/key-seq.el") (:keywords "convenience" "keyboard" "keybindings")) nil] [cl-struct-package-desc key-seq (1 0 1) "map pairs of sequentially pressed keys to commands" ((key-chord (0 6))) single "melpa-stable" nil ((:url . "http://github.com/vlevit/key-seq.el") (:keywords "convenience" "keyboard" "keybindings")) nil])
  (keychain-environment [cl-struct-package-desc keychain-environment (20150416 1258) "load keychain environment variables" nil single "melpa" nil ((:url . "https://github.com/tarsius/keychain-environment") (:keywords "gnupg" "pgp" "ssh")) nil] [cl-struct-package-desc keychain-environment (2 2 0) "load keychain environment variables" nil single "melpa-stable" nil ((:url . "https://github.com/tarsius/keychain-environment") (:keywords "gnupg" "pgp" "ssh")) nil])
  (keydef [cl-struct-package-desc keydef (20090428 1231) "a simpler way to define keys, with kbd syntax" nil single "melpa" nil ((:keywords "convenience" "lisp" "customization" "keyboard" "keys")) nil] [cl-struct-package-desc keydef (1 15) "a simpler way to define keys, with kbd syntax" nil single "melpa-stable" nil ((:keywords "convenience" "lisp" "customization" "keyboard" "keys")) nil])
  (keymap-utils [cl-struct-package-desc keymap-utils (20151030 326) "keymap utilities" ((cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/tarsius/keymap-utils") (:keywords "convenience" "extensions")) nil] [cl-struct-package-desc keymap-utils (0 5 2) "keymap utilities" ((cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/tarsius/keymap-utils") (:keywords "convenience" "extensions")) nil])
  (keyset [cl-struct-package-desc keyset (20150219 2130) "A small library for structuring key bindings." ((dash (2 8 0)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/HKey/keyset")) nil] [cl-struct-package-desc keyset (0 1 2) "A small library for structuring key bindings." ((dash (2 8 0)) (cl-lib (0 5))) single "melpa-stable" nil nil nil])
  (keyword-search [cl-struct-package-desc keyword-search (20150911 232) "browser keyword search from Emacs" nil single "melpa" nil ((:url . "https://github.com/juhp/keyword-search") (:keywords "web" "search" "keyword")) nil])
  (kfg [cl-struct-package-desc kfg (20140908 2238) "an emacs configuration system" ((f (0 17 1))) single "melpa" nil ((:url . "https://github.com/abingham/kfg")) nil])
  (kibit-helper [cl-struct-package-desc kibit-helper (20150508 833) "Conveniently use the Kibit Leiningen plugin from Emacs" ((s (0 8)) (emacs (24))) single "melpa" nil ((:url . "http://www.github.com/brunchboy/kibit-helper") (:keywords "languages" "clojure" "kibit")) nil] [cl-struct-package-desc kibit-helper (0 1 1) "Conveniently use the Kibit Leiningen plugin from Emacs" ((s (0 8)) (emacs (24))) single "melpa-stable" nil ((:url . "http://www.github.com/brunchboy/kibit-helper") (:keywords "languages" "clojure" "kibit")) nil])
  (kill-or-bury-alive [cl-struct-package-desc kill-or-bury-alive (20150905 540) "Precise control over buffer killing in Emacs" ((emacs (24 4)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/mrkkrp/kill-or-bury-alive") (:keywords "buffer" "killing" "convenience")) nil] [cl-struct-package-desc kill-or-bury-alive (0 1 1) "Precise control over buffer killing in Emacs" ((emacs (24 4)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/mrkkrp/kill-or-bury-alive") (:keywords "buffer" "killing" "convenience")) nil])
  (kill-ring-search [cl-struct-package-desc kill-ring-search (20140422 855) "incremental search for the kill ring" nil single "melpa" nil ((:url . "http://nschum.de/src/emacs/kill-ring-search/") (:keywords "convenience" "matching")) nil] [cl-struct-package-desc kill-ring-search (1 1) "incremental search for the kill ring" nil single "melpa-stable" nil ((:url . "http://nschum.de/src/emacs/kill-ring-search/") (:keywords "convenience" "matching")) nil])
  (killer [cl-struct-package-desc killer (20120808 422) "kill and delete text" nil single "melpa" nil ((:url . "http://github.com/tarsius/killer") (:keywords "convenience")) nil] [cl-struct-package-desc killer (0 2 2) "kill and delete text" nil single "melpa-stable" nil ((:url . "http://github.com/tarsius/killer") (:keywords "convenience")) nil])
  (kite [cl-struct-package-desc kite (20130201 1138) "WebKit inspector front-end" ((json (1 2)) (websocket (0 93 1))) tar "melpa" nil ((:keywords "tools")) nil])
  (kite-mini [cl-struct-package-desc kite-mini (20150811 1129) "Remotely evaluate JavaScript in the WebKit debugger" ((dash (2 11 0)) (websocket (1 5))) single "melpa" nil ((:url . "https://github.com/tungd/kite-mini.el") (:keywords "webkit")) nil])
  (kivy-mode [cl-struct-package-desc kivy-mode (20140524 557) "Emacs major mode for editing Kivy files" nil single "melpa" nil nil nil] [cl-struct-package-desc kivy-mode (1 9 0) "Emacs major mode for editing Kivy files" nil single "melpa-stable" nil nil nil])
  (kixtart-mode [cl-struct-package-desc kixtart-mode (20150611 904) "major mode for Kixtart scripting files" ((emacs (24))) single "melpa" nil ((:url . "https://github.com/ryrun/kixtart-mode") (:keywords "languages")) nil])
  (know-your-http-well [cl-struct-package-desc know-your-http-well (20140608 308) "Look up the meaning of HTTP headers, methods, relations, status codes" nil tar "melpa" nil nil nil] [cl-struct-package-desc know-your-http-well (0 2 0) "Look up the meaning of HTTP headers, methods, relations, status codes" nil tar "melpa-stable" nil nil nil])
  (kolon-mode [cl-struct-package-desc kolon-mode (20140122 334) "Syntax highlighting for Text::Xslate's Kolon syntax" nil single "melpa" nil ((:url . "https://github.com/samvtran/kolon-mode") (:keywords "xslate" "perl")) nil])
  (kroman [cl-struct-package-desc kroman (20150827 1640) "Korean hangul romanization" nil single "melpa" nil ((:keywords "korean" "roman")) nil])
  (kurecolor [cl-struct-package-desc kurecolor (20150423 2122) "color editing goodies for Emacs" ((emacs (24 1)) (s (1 0))) single "melpa" nil nil nil] [cl-struct-package-desc kurecolor (1 2 2) "color editing goodies for Emacs" ((emacs (24 1)) (s (1 0))) single "melpa-stable" nil nil nil])
  (lang-refactor-perl [cl-struct-package-desc lang-refactor-perl (20131122 1327) "Simple refactorings, primarily for Perl" nil single "melpa" nil ((:url . "https://github.com/jplindstrom/emacs-lang-refactor-perl") (:keywords "languages" "refactoring" "perl")) nil])
  (langdoc [cl-struct-package-desc langdoc (20150217 2245) "Help to define help document mode for various languages" ((cl-lib (0 2))) single "melpa" nil ((:url . "https://github.com/tom-tan/langdoc/") (:keywords "convenience" "eldoc")) nil])
  (latex-extra [cl-struct-package-desc latex-extra (20151103 1121) "Adds several useful functionalities to LaTeX-mode." ((auctex (11 86 1)) (cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/Malabarba/latex-extra") (:keywords "tex")) nil] [cl-struct-package-desc latex-extra (1 11) "Adds several useful functionalities to LaTeX-mode." ((auctex (11 86 1)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "http://github.com/Bruce-Connor/latex-extra") (:keywords "tex")) nil])
  (launch [cl-struct-package-desc launch (20130619 1504) "launch files with OS-standard associated applications." nil single "melpa" nil ((:url . "https://github.com/sfllaw/emacs-launch") (:keywords "convenience" "processes")) nil])
  (launchctl [cl-struct-package-desc launchctl (20150518 609) "Interface to launchctl on Mac OS X." ((emacs (24 1))) single "melpa" nil ((:url . "http://github.com/pekingduck/launchctl-el") (:keywords "tools" "convenience")) nil])
  (lavender-theme [cl-struct-package-desc lavender-theme (20141115 2302) "an Emacs 24 theme based on Lavender (tmTheme)" ((emacs (24 0))) single "melpa" nil ((:url . "https://github.com/emacsfodder/tmtheme-to-deftheme")) nil])
  (ldap-mode [cl-struct-package-desc ldap-mode (20091203 1015) "major modes for editing LDAP schema and LDIF files" nil single "melpa" nil ((:url . "http://www.loveshack.ukfsn.org/emacs") (:keywords "data")) nil])
  (ledger-mode [cl-struct-package-desc ledger-mode (20151026 1542) "Helper code for use with the \"ledger\" command-line tool" nil tar "melpa" nil nil nil] [cl-struct-package-desc ledger-mode (3 1) "Helper code for use with the \"ledger\" command-line tool" nil tar "melpa-stable" nil nil nil])
  (leerzeichen [cl-struct-package-desc leerzeichen (20151105 2228) "Minor mode to display whitespace characters." nil single "melpa" nil ((:url . "http://github.com/fgeller/leerzeichen.el") (:keywords "whitespace" "characters")) nil])
  (lemon-mode [cl-struct-package-desc lemon-mode (20130216 504) "A major mode for editing lemon grammar files" nil single "melpa" nil ((:keywords "lemon")) nil])
  (lenlen-theme [cl-struct-package-desc lenlen-theme (20150307 11) "a solarized-based kawaii light theme" ((color-theme-solarized (20150110))) single "melpa" nil ((:url . "http://hins11.yu-yake.com/")) nil])
  (lentic-server [cl-struct-package-desc lentic-server (20150320 626) "Web Server for Emacs Literate Source" ((lentic (0 8)) (web-server (0 1 1))) single "melpa" nil nil nil])
  (letcheck [cl-struct-package-desc letcheck (20150726 912) "Check the erroneous assignments in let forms" nil single "melpa" nil ((:url . "https://github.com/Fuco1/letcheck") (:keywords "convenience")) nil] [cl-struct-package-desc letcheck (0 4) "Check the erroneous assignments in let forms" nil single "melpa-stable" nil ((:url . "https://github.com/Fuco1/letcheck") (:keywords "convenience")) nil])
  (leuven-theme [cl-struct-package-desc leuven-theme (20151105 752) "Awesome Emacs color theme on white background" nil single "melpa" nil ((:url . "https://github.com/fniessen/emacs-leuven-theme") (:keywords "color" "theme")) nil])
  (lfe-mode [cl-struct-package-desc lfe-mode (20151110 1635) "Lisp Flavoured Erlang mode" nil tar "melpa" nil nil nil] [cl-struct-package-desc lfe-mode (0 10 0) "Lisp Flavoured Erlang mode" nil tar "melpa-stable" nil nil nil])
  (libmpdee [cl-struct-package-desc libmpdee (20150131 1357) "Client end library for mpd, a music playing daemon" nil single "melpa" nil ((:keywords "music" "mpd")) nil])
  (lice [cl-struct-package-desc lice (20151007 507) "License And Header Template" nil tar "melpa" nil ((:url . "https://github.com/buzztaiki/lice-el") (:keywords "template" "license" "tools")) nil] [cl-struct-package-desc lice (0 2) "License And Header Template" nil tar "melpa-stable" nil ((:url . "https://github.com/buzztaiki/lice-el") (:keywords "template" "license" "tools")) nil])
  (light-soap-theme [cl-struct-package-desc light-soap-theme (20150607 745) "Emacs 24 theme with a light background." ((emacs (24))) single "melpa" nil nil nil])
  (lingr [cl-struct-package-desc lingr (20100807 1031) "Lingr Client for GNU Emacs" nil single "melpa" nil ((:url . "http://github.com/lugecy/lingr-el") (:keywords "chat" "client" "internet")) nil] [cl-struct-package-desc lingr (0 2) "Lingr Client for GNU Emacs" nil single "melpa-stable" nil ((:url . "http://github.com/lugecy/lingr-el") (:keywords "chat" "client" "internet")) nil])
  (link [cl-struct-package-desc link (20140717 2029) "Hypertext links in text buffers" nil single "melpa" nil ((:keywords "interface" "hypermedia")) nil] [cl-struct-package-desc link (1 10) "No description available." nil single "melpa-stable" nil nil nil])
  (link-hint [cl-struct-package-desc link-hint (20151031 1645) "Use avy to open or copy visible urls." ((avy (0 3 0)) (emacs (24 1))) single "melpa" nil ((:url . "https://github.com/noctuid/link-hint.el") (:keywords "url")) nil])
  (linphone [cl-struct-package-desc linphone (20130524 409) "Emacs interface to Linphone" nil tar "melpa" nil ((:url . "https://github.com/zabbal/emacs-linphone") (:keywords "comm")) nil])
  (linum-relative [cl-struct-package-desc linum-relative (20151019 455) "display relative line number in emacs." nil single "melpa" nil ((:url . "http://github.com/coldnew/linum-relative") (:keywords "converience")) nil] [cl-struct-package-desc linum-relative (0 4) "display relative line number in emacs." nil single "melpa-stable" nil ((:url . "http://github.com/coldnew/linum-relative") (:keywords "converience")) nil])
  (lisp-extra-font-lock [cl-struct-package-desc lisp-extra-font-lock (20150129 1316) "Highlight bound variables and quoted exprs." nil single "melpa" nil ((:url . "https://github.com/Lindydancer/lisp-extra-font-lock") (:keywords "languages" "faces")) nil])
  (lispxmp [cl-struct-package-desc lispxmp (20130824 507) "Automagic emacs lisp code annotation" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/lispxmp.el") (:keywords "lisp" "convenience")) nil])
  (lispy [cl-struct-package-desc lispy (20151113 17) "vi-like Paredit" ((emacs (24 1)) (ace-window (0 9 0)) (iedit (0 97)) (swiper (0 4 0))) tar "melpa" nil nil nil] [cl-struct-package-desc lispy (0 26 0) "vi-like Paredit" ((emacs (24 1)) (ace-window (0 8 0)) (hydra (0 12 1)) (iedit (0 97)) (multiple-cursors (1 3 0)) (swiper (0 2 0))) tar "melpa-stable" nil nil nil])
  (list-environment [cl-struct-package-desc list-environment (20150620 2018) "A tabulated process environment editor" nil single "melpa" nil ((:keywords "processes" "unix")) nil])
  (list-packages-ext [cl-struct-package-desc list-packages-ext (20130927 908) "Extras for list-packages" ((s (1 6 0)) (ht (1 5 0)) (persistent-soft (0 8 6))) single "melpa" nil ((:keywords "convenience" "tools")) nil])
  (list-processes+ [cl-struct-package-desc list-processes+ (20131117 1135) "Add process management to `list-processes'" nil single "melpa" nil ((:url . "not distributed yet")) nil])
  (list-unicode-display [cl-struct-package-desc list-unicode-display (20150219 101) "Search for and list unicode characters by name" ((cl-lib (0 5))) single "melpa" nil ((:keywords "convenience")) nil] [cl-struct-package-desc list-unicode-display (0 1) "Search for and list unicode characters by name" ((cl-lib (0 5))) single "melpa-stable" nil ((:keywords "convenience")) nil])
  (lit-mode [cl-struct-package-desc lit-mode (20141123 936) "Major mode for lit" nil single "melpa" nil ((:keywords "languages" "tools")) nil] [cl-struct-package-desc lit-mode (0 1 1) "Major mode for lit" nil single "melpa-stable" nil ((:keywords "languages" "tools")) nil])
  (litable [cl-struct-package-desc litable (20150908 709) "dynamic evaluation replacement with emacs" ((dash (2 6 0))) single "melpa" nil ((:keywords "lisp")) nil])
  (literate-coffee-mode [cl-struct-package-desc literate-coffee-mode (20141216 1519) "major-mode for Literate CoffeeScript" ((coffee-mode (0 5 0))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-literate-coffee-mode")) nil] [cl-struct-package-desc literate-coffee-mode (0 4) "major-mode for Literate CoffeeScript" ((coffee-mode (0 5 0))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-literate-coffee-mode")) nil])
  (literate-starter-kit [cl-struct-package-desc literate-starter-kit (20150730 1154) "A literate starter kit to configure Emacs using Org-mode files." ((emacs (24 3))) tar "melpa" nil nil nil])
  (live-code-talks [cl-struct-package-desc live-code-talks (20150115 1423) "Support for slides with live code in them" ((emacs (24)) (cl-lib (0 5)) (narrowed-page-navigation (0 1))) single "melpa" nil ((:keywords "docs" "multimedia")) nil] [cl-struct-package-desc live-code-talks (0 2 1) "Support for slides with live code in them" ((emacs (24)) (cl-lib (0 5)) (narrowed-page-navigation (0 1))) single "melpa-stable" nil ((:keywords "docs" "multimedia")) nil])
  (live-py-mode [cl-struct-package-desc live-py-mode (20151108 907) "Live Coding in Python" ((emacs (24 1))) tar "melpa" nil ((:url . "http://donkirkby.github.io/live-py-plugin/") (:keywords "live" "coding")) nil] [cl-struct-package-desc live-py-mode (2 8 1) "No description available." nil tar "melpa-stable" nil nil nil])
  (lively [cl-struct-package-desc lively (20120728 713) "Interactively updating text" nil single "melpa" nil nil nil])
  (llvm-mode [cl-struct-package-desc llvm-mode (20150910 644) "Major mode for the LLVM assembler language." nil tar "melpa" nil nil nil])
  (loccur [cl-struct-package-desc loccur (20150611 1037) "Performs an occur-like folding in current buffer." nil single "melpa" nil ((:url . "https://github.com/fourier/loccur") (:keywords "matching")) nil])
  (lodgeit [cl-struct-package-desc lodgeit (20150312 649) "Paste to a lodgeit powered pastebin" nil single "melpa" nil ((:url . "https://github.com/ionrock/lodgeit-el") (:keywords "pastebin" "lodgeit")) nil])
  (log4e [cl-struct-package-desc log4e (20150105 505) "provide logging framework for elisp" nil single "melpa" nil ((:url . "https://github.com/aki2o/log4e") (:keywords "log")) nil] [cl-struct-package-desc log4e (0 3 0) "provide logging framework for elisp" nil single "melpa-stable" nil ((:url . "https://github.com/aki2o/log4e") (:keywords "log")) nil])
  (log4j-mode [cl-struct-package-desc log4j-mode (20101016 822) "major mode for viewing log files" nil single "melpa" nil ((:keywords "log" "log4j" "java")) nil] [cl-struct-package-desc log4j-mode (1 3) "major mode for viewing log files" nil single "melpa-stable" nil ((:keywords "log" "log4j" "java")) nil])
  (logalimacs [cl-struct-package-desc logalimacs (20131021 1129) "Front-end to logaling-command for Ruby gems" ((popwin (0 6 2)) (popup (0 5 0)) (stem (20130120))) single "melpa" nil ((:url . "https://github.com/logaling/logalimacs") (:keywords "translation" "logaling-command")) nil] [cl-struct-package-desc logalimacs (1 0 0) "Front-end to logaling-command for Ruby gems" nil single "melpa-stable" nil ((:url . "https://github.com/logaling/logalimacs")) nil])
  (logstash-conf [cl-struct-package-desc logstash-conf (20150308 518) "basic mode for editing logstash configuration" nil single "melpa" nil nil nil])
  (logview [cl-struct-package-desc logview (20151030 1449) "Major mode for viewing log files" ((emacs (24 1))) single "melpa" nil ((:url . "https://github.com/doublep/logview") (:keywords "files" "tools")) nil] [cl-struct-package-desc logview (0 4 2) "Major mode for viewing log files" ((emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/doublep/logview") (:keywords "files" "tools")) nil])
  (love-minor-mode [cl-struct-package-desc love-minor-mode (20130429 1459) "Minor mode for working on LÖVE projects" ((lua-mode (20130419))) single "melpa" nil ((:url . "https://github.com/ejmr/love-minor-mode")) nil] [cl-struct-package-desc love-minor-mode (1 1) "Minor mode for working on LÖVE projects" nil single "melpa-stable" nil ((:url . "https://github.com/ejmr/love-minor-mode")) nil])
  (lush-theme [cl-struct-package-desc lush-theme (20141107 806) "A dark theme with strong colors" ((emacs (24))) single "melpa" nil ((:url . "https://github.com/andre-richter/emacs-lush-theme") (:keywords "theme" "dark" "strong colors")) nil])
  (lusty-explorer [cl-struct-package-desc lusty-explorer (20150508 1557) "Dynamic filesystem explorer and buffer switcher" nil single "melpa" nil ((:keywords "convenience" "files" "matching")) nil])
  (macro-math [cl-struct-package-desc macro-math (20130328 904) "in-buffer mathematical operations" nil single "melpa" nil ((:url . "http://nschum.de/src/emacs/macro-math/") (:keywords "convenience")) nil] [cl-struct-package-desc macro-math (1 0) "in-buffer mathematical operations" nil single "melpa-stable" nil ((:url . "http://nschum.de/src/emacs/macro-math/") (:keywords "convenience")) nil])
  (macros+ [cl-struct-package-desc macros+ (20150104 1620) "Extensions to `macros.el'." nil single "melpa" nil ((:url . "http://www.emacswiki.org/macros+.el") (:keywords "abbrev" "local")) nil])
  (mag-menu [cl-struct-package-desc mag-menu (20150505 1150) "Intuitive keyboard-centric menu system" ((splitter (0 1 0))) single "melpa" nil ((:url . "https://github.com/chumpage/mag-menu") (:keywords "convenience")) nil])
  (magic-filetype [cl-struct-package-desc magic-filetype (20151029 857) "Enhance filetype major mode" ((emacs (24)) (s (1 9 0))) single "melpa" nil ((:keywords "vim" "ft" "file" "magic-mode")) nil] [cl-struct-package-desc magic-filetype (0 1 1) "Enhance filetype major mode" ((emacs (24)) (s (1 9 0))) single "melpa-stable" nil ((:keywords "vim" "ft" "file" "magic-mode")) nil])
  (magic-latex-buffer [cl-struct-package-desc magic-latex-buffer (20151105 2259) "Magically enhance LaTeX-mode font-locking for semi-WYSIWYG editing" ((cl-lib (0 5)) (emacs (24 3))) single "melpa" nil ((:url . "http://hins11.yu-yake.com/")) nil])
  (magit-annex [cl-struct-package-desc magit-annex (20151008 2126) "Control git-annex from Magit" ((cl-lib (0 3)) (magit (1 2 0))) single "melpa" nil ((:url . "https://github.com/kyleam/magit-annex") (:keywords "vc" "tools")) nil] [cl-struct-package-desc magit-annex (1 0 0) "Control git-annex from Magit" ((cl-lib (0 3)) (magit (1 2 0))) single "melpa-stable" nil ((:url . "https://github.com/kyleam/magit-annex") (:keywords "vc" "tools")) nil])
  (magit-filenotify [cl-struct-package-desc magit-filenotify (20151001 36) "Refresh status buffer when git tree changes" ((magit (1 3 0)) (emacs (24 4))) single "melpa" nil ((:keywords "tools")) nil] [cl-struct-package-desc magit-filenotify (0 1) "Refresh status buffer when git tree changes" ((magit (1 3 0)) (emacs (24 4))) single "melpa-stable" nil ((:keywords "tools")) nil])
  (magit-gerrit [cl-struct-package-desc magit-gerrit (20150920 1656) "Magit plugin for Gerrit Code Review" ((magit (2 1 0))) single "melpa" nil ((:url . "https://github.com/terranpro/magit-gerrit")) nil] [cl-struct-package-desc magit-gerrit (0 2) "Magit plugin for Gerrit Code Review" ((magit (2 1 0))) single "melpa-stable" nil ((:url . "https://github.com/terranpro/magit-gerrit")) nil])
  (magit-gitflow [cl-struct-package-desc magit-gitflow (20150905 39) "gitflow extension for magit" ((magit (2 1 0)) (magit-popup (2 2 0))) single "melpa" nil ((:url . "https://github.com/jtatarik/magit-gitflow") (:keywords "vc" "tools")) nil] [cl-struct-package-desc magit-gitflow (2 0 0) "gitflow extension for magit" ((magit (2 1 0))) single "melpa-stable" nil ((:url . "https://github.com/jtatarik/magit-gitflow") (:keywords "vc" "tools")) nil])
  (magit-rockstar [cl-struct-package-desc magit-rockstar (20151008 1524) "commit like a rockstar" ((dash (2 11 0)) (magit (2 1 0))) single "melpa" nil ((:url . "http://github.com/tarsius/magit-rockstar") (:keywords "convenience")) nil])
  (magit-stgit [cl-struct-package-desc magit-stgit (20151018 1032) "StGit extension for Magit" ((emacs (24 4)) (magit (2 1 0))) single "melpa" nil ((:keywords "vc" "tools")) nil] [cl-struct-package-desc magit-stgit (2 1 1) "StGit extension for Magit" ((emacs (24 4)) (magit (2 1 0))) single "melpa-stable" nil ((:keywords "vc" "tools")) nil])
  (magit-svn [cl-struct-package-desc magit-svn (20151018 1033) "Git-Svn extension for Magit" ((emacs (24 4)) (magit (2 1 0))) single "melpa" nil ((:keywords "vc" "tools")) nil] [cl-struct-package-desc magit-svn (2 1 1) "Git-Svn extension for Magit" ((emacs (24 4)) (magit (2 1 0))) single "melpa-stable" nil ((:keywords "vc" "tools")) nil])
  (magit-topgit [cl-struct-package-desc magit-topgit (20151018 1031) "TopGit extension for Magit" ((emacs (24 4)) (magit (2 1 0))) single "melpa" nil ((:keywords "vc" "tools")) nil] [cl-struct-package-desc magit-topgit (2 1 1) "TopGit extension for Magit" ((emacs (24 4)) (magit (2 1 0))) single "melpa-stable" nil ((:keywords "vc" "tools")) nil])
  (magma-mode [cl-struct-package-desc magma-mode (20150923 140) "Magma mode for Emacs" ((cl-lib (0 3)) (dash (2 6 0)) (f (0 17 1))) tar "melpa" nil ((:url . "https://github.com/ThibautVerron/magma-mode")) nil])
  (magnatune [cl-struct-package-desc magnatune (20151030 1235) "browse magnatune's music catalog" ((dash (2 9 0)) (s (1 9 0))) tar "melpa" nil nil nil])
  (majapahit-theme [cl-struct-package-desc majapahit-theme (20151109 1839) "Color theme with a dark and light versions" nil tar "melpa" nil ((:keywords "color" "theme") (:url . "https://gitlab.com/franksn/majapahit-theme")) nil])
  (make-color [cl-struct-package-desc make-color (20140625 450) "Alternative to picking color - update fg/bg color by pressing r/g/b/... keys" nil single "melpa" nil ((:url . "https://github.com/alezost/make-color.el") (:keywords "color")) nil] [cl-struct-package-desc make-color (0 4) "Alternative to picking color - update fg/bg color by pressing r/g/b/... keys" nil single "melpa-stable" nil ((:url . "http://github.com/alezost/make-color.el") (:keywords "color")) nil])
  (make-it-so [cl-struct-package-desc make-it-so (20150319 1207) "Transform files with Makefile recipes." ((helm (1 5 3)) (emacs (24))) tar "melpa" nil ((:url . "https://github.com/abo-abo/make-it-so") (:keywords "make" "dired")) nil])
  (maker-mode [cl-struct-package-desc maker-mode (20150116 354) "Emacs mode for maker (scala build tool)" ((s (1 3 0)) (dash (2 8 0))) single "melpa" nil ((:url . "https://github.com/fommil/maker-mode") (:keywords "processes" "tools")) nil])
  (makey [cl-struct-package-desc makey (20131231 630) "interactive commandline mode" ((cl-lib (0 2))) single "melpa" nil nil nil] [cl-struct-package-desc makey (0 3) "interactive commandline mode" ((cl-lib (0 2))) single "melpa-stable" nil nil nil])
  (malabar-mode [cl-struct-package-desc malabar-mode (20150720 1055) "JVM Integration mode for EMACS" ((fringe-helper (1 0 1)) (groovy-mode (0))) tar "melpa" nil ((:url . "http://www.github.com/m0smith/malabar-mode") (:keywords "java" "maven" "groovy" "language" "malabar")) nil] [cl-struct-package-desc malabar-mode (20140303 946) "A better Java mode for Emacs" ((fringe-helper (1 0 1))) tar "melpa-stable" nil ((:url . "http://www.github.com/m0smith/malabar-mode") (:keywords "java" "maven" "language" "malabar")) nil])
  (malinka [cl-struct-package-desc malinka (20151107 16) "A C/C++ project configuration package for Emacs" ((s (1 9 0)) (dash (2 4 0)) (f (0 11 0)) (cl-lib (0 3)) (rtags (0 0)) (projectile (0 11 0))) single "melpa" nil ((:url . "https://github.com/LefterisJP/malinka") (:keywords "c" "c++" "project-management")) nil] [cl-struct-package-desc malinka (0 3 1) "A C/C++ project configuration package for Emacs" ((s (1 9 0)) (dash (2 4 0)) (f (0 11 0)) (cl-lib (0 3)) (rtags (0 0)) (projectile (0 11 0))) single "melpa-stable" nil ((:url . "https://github.com/LefterisJP/malinka") (:keywords "c" "c++" "project-management")) nil])
  (mallard-mode [cl-struct-package-desc mallard-mode (20131203 2025) "Major mode for editing Mallard files" nil tar "melpa" nil ((:url . "https://github.com/jhradilek/emacs-mallard-mode") (:keywords "xml" "mallard")) nil] [cl-struct-package-desc mallard-mode (0 3 0) "Major mode for editing Mallard files" nil tar "melpa-stable" nil ((:url . "https://github.com/jhradilek/emacs-mallard-mode") (:keywords "xml" "mallard")) nil])
  (mallard-snippets [cl-struct-package-desc mallard-snippets (20131023 1151) "Yasnippets for Mallard" ((yasnippet (0 8 0)) (mallard-mode (0 1 1))) tar "melpa" nil ((:url . "https://github.com/jhradilek/emacs-mallard-snippets") (:keywords "snippets" "mallard")) nil])
  (manage-minor-mode [cl-struct-package-desc manage-minor-mode (20140310 900) "Manage your minor-modes easily" ((emacs (24 3))) single "melpa" nil ((:url . "https://github.com/ShingoFukuyama/manage-minor-mode") (:keywords "minor-mode" "manage" "emacs")) nil])
  (mandoku [cl-struct-package-desc mandoku (20151106 816) "A tool to access repositories of premodern Chinese texts" ((org (8 0))) tar "melpa" nil nil nil])
  (mandoku-meta-kr [cl-struct-package-desc mandoku-meta-kr (20150617 2218) "Metadata for the KR repository to be used by Mandoku" ((org (8)) (mandoku (0 5))) tar "melpa" nil ((:url . "http://www.kanripo.org") (:keywords "convenience")) nil])
  (mandoku-meta-zb [cl-struct-package-desc mandoku-meta-zb (20150302 2006) "Metadata for the ZB repository to be used by Mandoku" ((org (8)) (mandoku (0 5))) tar "melpa" nil ((:url . "http://www.mandoku.org") (:keywords "convenience")) nil])
  (map-progress [cl-struct-package-desc map-progress (20140310 1432) "mapping macros that report progress" nil single "melpa" nil ((:url . "https://github.com/tarsius/map-progress/") (:keywords "convenience")) nil] [cl-struct-package-desc map-progress (0 5 0) "mapping macros that report progress" nil single "melpa-stable" nil ((:url . "https://github.com/tarsius/map-progress/") (:keywords "convenience")) nil])
  (map-regexp [cl-struct-package-desc map-regexp (20130522 1403) "map over matches of a regular expression" ((cl-lib (0 2))) single "melpa" nil ((:url . "https://github.com/tarsius/map-regexp") (:keywords "convenience")) nil] [cl-struct-package-desc map-regexp (0 3 0) "map over matches of a regular expression" ((cl-lib (0 2))) single "melpa-stable" nil ((:url . "https://github.com/tarsius/map-regexp") (:keywords "convenience")) nil])
  (marcopolo [cl-struct-package-desc marcopolo (20150326 918) "Emacs client for Docker API" ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) tar "melpa" nil ((:url . "https://github.com/nlamirault/marcopolo") (:keywords "docker")) nil] [cl-struct-package-desc marcopolo (0 3 0) "Emacs client for Docker API" ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) tar "melpa-stable" nil ((:url . "https://github.com/nlamirault/marcopolo") (:keywords "docker")) nil])
  (markdown-mode+ [cl-struct-package-desc markdown-mode+ (20120829 510) "extra functions for markdown-mode" ((markdown-mode (20111229))) tar "melpa" nil ((:url . "http://github.com/milkypostman/markdown-mode+.el") (:keywords "markdown" "latex" "osx" "rtf")) nil] [cl-struct-package-desc markdown-mode+ (0 8) "extra functions for markdown-mode" ((markdown-mode (20111229))) tar "melpa-stable" nil ((:url . "http://github.com/milkypostman/markdown-mode+.el") (:keywords "markdown" "latex" "osx" "rtf")) nil])
  (markup [cl-struct-package-desc markup (20130207 1309) "Simple markup generation helpers." nil single "melpa" nil ((:url . "http://github.com/leoc/markup.el") (:keywords "convenience" "markup" "html")) nil])
  (material-theme [cl-struct-package-desc material-theme (20151030 1738) "A Theme based on the colors of the Google Material Design" ((emacs (24 1))) tar "melpa" nil ((:url . "http://github.com/cpaulik/emacs-material-theme") (:keywords "themes")) nil])
  (math-symbols [cl-struct-package-desc math-symbols (20130910 31) "Math Symbol Input methods and conversion tools" ((helm (1 0))) tar "melpa" nil ((:url . "https://github.com/kawabata/math-symbols") (:keywords "math symbols" "tex" "latex")) nil])
  (matlab-mode [cl-struct-package-desc matlab-mode (20141227 1244) "No description available." nil tar "melpa" nil nil nil])
  (matrix-client [cl-struct-package-desc matrix-client (20151104 923) "A minimal chat client for the Matrix.org RPC" ((json (1 4)) (request (0 2 0))) tar "melpa" nil ((:url . "http://doc.rix.si/matrix.html") (:keywords "web")) nil] [cl-struct-package-desc matrix-client (0 1 5) "A minimal chat client for the Matrix.org RPC" ((json (1 4)) (request (0 2 0))) tar "melpa-stable" nil ((:url . "http://doc.rix.si/matrix.html") (:keywords "web")) nil])
  (maude-mode [cl-struct-package-desc maude-mode (20140212 302) "Emacs mode for the programming language Maude" nil single "melpa" nil ((:keywords "maude")) nil])
  (maven-test-mode [cl-struct-package-desc maven-test-mode (20141219 2157) "Utilities for navigating test files and running maven test tasks." ((s (1 9)) (emacs (24))) single "melpa" nil ((:url . "http://github.com/rranelli/maven-test-mode") (:keywords "java" "maven" "test")) nil] [cl-struct-package-desc maven-test-mode (0 1 5) "Utilities for navigating test files and running maven test tasks." ((s (1 9)) (emacs (24))) single "melpa-stable" nil ((:url . "http://github.com/rranelli/maven-test-mode") (:keywords "java" "maven" "test")) nil])
  (mb-depth+ [cl-struct-package-desc mb-depth+ (20150104 1622) "Indicate minibuffer-depth in prompt" nil single "melpa" nil ((:url . "http://www.emacswiki.org/mb-depth+.el") (:keywords "convenience")) nil])
  (mbo70s-theme [cl-struct-package-desc mbo70s-theme (20141122 642) "70s style palette, with similarities to mbo theme" ((emacs (24 0))) single "melpa" nil ((:url . "https://github.com/emacsfodder/tmtheme-to-deftheme")) nil])
  (mc-extras [cl-struct-package-desc mc-extras (20150218 234) "Extra functions for multiple-cursors mode." ((multiple-cursors (1 2 1))) tar "melpa" nil ((:url . "https://github.com/knu/mc-extras.el") (:keywords "editing" "cursors")) nil] [cl-struct-package-desc mc-extras (1 2 1) "Extra functions for multiple-cursors mode." ((multiple-cursors (1 2 1))) tar "melpa-stable" nil ((:url . "https://github.com/knu/mc-extras.el") (:keywords "editing" "cursors")) nil])
  (md-readme [cl-struct-package-desc md-readme (20150505 2359) "Markdown-formatted READMEs for your ELisp" nil tar "melpa" nil ((:url . "http://github.com/thomas11/md-readme/tree/master") (:keywords "lisp" "help" "readme" "markdown" "header" "documentation" "github")) nil])
  (meacupla-theme [cl-struct-package-desc meacupla-theme (20151027 1517) "meacupla theme for emacs" nil single "melpa" nil ((:url . "https://gitlab.com/jtecca/meacupla-theme") (:keywords "color" "theme" "meacupla" "faces")) nil])
  (mellow-theme [cl-struct-package-desc mellow-theme (20141115 2302) "an Emacs 24 theme based on Mellow (tmTheme)" ((emacs (24 0))) single "melpa" nil ((:url . "https://github.com/emacsfodder/tmtheme-to-deftheme")) nil])
  (melpa-upstream-visit [cl-struct-package-desc melpa-upstream-visit (20130720 333) "A set of kludges to visit a melpa-hosted package's homepage" ((s (1 6 0))) single "melpa" nil ((:keywords "convenience")) nil])
  (memento [cl-struct-package-desc memento (20150823 339) "maintaining daily journals when the day ends." nil single "melpa" nil ((:keywords "journal" "log" "diary")) nil])
  (memolist [cl-struct-package-desc memolist (20150804 1021) "memolist.el is Emacs port of memolist.vim." ((markdown-mode (22 0)) (ag (0 45))) single "melpa" nil ((:url . "http://github.com/mikanfactory/emacs-memolist") (:keywords "markdown" "memo")) nil])
  (mentor [cl-struct-package-desc mentor (20140904 1710) "Frontend for the rTorrent bittorrent client" ((xml-rpc (1 6 9))) tar "melpa" nil ((:keywords "bittorrent" "rtorrent")) nil] [cl-struct-package-desc mentor (0 1) "Control rtorrent from GNU Emacs" nil tar "melpa-stable" nil ((:keywords "bittorrent" "rtorrent")) nil])
  (menu-bar+ [cl-struct-package-desc menu-bar+ (20150104 1623) "Extensions to `menu-bar.el'." nil single "melpa" nil ((:url . "http://www.emacswiki.org/menu-bar+.el") (:keywords "internal" "local" "convenience")) nil])
  (merlin [cl-struct-package-desc merlin (20151106 204) "Mode for Merlin, an assistant for OCaml." nil tar "melpa" nil ((:url . "http://github.com/the-lambda-church/merlin") (:keywords "ocaml" "languages")) nil] [cl-struct-package-desc merlin (2 3) "Mode for Merlin, an assistant for OCaml." nil tar "melpa-stable" nil ((:url . "http://github.com/the-lambda-church/merlin") (:keywords "ocaml" "languages")) nil])
  (message-x [cl-struct-package-desc message-x (20151029 718) "customizable completion in message headers" nil single "melpa" nil ((:keywords "news" "mail" "compose" "completion")) nil])
  (metascript-mode [cl-struct-package-desc metascript-mode (20150708 1757) "Major mode for the Metascript programming language" ((emacs (24 3))) single "melpa" nil ((:url . "http://github.com/metascript/metascript-mode") (:keywords "languages" "metascript" "mjs")) nil])
  (metaweblog [cl-struct-package-desc metaweblog (20141130 605) "An emacs library to access metaweblog based weblogs" ((xml-rpc (1 6 8))) tar "melpa" nil nil nil] [cl-struct-package-desc metaweblog (0 1 1) "An emacs library to access metaweblog based weblogs" ((xml-rpc (1 6 8))) tar "melpa-stable" nil nil nil])
  (mew [cl-struct-package-desc mew (20150813 2354) "Messaging in the Emacs World" nil tar "melpa" nil nil nil] [cl-struct-package-desc mew (6 7) "Messaging in the Emacs World" nil tar "melpa-stable" nil nil nil])
  (mhc [cl-struct-package-desc mhc (20151022 646) "Message Harmonized Calendaring system." ((calfw (20150703))) tar "melpa" nil ((:url . "http://www.quickhack.net/mhc") (:keywords "calendar")) nil] [cl-struct-package-desc mhc (1 1 0) "Message Harmonized Calendaring system." ((calfw (20150703))) tar "melpa-stable" nil ((:url . "http://www.quickhack.net/mhc") (:keywords "calendar")) nil])
  (midje-test-mode [cl-struct-package-desc midje-test-mode (20131208 914) "Minor mode for midje" ((clojure-mode (1 7)) (cider (0 3 0))) single "melpa" nil ((:keywords "languages" "lisp" "test")) nil])
  (migemo [cl-struct-package-desc migemo (20150412 741) "Japanese incremental search through dynamic pattern expansion" ((cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/emacs-jp/migemo")) nil] [cl-struct-package-desc migemo (1 9 1) "Japanese incremental search through dynamic pattern expansion" nil single "melpa-stable" nil ((:url . "https://github.com/emacs-jp/migemo")) nil])
  (milkode [cl-struct-package-desc milkode (20140926 2229) "Command line search and direct jump with Milkode" nil single "melpa" nil ((:keywords "milkode" "search" "grep" "jump" "keyword")) nil] [cl-struct-package-desc milkode (0 4) "Command line search and direct jump with Milkode" nil single "melpa-stable" nil ((:keywords "milkode" "search" "grep" "jump" "keyword")) nil])
  (minesweeper [cl-struct-package-desc minesweeper (20150413 2222) "play minesweeper in Emacs" nil single "melpa" nil ((:url . "https://bitbucket.org/zck/minesweeper.el") (:keywords "game" "fun" "minesweeper" "inane" "diversion")) nil])
  (mingus [cl-struct-package-desc mingus (20151018 745) "MPD Interface" ((libmpdee (2 1))) tar "melpa" nil ((:url . "https://github.com/pft/mingus") (:keywords "multimedia" "elisp" "music" "mpd")) nil])
  (minibuf-isearch [cl-struct-package-desc minibuf-isearch (20071112 234) "incremental search on minibuffer history" nil tar "melpa" nil ((:keywords "minibuffer" "history" "incremental search")) nil])
  (minibuffer-complete-cycle [cl-struct-package-desc minibuffer-complete-cycle (20130813 945) "Cycle through the *Completions* buffer" nil single "melpa" nil ((:url . "https://github.com/knu/minibuffer-complete-cycle") (:keywords "completion")) nil] [cl-struct-package-desc minibuffer-complete-cycle (1 25 20130814) "Cycle through the *Completions* buffer" nil single "melpa-stable" nil ((:url . "https://github.com/knu/minibuffer-complete-cycle") (:keywords "completion")) nil])
  (minibuffer-cua [cl-struct-package-desc minibuffer-cua (20130906 434) "Make CUA mode's S-up/S-down work in minibuffer" nil single "melpa" nil ((:url . "https://github.com/knu/minibuffer-cua.el") (:keywords "completion" "editing")) nil] [cl-struct-package-desc minibuffer-cua (1 0 0) "Make CUA mode's S-up/S-down work in minibuffer" nil single "melpa-stable" nil ((:url . "https://github.com/knu/minibuffer-cua.el") (:keywords "completion" "editing")) nil])
  (miniedit [cl-struct-package-desc miniedit (20100419 1045) "Enhanced editing for minibuffer fields." nil single "melpa" nil nil nil] [cl-struct-package-desc miniedit (2 0) "Enhanced editing for minibuffer fields." nil single "melpa-stable" nil nil nil])
  (minimal-theme [cl-struct-package-desc minimal-theme (20140409 1601) "A light/dark minimalistic Emacs 24 theme." nil tar "melpa" nil ((:url . "http://github.com/ikame/minimal-theme") (:keywords "color" "theme" "minimal")) nil])
  (minor-mode-hack [cl-struct-package-desc minor-mode-hack (20141226 1220) "Change priority of minor-mode keymaps" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/minor-mode-hack.el") (:keywords "lisp")) nil])
  (mip-mode [cl-struct-package-desc mip-mode (20141023 450) "virtual projects for emacs." nil single "melpa" nil ((:keywords "workspaces" "workspace" "project" "projects" "mip-mode")) nil])
  (misc-cmds [cl-struct-package-desc misc-cmds (20150602 1227) "Miscellaneous commands (interactive functions)." nil single "melpa" nil ((:url . "http://www.emacswiki.org/misc-cmds.el") (:keywords "internal" "unix" "extensions" "maint" "local")) nil])
  (misc-fns [cl-struct-package-desc misc-fns (20150403 921) "Miscellaneous non-interactive functions." nil single "melpa" nil ((:url . "http://www.emacswiki.org/misc-fns.el") (:keywords "internal" "unix" "lisp" "extensions" "local")) nil])
  (mkdown [cl-struct-package-desc mkdown (20140517 718) "Pretty Markdown previews based on mkdown.com" ((markdown-mode (2 0))) tar "melpa" nil ((:url . "https://github.com/ajtulloch/mkdown.el") (:keywords "markdown")) nil])
  (mmm-jinja2 [cl-struct-package-desc mmm-jinja2 (20150904 1134) "MMM submode class for Jinja2 Templates" ((mmm-mode (0 5 4))) single "melpa" nil ((:url . "https://github.com/beardedprojamz/mmm-jinja2")) nil])
  (mmm-mako [cl-struct-package-desc mmm-mako (20121019 2351) "MMM submode class for Mako Templates" ((mmm-mode (0 4 8))) single "melpa" nil ((:url . "https://bitbucket.org/pjenvey/mmm-mako")) nil] [cl-struct-package-desc mmm-mako (1 1) "MMM submode class for Mako Templates" ((mmm-mode (0 4 8))) single "melpa-stable" nil ((:url . "https://bitbucket.org/pjenvey/mmm-mako")) nil])
  (mmm-mode [cl-struct-package-desc mmm-mode (20150828 1716) "Allow Multiple Major Modes in a buffer" nil tar "melpa" nil ((:url . "https://github.com/purcell/mmm-mode") (:keywords "convenience" "faces" "languages" "tools")) nil] [cl-struct-package-desc mmm-mode (0 5 4) "Allow Multiple Major Modes in a buffer" nil tar "melpa-stable" nil ((:url . "https://github.com/purcell/mmm-mode") (:keywords "convenience" "faces" "languages" "tools")) nil])
  (mmt [cl-struct-package-desc mmt (20150906 959) "Missing macro tools for Emacs Lisp" ((emacs (24 1)) (cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/mrkkrp/mmt") (:keywords "macro" "emacs-lisp")) nil] [cl-struct-package-desc mmt (0 1 1) "Missing macro tools for Emacs Lisp" ((emacs (24 1)) (cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/mrkkrp/mmt") (:keywords "macro" "emacs-lisp")) nil])
  (mo-vi-ment-mode [cl-struct-package-desc mo-vi-ment-mode (20131028 2333) "Provide vi-like cursor movement that's easy on the fingers" nil single "melpa" nil ((:keywords "convenience")) nil])
  (mobdebug-mode [cl-struct-package-desc mobdebug-mode (20140109 1946) "Major mode for MobDebug" ((lua-mode (20130419)) (emacs (24))) single "melpa" nil ((:url . "https://github.com/deftsp/mobdebug-mode")) nil])
  (mocha-snippets [cl-struct-package-desc mocha-snippets (20150116 800) "Yasnippets for the Mocha JS Testing Framework" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "test" "javascript")) nil])
  (modalka [cl-struct-package-desc modalka (20150924 911) "Easily introduce native modal editing of your own design" ((emacs (24 4))) single "melpa" nil ((:url . "https://github.com/mrkkrp/modalka") (:keywords "modal" "editing")) nil] [cl-struct-package-desc modalka (0 1 1) "Easily introduce native modal editing of your own design" ((emacs (24 4))) single "melpa-stable" nil ((:url . "https://github.com/mrkkrp/modalka") (:keywords "modal" "editing")) nil])
  (mode-line-debug [cl-struct-package-desc mode-line-debug (20150307 512) "show status of `debug-on-error' in the mode-line" nil single "melpa" nil ((:url . "https://github.com/tarsius/mode-line-debug") (:keywords "convenience" "lisp")) nil] [cl-struct-package-desc mode-line-debug (1 2 2) "show status of `debug-on-error' in the mode-line" nil single "melpa-stable" nil ((:url . "https://github.com/tarsius/mode-line-debug") (:keywords "convenience" "lisp")) nil])
  (modeline-char [cl-struct-package-desc modeline-char (20150710 1953) "In the mode-line, show the value of the character after point." nil single "melpa" nil ((:url . "http://www.emacswiki.org/modeline-char.el") (:keywords "mode-line" "character")) nil])
  (moe-theme [cl-struct-package-desc moe-theme (20151013 1927) "A colorful eye-candy theme. Moe, moe, kyun!" nil tar "melpa" nil ((:url . "https://github.com/kuanyui/moe-theme.el")) nil])
  (molokai-theme [cl-struct-package-desc molokai-theme (20151016 845) "molokai theme with Emacs theme engine" nil single "melpa" nil ((:url . "https://github.com/alloy-d/color-theme-molokai")) nil])
  (monochrome-theme [cl-struct-package-desc monochrome-theme (20140326 350) "A dark Emacs 24 theme for your focused hacking sessions" nil tar "melpa" nil nil nil])
  (morlock [cl-struct-package-desc morlock (20150815 834) "more font-lock keywords for elisp" nil single "melpa" nil ((:url . "http://github.com/tarsius/morlock") (:keywords "convenience")) nil] [cl-struct-package-desc morlock (0 5 0) "more font-lock keywords for elisp" nil single "melpa-stable" nil ((:url . "http://github.com/tarsius/morlock") (:keywords "convenience")) nil])
  (motion-mode [cl-struct-package-desc motion-mode (20140919 1856) "major mode for RubyMotion enviroment" ((flymake-easy (0 7)) (flymake-cursor (1 0 2))) tar "melpa" nil ((:url . "https://github.com/ainame/motion-mode")) nil])
  (mouse+ [cl-struct-package-desc mouse+ (20150104 1629) "Extensions to `mouse.el'." nil single "melpa" nil ((:url . "http://www.emacswiki.org/mouse+.el") (:keywords "mouse")) nil])
  (mouse-slider-mode [cl-struct-package-desc mouse-slider-mode (20150910 1400) "scale numbers dragged under the mouse" ((emacs (24 3)) (cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/skeeto/mouse-slider-mode")) nil])
  (mouse3 [cl-struct-package-desc mouse3 (20150402 1629) "Customizable behavior for `mouse-3'." nil single "melpa" nil ((:url . "http://www.emacswiki.org/mouse3.el") (:keywords "mouse" "menu" "keymap" "kill" "rectangle" "region")) nil])
  (move-dup [cl-struct-package-desc move-dup (20140925 808) "Eclipse-like moving and duplicating lines or rectangles." nil single "melpa" nil ((:keywords "convenience" "wp")) nil] [cl-struct-package-desc move-dup (0 2 1) "Eclipse-like moving and duplicating lines or rectangles." nil single "melpa-stable" nil ((:keywords "convenience" "wp")) nil])
  (mowedline [cl-struct-package-desc mowedline (20150601 1009) "elisp utilities for using mowedline" nil single "melpa" nil nil nil] [cl-struct-package-desc mowedline (0 2 8) "elisp utilities for using mowedline" nil single "melpa-stable" nil nil nil])
  (moz [cl-struct-package-desc moz (20150805 1006) "Lets current buffer interact with inferior mozilla." nil single "melpa" nil ((:url . "http://github.com/bard/mozrepl/raw/master/chrome/content/moz.el")) nil] [cl-struct-package-desc moz (1 1 0) "Lets current buffer interact with inferior mozilla." nil single "melpa-stable" nil ((:url . "http://github.com/bard/mozrepl/raw/master/chrome/content/moz.el")) nil])
  (moz-controller [cl-struct-package-desc moz-controller (20141001 2347) "Control Firefox from Emacs" ((moz (0))) single "melpa" nil ((:url . "https://github.com/RenWenshan/emacs-moz-controller")) nil] [cl-struct-package-desc moz-controller (1 0) "Control Firefox from Emacs" ((moz (0))) single "melpa-stable" nil ((:url . "https://github.com/RenWenshan/emacs-moz-controller")) nil])
  (mozc [cl-struct-package-desc mozc (20150815 303) "minor mode to input Japanese with Mozc" nil single "melpa" nil ((:keywords "mule" "multilingual" "input method")) nil])
  (mozc-im [cl-struct-package-desc mozc-im (20150419 449) "Mozc with input-method-function interface." ((mozc (0))) single "melpa" nil ((:keywords "i18n" "extentions")) nil])
  (mozc-popup [cl-struct-package-desc mozc-popup (20150223 1634) "Mozc with popup" ((popup (0 5 2)) (mozc (0))) single "melpa" nil ((:keywords "i18n" "extentions")) nil])
  (mpages [cl-struct-package-desc mpages (20150710 704) "An Emacs buffer for quickly writing your Morning Pages" nil single "melpa" nil ((:url . "https://github.com/slevin/mpages")) nil])
  (mpg123 [cl-struct-package-desc mpg123 (20150110 1816) "A front-end program to mpg123/ogg123" nil single "melpa" nil nil nil])
  (mpv [cl-struct-package-desc mpv (20150218 118) "control mpv for easy note-taking" ((cl-lib (0 5)) (emacs (24)) (json (1 3)) (names (0 5 4)) (org (8 0))) single "melpa" nil ((:url . "https://github.com/kljohann/mpv.el") (:keywords "tools" "multimedia")) nil] [cl-struct-package-desc mpv (0 1 0) "control mpv for easy note-taking" ((cl-lib (0 5)) (emacs (24)) (json (1 3)) (names (0 5 4)) (org (8 0))) single "melpa-stable" nil ((:url . "https://github.com/kljohann/mpv.el") (:keywords "tools" "multimedia")) nil])
  (msvc [cl-struct-package-desc msvc (20150530 151) "Microsoft Visual C/C++ mode" ((emacs (24)) (cl-lib (0 5)) (cedet (1 0)) (ac-clang (1 2 0))) tar "melpa" nil ((:url . "https://github.com/yaruopooner/msvc") (:keywords "languages" "completion" "syntax check" "mode" "intellisense")) nil] [cl-struct-package-desc msvc (1 2 2) "Microsoft Visual C/C++ mode" ((emacs (24)) (cl-lib (0 5)) (cedet (1 0)) (ac-clang (1 2 0))) tar "melpa-stable" nil ((:url . "https://github.com/yaruopooner/msvc") (:keywords "languages" "completion" "syntax check" "mode" "intellisense")) nil])
  (mu4e-alert [cl-struct-package-desc mu4e-alert (20151024 1008) "Desktop notification for mu4e" ((alert (1 2)) (s (1 10 0)) (emacs (24 1))) single "melpa" nil ((:url . "https://github.com/iqbalansari/mu4e-alert") (:keywords "mail" "convenience")) nil] [cl-struct-package-desc mu4e-alert (0 3) "Desktop notification for mu4e" ((alert (1 2)) (s (1 10 0)) (emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/iqbalansari/mu4e-alert") (:keywords "mail" "convenience")) nil])
  (mu4e-maildirs-extension [cl-struct-package-desc mu4e-maildirs-extension (20150930 627) "Show mu4e maildirs summary in mu4e-main-view" ((dash (0 0 0))) single "melpa" nil ((:url . "http://github.com/agpchil/mu4e-maildirs-extension")) nil] [cl-struct-package-desc mu4e-maildirs-extension (0 8) "Show mu4e maildirs summary in mu4e-main-view" nil single "melpa-stable" nil ((:url . "http://github.com/agpchil/mu4e-maildirs-extension")) nil])
  (multi-compile [cl-struct-package-desc multi-compile (20151111 1440) "Multi target interface to compile." ((emacs (24))) single "melpa" nil ((:url . "https://github.com/ReanGD/emacs-multi-compile") (:keywords "tools" "compile" "build")) nil])
  (multicolumn [cl-struct-package-desc multicolumn (20150202 1451) "Creating and managing multiple side-by-side windows." nil single "melpa" nil ((:url . "https://github.com/Lindydancer/multicolumn")) nil])
  (multifiles [cl-struct-package-desc multifiles (20130615 1433) "View and edit parts of multiple files in one buffer" nil single "melpa" nil ((:keywords "multiple" "files")) nil])
  (mustang-theme [cl-struct-package-desc mustang-theme (20141017 1623) "port of vim's mustang theme" nil single "melpa" nil ((:url . "http://github.com/mswift42/mustang-theme")) nil])
  (mustard-theme [cl-struct-package-desc mustard-theme (20141115 2302) "an Emacs 24 theme based on Mustard (tmTheme)" ((emacs (24 0))) single "melpa" nil ((:url . "https://github.com/emacsfodder/tmtheme-to-deftheme")) nil])
  (muttrc-mode [cl-struct-package-desc muttrc-mode (20090804 1552) "Major mode to edit muttrc under Emacs" nil single "melpa" nil nil nil])
  (mvn [cl-struct-package-desc mvn (20150930 2329) "helpers for compiling with maven" nil single "melpa" nil ((:url . "https://github.com/apgwoz/mvn-el") (:keywords "compilation" "maven" "java")) nil])
  (mwim [cl-struct-package-desc mwim (20150822 1236) "Move to the beginning/end of line or code" nil single "melpa" nil ((:url . "https://github.com/alezost/mwim.el") (:keywords "convenience")) nil] [cl-struct-package-desc mwim (0 2) "Move to the beginning/end of line or code" nil single "melpa-stable" nil ((:url . "https://github.com/alezost/mwim.el") (:keywords "convenience")) nil])
  (myanmar-input-methods [cl-struct-package-desc myanmar-input-methods (20150806 507) "Emacs Input Method for Myanmar" nil single "melpa" nil ((:url . "http://github.com/yelinkyaw/emacs-myanmar-input-methods") (:keywords "myanmar" "unicode" "keyboard")) nil])
  (mykie [cl-struct-package-desc mykie (20150808 1505) "Command multiplexer: Register multiple functions to a keybind" ((emacs (24 3)) (cl-lib (0 5))) tar "melpa" nil ((:url . "https://github.com/yuutayamada/mykie-el") (:keywords "emacs" "configuration" "keybind")) nil] [cl-struct-package-desc mykie (0 3 1) "Command multiplexer: Register multiple functions to a keybind" ((emacs (24 3)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/yuutayamada/mykie-el") (:keywords "emacs" "configuration" "keybind")) nil])
  (mynt-mode [cl-struct-package-desc mynt-mode (20150512 1349) "Minor mode to work with the mynt static site generator" ((virtualenvwrapper (20131514))) single "melpa" nil ((:url . "https://github.com/crshd/mynt-mode") (:keywords "convenience")) nil])
  (mysql2sqlite [cl-struct-package-desc mysql2sqlite (20120514 731) "Convert mysql databases into sqlite databases." nil single "melpa" nil nil nil])
  (n4js [cl-struct-package-desc n4js (20150713 1931) "Neo4j Shell" ((emacs (24)) (cypher-mode (0))) single "melpa" nil ((:url . "https://github.com/tmtxt/n4js.el") (:keywords "neo4j" "shell" "comint")) nil])
  (naked [cl-struct-package-desc naked (20150104 1632) "Provide for naked key descriptions: no angle brackets." nil single "melpa" nil ((:url . "http://www.emacswiki.org/naked.el") (:keywords "lisp" "key" "print" "format" "help")) nil])
  (name-this-color [cl-struct-package-desc name-this-color (20151014 1330) "Match RGB codes to names easily and precisely" ((emacs (24)) (cl-lib (0 5)) (dash (2 11 0))) single "melpa" nil ((:url . "https://github.com/knl/name-this-color.el") (:keywords "lisp" "color" "hex" "rgb" "shade" "name")) nil] [cl-struct-package-desc name-this-color (0 3 0) "Match RGB codes to names easily and precisely" ((emacs (24)) (cl-lib (0 5)) (dash (2 11 0))) single "melpa-stable" nil ((:url . "https://github.com/knl/name-this-color.el") (:keywords "lisp" "color" "hex" "rgb" "shade" "name")) nil])
  (nameframe [cl-struct-package-desc nameframe (20151017 2119) "Manage frames by name." nil single "melpa" nil ((:url . "https://github.com/john2x/nameframe")) nil])
  (nameframe-perspective [cl-struct-package-desc nameframe-perspective (20151018 207) "Nameframe integration with perspective.el" ((nameframe (0 4 0 -2)) (perspective (1 12))) single "melpa" nil ((:url . "https://github.com/john2x/nameframe")) nil])
  (nameframe-projectile [cl-struct-package-desc nameframe-projectile (20151018 207) "Nameframe integration with Projectile" ((nameframe (0 4 0 -2)) (projectile (0 13 0))) single "melpa" nil ((:url . "https://github.com/john2x/nameframe")) nil])
  (namespaces [cl-struct-package-desc namespaces (20130326 1550) "An implementation of namespaces for Elisp, with an emphasis on immutabilty." nil single "melpa" nil ((:url . "https://github.com/chrisbarrett/elisp-namespaces")) nil])
  (nand2tetris [cl-struct-package-desc nand2tetris (20151027 1451) "Major mode for HDL files in the nand2tetris course" ((names (0 3 0))) tar "melpa" nil ((:url . "http://www.github.com/CestDiego/nand2tetris.el/") (:keywords "nand2tetris" "hdl")) nil])
  (nand2tetris-assembler [cl-struct-package-desc nand2tetris-assembler (20151027 1436) "Assembler For the Nand2tetris Course" ((names (0 3 0)) (nand2tetris (0 0 1))) single "melpa" nil ((:url . "http://www.github.com/CestDiego/nand2tetris-assembler.el/") (:keywords "nand2tetris-assembler" "hdl")) nil])
  (nanowrimo [cl-struct-package-desc nanowrimo (20151104 1828) "Track progress for nanowrimo" nil single "melpa" nil ((:url . "https://bitbucket.org/gvol/nanowrimo-mode")) nil])
  (naquadah-theme [cl-struct-package-desc naquadah-theme (20150923 141) "A theme based on Tango color set" nil single "melpa" nil nil nil])
  (narrow-indirect [cl-struct-package-desc narrow-indirect (20150104 1633) "Narrow using an indirect buffer that is a clone" nil single "melpa" nil ((:url . "http://www.emacswiki.org/narrow-indirect.el") (:keywords "narrow" "indirect" "buffer" "clone" "view" "multiple-modes")) nil])
  (narrow-reindent [cl-struct-package-desc narrow-reindent (20150722 1206) "Defines a minor mode to left-align narrowed regions." ((emacs (24 4))) single "melpa" nil ((:url . "https://github.com/emallson/narrow-reindent.el")) nil] [cl-struct-package-desc narrow-reindent (0 2 0) "Defines a minor mode to left-align narrowed regions." ((emacs (24 4))) single "melpa-stable" nil ((:url . "https://github.com/emallson/narrow-reindent.el")) nil])
  (narrowed-page-navigation [cl-struct-package-desc narrowed-page-navigation (20150108 2119) "A minor mode for showing one page at a time" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:keywords "outlines")) nil] [cl-struct-package-desc narrowed-page-navigation (0 1 0) "A minor mode for showing one page at a time" ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:keywords "outlines")) nil])
  (nasm-mode [cl-struct-package-desc nasm-mode (20151109 1658) "NASM x86 assembly major mode" ((emacs (24 3))) single "melpa" nil ((:url . "https://github.com/skeeto/nasm-mode")) nil] [cl-struct-package-desc nasm-mode (1 0 1) "NASM x86 assembly major mode" ((emacs (24 3))) single "melpa-stable" nil ((:url . "https://github.com/skeeto/nasm-mode")) nil])
  (nav [cl-struct-package-desc nav (20120507 7) "Emacs mode for filesystem navigation" nil tar "melpa" nil nil nil])
  (navi-mode [cl-struct-package-desc navi-mode (20141019 210) "major-mode for easy buffer-navigation" nil single "melpa" nil ((:url . "https://github.com/tj64/navi")) nil] [cl-struct-package-desc navi-mode (2 0) "major-mode for easy buffer-navigation" nil single "melpa-stable" nil ((:url . "https://github.com/tj64/navi")) nil])
  (navi2ch [cl-struct-package-desc navi2ch (20150329 1916) "Navigator for 2ch for Emacsen" nil tar "melpa" nil ((:keywords "network" "2ch")) nil])
  (navorski [cl-struct-package-desc navorski (20141203 1024) "Helping you live in the terminal, like Viktor did." ((s (1 9 0)) (dash (1 5 0)) (multi-term (0 8 14))) single "melpa" nil ((:keywords "terminal")) nil] [cl-struct-package-desc navorski (0 2 7) "Helping you live in the terminal, like Viktor did." ((s (1 9 0)) (dash (1 5 0)) (multi-term (0 8 14))) single "melpa-stable" nil ((:keywords "terminal")) nil])
  (ncl-mode [cl-struct-package-desc ncl-mode (20150525 929) "Major Mode for editing NCL scripts and other goodies" ((emacs (24))) tar "melpa" nil nil nil] [cl-struct-package-desc ncl-mode (0 99 1) "Major Mode for editing NCL scripts and other goodies" ((emacs (24))) tar "melpa-stable" nil nil nil])
  (nclip [cl-struct-package-desc nclip (20130617 1315) "Network (HTTP) Clipboard" nil tar "melpa" nil ((:url . "http://www.github.com/maio/nclip.el") (:keywords "nclip" "clipboard" "network")) nil])
  (nemerle [cl-struct-package-desc nemerle (20130328 746) "major mode for editing nemerle programs" nil single "melpa" nil ((:keywords "nemerle" "mode" "languages")) nil] [cl-struct-package-desc nemerle (1 2) "major mode for editing nemerle programs" nil single "melpa-stable" nil ((:keywords "nemerle" "mode" "languages")) nil])
  (neotree [cl-struct-package-desc neotree (20151101 607) "A tree plugin like NerdTree for Vim" nil tar "melpa" nil ((:url . "https://github.com/jaypei/emacs-neotree")) nil] [cl-struct-package-desc neotree (0 2 1) "A tree plugin like NerdTree for Vim" nil single "melpa-stable" nil ((:url . "https://github.com/jaypei/emacs-neotree")) nil])
  (netherlands-holidays [cl-struct-package-desc netherlands-holidays (20150202 817) "Netherlands holidays for Emacs calendar." nil single "melpa" nil ((:url . "https://github.com/abo-abo/netherlands-holidays") (:keywords "calendar")) nil])
  (never-comment [cl-struct-package-desc never-comment (20140104 1407) "Never blocks are comment" nil single "melpa" nil ((:url . "http://stackoverflow.com/a/4554658/89376")) nil])
  (newlisp-mode [cl-struct-package-desc newlisp-mode (20150120 1040) "newLISP editing mode for Emacs" nil single "melpa" nil ((:url . "https://github.com/kosh04/newlisp-mode") (:keywords "language" "lisp" "newlisp")) nil])
  (nexus [cl-struct-package-desc nexus (20140114 505) "REST Client for Nexus Maven Repository servers" nil tar "melpa" nil ((:keywords "comm")) nil])
  (niflheim-theme [cl-struct-package-desc niflheim-theme (20150630 821) "A port of the Nifleim theme to Emacs" nil single "melpa" nil ((:url . "https://github.com/niflheim-theme/emacs") (:keywords "themes")) nil])
  (nim-mode [cl-struct-package-desc nim-mode (20150904 438) "A major mode for the Nim programming language" ((emacs (24)) (epc (0 1 1))) tar "melpa" nil ((:keywords "nim" "languages")) nil])
  (ninja-mode [cl-struct-package-desc ninja-mode (20141203 2159) "Major mode for editing .ninja files" ((emacs (24))) single "melpa" nil nil nil] [cl-struct-package-desc ninja-mode (1 6 0) "Major mode for editing .ninja files" ((emacs (24))) single "melpa-stable" nil nil nil])
  (nix-mode [cl-struct-package-desc nix-mode (20151026 315) "Major mode for editing Nix expressions" nil single "melpa" nil ((:url . "https://github.com/NixOS/nix/tree/master/misc/emacs")) nil] [cl-struct-package-desc nix-mode (1 10) "Major mode for editing Nix expressions" nil single "melpa-stable" nil ((:url . "https://github.com/NixOS/nix/tree/master/misc/emacs")) nil])
  (nixos-options [cl-struct-package-desc nixos-options (20151013 1609) "Interface for browsing and completing NixOS options." ((emacs (24))) single "melpa" nil ((:url . "http://www.github.com/travisbhartwell/nix-emacs/") (:keywords "unix")) nil] [cl-struct-package-desc nixos-options (0 0 1) "Interface for browsing and completing NixOS options." ((emacs (24)) (json (1 4))) single "melpa-stable" nil ((:url . "http://www.github.com/travisbhartwell/nix-emacs/") (:keywords "unix")) nil])
  (nm [cl-struct-package-desc nm (20151110 1110) "NEVERMORE: an email interface for Notmuch" ((notmuch (0 21)) (peg (0 6)) (company (0)) (emacs (24 3))) tar "melpa" nil ((:url . "https://github.com/tjim/nevermore")) nil])
  (nnir-est [cl-struct-package-desc nnir-est (20140301 602) "Gnus nnir interface for HyperEstraier" nil single "melpa" nil ((:url . "https://github.com/kawabata/nnir-est") (:keywords "mail")) nil])
  (noccur [cl-struct-package-desc noccur (20150514 1420) "Run multi-occur on project/dired files" nil single "melpa" nil ((:keywords "convenience")) nil] [cl-struct-package-desc noccur (0 2) "Run multi-occur on project/dired files" nil single "melpa-stable" nil ((:keywords "convenience")) nil])
  (noctilux-theme [cl-struct-package-desc noctilux-theme (20150723 747) "Dark theme inspired by LightTable" nil tar "melpa" nil nil nil])
  (node-resolver [cl-struct-package-desc node-resolver (20140930 1023) "hook to install node modules in background" ((cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/meandavejustice/node-resolver.el") (:keywords "convenience" "nodejs" "javascript" "npm")) nil])
  (notmuch [cl-struct-package-desc notmuch (20151109 1825) "No description available." nil tar "melpa" nil nil nil] [cl-struct-package-desc notmuch (0 21) "No description available." nil tar "melpa-stable" nil nil nil])
  (novice+ [cl-struct-package-desc novice+ (20150104 1634) "Extensions to `novice.el'." nil single "melpa" nil ((:url . "http://www.emacswiki.org/novice+.el") (:keywords "internal" "help")) nil])
  (noxml-fold [cl-struct-package-desc noxml-fold (20151108 1218) "Fold away XML things." nil single "melpa" nil ((:url . "https://github.com/paddymcall/noxml-fold") (:keywords "xml" "folding")) nil])
  (nrepl-eval-sexp-fu [cl-struct-package-desc nrepl-eval-sexp-fu (20140311 341) "Tiny functionality enhancements for evaluating sexps." ((highlight (0 0 0)) (smartparens (0 0 0)) (thingatpt (0 0 0))) single "melpa" nil ((:keywords "lisp" "highlight" "convenience")) nil])
  (nrepl-sync [cl-struct-package-desc nrepl-sync (20140807 854) "connect to nrepl port and eval .sync.clj." ((cider (0 6))) single "melpa" nil ((:url . "https://github.com/phillord/lein-sync")) nil] [cl-struct-package-desc nrepl-sync (0 3 1) "connect to nrepl port and eval .sync.clj." ((cider (0 6))) single "melpa-stable" nil ((:url . "https://github.com/phillord/lein-sync")) nil])
  (nu-mode [cl-struct-package-desc nu-mode (20150413 1315) "Modern Emacs Prompts Based Keybinding." ((undo-tree (0 6 5)) (helm (20140902 1005))) tar "melpa" nil nil nil])
  (number [cl-struct-package-desc number (20141127 1004) "Working with numbers at point." nil single "melpa" nil nil nil])
  (nummm-mode [cl-struct-package-desc nummm-mode (20131117 214) "Display the number of minor modes instead of their names" nil single "melpa" nil ((:url . "http://github.com/agpchil/nummm-mode")) nil])
  (nvm [cl-struct-package-desc nvm (20151113 55) "Manage Node versions within Emacs" ((s (1 8 0)) (dash (2 4 0)) (f (0 14 0)) (dash-functional (2 4 0))) single "melpa" nil ((:url . "http://github.com/rejeep/nvm.el") (:keywords "node" "nvm")) nil] [cl-struct-package-desc nvm (0 2 0) "Manage Node versions within Emacs" ((s (1 8 0)) (dash (2 4 0)) (f (0 14 0)) (dash-functional (2 4 0))) single "melpa-stable" nil ((:url . "http://github.com/rejeep/nvm.el") (:keywords "node" "nvm")) nil])
  (nyan-mode [cl-struct-package-desc nyan-mode (20151017 2235) "Nyan Cat shows position in current buffer in mode-line." nil tar "melpa" nil ((:url . "https://github.com/TeMPOraL/nyan-mode/") (:keywords "nyan" "cat" "lulz" "pop tart cat" "build something amazing")) nil] [cl-struct-package-desc nyan-mode (1 0 0) "Nyan Cat shows position in current buffer in mode-line." nil tar "melpa-stable" nil ((:url . "https://github.com/TeMPOraL/nyan-mode/") (:keywords "nyan" "cat" "lulz" "pop tart cat" "build something amazing")) nil])
  (nyan-prompt [cl-struct-package-desc nyan-prompt (20140809 2208) "Nyan Cat on the eshell prompt." nil tar "melpa" nil ((:url . "http://github.com/PuercoPop/nyan-prompt") (:keywords "nyan" "cat" "lulz" "eshell" "rainbow dependencies ((rx 0))")) nil] [cl-struct-package-desc nyan-prompt (0 2 0) "Nyan Cat on the eshell prompt." nil tar "melpa-stable" nil ((:url . "http://github.com/PuercoPop/nyan-prompt") (:keywords "nyan" "cat" "lulz" "eshell" "rainbow dependencies ((rx 0))")) nil])
  (o-blog [cl-struct-package-desc o-blog (20140711 832) "" nil tar "melpa" nil ((:keywords "emacs")) nil] [cl-struct-package-desc o-blog (2 0) "" nil tar "melpa-stable" nil ((:keywords "emacs")) nil])
  (ob-axiom [cl-struct-package-desc ob-axiom (20150804 1500) "org-babel for the axiom-environment system" ((emacs (24 2)) (axiom-environment (20150801))) single "melpa" nil ((:keywords "axiom" "openaxiom" "fricas")) nil])
  (ob-browser [cl-struct-package-desc ob-browser (20150101 710) "Render HTML in org-mode blocks." ((org (8))) tar "melpa" nil ((:url . "https://github.com/krisajenkins/ob-browser") (:keywords "org" "babel" "browser" "phantomjs")) nil])
  (ob-cypher [cl-struct-package-desc ob-cypher (20150224 1837) "query neo4j using cypher in org-mode blocks" ((s (1 9 0)) (cypher-mode (0 0 6)) (dash (2 10 0)) (dash-functional (1 2 0))) single "melpa" nil ((:url . "http://github.com/zweifisch/ob-cypher") (:keywords "org" "babel" "cypher" "neo4j")) nil])
  (ob-elixir [cl-struct-package-desc ob-elixir (20151021 447) "org-babel functions for elixir evaluation" ((org (8))) single "melpa" nil ((:url . "http://github.com/zweifisch/ob-elixir") (:keywords "org" "babel" "elixir")) nil])
  (ob-http [cl-struct-package-desc ob-http (20151106 1436) "http request in org-mode babel" ((s (1 9 0)) (cl-lib (0 5))) tar "melpa" nil ((:url . "http://github.com/zweifisch/ob-http")) nil] [cl-struct-package-desc ob-http (0 0 3) "http request in org-mode babel" ((s (1 9 0)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "http://github.com/zweifisch/ob-http")) nil])
  (ob-ipython [cl-struct-package-desc ob-ipython (20151010 307) "org-babel functions for IPython evaluation" ((s (1 9 0)) (dash (2 10 0)) (dash-functional (1 2 0)) (f (0 17 2)) (emacs (24))) tar "melpa" nil ((:url . "http://www.gregsexton.org") (:keywords "literate programming" "reproducible research")) nil])
  (ob-kotlin [cl-struct-package-desc ob-kotlin (20150312 614) "org-babel functions for kotlin evaluation" ((org (8))) single "melpa" nil ((:url . "http://github.com/zweifisch/ob-kotlin") (:keywords "org" "babel" "kotlin")) nil])
  (ob-lfe [cl-struct-package-desc ob-lfe (20150701 655) "org-babel functions for lfe evaluation" ((org (8))) single "melpa" nil ((:url . "http://github.com/zweifisch/ob-lfe") (:keywords "org" "babel" "lfe" "lisp" "erlang")) nil])
  (ob-mongo [cl-struct-package-desc ob-mongo (20130718 732) "Execute mongodb queries within org-mode blocks." ((org (8))) single "melpa" nil ((:url . "https://github.com/krisajenkins/ob-mongo") (:keywords "org" "babel" "mongo" "mongodb")) nil])
  (ob-prolog [cl-struct-package-desc ob-prolog (20150530 937) "org-babel functions for prolog evaluation." nil single "melpa" nil ((:url . "https://github.com/ljos/ob-prolog") (:keywords "literate programming" "reproducible research")) nil])
  (ob-translate [cl-struct-package-desc ob-translate (20130718 729) "Translation of text blocks in org-mode." ((google-translate (0 4)) (org (8))) single "melpa" nil ((:url . "https://github.com/krisajenkins/ob-translate") (:keywords "org" "babel" "translate" "translation")) nil] [cl-struct-package-desc ob-translate (0 1 2) "Translation of text blocks in org-mode." ((google-translate (0 4)) (org (8))) single "melpa-stable" nil ((:url . "https://github.com/krisajenkins/ob-translate") (:keywords "org" "babel" "translate" "translation")) nil])
  (ob-typescript [cl-struct-package-desc ob-typescript (20150804 530) "org-babel functions for typescript evaluation" ((emacs (24)) (org (8 0))) single "melpa" nil ((:url . "https://github.com/lurdan/ob-typescript") (:keywords "literate programming" "reproducible research" "typescript")) nil])
  (oberon [cl-struct-package-desc oberon (20120715 209) "Major mode for editing Oberon/Oberon-2 program texts" nil single "melpa" nil ((:keywords "oberon" "oberon-2" "languages" "oop")) nil])
  (objc-font-lock [cl-struct-package-desc objc-font-lock (20141021 1122) "Highlight Objective-C method calls." nil single "melpa" nil ((:url . "https://github.com/Lindydancer/objc-font-lock") (:keywords "languages" "faces")) nil])
  (obsidian-theme [cl-struct-package-desc obsidian-theme (20140420 943) "port of the eclipse obsidian theme" nil single "melpa" nil ((:url . "http://github.com/mswift42/obsidian-theme")) nil])
  (occidental-theme [cl-struct-package-desc occidental-theme (20130312 1258) "Custom theme for faces based on Adwaita" nil single "melpa" nil ((:url . "http://github.com/olcai/occidental-theme")) nil])
  (occur-context-resize [cl-struct-package-desc occur-context-resize (20140826 1249) "dynamically resize context around matches in occur-mode" nil single "melpa" nil ((:url . "https://github.com/dgtized/occur-context-resize.el") (:keywords "matching")) nil])
  (ocodo-svg-modelines [cl-struct-package-desc ocodo-svg-modelines (20150516 719) "A collection of beautiful SVG modelines" ((svg-mode-line-themes (0))) tar "melpa" nil nil nil] [cl-struct-package-desc ocodo-svg-modelines (0 1 4) "A collection of beautiful SVG modelines" ((svg-mode-line-themes (0))) tar "melpa-stable" nil nil nil])
  (ocp-indent [cl-struct-package-desc ocp-indent (20150914 132) "automatic indentation with ocp-indent" nil single "melpa" nil ((:url . "http://www.typerex.org/ocp-indent.html") (:keywords "ocaml" "languages")) nil] [cl-struct-package-desc ocp-indent (1 5 2) "automatic indentation with ocp-indent" nil single "melpa-stable" nil ((:url . "http://www.typerex.org/ocp-indent.html") (:keywords "ocaml" "languages")) nil])
  (octicons [cl-struct-package-desc octicons (20151031 2040) "octicons utility" ((cl-lib (0 5))) tar "melpa" nil ((:url . "https://github.com/syohex/emacs-octicons")) nil] [cl-struct-package-desc octicons (0 1) "octicons utility" ((cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-octicons")) nil])
  (octopress [cl-struct-package-desc octopress (20151006 314) "A lightweight wrapper for Jekyll and Octopress." nil tar "melpa" nil ((:url . "https://github.com/aaronbieber/octopress.el") (:keywords "octopress" "blog")) nil])
  (oldlace-theme [cl-struct-package-desc oldlace-theme (20150705 600) "Emacs 24 theme with an 'oldlace' background." ((emacs (24))) single "melpa" nil nil nil])
  (olivetti [cl-struct-package-desc olivetti (20151112 2354) "Minor mode for a nice writing environment" nil single "melpa" nil ((:keywords "wp")) nil] [cl-struct-package-desc olivetti (1 2 0) "Minor mode for a nice writing environment" nil single "melpa-stable" nil ((:keywords "wp")) nil])
  (omni-kill [cl-struct-package-desc omni-kill (20150526 2349) "Kill all the things" nil single "melpa" nil ((:keywords "convenience" "editing" "tools")) nil] [cl-struct-package-desc omni-kill (0 2 3) "Kill all the things" nil single "melpa-stable" nil ((:keywords "convenience" "editing" "tools")) nil])
  (omni-log [cl-struct-package-desc omni-log (20150604 1038) "Logging utilities" ((emacs (24)) (ht (2 0)) (s (1 6 1)) (dash (1 8 0))) tar "melpa" nil ((:url . "https://github.com/AdrieanKhisbe/omni-log.el") (:keywords "convenience" "languages" "tools")) nil] [cl-struct-package-desc omni-log (0 1 2) "Logging utilities" ((emacs (24)) (ht (2 0)) (s (1 6 1)) (dash (1 8 0))) tar "melpa-stable" nil ((:url . "https://github.com/AdrieanKhisbe/omni-log.el") (:keywords "convenience" "languages" "tools")) nil])
  (omni-quotes [cl-struct-package-desc omni-quotes (20150604 1057) "Random quotes displayer" ((dash (2 8)) (omni-log (0 1 2))) tar "melpa" nil ((:url . "https://github.com/AdrieanKhisbe/omni-quotes.el") (:keywords "convenience")) nil])
  (omni-scratch [cl-struct-package-desc omni-scratch (20150623 938) "Easy and mode-specific draft buffers" nil single "melpa" nil ((:url . "https://github.com/AdrieanKhisbe/omni-scratch.el") (:keywords "convenience" "languages" "tools")) nil] [cl-struct-package-desc omni-scratch (0 1 1) "Easy and mode-specific draft buffers" nil single "melpa-stable" nil ((:keywords "convenience" "languages" "tools")) nil])
  (omni-tags [cl-struct-package-desc omni-tags (20150513 1053) "Highlight and Actions for 'Tags'" ((pcre2el (1 7)) (cl-lib (0 5))) tar "melpa" nil ((:url . "http://github.com/AdrieanKhisbe/omni-tags.el") (:keywords "convenience")) nil] [cl-struct-package-desc omni-tags (0 1 2) "Highlight and Actions for 'Tags'" ((pcre2el (1 7)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "http://github.com/AdrieanKhisbe/omni-tags.el") (:keywords "convenience")) nil])
  (omniref [cl-struct-package-desc omniref (20140222 1226) "Omniref Ruby documentation search engine interface" nil single "melpa" nil ((:url . "http://github.org/dotemacs/omniref.el") (:keywords "docs" "help" "tools")) nil])
  (omnisharp [cl-struct-package-desc omnisharp (20150709 1045) "Omnicompletion (intellisense) and more for C#" ((json (1 2)) (flycheck (0 21)) (dash (20141201 2206)) (auto-complete (1 4)) (popup (0 5 1)) (csharp-mode (0 8 7)) (cl-lib (0 5)) (s (1 9 0))) tar "melpa" nil ((:url . "https://github.com/sp3ctum/omnisharp-emacs") (:keywords "csharp" "c#" "ide" "auto-complete" "intellisense")) nil] [cl-struct-package-desc omnisharp (3 9) "Omnicompletion (intellisense) and more for C#" ((json (1 2)) (flycheck (0 21)) (dash (20141201 2206)) (auto-complete (1 4)) (popup (0 5 1)) (csharp-mode (0 8 7)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/sp3ctum/omnisharp-emacs") (:keywords "csharp" "c#" "ide" "auto-complete" "intellisense")) nil])
  (on-parens [cl-struct-package-desc on-parens (20150702 1506) "smartparens wrapper to fit with evil-mode/vim normal-state" ((dash (2 10 0)) (emacs (24)) (evil (1 1 6)) (smartparens (1 6 3))) single "melpa" nil ((:keywords "evil" "smartparens")) nil])
  (oneonone [cl-struct-package-desc oneonone (20150821 1228) "Frame configuration that uses one frame per window." ((hexrgb (0))) single "melpa" nil ((:url . "http://www.emacswiki.org/oneonone.el") (:keywords "local" "frames")) nil])
  (opam [cl-struct-package-desc opam (20150719 520) "OPAM tools" ((emacs (24 1))) single "melpa" nil ((:url . "https://github.com/lunaryorn/opam.el") (:keywords "convenience")) nil] [cl-struct-package-desc opam (0 1) "OPAM tools" ((emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/lunaryorn/opam.el") (:keywords "convenience")) nil])
  (open-junk-file [cl-struct-package-desc open-junk-file (20130130 2320) "Open a junk (memo) file to try-and-error" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/open-junk-file.el") (:keywords "convenience" "tools")) nil])
  (org-ac [cl-struct-package-desc org-ac (20140302 413) "Some auto-complete sources for org-mode" ((auto-complete-pcmp (0 0 1)) (log4e (0 2 0)) (yaxception (0 1))) single "melpa" nil ((:url . "https://github.com/aki2o/org-ac") (:keywords "org" "completion")) nil] [cl-struct-package-desc org-ac (0 0 2) "Some auto-complete sources for org-mode" ((auto-complete-pcmp (0 0 1)) (log4e (0 2 0)) (yaxception (0 1))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/org-ac") (:keywords "org" "completion")) nil])
  (org-agenda-property [cl-struct-package-desc org-agenda-property (20140626 1416) "Display org properties in the agenda buffer." ((emacs (24 2))) single "melpa" nil ((:url . "http://github.com/Bruce-Connor/org-agenda-property") (:keywords "calendar")) nil] [cl-struct-package-desc org-agenda-property (1 3 1) "Display org properties in the agenda buffer." ((emacs (24 2))) single "melpa-stable" nil ((:url . "http://github.com/Bruce-Connor/org-agenda-property") (:keywords "calendar")) nil])
  (org-alert [cl-struct-package-desc org-alert (20151007 337) "Notify org deadlines via notify-send" ((s (1 10 0)) (dash (2 12 0)) (alert (1 2))) single "melpa" nil ((:url . "https://github.com/groksteve/org-alert") (:keywords "org" "org-mode" "notify" "notifications")) nil])
  (org-autolist [cl-struct-package-desc org-autolist (20150922 705) "Improved list management in org-mode" nil single "melpa" nil ((:url . "https://github.com/calvinwyoung/org-autolist") (:keywords "lists" "checklists" "org-mode")) nil] [cl-struct-package-desc org-autolist (0 12) "Improved list management in org-mode" nil single "melpa-stable" nil ((:url . "https://github.com/calvinwyoung/org-autolist") (:keywords "lists" "checklists" "org-mode")) nil])
  (org-beautify-theme [cl-struct-package-desc org-beautify-theme (20150106 956) "A sub-theme to make org-mode more beautiful." nil single "melpa" nil ((:keywords "org" "theme")) nil])
  (org-bullets [cl-struct-package-desc org-bullets (20140918 1137) "Show bullets in org-mode as UTF-8 characters" nil single "melpa" nil ((:url . "https://github.com/sabof/org-bullets")) nil] [cl-struct-package-desc org-bullets (0 2 4) "Show bullets in org-mode as UTF-8 characters" nil single "melpa-stable" nil ((:url . "https://github.com/sabof/org-bullets")) nil])
  (org-caldav [cl-struct-package-desc org-caldav (20150131 152) "Sync org files with external calendar through CalDAV" ((org (7))) single "melpa" nil ((:keywords "calendar" "caldav")) nil])
  (org-context [cl-struct-package-desc org-context (20150106 1306) "Contextual capture and agenda commands for Org-mode" nil single "melpa" nil ((:url . "https://github.com/thisirs/org-context") (:keywords "org" "capture" "agenda" "convenience")) nil])
  (org-dashboard [cl-struct-package-desc org-dashboard (20150812 302) "Visually summarize progress in org files" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/bard/org-dashboard") (:keywords "outlines" "calendar")) nil])
  (org-doing [cl-struct-package-desc org-doing (20150824 701) "Keep track of what you're doing" nil tar "melpa" nil ((:url . "https://github.com/omouse/org-doing") (:keywords "tools" "org")) nil])
  (org-download [cl-struct-package-desc org-download (20151030 716) "Image drag-and-drop for Emacs org-mode" ((async (1 2))) single "melpa" nil ((:url . "https://github.com/abo-abo/org-download") (:keywords "images" "screenshots" "download")) nil])
  (org-drill-table [cl-struct-package-desc org-drill-table (20140117 137) "Generate drill cards from org tables" ((s (1 7 0)) (dash (2 2 0)) (cl-lib (0 3)) (org-plus-contrib (8 2)) (emacs (24 1))) single "melpa" nil nil nil])
  (org-dropbox [cl-struct-package-desc org-dropbox (20150113 2109) "move Dropbox notes from phone into org-mode datetree" ((dash (2 2)) (names (20150000)) (emacs (24))) single "melpa" nil ((:url . "https://github.com/heikkil/org-dropbox") (:keywords "dropbox" "android" "notes" "org-mode")) nil])
  (org-elisp-help [cl-struct-package-desc org-elisp-help (20130423 1545) "org links to emacs-lisp documentation" ((cl-lib (0 2)) (org (8 0))) single "melpa" nil ((:url . "https://github.com/tarsius/org-elisp-help") (:keywords "org" "remember" "lisp")) nil] [cl-struct-package-desc org-elisp-help (0 1 0) "org links to emacs-lisp documentation" ((cl-lib (0 2)) (org (8 0))) single "melpa-stable" nil ((:url . "http://tarsius.github.com/org-elisp-help") (:keywords "org" "remember" "lisp")) nil])
  (org-fstree [cl-struct-package-desc org-fstree (20090723 819) "include a filesystem subtree into an org file" nil single "melpa" nil ((:url . "http://www.burtzlaff.de/org-fstree/org-fstree.el") (:keywords "org-mode" "filesystem" "tree")) nil])
  (org-gcal [cl-struct-package-desc org-gcal (20150922 1948) "Org sync with Google Calendar" ((request-deferred (0 2 0)) (alert (1 1)) (emacs (24)) (cl-lib (0 5)) (org (8 2 4))) single "melpa" nil ((:url . "https://github.com/myuhe/org-gcal.el") (:keywords "convenience")) nil] [cl-struct-package-desc org-gcal (0 2) "Org sync with Google Calendar" ((request-deferred (0 2 0)) (alert (1 1)) (emacs (24)) (cl-lib (0 5)) (org (8 2 4))) single "melpa-stable" nil ((:url . "https://github.com/myuhe/org-gcal.el") (:keywords "convenience")) nil])
  (org-grep [cl-struct-package-desc org-grep (20140214 2022) "Kind of M-x rgrep adapted for Org mode." nil single "melpa" nil ((:url . "https://github.com/pinard/org-grep")) nil])
  (org-if [cl-struct-package-desc org-if (20150920 813) "Interactive Fiction Authoring System for Org-Mode." nil tar "melpa" nil nil nil] [cl-struct-package-desc org-if (0 2 0) "Interactive Fiction Authoring System for Org-Mode." nil tar "melpa-stable" nil nil nil])
  (org-jekyll [cl-struct-package-desc org-jekyll (20130508 239) "Export jekyll-ready posts form org-mode entries" ((org (8 0))) single "melpa" nil ((:url . "http://juanreyero.com/open/org-jekyll/") (:keywords "hypermedia")) nil])
  (org-jira [cl-struct-package-desc org-jira (20150911 558) "Syncing between Jira and Org-mode." nil tar "melpa" nil ((:url . "https://github.com/baohaojun/org-jira")) nil])
  (org-link-travis [cl-struct-package-desc org-link-travis (20140405 1627) "Insert/Export the link of Travis CI on org-mode" ((org (7))) single "melpa" nil ((:url . "https://github.com/aki2o/org-link-travis") (:keywords "org")) nil] [cl-struct-package-desc org-link-travis (0 0 1) "Insert/Export the link of Travis CI on org-mode" ((org (7))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/org-link-travis") (:keywords "org")) nil])
  (org-linkany [cl-struct-package-desc org-linkany (20140314 1108) "Insert link using anything.el/helm.el on org-mode" ((log4e (0 2 0)) (yaxception (0 1))) single "melpa" nil ((:url . "https://github.com/aki2o/org-linkany") (:keywords "org" "completion")) nil] [cl-struct-package-desc org-linkany (0 0 2) "Insert link using anything.el/helm.el on org-mode" ((log4e (0 2 0)) (yaxception (0 1))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/org-linkany") (:keywords "org" "completion")) nil])
  (org-mac-iCal [cl-struct-package-desc org-mac-iCal (20140107 519) "Imports events from iCal.app to the Emacs diary" nil single "melpa" nil ((:keywords "outlines" "calendar")) nil] [cl-struct-package-desc org-mac-iCal (7 9 3 5) "Imports events from iCal.app to the Emacs diary" nil single "melpa-stable" nil ((:keywords "outlines" "calendar")) nil])
  (org-mac-link [cl-struct-package-desc org-mac-link (20150910 416) "Insert org-mode links to items selected in various Mac apps" nil single "melpa" nil ((:keywords "org" "mac" "hyperlink")) nil])
  (org-mobile-sync [cl-struct-package-desc org-mobile-sync (20131118 1116) "automatically sync org-mobile on changes" ((emacs (24 3 50)) (org (8 0))) single "melpa" nil ((:url . "https://github.com/steckerhalter/org-mobile-sync") (:keywords "org-mode" "org" "mobile" "sync" "todo")) nil])
  (org-multiple-keymap [cl-struct-package-desc org-multiple-keymap (20150328 1806) "Set keymap to elements, such as timestamp and priority." ((org (8 2 4)) (emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/myuhe/org-multiple-keymap.el") (:keywords "convenience" "org-mode")) nil] [cl-struct-package-desc org-multiple-keymap (0 2) "Set keymap to elements, such as timestamp and priority." ((org (8 2 4)) (emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/myuhe/org-multiple-keymap.el") (:keywords "convenience" "org-mode")) nil])
  (org-octopress [cl-struct-package-desc org-octopress (20150826 416) "Compose octopress articles using org-mode." ((org (8 0)) (orglue (0 1)) (ctable (0 1 1))) tar "melpa" nil ((:keywords "org" "jekyll" "octopress" "blog")) nil])
  (org-page [cl-struct-package-desc org-page (20150913 1733) "a static site generator based on org mode" ((ht (1 5)) (simple-httpd (1 4 6)) (mustache (0 22)) (htmlize (1 47)) (org (8 0)) (dash (2 0 0))) tar "melpa" nil nil nil] [cl-struct-package-desc org-page (0 41) "a static site generator based on org mode" ((ht (1 5)) (mustache (0 22)) (htmlize (1 47)) (org (8))) tar "melpa-stable" nil nil nil])
  (org-pandoc [cl-struct-package-desc org-pandoc (20130729 1850) "Export from Org using Pandoc" nil tar "melpa" nil nil nil])
  (org-password-manager [cl-struct-package-desc org-password-manager (20150729 1515) "Minimal password manager for Emacs Org Mode." ((org (8 2 10)) (s (1 9 0))) single "melpa" nil ((:url . "https://github.com/leafac/org-password-manager") (:keywords "password")) nil])
  (org-pdfview [cl-struct-package-desc org-pdfview (20151111 1312) "Support for links to documents in pdfview mode" ((org (6 1)) (pdf-tools (0 40))) single "melpa" nil ((:keywords "org" "pdf-view" "pdf-tools")) nil] [cl-struct-package-desc org-pdfview (0 3) "Support for links to documents in pdfview mode" ((org (6 1)) (pdf-tools (0 4 0))) single "melpa-stable" nil ((:keywords "org" "pdf-view" "pdf-tools")) nil])
  (org-pomodoro [cl-struct-package-desc org-pomodoro (20151020 407) "Pomodoro implementation for org-mode." ((alert (0 5 10)) (cl-lib (0 5))) tar "melpa" nil ((:url . "https://github.com/lolownia/org-pomodoro")) nil] [cl-struct-package-desc org-pomodoro (2 0 3) "Pomodoro implementation for org-mode." ((alert (0 5 10)) (cl-lib (0 5))) tar "melpa-stable" nil nil nil])
  (org-present [cl-struct-package-desc org-present (20141109 1756) "Minimalist presentation minor-mode for Emacs org-mode." ((org (7))) single "melpa" nil ((:url . "https://github.com/rlister/org-present")) nil])
  (org-projectile [cl-struct-package-desc org-projectile (20150902 2156) "Repository todo management for org-mode" ((projectile (0 11 0)) (dash (2 10 0))) single "melpa" nil ((:url . "https://github.com/IvanMalison/org-projectile") (:keywords "org" "projectile" "todo")) nil] [cl-struct-package-desc org-projectile (0 2 0) "Repository todo management for org-mode" ((projectile (0 11 0)) (dash (2 10 0))) single "melpa-stable" nil ((:url . "https://github.com/IvanMalison/org-projectile") (:keywords "org" "projectile" "todo")) nil])
  (org-redmine [cl-struct-package-desc org-redmine (20151021 731) "Redmine tools using Emacs OrgMode" ((anything (0))) single "melpa" nil ((:url . "https://github.com/gongo/org-redmine") (:keywords "redmine" "org")) nil])
  (org-repo-todo [cl-struct-package-desc org-repo-todo (20141204 1341) "Simple repository todo management with org-mode" nil single "melpa" nil ((:url . "https://github.com/waymondo/org-repo-todo") (:keywords "convenience")) nil] [cl-struct-package-desc org-repo-todo (0 0 2) "Simple repository todo management with org-mode" nil single "melpa-stable" nil ((:url . "https://github.com/waymondo/org-repo-todo") (:keywords "convenience")) nil])
  (org-screenshot [cl-struct-package-desc org-screenshot (20151106 504) "screenshots integrated with org attachment dirs" ((org (7))) single "melpa" nil ((:url . "https://github.com/dfeich/org-screenshot") (:keywords "org")) nil])
  (org-sync [cl-struct-package-desc org-sync (20150817 754) "Synchronize Org documents with External Issue Trackers" ((cl-lib (0 5)) (org (8 2)) (emacs (24))) tar "melpa" nil ((:url . "https://github.com/arbox/org-sync") (:keywords "org" "synchronization" "issue tracking" "github" "redmine")) nil] [cl-struct-package-desc org-sync (0 3 0) "Synchronize Org documents with External Issue Trackers" ((cl-lib (0 5)) (org (8 2)) (emacs (24))) tar "melpa-stable" nil ((:url . "https://github.com/arbox/org-sync") (:keywords "org" "synchronization" "issue tracking" "github" "redmine")) nil])
  (org-time-budgets [cl-struct-package-desc org-time-budgets (20151111 1) "Define time budgets and display clocked time." ((alert (0 5 10)) (cl-lib (0 5))) single "melpa" nil nil nil] [cl-struct-package-desc org-time-budgets (1 0 1) "Define time budgets and display clocked time." ((alert (0 5 10)) (cl-lib (0 5))) single "melpa-stable" nil nil nil])
  (org-toodledo [cl-struct-package-desc org-toodledo (20150301 313) "Toodledo integration for Emacs Org mode" ((request-deferred (0 2 0)) (emacs (24)) (cl-lib (0 5))) tar "melpa" nil ((:keywords "outlines" "data")) nil] [cl-struct-package-desc org-toodledo (2 1 0) "No description available." nil tar "melpa-stable" nil nil nil])
  (org-transform-tree-table [cl-struct-package-desc org-transform-tree-table (20150110 633) "Transform org-mode tree with properties to a table, and the other way around" ((dash (2 10 0)) (s (1 3 0))) single "melpa" nil ((:url . "https://github.com/jplindstrom/emacs-org-transform-tree-table") (:keywords "org-mode" "table" "org-table" "tree" "csv" "convert")) nil] [cl-struct-package-desc org-transform-tree-table (0 1 2) "Transform org-mode tree with properties to a table, and the other way around" ((dash (2 10 0)) (s (1 3 0))) single "melpa-stable" nil ((:url . "https://github.com/jplindstrom/emacs-org-transform-tree-table") (:keywords "org-mode" "table" "org-table" "tree" "csv" "convert")) nil])
  (org-tree-slide [cl-struct-package-desc org-tree-slide (20151017 53) "A presentation tool for org-mode" nil single "melpa" nil ((:keywords "org-mode" "presentation" "narrowing")) nil])
  (org-vcard [cl-struct-package-desc org-vcard (20150412 1836) "org-mode support for vCard export and import." nil tar "melpa" nil ((:url . "https://github.com/flexibeast/org-vcard") (:keywords "outlines" "org" "vcard")) nil])
  (org-wc [cl-struct-package-desc org-wc (20141031 2320) "Count words in org mode trees." nil single "melpa" nil nil nil])
  (org-webpage [cl-struct-package-desc org-webpage (20151104 16) "a static site generator based on org mode." ((cl-lib (1 0)) (ht (1 5)) (mustache (0 22)) (htmlize (1 47)) (org (8 0)) (dash (2 0 0)) (web-server (0 1))) tar "melpa" nil nil nil])
  (org-wunderlist [cl-struct-package-desc org-wunderlist (20150817 1913) "Org sync with Wunderlist" ((request-deferred (0 2 0)) (alert (1 1)) (emacs (24)) (cl-lib (0 5)) (org (8 2 4)) (s (1 9 0))) single "melpa" nil ((:url . "https://github.com/myuhe/org-wunderlist.el") (:keywords "convenience")) nil])
  (organic-green-theme [cl-struct-package-desc organic-green-theme (20151028 520) "Low-contrast green color theme." nil single "melpa" nil nil nil])
  (orgbox [cl-struct-package-desc orgbox (20140528 1826) "Mailbox-like task scheduling Org." ((org (8 0)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/yasuhito/orgbox") (:keywords "org")) nil] [cl-struct-package-desc orgbox (0 5 0) "Mailbox-like task scheduling Org." ((org (8 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/yasuhito/orgbox") (:keywords "org")) nil])
  (orgit [cl-struct-package-desc orgit (20151008 1414) "support for Org links to Magit buffers" ((emacs (24 4)) (dash (2 12 0)) (magit (2 2 2)) (org (8 3))) single "melpa" nil ((:url . "https://github.com/magit/orgit")) nil] [cl-struct-package-desc orgit (1 0 0) "support for Org links to Magit buffers" ((emacs (24 4)) (dash (2 12 0)) (magit (2 2 2)) (org (8 3))) single "melpa-stable" nil ((:url . "https://github.com/magit/orgit")) nil])
  (orglink [cl-struct-package-desc orglink (20151106 1006) "use Org Mode links in other modes" ((dash (1 3 2)) (org (8 0))) single "melpa" nil ((:url . "http://github.com/tarsius/orglink") (:keywords "hypertext")) nil] [cl-struct-package-desc orglink (0 2 3) "use Org Mode links in other modes" ((dash (1 3 2)) (org (8 0))) single "melpa-stable" nil ((:url . "http://github.com/tarsius/orglink") (:keywords "hypertext")) nil])
  (orglue [cl-struct-package-desc orglue (20150430 513) "more functionality to org-mode." ((org (8 1)) (epic (0 2)) (org-mac-link (1 2))) tar "melpa" nil ((:keywords "org")) nil])
  (orgtbl-aggregate [cl-struct-package-desc orgtbl-aggregate (20150104 818) "Create an aggregated Org table from another one" nil tar "melpa" nil ((:keywords "org" "table" "aggregation" "filtering")) nil])
  (orgtbl-ascii-plot [cl-struct-package-desc orgtbl-ascii-plot (20150125 1429) "ascii-art bar plots in org-mode tables" nil single "melpa" nil ((:keywords "org" "table" "ascii" "plot")) nil])
  (orgtbl-join [cl-struct-package-desc orgtbl-join (20150121 1446) "join columns from another table" ((cl-lib (0 5))) tar "melpa" nil ((:keywords "org" "table" "join" "filtering")) nil])
  (orgtbl-show-header [cl-struct-package-desc orgtbl-show-header (20141023 137) "Show the header of the current column in the minibuffer" nil single "melpa" nil nil nil])
  (origami [cl-struct-package-desc origami (20150822 450) "Flexible text folding" ((s (1 9 0)) (dash (2 5 0)) (emacs (24))) tar "melpa" nil ((:url . "https://github.com/gregsexton/origami.el") (:keywords "folding")) nil])
  (osx-clipboard [cl-struct-package-desc osx-clipboard (20141012 17) "Use the OS X clipboard from terminal Emacs" nil single "melpa" nil ((:url . "https://github.com/joddie/osx-clipboard-mode")) nil])
  (osx-dictionary [cl-struct-package-desc osx-dictionary (20151108 2152) "Interface for OSX Dictionary.app" ((cl-lib (0 5))) tar "melpa" nil ((:url . "https://github.com/xuchunyang/osx-dictionary.el") (:keywords "mac" "dictionary")) nil] [cl-struct-package-desc osx-dictionary (0 2 1) "Interface for OSX Dictionary.app" ((cl-lib (0 5)) (chinese-word-at-point (0 1))) tar "melpa-stable" nil ((:url . "https://github.com/xuchunyang/osx-dictionary.el") (:keywords "mac" "dictionary")) nil])
  (osx-lib [cl-struct-package-desc osx-lib (20150626 1639) "Basic function for Apple/OSX." nil single "melpa" nil ((:keywords "apple" "applescript" "osx" "finder" "emacs" "elisp" "vpn" "speech")) nil])
  (osx-org-clock-menubar [cl-struct-package-desc osx-org-clock-menubar (20150205 1311) "simple menubar integration for org-clock" nil tar "melpa" nil ((:url . "https://github.com/jordonbiondo/osx-org-clock-menubar") (:keywords "org" "osx")) nil])
  (osx-plist [cl-struct-package-desc osx-plist (20101130 448) "Apple plist file parser" nil single "melpa" nil ((:keywords "convenience")) nil] [cl-struct-package-desc osx-plist (1 0 0) "Apple plist file parser" nil single "melpa-stable" nil ((:keywords "convenience")) nil])
  (outline-magic [cl-struct-package-desc outline-magic (20150209 1426) "outline mode extensions for Emacs" nil single "melpa" nil ((:keywords "outlines")) nil])
  (outorg [cl-struct-package-desc outorg (20150910 1240) "Org-style comment editing" nil single "melpa" nil ((:url . "https://github.com/tj64/outorg")) nil] [cl-struct-package-desc outorg (2 0) "Org-style comment editing" nil single "melpa-stable" nil ((:url . "https://github.com/tj64/outorg")) nil])
  (outshine [cl-struct-package-desc outshine (20150910 1226) "outline with outshine outshines outline" ((outorg (2 0))) single "melpa" nil ((:url . "https://github.com/tj64/outshine")) nil] [cl-struct-package-desc outshine (2 0) "outline with outshine outshines outline" nil single "melpa-stable" nil ((:url . "https://github.com/tj64/outshine")) nil])
  (ov [cl-struct-package-desc ov (20150311 2228) "Overlay library for Emacs Lisp" ((emacs (24 3))) single "melpa" nil ((:url . "https://github.com/ShingoFukuyama/ov.el") (:keywords "overlay")) nil] [cl-struct-package-desc ov (1 0 6) "Overlay library for Emacs Lisp" ((emacs (24 3))) single "melpa-stable" nil ((:url . "https://github.com/ShingoFukuyama/ov.el") (:keywords "overlay")) nil])
  (owdriver [cl-struct-package-desc owdriver (20141011 738) "Quickly perform various actions on other windows" ((smartrep (0 0 3)) (log4e (0 2 0)) (yaxception (0 2 0))) single "melpa" nil ((:url . "https://github.com/aki2o/owdriver") (:keywords "convenience")) nil] [cl-struct-package-desc owdriver (0 0 6) "Quickly perform various actions on other windows" ((smartrep (0 0 3)) (log4e (0 2 0)) (yaxception (0 2 0))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/owdriver") (:keywords "convenience")) nil])
  (ox-asciidoc [cl-struct-package-desc ox-asciidoc (20150919 1259) "AsciiDoc Back-End for Org Export Engine" ((org (8 1))) single "melpa" nil ((:url . "https://github.com/yashi/org-asciidoc") (:keywords "org" "asciidoc")) nil])
  (ox-gfm [cl-struct-package-desc ox-gfm (20150604 26) "Github Flavored Markdown Back-End for Org Export Engine" nil single "melpa" nil ((:keywords "org" "wp" "markdown" "github")) nil])
  (ox-html5slide [cl-struct-package-desc ox-html5slide (20131227 2206) "Export org-mode to HTML5 slide." ((org (8 0))) single "melpa" nil ((:url . "http://github.com/coldnew/org-html5slide") (:keywords "html" "presentation")) nil])
  (ox-impress-js [cl-struct-package-desc ox-impress-js (20150412 1016) "impress.js Back-End for Org Export Engine" ((org (8))) tar "melpa" nil ((:url . "https://github.com/kinjo/org-impress-js.el") (:keywords "outlines" "hypermedia" "calendar" "wp")) nil])
  (ox-ioslide [cl-struct-package-desc ox-ioslide (20151018 2152) "Export org-mode to Google I/O HTML5 slide." ((emacs (24 1)) (org (8 0)) (cl-lib (0 5)) (f (0 17 2)) (makey (0 3))) tar "melpa" nil ((:url . "http://github.com/coldnew/org-ioslide") (:keywords "html" "presentation")) nil] [cl-struct-package-desc ox-ioslide (0 2) "Export org-mode to Google I/O HTML5 slide." ((emacs (24 1)) (org (8 0)) (cl-lib (0 5)) (f (0 17 2))) tar "melpa-stable" nil ((:url . "http://github.com/coldnew/org-ioslide") (:keywords "html" "presentation")) nil])
  (ox-mediawiki [cl-struct-package-desc ox-mediawiki (20150923 902) "Mediawiki Back-End for Org Export Engine" ((cl-lib (0 5)) (s (1 9 0))) single "melpa" nil ((:url . "https://github.com/tomalexander/orgmode-mediawiki") (:keywords "org" "wp" "mediawiki")) nil])
  (ox-nikola [cl-struct-package-desc ox-nikola (20150901 1507) "Export Nikola articles using org-mode." ((emacs (24 4)) (org (8 2 4)) (ox-rst (0 2))) single "melpa" nil ((:url . "https://github.com/masayuko/ox-nikola") (:keywords "org" "nikola")) nil])
  (ox-pandoc [cl-struct-package-desc ox-pandoc (20150706 1809) "org exporter for pandoc." ((org (8 2)) (emacs (24)) (dash (2 8)) (ht (2 0))) single "melpa" nil ((:url . "https://github.com/kawabata/ox-pandoc") (:keywords "tools")) nil] [cl-struct-package-desc ox-pandoc (1 150707) "org exporter for pandoc." ((org (8 2)) (emacs (24)) (dash (2 8)) (ht (2 0))) single "melpa-stable" nil ((:url . "https://github.com/kawabata/ox-pandoc") (:keywords "tools")) nil])
  (ox-pukiwiki [cl-struct-package-desc ox-pukiwiki (20150124 916) "Pukiwiki Back-End for Org Export Engine" ((org (8 1))) single "melpa" nil ((:url . "https://github.com/yashi/org-pukiwiki") (:keywords "org" "pukiwiki")) nil])
  (ox-reveal [cl-struct-package-desc ox-reveal (20151022 2306) "reveal.js Presentation Back-End for Org Export Engine" ((org (20150330))) single "melpa" nil ((:keywords "outlines" "hypermedia" "slideshow" "presentation")) nil])
  (ox-rst [cl-struct-package-desc ox-rst (20151113 716) "Export reStructuredText using org-mode." ((emacs (24 4)) (org (8 2 4))) single "melpa" nil ((:url . "https://github.com/masayuko/ox-rst") (:keywords "org" "rst" "rest" "restructuredtext")) nil])
  (ox-textile [cl-struct-package-desc ox-textile (20140215 607) "Textile Back-End for Org Export Engine" ((org (8 1))) single "melpa" nil ((:url . "https://github.com/yashi/org-textile") (:keywords "org" "textile")) nil])
  (ox-tiddly [cl-struct-package-desc ox-tiddly (20131124 804) "org TiddlyWiki exporter" ((org (8))) single "melpa" nil ((:url . "https://github.com/dfeich/org8-wikiexporters") (:keywords "org")) nil])
  (ox-trac [cl-struct-package-desc ox-trac (20151102 955) "Org Export Backend to Trac WikiFormat" ((org (8 0))) single "melpa" nil ((:url . "https://github.com/JalapenoGremlin/ox-trac") (:keywords "org-mode" "trac")) nil])
  (ox-twbs [cl-struct-package-desc ox-twbs (20151025 1048) "Bootstrap compatible HTML Back-End for Org" nil single "melpa" nil ((:url . "https://github.com/marsmining/ox-twbs") (:keywords "org" "html" "publish" "twitter" "bootstrap")) nil] [cl-struct-package-desc ox-twbs (1 0 3) "Bootstrap compatible HTML Back-End for Org" nil single "melpa-stable" nil ((:url . "https://github.com/marsmining/ox-twbs") (:keywords "org" "html" "publish" "twitter" "bootstrap")) nil])
  (ox-twiki [cl-struct-package-desc ox-twiki (20140120 2239) "org Twiki and Foswiki export" ((org (8))) single "melpa" nil ((:url . "https://github.com/dfeich/org8-wikiexporters") (:keywords "org")) nil])
  (package+ [cl-struct-package-desc package+ (20150319 1455) "Extensions for the package library." nil single "melpa" nil ((:url . "TBA") (:keywords "extensions" "tools")) nil] [cl-struct-package-desc package+ (1 1 0) "Extensions for the package library." nil single "melpa-stable" nil ((:url . "TBA") (:keywords "extensions" "tools")) nil])
  (package-build [cl-struct-package-desc package-build (20151030 1334) "Tools for assembling a package archive" ((cl-lib (0 5))) single "melpa" nil ((:keywords "tools")) nil])
  (package-filter [cl-struct-package-desc package-filter (20140105 1426) "special handling for package.el" nil single "melpa" nil ((:url . "https://github.com/milkypostman/package-filter")) nil])
  (package-safe-delete [cl-struct-package-desc package-safe-delete (20150116 807) "Safely delete package.el packages" ((emacs (24)) (epl (0 7 -3))) single "melpa" nil ((:url . "https://github.com/Fanael/package-safe-delete")) nil] [cl-struct-package-desc package-safe-delete (0 1 7) "Safely delete package.el packages" ((emacs (24)) (epl (0 7 -3))) single "melpa-stable" nil ((:url . "https://github.com/Fanael/package-safe-delete")) nil])
  (package-utils [cl-struct-package-desc package-utils (20150126 406) "Extensions for package.el" ((epl (0 7 -3))) single "melpa" nil ((:url . "https://github.com/Silex/package-utils") (:keywords "package" "convenience")) nil] [cl-struct-package-desc package-utils (0 3 0) "Extensions for package.el" ((epl (0 7 -3))) single "melpa-stable" nil ((:url . "https://github.com/Silex/package-utils") (:keywords "package" "convenience")) nil])
  (packed [cl-struct-package-desc packed (20150723 438) "package manager agnostic Emacs Lisp package utilities" ((emacs (24 3)) (dash (2 10 0))) single "melpa" nil ((:url . "https://github.com/tarsius/packed") (:keywords "compile" "convenience" "lisp" "package" "library")) nil] [cl-struct-package-desc packed (0 5 0) "package manager agnostic Emacs Lisp package utilities" ((cl-lib (0 5)) (dash (2 10 0))) single "melpa-stable" nil ((:url . "https://github.com/tarsius/packed") (:keywords "compile" "convenience" "lisp" "package" "library")) nil])
  (pacmacs [cl-struct-package-desc pacmacs (20151112 1035) "Pacman for Emacs" ((dash (2 11 0)) (dash-functional (1 2 0)) (cl-lib (0 5)) (f (0 18 0))) tar "melpa" nil ((:url . "http://github.com/rexim/pacmacs.el")) nil])
  (palette [cl-struct-package-desc palette (20150509 1407) "Color palette useful with RGB, HSV, and color names" ((hexrgb (0))) single "melpa" nil ((:url . "http://www.emacswiki.org/palette.el") (:keywords "color" "rgb" "hsv" "hexadecimal" "face" "frame")) nil])
  (pallet [cl-struct-package-desc pallet (20150512 2) "A package management tool for Emacs, using Cask." ((dash (2 10 0)) (s (1 9 0)) (f (0 17 1)) (cask (0 7))) tar "melpa" nil nil nil] [cl-struct-package-desc pallet (0 9 2) "A package management tool for Emacs, using Cask." ((dash (2 10 0)) (s (1 9 0)) (f (0 17 1)) (cask (0 7))) tar "melpa-stable" nil nil nil])
  (pandoc-mode [cl-struct-package-desc pandoc-mode (20151030 313) "Minor mode for interacting with Pandoc" ((hydra (0 10 0)) (dash (2 10 0))) tar "melpa" nil ((:keywords "text" "pandoc")) nil] [cl-struct-package-desc pandoc-mode (2 13 3) "Minor mode for interacting with Pandoc" ((hydra (0 10 0)) (dash (2 10 0))) tar "melpa-stable" nil ((:keywords "text" "pandoc")) nil])
  (pangu-spacing [cl-struct-package-desc pangu-spacing (20150927 24) "Minor-mode to add space between Chinese and English characters." nil single "melpa" nil ((:url . "http://github.com/coldnew/pangu-spacing")) nil] [cl-struct-package-desc pangu-spacing (0 4) "Minor-mode to add space between Chinese and English characters." nil single "melpa-stable" nil ((:url . "http://github.com/coldnew/pangu-spacing")) nil])
  (paper-theme [cl-struct-package-desc paper-theme (20151025 800) "A minimal Emacs colour theme." ((emacs (24)) (hexrgb (0))) single "melpa" nil ((:url . "http://gkayaalp.com/emacs.html#paper") (:keywords "theme" "paper")) nil] [cl-struct-package-desc paper-theme (0 1 0) "No description available." nil single "melpa-stable" nil nil nil])
  (paradox [cl-struct-package-desc paradox (20151110 501) "A modern Packages Menu. Colored, with package ratings, and customizable." ((emacs (24 4)) (seq (1 7)) (cl-lib (0 5)) (json (1 3)) (let-alist (1 0 3)) (spinner (1 4)) (hydra (0 13 2))) tar "melpa" nil ((:url . "https://github.com/Malabarba/paradox") (:keywords "package" "packages")) nil] [cl-struct-package-desc paradox (2 3 5) "A modern Packages Menu. Colored, with package ratings, and customizable." ((emacs (24 4)) (seq (1 7)) (cl-lib (0 5)) (json (1 3)) (let-alist (1 0 3)) (spinner (1 4))) tar "melpa-stable" nil ((:url . "http://github.com/Malabarba/paradox") (:keywords "package" "packages")) nil])
  (paren-completer [cl-struct-package-desc paren-completer (20150711 1523) "Automatically, language agnostically, fill in delimiters." ((emacs (24 3))) single "melpa" nil ((:url . "https://github.com/MatthewBregg/paren-completer") (:keywords "convenience")) nil])
  (paren-face [cl-struct-package-desc paren-face (20151105 1906) "a face for parentheses in lisp modes" nil single "melpa" nil ((:url . "http://github.com/tarsius/paren-face")) nil] [cl-struct-package-desc paren-face (0 2 0) "a face for parentheses in lisp modes" nil single "melpa-stable" nil ((:url . "http://github.com/tarsius/paren-face")) nil])
  (parent-mode [cl-struct-package-desc parent-mode (20150824 1600) "get major mode's parent modes" nil single "melpa" nil ((:url . "https://github.com/Fanael/parent-mode")) nil] [cl-struct-package-desc parent-mode (2 3) "get major mode's parent modes" nil single "melpa-stable" nil ((:url . "https://github.com/Fanael/parent-mode")) nil])
  (parse-csv [cl-struct-package-desc parse-csv (20140203 116) "Parse strings with CSV fields into s-expressions" nil single "melpa" nil ((:url . "https://github.com/mrc/el-csv") (:keywords "csv")) nil])
  (parsebib [cl-struct-package-desc parsebib (20151006 232) "A library for parsing bib files" ((emacs (24 3))) single "melpa" nil ((:keywords "text" "bibtex")) nil] [cl-struct-package-desc parsebib (1 0 5) "A library for parsing bib files" ((emacs (24 3))) single "melpa-stable" nil ((:keywords "text" "bibtex")) nil])
  (pass [cl-struct-package-desc pass (20151109 403) "Major mode for password-store.el" ((emacs (24)) (password-store (0 1)) (f (0 17))) single "melpa" nil ((:keywords "password-store" "password" "keychain")) nil] [cl-struct-package-desc pass (1 1) "Major mode for password-store.el" ((emacs (24)) (password-store (0 1)) (f (0 17))) single "melpa-stable" nil ((:keywords "password-store" "password" "keychain")) nil])
  (passthword [cl-struct-package-desc passthword (20141201 123) "Simple password manager" ((cl-lib (0 5))) single "melpa" nil nil nil] [cl-struct-package-desc passthword (1 4) "Simple password manager" ((cl-lib (0 5))) single "melpa-stable" nil nil nil])
  (password-generator [cl-struct-package-desc password-generator (20150222 1240) "Password generator for humans. Good, Bad, Phonetic passwords included." nil single "melpa" nil ((:url . "http://github.com/zargener/emacs-password-genarator")) nil])
  (password-store [cl-struct-package-desc password-store (20151027 1449) "Password store (pass) support" ((f (0 11 0)) (s (1 9 0))) single "melpa" nil ((:keywords "pass")) nil] [cl-struct-package-desc password-store (1 6 5) "Password store (pass) support" ((dash (1 5 0)) (f (0 11 0)) (s (1 9 0))) single "melpa-stable" nil ((:keywords "pass")) nil])
  (password-vault [cl-struct-package-desc password-vault (20131105 1703) "A Password manager for Emacs." ((cl-lib (0 2)) (emacs (24))) single "melpa" nil ((:url . "http://github.com/PuercoPop/password-vault.el") (:keywords "password" "productivity")) nil])
  (pastehub [cl-struct-package-desc pastehub (20140614 2320) "A client for the PasteHub cloud service" nil single "melpa" nil ((:url . "https://github.com/kiyoka/pastehub")) nil] [cl-struct-package-desc pastehub (0 5 2) "A client for the PasteHub cloud service" nil single "melpa-stable" nil ((:url . "https://github.com/kiyoka/pastehub")) nil])
  (pastelmac-theme [cl-struct-package-desc pastelmac-theme (20151030 1936) "a soothing theme with a pastel color palette" ((emacs (24 1))) single "melpa" nil ((:url . "https://github.com/bmastenbrook/pastelmac-theme-el") (:keywords "themes")) nil] [cl-struct-package-desc pastelmac-theme (1 0) "a soothing theme with a pastel color palette" ((emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/bmastenbrook/pastelmac-theme-el") (:keywords "themes")) nil])
  (path-headerline-mode [cl-struct-package-desc path-headerline-mode (20140423 632) "Displaying file path on headerline." nil single "melpa" nil ((:url . "https://github.com/7696122/path-headerline-mode") (:keywords "headerline")) nil])
  (paxedit [cl-struct-package-desc paxedit (20150405 1608) "Structured, Context Driven LISP Editing and Refactoring" ((cl-lib (0 5)) (paredit (23))) single "melpa" nil ((:url . "https://github.com/promethial/paxedit") (:keywords "lisp" "refactoring" "context")) nil] [cl-struct-package-desc paxedit (1 1 6) "Structured, Context Driven LISP Editing and Refactoring" ((cl-lib (0 5)) (paredit (23))) single "melpa-stable" nil ((:url . "https://github.com/promethial/paxedit") (:keywords "lisp" "refactoring" "context")) nil])
  (pc-bufsw [cl-struct-package-desc pc-bufsw (20150923 13) "PC style quick buffer switcher" nil single "melpa" nil ((:url . "https://github.com/ibukanov/pc-bufsw") (:keywords "buffer")) nil])
  (pcmpl-git [cl-struct-package-desc pcmpl-git (20140218 1804) "pcomplete for git" nil tar "melpa" nil ((:keywords "tools")) nil])
  (pcmpl-homebrew [cl-struct-package-desc pcmpl-homebrew (20150506 1852) "pcomplete for homebrew" nil single "melpa" nil ((:keywords "pcomplete" "homebrew" "tools")) nil])
  (pcmpl-pip [cl-struct-package-desc pcmpl-pip (20141024 148) "pcomplete for pip" nil single "melpa" nil ((:keywords "pcomplete" "pip" "python" "tools")) nil])
  (pcomplete-extension [cl-struct-package-desc pcomplete-extension (20140604 947) "additional completion for pcomplete" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/thierryvolpiatto/pcomplete-extension")) nil] [cl-struct-package-desc pcomplete-extension (1 0) "additional completion for pcomplete" ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/thierryvolpiatto/pcomplete-extension")) nil])
  (pdb-mode [cl-struct-package-desc pdb-mode (20150128 951) "Major mode for editing Protein Data Bank files" nil single "melpa" nil ((:url . "http://bondxray.org/software/pdb-mode/") (:keywords "data" "pdb")) nil])
  (pdf-tools [cl-struct-package-desc pdf-tools (20151111 2331) "Support library for PDF documents." ((emacs (24 3)) (tablist (0 70)) (let-alist (1 0 4))) tar "melpa" nil ((:keywords "files" "multimedia")) nil] [cl-struct-package-desc pdf-tools (0 60) "Support library for PDF documents." ((emacs (24 3)) (tablist (0 60))) tar "melpa-stable" nil ((:keywords "files" "multimedia")) nil])
  (peacock-theme [cl-struct-package-desc peacock-theme (20141115 2302) "an Emacs 24 theme based on Peacock (tmTheme)" ((emacs (24 0))) single "melpa" nil ((:url . "https://github.com/emacsfodder/tmtheme-to-deftheme")) nil])
  (peek-mode [cl-struct-package-desc peek-mode (20130620 1246) "Serve buffers live over HTTP with elnode backend" ((elnode (0 9 8 1))) tar "melpa" nil ((:url . "https://github.com/erikriverson/peek-mode")) nil])
  (peep-dired [cl-struct-package-desc peep-dired (20150518 700) "Peep at files in another window from dired buffers" nil single "melpa" nil ((:keywords "files" "convenience")) nil])
  (peg [cl-struct-package-desc peg (20150707 2341) "Parsing Expression Grammars in Emacs Lisp" nil single "melpa" nil nil nil] [cl-struct-package-desc peg (0 6) "Parsing Expression Grammars in Emacs Lisp" nil single "melpa-stable" nil nil nil])
  (per-buffer-theme [cl-struct-package-desc per-buffer-theme (20151013 1012) "Change theme according to buffer name or major mode." ((cl-lib (0 5))) single "melpa" nil ((:url . "https://bitbucket.com/inigoserna/per-buffer-theme.el") (:keywords "themes")) nil] [cl-struct-package-desc per-buffer-theme (1 3) "Change theme according to buffer name or major mode." ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://bitbucket.com/inigoserna/per-buffer-theme.el") (:keywords "themes")) nil])
  (perl-completion [cl-struct-package-desc perl-completion (20090527 2336) "No description available." nil single "melpa" nil nil nil])
  (perl6-mode [cl-struct-package-desc perl6-mode (20151014 1518) "Major mode for editing Perl 6 code" ((emacs (24 4)) (pkg-info (0 1))) tar "melpa" nil ((:url . "https://github.com/hinrik/perl6-mode") (:keywords "languages")) nil])
  (persistent-scratch [cl-struct-package-desc persistent-scratch (20150202 943) "Preserve the scratch buffer across Emacs sessions" ((emacs (24))) single "melpa" nil ((:url . "https://github.com/Fanael/persistent-scratch")) nil] [cl-struct-package-desc persistent-scratch (0 2 2) "Preserve the scratch buffer across Emacs sessions" ((emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/Fanael/persistent-scratch")) nil])
  (persp-mode [cl-struct-package-desc persp-mode (20151017 618) "\"perspectives\" shared among frames + save/load - bugs." nil single "melpa" nil ((:url . "https://github.com/Bad-ptr/persp-mode.el") (:keywords "perspectives" "session" "workspace" "persistence" "windows" "buffers" "convenience")) nil] [cl-struct-package-desc persp-mode (1 1 2) "\"perspectives\" shared among frames + save/load - bugs." nil single "melpa-stable" nil ((:url . "https://github.com/Bad-ptr/persp-mode.el") (:keywords "perspectives" "session" "workspace" "persistence" "windows" "buffers" "convenience")) nil])
  (persp-projectile [cl-struct-package-desc persp-projectile (20150405 127) "Perspective integration with Projectile" ((perspective (1 9)) (projectile (0 11 0)) (cl-lib (0 3))) single "melpa" nil ((:keywords "project" "convenience")) nil] [cl-struct-package-desc persp-projectile (0 13 0) "Perspective integration with Projectile" ((perspective (1 9)) (projectile (0 11 0)) (cl-lib (0 3))) single "melpa-stable" nil ((:keywords "project" "convenience")) nil])
  (pgdevenv [cl-struct-package-desc pgdevenv (20150105 1436) "Manage your PostgreSQL development envs" nil tar "melpa" nil ((:keywords "emacs" "postgresql" "development" "environment" "shell" "debug" "gdb")) nil])
  (ph [cl-struct-package-desc ph (20130312 1137) "A global minor mode for managing multiple projects." ((emacs (24 3))) tar "melpa" nil nil nil] [cl-struct-package-desc ph (0 1 0) "A global minor mode for managing multiple projects." ((emacs (24 3))) tar "melpa-stable" nil nil nil])
  (phi-autopair [cl-struct-package-desc phi-autopair (20150527 223) "another simple-minded autopair implementation" ((paredit (20))) single "melpa" nil ((:url . "http://hins11.yu-yake.com/")) nil])
  (phi-grep [cl-struct-package-desc phi-grep (20150212 724) "Interactively-editable recursive grep implementation in elisp" ((cl-lib (0 1))) single "melpa" nil ((:url . "http://hins11.yu-yake.com/")) nil])
  (phi-rectangle [cl-struct-package-desc phi-rectangle (20141120 717) "another rectangle-mark command (rewrite of rect-mark)" nil single "melpa" nil ((:url . "http://hins11.yu-yake.com/")) nil])
  (phi-search-dired [cl-struct-package-desc phi-search-dired (20150405 14) "interactive filtering for dired powered by phi-search" ((phi-search (2 2 0))) single "melpa" nil ((:url . "http://hins11.yu-yake.com/")) nil])
  (phi-search-mc [cl-struct-package-desc phi-search-mc (20150217 2255) "multiple-cursors extension for phi-search" ((phi-search (2 0 0)) (multiple-cursors (1 2 1))) single "melpa" nil ((:url . "https://github.com/knu/phi-search-mc.el") (:keywords "search" "cursors")) nil] [cl-struct-package-desc phi-search-mc (2 2 1) "multiple-cursors extension for phi-search" ((phi-search (2 0 0)) (multiple-cursors (1 2 1))) single "melpa-stable" nil ((:url . "https://github.com/knu/phi-search-mc.el") (:keywords "search" "cursors")) nil])
  (phi-search-migemo [cl-struct-package-desc phi-search-migemo (20150116 506) "migemo extension for phi-search" ((phi-search (2 2 0)) (migemo (1 9 1))) single "melpa" nil ((:url . "http://hins11.yu-yake.com/")) nil])
  (phoenix-dark-mono-theme [cl-struct-package-desc phoenix-dark-mono-theme (20130306 1215) "Monochromatic version of the Phoenix theme" nil single "melpa" nil ((:url . "http://github.com/j0ni/phoenix-dark-mono")) nil])
  (phoenix-dark-pink-theme [cl-struct-package-desc phoenix-dark-pink-theme (20150406 2002) "Port of the Sublime Text 2 theme of the same name" nil single "melpa" nil ((:url . "http://github.com/j0ni/phoenix-dark-pink")) nil])
  (php+-mode [cl-struct-package-desc php+-mode (20121129 1252) "A better PHP mode with Zend Framework 1 support." nil tar "melpa" nil nil nil])
  (php-auto-yasnippets [cl-struct-package-desc php-auto-yasnippets (20141128 1411) "Creates snippets for PHP functions" ((php-mode (1 11)) (yasnippet (0 8 0))) tar "melpa" nil ((:url . "https://github.com/ejmr/php-auto-yasnippets")) nil] [cl-struct-package-desc php-auto-yasnippets (2 3 1) "Creates snippets for PHP functions" ((php-mode (1 11)) (yasnippet (0 8 0))) tar "melpa-stable" nil ((:url . "https://github.com/ejmr/php-auto-yasnippets")) nil])
  (php-boris [cl-struct-package-desc php-boris (20130527 121) "Run boris php REPL" nil single "melpa" nil ((:keywords "php" "commint" "repl" "boris")) nil])
  (php-boris-minor-mode [cl-struct-package-desc php-boris-minor-mode (20140209 1035) "a minor mode to evaluate PHP code in the Boris repl" ((php-boris (0 0 1)) (highlight (0))) single "melpa" nil ((:url . "https://github.com/steckerhalter/php-boris-minor-mode") (:keywords "php" "repl" "eval")) nil])
  (php-eldoc [cl-struct-package-desc php-eldoc (20140202 1141) "eldoc backend for php" nil tar "melpa" nil ((:url . "https://github.com/sabof/php-eldoc")) nil])
  (php-refactor-mode [cl-struct-package-desc php-refactor-mode (20140920 1411) "Minor mode to quickly and safely perform common refactorings" nil single "melpa" nil ((:url . "https://github.com/keelerm84/php-refactor-mode.el") (:keywords "php" "refactor")) nil])
  (phpcbf [cl-struct-package-desc phpcbf (20150302 528) "Format PHP code in Emacs using PHP_CodeSniffer's phpcbf" ((s (1 9 0))) single "melpa" nil ((:url . "https://github.com/nishimaki10/emacs-phpcbf") (:keywords "tools" "php")) nil] [cl-struct-package-desc phpcbf (0 9 2) "Format PHP code in Emacs using PHP_CodeSniffer's phpcbf" ((s (1 9 0))) single "melpa-stable" nil ((:url . "https://github.com/nishimaki10/emacs-phpcbf") (:keywords "tools" "php")) nil])
  (phpunit [cl-struct-package-desc phpunit (20151009 254) "Launch PHP unit tests using phpunit" ((s (1 9 0)) (f (0 16 0)) (pkg-info (0 5))) single "melpa" nil ((:url . "https://github.com/nlamirault/phpunit.el") (:keywords "php" "tests" "phpunit")) nil] [cl-struct-package-desc phpunit (0 7 0) "Launch PHP unit tests using phpunit" ((s (1 9 0)) (f (0 16 0)) (pkg-info (0 5))) single "melpa-stable" nil ((:url . "https://github.com/nlamirault/phpunit.el") (:keywords "php" "tests" "phpunit")) nil])
  (pianobar [cl-struct-package-desc pianobar (20120128 1301) "thin wrapper for Pianobar, a Pandora Radio client" nil single "melpa" nil ((:url . "http://github.com/agrif/pianobar.el")) nil])
  (picolisp-mode [cl-struct-package-desc picolisp-mode (20150516 155) "Major mode for PicoLisp programming." nil single "melpa" nil ((:url . "https://github.com/flexibeast/picolisp-mode") (:keywords "picolisp" "lisp" "programming")) nil])
  (pig-mode [cl-struct-package-desc pig-mode (20140617 1058) "Major mode for Pig files" nil single "melpa" nil nil nil])
  (pig-snippets [cl-struct-package-desc pig-snippets (20130912 2324) "Snippets for pig-mode" ((yasnippet (0 8 0))) tar "melpa" nil nil nil])
  (pillar [cl-struct-package-desc pillar (20141112 1011) "Major mode for editing Pillar files" ((makey (0 3))) tar "melpa" nil ((:url . "http://github.com/DamienCassou/pillar-mode") (:keywords "markup" "major-mode")) nil])
  (pinot [cl-struct-package-desc pinot (20140211 1226) "Emacs interface to pinot-search" nil tar "melpa" nil nil nil])
  (pinyin-search [cl-struct-package-desc pinyin-search (20150719 1755) "Search Chinese by Pinyin" nil single "melpa" nil ((:url . "https://github.com/xuchunyang/pinyin-search.el") (:keywords "chinese" "search")) nil] [cl-struct-package-desc pinyin-search (1 1 0) "Search Chinese by Pinyin" nil single "melpa-stable" nil ((:url . "https://github.com/xuchunyang/pinyin-search.el") (:keywords "chinese" "search")) nil])
  (pip-requirements [cl-struct-package-desc pip-requirements (20150423 1358) "A major mode for editing pip requirements files." ((dash (2 8 0))) single "melpa" nil nil nil] [cl-struct-package-desc pip-requirements (0 4) "A major mode for editing pip requirements files." ((dash (2 8 0))) single "melpa-stable" nil nil nil])
  (pixie-mode [cl-struct-package-desc pixie-mode (20150121 2124) "Major mode for Pixie-lang" ((clojure-mode (3 0 1)) (inf-clojure (1 0 0))) single "melpa" nil ((:url . "https://github.com/johnwalker/pixie-mode")) nil])
  (pixiv-novel-mode [cl-struct-package-desc pixiv-novel-mode (20150109 2254) "Major mode for pixiv novel" nil single "melpa" nil ((:keywords "novel" "pixiv")) nil] [cl-struct-package-desc pixiv-novel-mode (0 0 3) "Major mode for pixiv novel" nil single "melpa-stable" nil ((:keywords "novel" "pixiv")) nil])
  (pkgbuild-mode [cl-struct-package-desc pkgbuild-mode (20151010 736) "Interface to the ArchLinux package manager" nil single "melpa" nil nil nil] [cl-struct-package-desc pkgbuild-mode (0 14) "Interface to the ArchLinux package manager" nil single "melpa-stable" nil nil nil])
  (plan9-theme [cl-struct-package-desc plan9-theme (20151101 1718) "A color theme for Emacs based on Plan9" nil single "melpa" nil ((:url . "https://github.com/john2x/plan9-theme.el")) nil])
  (planet-theme [cl-struct-package-desc planet-theme (20150627 751) "A dark theme inspired by Gmail's 'Planets' theme of yore" ((emacs (24))) single "melpa" nil ((:url . "https://github.com/cmack/emacs-planet-theme") (:keywords "themes")) nil])
  (plantuml-mode [cl-struct-package-desc plantuml-mode (20131031 1632) "Major mode for plantuml" ((auto-complete (1 4))) single "melpa" nil ((:url . "https://github.com/wildsoul/plantuml-mode") (:keywords "uml" "ascii")) nil])
  (plenv [cl-struct-package-desc plenv (20130706 2316) "A plenv wrapper for Emacs" nil single "melpa" nil ((:keywords "emacs" "perl")) nil] [cl-struct-package-desc plenv (0 32) "A plenv wrapper for Emacs" nil single "melpa-stable" nil ((:keywords "emacs" "perl")) nil])
  (plim-mode [cl-struct-package-desc plim-mode (20140812 1713) "Major mode for editing Plim files" nil single "melpa" nil ((:url . "http://github.com/dongweiming/plim-mode") (:keywords "markup" "language")) nil])
  (plsense [cl-struct-package-desc plsense (20151104 645) "provide interface for PlSense that is a development tool for Perl." ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 2 0))) single "melpa" nil ((:url . "https://github.com/aki2o/emacs-plsense") (:keywords "perl" "completion")) nil] [cl-struct-package-desc plsense (0 4 7) "provide interface for PlSense that is a development tool for Perl." ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 2 0))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/emacs-plsense") (:keywords "perl" "completion")) nil])
  (plsense-direx [cl-struct-package-desc plsense-direx (20140520 1308) "Perl Package Explorer" ((direx (0 1 -3)) (plsense (0 3 2)) (log4e (0 2 0)) (yaxception (0 3 2))) single "melpa" nil ((:url . "https://github.com/aki2o/plsense-direx") (:keywords "perl" "convenience")) nil] [cl-struct-package-desc plsense-direx (0 2 0) "Perl Package Explorer" ((direx (0 1 -3)) (plsense (0 3 2)) (log4e (0 2 0)) (yaxception (0 3 2))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/plsense-direx") (:keywords "perl" "convenience")) nil])
  (plsql [cl-struct-package-desc plsql (20121115 243) "Programming support for PL/SQL code" nil single "melpa" nil ((:url . "http://www.emacswiki.org/elisp/plsql.el") (:keywords "languages")) nil])
  (pmdm [cl-struct-package-desc pmdm (20151109 1036) "poor man's desktop-mode alternative." nil single "melpa" nil ((:url . "https://bitbucket.com/inigoserna/pmdm.el")) nil])
  (point-stack [cl-struct-package-desc point-stack (20140102 1223) "A forward/back stack for point" nil single "melpa" nil nil nil])
  (point-undo [cl-struct-package-desc point-undo (20100504 129) "undo/redo position" nil single "melpa" nil nil nil])
  (polymode [cl-struct-package-desc polymode (20151013 814) "Versatile multiple modes with extensive literate programming support" ((emacs (24))) tar "melpa" nil ((:url . "https://github.com/vitoshka/polymode")) nil])
  (pomodoro [cl-struct-package-desc pomodoro (20150716 1046) "A timer for the Pomodoro Technique" nil single "melpa" nil nil nil])
  (ponylang-mode [cl-struct-package-desc ponylang-mode (20151029 250) "Language mode for Pony" ((dash (2 10 0))) single "melpa" nil ((:url . "https://github.com/abingham/ponylang-mode.el") (:keywords "programming")) nil])
  (pophint [cl-struct-package-desc pophint (20150930 1034) "Provide navigation using pop-up tips, like Firefox's Vimperator Hint Mode" ((popup (0 5 0)) (log4e (0 2 0)) (yaxception (0 1))) tar "melpa" nil ((:url . "https://github.com/aki2o/emacs-pophint") (:keywords "popup")) nil] [cl-struct-package-desc pophint (0 9 3) "Provide navigation using pop-up tips, like Firefox's Vimperator Hint Mode" ((popup (0 5 0)) (log4e (0 2 0)) (yaxception (0 1))) tar "melpa-stable" nil ((:url . "https://github.com/aki2o/emacs-pophint") (:keywords "popup")) nil])
  (poporg [cl-struct-package-desc poporg (20150603 1847) "Pop a comment or string to an empty buffer for text editing" nil single "melpa" nil ((:url . "https://github.com/QBobWatson/poporg") (:keywords "outlines" "tools")) nil])
  (popup-complete [cl-struct-package-desc popup-complete (20141108 1908) "completion with popup" ((popup (0 5 0))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-popup-complete")) nil] [cl-struct-package-desc popup-complete (0 2) "completion with popup" ((popup (0 5 0))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-popup-complete")) nil])
  (popup-kill-ring [cl-struct-package-desc popup-kill-ring (20131020 1154) "interactively insert item from kill-ring" ((popup (0 4)) (pos-tip (0 4))) single "melpa" nil ((:url . "https://github.com/waymondo/popup-kill-ring") (:keywords "popup" "kill-ring" "pos-tip")) nil])
  (popup-switcher [cl-struct-package-desc popup-switcher (20150331 708) "switch to other buffers and files via popup." ((cl-lib (0 3)) (popup (0 5 2))) single "melpa" nil ((:url . "https://github.com/kostafey/popup-switcher") (:keywords "popup" "switch" "buffers" "functions")) nil])
  (portage-navi [cl-struct-package-desc portage-navi (20141208 555) "portage viewer" ((concurrent (0 3 1)) (ctable (0 1 2))) single "melpa" nil ((:url . "https://github.com/kiwanami/emacs-portage-navi") (:keywords "tools" "gentoo")) nil])
  (pow [cl-struct-package-desc pow (20140420 106) "pow (http://pow.cx/) manager for emacs" ((emacs (24)) (cl-lib (0 5))) tar "melpa" nil ((:url . "http://github.com/yukihr/emacs-pow") (:keywords "develop" "web" "pow")) nil])
  (powerline [cl-struct-package-desc powerline (20151008 1449) "Rewrite of Powerline" ((cl-lib (0 2))) tar "melpa" nil ((:url . "http://github.com/milkypostman/powerline/") (:keywords "mode-line")) nil] [cl-struct-package-desc powerline (2 2) "Rewrite of Powerline" ((cl-lib (0 2))) tar "melpa-stable" nil ((:url . "http://github.com/milkypostman/powerline/") (:keywords "mode-line")) nil])
  (powerline-evil [cl-struct-package-desc powerline-evil (20151112 710) "Utilities for better Evil support for Powerline" ((evil (1 0 8)) (powerline (2 3))) tar "melpa" nil ((:url . "http://github.com/raugturi/powerline-evil/") (:keywords "evil" "mode-line" "powerline")) nil])
  (pp+ [cl-struct-package-desc pp+ (20150418 828) "Extensions to `pp.el'." nil single "melpa" nil ((:url . "http://www.emacswiki.org/pp%2b.el") (:keywords "lisp")) nil])
  (ppd-sr-speedbar [cl-struct-package-desc ppd-sr-speedbar (20151108 424) "Sr Speedbar adaptor for project-persist-drawer." ((sr-speedbar (20140914 2339)) (project-persist-drawer (0 0 4))) tar "melpa" nil nil nil] [cl-struct-package-desc ppd-sr-speedbar (0 0 6) "Sr Speedbar adaptor for project-persist-drawer." ((sr-speedbar (20140914 2339)) (project-persist-drawer (0 0 4))) tar "melpa-stable" nil nil nil])
  (preproc-font-lock [cl-struct-package-desc preproc-font-lock (20151107 1218) "Highlight C-style preprocessor directives." nil single "melpa" nil ((:url . "https://github.com/Lindydancer/preproc-font-lock") (:keywords "c" "languages" "faces")) nil])
  (preseed-generic-mode [cl-struct-package-desc preseed-generic-mode (20150119 1241) "Debian preseed file major mode" nil single "melpa" nil ((:url . "https://github.com/suntong001/preseed-generic-mode")) nil])
  (pretty-mode [cl-struct-package-desc pretty-mode (20141207 1152) "Redisplay parts of the buffer as pretty symbols." nil single "melpa" nil ((:url . "https://github.com/akatov/pretty-mode") (:keywords "pretty" "unicode" "symbols")) nil] [cl-struct-package-desc pretty-mode (2 0 3) "Redisplay parts of the buffer as pretty symbols." nil single "melpa-stable" nil ((:url . "https://github.com/akatov/pretty-mode") (:keywords "pretty" "unicode" "symbols")) nil])
  (pretty-sha-path [cl-struct-package-desc pretty-sha-path (20141105 1026) "Prettify Guix/Nix store paths" nil single "melpa" nil ((:url . "https://gitorious.org/alezost-emacs/pretty-sha-path") (:keywords "faces" "convenience")) nil])
  (pretty-symbols [cl-struct-package-desc pretty-symbols (20140814 259) "Draw tokens as Unicode glyphs." nil single "melpa" nil ((:url . "http://github.com/drothlis/pretty-symbols") (:keywords "faces")) nil])
  (private [cl-struct-package-desc private (20150121 1757) "take care of your private configuration files." ((aes (0 6))) single "melpa" nil ((:url . "https://github.com/cheunghy/private") (:keywords "private" "configuration" "backup" "recover")) nil])
  (prodigy [cl-struct-package-desc prodigy (20141109 252) "Manage external services from within Emacs" ((s (1 8 0)) (dash (2 4 0)) (f (0 14 0)) (emacs (24))) single "melpa" nil ((:url . "http://github.com/rejeep/prodigy.el")) nil] [cl-struct-package-desc prodigy (0 6 0) "Manage external services from within Emacs" ((s (1 8 0)) (dash (2 4 0)) (f (0 14 0)) (emacs (24))) single "melpa-stable" nil ((:url . "http://github.com/rejeep/prodigy.el")) nil])
  (professional-theme [cl-struct-package-desc professional-theme (20150315 400) "Emacs port of Vim's professional theme" nil single "melpa" nil ((:url . "https://github.com/juanjux/emacs-professional-theme") (:keywords "theme" "light" "professional")) nil])
  (prognth [cl-struct-package-desc prognth (20130920 1059) "Extend prog1 to arbitrary index" nil single "melpa" nil ((:keywords "lisp")) nil])
  (programmer-dvorak [cl-struct-package-desc programmer-dvorak (20150426 1837) "Input method for Programmer Dvorak." nil single "melpa" nil ((:url . "https://github.com/yangchenyun/programmer-dvorak") (:keywords "dvorak" "programmer-dvorak" "input-method")) nil])
  (project-local-variables [cl-struct-package-desc project-local-variables (20080502 952) "Set project-local variables from a file." nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/ProjectLocalVariables") (:keywords "project" "convenience")) nil])
  (project-persist [cl-struct-package-desc project-persist (20150519 1324) "A minor mode to allow loading and saving of project settings." nil tar "melpa" nil nil nil] [cl-struct-package-desc project-persist (0 3 2) "A minor mode to allow loading and saving of project settings." nil tar "melpa-stable" nil nil nil])
  (project-persist-drawer [cl-struct-package-desc project-persist-drawer (20151108 422) "Use a project drawer with project-persist." ((project-persist (0 3))) tar "melpa" nil nil nil] [cl-struct-package-desc project-persist-drawer (0 0 4) "Use a project drawer with project-persist." ((project-persist (0 3))) tar "melpa-stable" nil nil nil])
  (project-root [cl-struct-package-desc project-root (20110206 1230) "Define a project root and take actions based upon it." nil single "melpa" nil nil nil] [cl-struct-package-desc project-root (0 7) "Define a project root and take actions based upon it." nil single "melpa-stable" nil nil nil])
  (projectile-codesearch [cl-struct-package-desc projectile-codesearch (20150418 2245) "Integration of codesearch into projectile" ((codesearch (20141019 625)) (projectile (20150405 126))) single "melpa" nil ((:url . "https://github.com/abingham/codesearch.el") (:keywords "tools" "development" "search")) nil])
  (projectile-rails [cl-struct-package-desc projectile-rails (20151113 1208) "Minor mode for Rails projects based on projectile-mode" ((emacs (24 3)) (projectile (0 12 0)) (inflections (1 1)) (inf-ruby (2 2 6)) (f (0 13 0)) (rake (0 3 2))) single "melpa" nil ((:url . "https://github.com/asok/projectile-rails") (:keywords "rails" "projectile")) nil] [cl-struct-package-desc projectile-rails (0 6 6) "Minor mode for Rails projects based on projectile-mode" ((projectile (0 12 0)) (inflections (1 1)) (inf-ruby (2 2 6)) (f (0 13 0)) (rake (0 3 2))) single "melpa-stable" nil ((:url . "https://github.com/asok/projectile-rails") (:keywords "rails" "projectile")) nil])
  (projectile-speedbar [cl-struct-package-desc projectile-speedbar (20150629 1153) "projectile integration for speedbar" ((projectile (0 11 0))) single "melpa" nil ((:url . "https://github.com/anshulverma/projectile-speedbar") (:keywords "project" "convenience" "speedbar" "projectile")) nil])
  (projector [cl-struct-package-desc projector (20150921 838) "Lightweight library for managing project/repository-aware shell and command buffers" ((alert (1 1)) (projectile (0 11 0))) single "melpa" nil ((:url . "https://github.com/waymondo/projector")) nil])
  (projekt [cl-struct-package-desc projekt (20150324 148) "some kind of staging for CVS" ((emacs (24))) single "melpa" nil nil nil] [cl-struct-package-desc projekt (0 1) "some kind of staging for CVS" ((emacs (24))) single "melpa-stable" nil nil nil])
  (projmake-mode [cl-struct-package-desc projmake-mode (20150619 1420) "Project oriented automatic builder and error highlighter, flymake for projects" ((dash (20150611 922)) (indicators (20130217 1405))) tar "melpa" nil nil nil])
  (prop-menu [cl-struct-package-desc prop-menu (20150728 418) "Create and display a context menu based on text and overlay properties" ((emacs (24 3)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/david-christiansen/prop-menu-el") (:keywords "convenience")) nil] [cl-struct-package-desc prop-menu (0 1 2) "Create and display a context menu based on text and overlay properties" ((emacs (24 3)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/david-christiansen/prop-menu-el") (:keywords "convenience")) nil])
  (propfont-mixed [cl-struct-package-desc propfont-mixed (20150113 1411) "Use proportional fonts with space-based indentation." ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/ikirill/propfont-mixed") (:keywords "faces")) nil])
  (prosjekt [cl-struct-package-desc prosjekt (20140822 453) "a software project tool for emacs" ((dash (2 8 0))) tar "melpa" nil ((:url . "https://github.com/abingham/prosjekt")) nil])
  (psc-ide [cl-struct-package-desc psc-ide (20151025 754) "Minor mode for PureScript's psc-ide tool." ((dash (2 11 0)) (company (0 8 7)) (cl-lib (0 5))) tar "melpa" nil ((:url . "https://github.com/epost/psc-ide-emacs") (:keywords "languages")) nil])
  (psession [cl-struct-package-desc psession (20150618 2159) "Persistent save of elisp objects." ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/thierryvolpiatto/psession")) nil] [cl-struct-package-desc psession (1 1) "Persistent save of elisp objects." ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/thierryvolpiatto/psession")) nil])
  (pt [cl-struct-package-desc pt (20151024 851) "A front-end for pt, The Platinum Searcher." nil single "melpa" nil ((:url . "https://github.com/bling/pt.el") (:keywords "pt" "ack" "ag" "grep" "search")) nil] [cl-struct-package-desc pt (0 0 3) "A front-end for pt, The Platinum Searcher." nil single "melpa-stable" nil ((:url . "https://github.com/bling/pt.el") (:keywords "pt" "ack" "ag" "grep" "search")) nil])
  (puml-mode [cl-struct-package-desc puml-mode (20150926 530) "Major mode for PlantUML" nil single "melpa" nil ((:keywords "uml" "plantuml" "ascii")) nil] [cl-struct-package-desc puml-mode (0 6 1) "Major mode for PlantUML" nil single "melpa-stable" nil ((:keywords "uml" "plantuml" "ascii")) nil])
  (punctuality-logger [cl-struct-package-desc punctuality-logger (20141120 1231) "Punctuality logger for Emacs" nil single "melpa" nil ((:url . "https://gitlab.com/elzair/punctuality-logger") (:keywords "reminder" "calendar")) nil] [cl-struct-package-desc punctuality-logger (0 8) "Punctuality logger for Emacs" nil single "melpa-stable" nil ((:url . "https://gitlab.com/elzair/punctuality-logger") (:keywords "reminder" "calendar")) nil])
  (pungi [cl-struct-package-desc pungi (20150222 446) "Integrates jedi with virtualenv and buildout python environments" ((jedi (0 2 0 -3 2)) (pyvenv (1 5))) single "melpa" nil ((:keywords "convenience")) nil] [cl-struct-package-desc pungi (1 1) "Integrates jedi with virtualenv and buildout python environments" ((jedi (0 2 0 -3 2)) (pyvenv (1 5))) single "melpa-stable" nil ((:keywords "convenience")) nil])
  (puppetfile-mode [cl-struct-package-desc puppetfile-mode (20131017 833) "Syntax highlighting for Puppetfiles" nil single "melpa" nil nil nil])
  (purescript-mode [cl-struct-package-desc purescript-mode (20150316 1828) "A PureScript editing mode" nil tar "melpa" nil nil nil] [cl-struct-package-desc purescript-mode (13 10) "No description available." nil tar "melpa-stable" nil nil nil])
  (purty-mode [cl-struct-package-desc purty-mode (20131004 1559) "Safely pretty-print greek letters, mathematical symbols, or anything else." nil single "melpa" nil nil nil])
  (pushbullet [cl-struct-package-desc pushbullet (20140809 532) "Emacs client for the PushBullet Android app" ((grapnel (0 5 2)) (json (1 2))) single "melpa" nil ((:url . "http://www.github.com/theanalyst/revolver") (:keywords "convenience")) nil] [cl-struct-package-desc pushbullet (0 5 2) "Emacs client for the PushBullet Android app" ((grapnel (0 5 2)) (json (1 2))) single "melpa-stable" nil ((:url . "http://www.github.com/theanalyst/revolver") (:keywords "convenience")) nil])
  (px [cl-struct-package-desc px (20141006 548) "preview inline latex in any mode" nil single "melpa" nil ((:url . "http://github.com/aaptel/preview-latex")) nil])
  (py-autopep8 [cl-struct-package-desc py-autopep8 (20150420 421) "Use autopep8 to beautify a Python buffer" nil single "melpa" nil ((:url . "http://paetzke.me/project/py-autopep8.el")) nil] [cl-struct-package-desc py-autopep8 (0 7 0) "Use autopep8 to beautify a Python buffer" nil single "melpa-stable" nil ((:url . "http://paetzke.me/project/py-autopep8.el")) nil])
  (py-gnitset [cl-struct-package-desc py-gnitset (20140224 2010) "Run your Python tests any way you'd like" nil single "melpa" nil ((:url . "https://www.github.com/quodlibetor/py-gnitset")) nil])
  (py-isort [cl-struct-package-desc py-isort (20150422 839) "Use isort to sort the imports in a Python buffer" nil single "melpa" nil ((:url . "http://paetzke.me/project/py-isort.el")) nil] [cl-struct-package-desc py-isort (0 8) "Use isort to sort the imports in a Python buffer" nil single "melpa-stable" nil ((:url . "http://paetzke.me/project/py-isort.el")) nil])
  (py-smart-operator [cl-struct-package-desc py-smart-operator (20150824 1910) "smart-operator for python-mode" ((s (1 9 0))) single "melpa" nil ((:keywords "python" "convenience" "smart-operator")) nil])
  (py-test [cl-struct-package-desc py-test (20141218 243) "A test runner for Python code." ((dash (2 9 0)) (f (0 17)) (emacs (24))) single "melpa" nil ((:url . "https://github.com/Bogdanp/py-test.el") (:keywords "python" "testing" "py.test")) nil])
  (py-yapf [cl-struct-package-desc py-yapf (20150422 753) "Use yapf to beautify a Python buffer" nil single "melpa" nil ((:url . "https://github.com/paetzke/py-yapf.el")) nil] [cl-struct-package-desc py-yapf (0 2) "Use yapf to beautify a Python buffer" nil single "melpa-stable" nil ((:url . "https://github.com/paetzke/py-yapf.el")) nil])
  (pycarddavel [cl-struct-package-desc pycarddavel (20150831 516) "Integrate pycarddav" ((helm (1 7 0)) (emacs (24 0))) single "melpa" nil ((:keywords "helm" "pyccarddav" "carddav" "message" "mu4e" "contacts")) nil] [cl-struct-package-desc pycarddavel (1 0 1) "Integrate pycarddav" ((helm (1 7 0)) (emacs (24 0))) single "melpa-stable" nil ((:keywords "helm" "pyccarddav" "carddav" "message" "mu4e" "contacts")) nil])
  (pydoc [cl-struct-package-desc pydoc (20150525 1845) "functional, syntax highlighted pydoc navigation" nil single "melpa" nil ((:url . "https://github.com/statmobile/pydoc") (:keywords "pydoc" "python")) nil])
  (pydoc-info [cl-struct-package-desc pydoc-info (20110301 34) "Better Python support for info-lookup-symbol." nil tar "melpa" nil nil nil])
  (pyenv-mode [cl-struct-package-desc pyenv-mode (20151105 241) "Integrate pyenv with python-mode" ((pythonic (0 1 0))) single "melpa" nil ((:url . "https://github.com/proofit404/pyenv-mode")) nil] [cl-struct-package-desc pyenv-mode (0 1 0) "Integrate pyenv with python-mode" ((pythonic (0 1 0))) single "melpa-stable" nil ((:url . "https://github.com/proofit404/pyenv-mode")) nil])
  (pyfmt [cl-struct-package-desc pyfmt (20150521 1356) "Emacs interface to pyfmt" nil single "melpa" nil ((:url . "https://github.com/aheaume/pyfmt.el") (:keywords "tools")) nil])
  (pyimpsort [cl-struct-package-desc pyimpsort (20150927 1117) "Sort python imports." ((emacs (24 3))) tar "melpa" nil ((:url . "https://github.com/emacs-pe/pyimpsort.el") (:keywords "convenience")) nil])
  (python-cell [cl-struct-package-desc python-cell (20131029 1616) "Support for MATLAB-like cells in python mode" nil single "melpa" nil ((:keywords "python" "matlab" "cell")) nil])
  (python-docstring [cl-struct-package-desc python-docstring (20150907 1304) "Smart Python docstring formatting" nil tar "melpa" nil nil nil])
  (python-environment [cl-struct-package-desc python-environment (20150310 153) "virtualenv API for Emacs Lisp" ((deferred (0 3 1))) tar "melpa" nil ((:keywords "applications" "tools")) nil] [cl-struct-package-desc python-environment (0 0 2) "virtualenv API for Emacs Lisp" ((deferred (0 3 1))) tar "melpa-stable" nil ((:keywords "applications" "tools")) nil])
  (python-x [cl-struct-package-desc python-x (20151111 1001) "python.el extras for interactive evaluation" ((python (0 24)) (folding (0)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/wavexx/python-x.el") (:keywords "python" "eval" "folding")) nil] [cl-struct-package-desc python-x (1 0) "python.el extras for interactive evaluation" ((python (0 24)) (folding (0))) single "melpa-stable" nil ((:url . "https://github.com/wavexx/python-x.el") (:keywords "python" "eval" "folding")) nil])
  (python3-info [cl-struct-package-desc python3-info (20150903 225) "No description available." nil tar "melpa" nil nil nil])
  (pythonic [cl-struct-package-desc pythonic (20150730 216) "Utility functions for writing pythonic emacs package." ((emacs (24)) (cl-lib (0 5)) (dash (2 11)) (s (1 9)) (f (0 17 2))) single "melpa" nil ((:url . "https://github.com/proofit404/pythonic")) nil] [cl-struct-package-desc pythonic (0 1 0) "Utility functions for writing pythonic emacs package." ((emacs (24)) (cl-lib (0 5)) (dash (2 11)) (s (1 9)) (f (0 17 2))) single "melpa-stable" nil ((:url . "https://github.com/proofit404/pythonic")) nil])
  (qiita [cl-struct-package-desc qiita (20140118 44) "Qiita API Library for emacs" ((helm (1 5 9)) (markdown-mode (2 0))) single "melpa" nil ((:url . "https://github.com/gongo/qiita-el") (:keywords "qiita")) nil] [cl-struct-package-desc qiita (0 0 1) "No description available." nil single "melpa-stable" nil nil nil])
  (qml-mode [cl-struct-package-desc qml-mode (20130427 808) "Major mode for editing QT Declarative (QML) code." nil single "melpa" nil ((:url . "https://github.com/coldnew/qml-mode") (:keywords "qml" "qt" "qt declarative")) nil] [cl-struct-package-desc qml-mode (0 1) "Major mode for editing QT Declarative (QML) code." nil single "melpa-stable" nil ((:url . "https://github.com/coldnew/qml-mode") (:keywords "qml" "qt" "qt declarative")) nil])
  (quasi-monochrome-theme [cl-struct-package-desc quasi-monochrome-theme (20150801 1325) "High contrast quasi monochrome color theme" nil single "melpa" nil ((:url . "https://github.com/lbolla/emacs-quasi-monochrome") (:keywords "color-theme" "monochrome" "high contrast")) nil] [cl-struct-package-desc quasi-monochrome-theme (1 0) "High contrast quasi monochrome color theme" nil single "melpa-stable" nil ((:url . "https://github.com/lbolla/emacs-quasi-monochrome") (:keywords "color-theme" "monochrome" "high contrast")) nil])
  (quelpa [cl-struct-package-desc quelpa (20151031 251) "Emacs Lisp packages built directly from source" ((package-build (0)) (emacs (24 3))) tar "melpa" nil ((:url . "https://github.com/quelpa/quelpa") (:keywords "package" "management" "build" "source" "elpa")) nil])
  (quelpa-use-package [cl-struct-package-desc quelpa-use-package (20150805 328) "quelpa handler for use-package" ((emacs (24 3)) (quelpa (0)) (use-package (2))) single "melpa" nil ((:url . "https://github.com/quelpa/quelpa-use-package") (:keywords "package" "management" "elpa" "use-package")) nil])
  (quick-buffer-switch [cl-struct-package-desc quick-buffer-switch (20151007 1508) "Quick switch to file or dir buffers." nil single "melpa" nil ((:keywords "emacs" "configuration")) nil])
  (quick-preview [cl-struct-package-desc quick-preview (20150828 2139) "quick preview using GNOME sushi, gloobus or quick look" nil single "melpa" nil ((:url . "https://github.com/myuhe/quick-preview.el") (:keywords "files" "hypermedia")) nil])
  (quickref [cl-struct-package-desc quickref (20130113 1500) "Display relevant notes-to-self in the echo area" ((dash (1 0 3)) (s (1 0 0))) single "melpa" nil ((:url . "https://github.com/pd/quickref.el")) nil])
  (racer [cl-struct-package-desc racer (20151016 1716) "Rust completion and code navigation via racer" ((emacs (24 3)) (rust-mode (0 2 0)) (dash (2 11 0)) (s (1 10 0))) single "melpa" nil ((:url . "https://github.com/racer-rust/emacs-racer") (:keywords "abbrev" "convenience" "matching" "rust" "tools")) nil] [cl-struct-package-desc racer (1 0 1) "Rust completion and code navigation via racer" ((emacs (24 3)) (rust-mode (0 2 0)) (dash (2 11 0)) (s (1 10 0))) single "melpa-stable" nil ((:url . "https://github.com/racer-rust/emacs-racer") (:keywords "abbrev" "convenience" "matching" "rust" "tools")) nil])
  (racket-mode [cl-struct-package-desc racket-mode (20151113 1132) "Major mode for Racket language." ((emacs (24 3)) (faceup (0 0 2)) (s (1 9 0))) tar "melpa" nil ((:url . "https://github.com/greghendershott/racket-mode")) nil])
  (railgun [cl-struct-package-desc railgun (20121016 2257) "No description available." nil single "melpa" nil nil nil])
  (rails-log-mode [cl-struct-package-desc rails-log-mode (20140407 2125) "Major mode for viewing Rails log files" nil single "melpa" nil ((:keywords "rails" "log")) nil])
  (rails-new [cl-struct-package-desc rails-new (20141221 49) "Handy emacs command for generating rails application." nil single "melpa" nil ((:url . "https://github.com/cheunghy/rails-new") (:keywords "rails" "ruby")) nil])
  (railscasts-theme [cl-struct-package-desc railscasts-theme (20150219 725) "Railscasts color theme for GNU Emacs." nil single "melpa" nil ((:url . "https://github.com/mikenichols/railscasts-theme") (:keywords "railscasts" "color" "theme")) nil])
  (rainbow-blocks [cl-struct-package-desc rainbow-blocks (20140306 1033) "Block syntax highlighting for lisp code" nil single "melpa" nil ((:url . "https://github.com/istib/rainbow-blocks")) nil] [cl-struct-package-desc rainbow-blocks (1 0 0) "Block syntax highlighting for lisp code" nil single "melpa-stable" nil ((:url . "https://github.com/istib/rainbow-blocks")) nil])
  (rainbow-identifiers [cl-struct-package-desc rainbow-identifiers (20141102 726) "Highlight identifiers according to their names" ((emacs (24))) single "melpa" nil ((:url . "https://github.com/Fanael/rainbow-identifiers")) nil] [cl-struct-package-desc rainbow-identifiers (0 2 2) "Highlight identifiers according to their names" ((emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/Fanael/rainbow-identifiers")) nil])
  (rake [cl-struct-package-desc rake (20150831 158) "Run rake commands" ((f (0 13 0)) (dash (1 5 0)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/asok/rake.el") (:keywords "rake" "ruby")) nil] [cl-struct-package-desc rake (0 4 0) "Run rake commands" ((f (0 13 0)) (dash (1 5 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/asok/rake.el") (:keywords "rake" "ruby")) nil])
  (random-splash-image [cl-struct-package-desc random-splash-image (20151002 1830) "Randomly sets splash image to *GNU Emacs* buffer on startup." nil single "melpa" nil ((:url . "https://github.com/kakakaya/random-splash-image") (:keywords "games")) nil])
  (ranger [cl-struct-package-desc ranger (20151111 1824) "Make dired more like ranger" ((emacs (24 4))) single "melpa" nil ((:url . "https://github.com/ralesi/ranger") (:keywords "files" "convenience")) nil] [cl-struct-package-desc ranger (0 9 7) "Make dired more like ranger" ((emacs (24 4)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/ralesi/ranger") (:keywords "files" "convenience")) nil])
  (rase [cl-struct-package-desc rase (20120928 1345) "Run At Sun Event daemon" nil single "melpa" nil ((:url . "https://github.com/m00natic/rase/") (:keywords "solar" "sunrise" "sunset" "midday" "midnight")) nil] [cl-struct-package-desc rase (1 1) "Run At Sun Event daemon" nil single "melpa-stable" nil ((:url . "https://github.com/m00natic/rase/") (:keywords "solar" "sunrise" "sunset" "midday" "midnight")) nil])
  (rbt [cl-struct-package-desc rbt (20151030 2055) "Integrate reviewboard with emacs." ((popup (0 5 3))) single "melpa" nil ((:keywords "reviewboard" "rbt")) nil])
  (rcirc-alert [cl-struct-package-desc rcirc-alert (20141127 247) "Configurable alert messages on top of RCIRC" nil tar "melpa" nil ((:keywords "lisp" "rcirc" "irc" "alert" "awesome")) nil])
  (rcirc-alertify [cl-struct-package-desc rcirc-alertify (20140406 1819) "Cross platform notifications for rcirc" ((alert (20140406 1353))) single "melpa" nil ((:keywords "comm" "convenience")) nil])
  (rcirc-controls [cl-struct-package-desc rcirc-controls (20141019 136) "control sequences" nil single "melpa" nil nil nil])
  (rcirc-groups [cl-struct-package-desc rcirc-groups (20140622 214) "an emacs buffer in rcirc-groups major mode" nil single "melpa" nil ((:url . "http://tapoueh.org/emacs/rcirc-groups.html") (:keywords "comm" "convenience")) nil])
  (rcirc-styles [cl-struct-package-desc rcirc-styles (20150720 1831) "support mIRC-style color and attribute codes" ((cl-lib (0 5))) single "melpa" nil nil nil] [cl-struct-package-desc rcirc-styles (1 1) "support mIRC-style color and attribute codes" ((cl-lib (0 5))) single "melpa-stable" nil nil nil])
  (rdf-prefix [cl-struct-package-desc rdf-prefix (20151015 1115) "Prefix lookup for RDF" nil single "melpa" nil ((:keywords "convenience" "abbrev")) nil] [cl-struct-package-desc rdf-prefix (1 2) "Prefix lookup for RDF" nil single "melpa-stable" nil ((:keywords "convenience" "abbrev")) nil])
  (rdp [cl-struct-package-desc rdp (20120928 1854) "Recursive Descent Parser library" nil single "melpa" nil ((:url . "https://github.com/skeeto/rdp")) nil])
  (react-snippets [cl-struct-package-desc react-snippets (20151104 1540) "Yasnippets for React" ((yasnippet (0 7 0))) tar "melpa" nil nil nil])
  (readability [cl-struct-package-desc readability (20140715 1727) "Read articles from Readability in Emacs" ((oauth (1 4)) (ov (1 0)) (emacs (24 3))) single "melpa" nil ((:url . "https://github.com/ShingoFukuyama/emacs-readability") (:keywords "readability" "oauth")) nil])
  (readline-complete [cl-struct-package-desc readline-complete (20150708 737) "offers completions in shell mode" nil single "melpa" nil nil nil])
  (realgud [cl-struct-package-desc realgud (20151110 1514) "A modular front-end for interacting with external debuggers" ((load-relative (1 0)) (list-utils (0 4 2)) (loc-changes (1 1)) (test-simple (1 0))) tar "melpa" nil ((:url . "http://github.com/rocky/emacs-dbgr")) nil] [cl-struct-package-desc realgud (1 2) "A modular front-end for interacting with external debuggers" ((load-relative (1 0)) (list-utils (0 4 2)) (loc-changes (1 1)) (test-simple (1 0))) tar "melpa-stable" nil ((:url . "http://github.com/rocky/emacs-dbgr")) nil])
  (rebox2 [cl-struct-package-desc rebox2 (20121113 500) "Handling of comment boxes in various styles." nil single "melpa" nil ((:url . "https://github.com/lewang/rebox2")) nil])
  (recentf-ext [cl-struct-package-desc recentf-ext (20130130 1350) "Recentf extensions" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/recentf-ext.el") (:keywords "convenience" "files")) nil])
  (recompile-on-save [cl-struct-package-desc recompile-on-save (20140317 1333) "Trigger recompilation on file save." ((dash (1 1 0))) single "melpa" nil ((:url . "https://github.com/maio/recompile-on-save.el") (:keywords "convenience" "files" "processes" "tools")) nil])
  (recover-buffers [cl-struct-package-desc recover-buffers (20150812 5) "revisit all buffers from an auto-save file" nil tar "melpa" nil nil nil] [cl-struct-package-desc recover-buffers (1 0) "revisit all buffers from an auto-save file" nil tar "melpa-stable" nil nil nil])
  (rect+ [cl-struct-package-desc rect+ (20150620 1744) "Extensions to rect.el" nil single "melpa" nil ((:url . "https://github.com/mhayashi1120/Emacs-rectplus") (:keywords "extensions" "data" "tools")) nil] [cl-struct-package-desc rect+ (1 0 10) "Extensions to rect.el" nil single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-rectplus") (:keywords "extensions" "data" "tools")) nil])
  (rectangle-utils [cl-struct-package-desc rectangle-utils (20150528 1228) "Some useful rectangle functions." ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/thierryvolpiatto/rectangle-utils")) nil] [cl-struct-package-desc rectangle-utils (1 0) "Some useful rectangle functions." ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/thierryvolpiatto/rectangle-utils")) nil])
  (redis [cl-struct-package-desc redis (20150531 1248) "Redis integration" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/emacs-pe/redis.el") (:keywords "convenience")) nil])
  (redo+ [cl-struct-package-desc redo+ (20131117 351) "Redo/undo system for Emacs" nil single "melpa" nil ((:keywords "lisp" "extensions")) nil])
  (redpen-paragraph [cl-struct-package-desc redpen-paragraph (20150626 2225) "RedPen interface." ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/karronoli/redpen-paragraph.el") (:keywords "document" "proofreading" "help")) nil] [cl-struct-package-desc redpen-paragraph (0 22) "RedPen interface." ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/karronoli/redpen-paragraph.el") (:keywords "document" "proofreading" "help")) nil])
  (redshank [cl-struct-package-desc redshank (20120510 1230) "No description available." nil tar "melpa" nil nil nil])
  (regex-dsl [cl-struct-package-desc regex-dsl (20100124 228) "lisp syntax for regexps" nil single "melpa" nil nil nil])
  (register-channel [cl-struct-package-desc register-channel (20150513 2059) "Jump around fast using registers" nil single "melpa" nil ((:keywords "convenience")) nil])
  (relative-buffers [cl-struct-package-desc relative-buffers (20150115 1101) "Emacs buffers naming convention" ((cl-lib (0 5)) (dash (2 6 0)) (s (1 9 0)) (f (0 16 2))) single "melpa" nil ((:url . "https://github.com/proofit404/relative-buffers")) nil])
  (relative-line-numbers [cl-struct-package-desc relative-line-numbers (20151006 1446) "Display relative line numbers on the margin" ((emacs (24))) single "melpa" nil ((:url . "https://github.com/Fanael/relative-line-numbers")) nil] [cl-struct-package-desc relative-line-numbers (0 3 2) "Display relative line numbers on the margin" ((emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/Fanael/relative-line-numbers")) nil])
  (remark-mode [cl-struct-package-desc remark-mode (20151004 955) "Major mode for the remark slideshow tool" ((markdown-mode (2 0))) tar "melpa" nil ((:keywords "remark" "slideshow" "markdown")) nil])
  (repeatable-motion [cl-struct-package-desc repeatable-motion (20150629 1112) "Make repeatable versions of motions" ((emacs (24))) tar "melpa" nil ((:url . "https://github.com/willghatch/emacs-repeatable-motion") (:keywords "motion" "repeatable")) nil] [cl-struct-package-desc repeatable-motion (0 1) "Make repeatable versions of motions" ((emacs (24))) tar "melpa-stable" nil ((:url . "https://github.com/willghatch/emacs-repeatable-motion") (:keywords "motion" "repeatable")) nil])
  (repl-toggle [cl-struct-package-desc repl-toggle (20140501 531) "Switch to/from repl buffer for current major-mode" ((fullframe (0 0 5))) single "melpa" nil ((:keywords "repl" "buffers" "toggle")) nil])
  (replace+ [cl-struct-package-desc replace+ (20150723 633) "Extensions to `replace.el'." nil single "melpa" nil ((:url . "http://www.emacswiki.org/replace%2b.el") (:keywords "matching" "help" "internal" "tools" "local")) nil])
  (replace-from-region [cl-struct-package-desc replace-from-region (20150406 1730) "Replace commands whose query is from region" nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/replace-from-region.el") (:keywords "replace" "search" "region")) nil])
  (replace-symbol [cl-struct-package-desc replace-symbol (20151030 1657) "Rename symbols in expressions or buffers" nil single "melpa" nil ((:url . "https://github.com/bmastenbrook/replace-symbol-el")) nil] [cl-struct-package-desc replace-symbol (1 0) "Rename symbols in expressions or buffers" nil single "melpa-stable" nil ((:url . "https://github.com/bmastenbrook/replace-symbol-el")) nil])
  (req-package [cl-struct-package-desc req-package (20151008 520) "A use-package wrapper for package runtime dependencies management" ((use-package (1 0)) (dash (2 7 0)) (log4e (0 2 0)) (ht (0))) tar "melpa" nil ((:url . "https://github.com/edvorg/req-package") (:keywords "dotemacs" "startup" "speed" "config" "package")) nil] [cl-struct-package-desc req-package (0 9) "A use-package wrapper for package runtime dependencies management" ((use-package (1 0)) (dash (2 7 0)) (log4e (0 2 0))) single "melpa-stable" nil ((:url . "https://github.com/edvorg/req-package") (:keywords "dotemacs" "startup" "speed" "config" "package")) nil])
  (requirejs [cl-struct-package-desc requirejs (20151020 951) "Requirejs import manipulation and source traversal." ((js2-mode (20150713)) (popup (0 5 3)) (s (1 9 0)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/joeheyming/requirejs-emacs") (:keywords "javascript" "requirejs")) nil] [cl-struct-package-desc requirejs (1 1) "Requirejs import manipulation and source traversal." ((js2-mode (20150713)) (popup (0 5 3)) (s (1 9 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/requirejs-emacs") (:keywords "javascript" "requirejs")) nil])
  (restart-emacs [cl-struct-package-desc restart-emacs (20151106 708) "Restart emacs from within emacs" nil single "melpa" nil ((:url . "https://github.com/iqbalansari/restart-emacs") (:keywords "convenience")) nil] [cl-struct-package-desc restart-emacs (0 1 1) "Restart emacs from within emacs" nil single "melpa-stable" nil ((:url . "https://github.com/iqbalansari/restart-emacs") (:keywords "convenience")) nil])
  (restclient [cl-struct-package-desc restclient (20151112 1333) "An interactive HTTP client for Emacs" nil single "melpa" nil ((:keywords "http")) nil])
  (reveal-in-osx-finder [cl-struct-package-desc reveal-in-osx-finder (20150802 957) "Reveal file associated with buffer in OS X Finder" nil single "melpa" nil ((:url . "https://github.com/kaz-yos/reveal-in-osx-finder") (:keywords "os x" "finder")) nil] [cl-struct-package-desc reveal-in-osx-finder (0 3 3) "Reveal file associated with buffer in OS X Finder" nil single "melpa-stable" nil ((:url . "https://github.com/kaz-yos/reveal-in-osx-finder") (:keywords "os x" "finder")) nil])
  (reveal-next [cl-struct-package-desc reveal-next (20150104 1643) "Progressively reveal text after the cursor." nil single "melpa" nil ((:url . "http://www.emacswiki.org/reveal-next.el") (:keywords "hide" "show" "invisible" "learning")) nil])
  (reverse-theme [cl-struct-package-desc reverse-theme (20141204 1745) "Reverse theme for Emacs" nil single "melpa" nil ((:url . "https://github.com/syohex/emacs-reverse-theme")) nil] [cl-struct-package-desc reverse-theme (0 3) "Reverse theme for Emacs" nil single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-reverse-theme")) nil])
  (review-mode [cl-struct-package-desc review-mode (20150110 612) "major mode for ReVIEW" nil single "melpa" nil ((:url . "https://github.com/kmuto/review-el")) nil])
  (rfringe [cl-struct-package-desc rfringe (20110405 820) "display the relative location of the region, in the fringe." nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/rfringe.el") (:keywords "fringe" "bitmap")) nil])
  (rhtml-mode [cl-struct-package-desc rhtml-mode (20130422 611) "major mode for editing RHTML files" nil tar "melpa" nil nil nil])
  (rigid-tabs [cl-struct-package-desc rigid-tabs (20150807 856) "Rigidify and adjust the visual alignment of TABs" ((emacs (24 3))) single "melpa" nil ((:url . "https://github.com/wavexx/rigid-tabs.el") (:keywords "diff" "whitespace" "version control" "magit")) nil] [cl-struct-package-desc rigid-tabs (1 0) "Rigidify and adjust the visual alignment of TABs" ((emacs (24 3))) single "melpa-stable" nil ((:url . "https://github.com/wavexx/rigid-tabs.el") (:keywords "diff" "whitespace" "version control" "magit")) nil])
  (rnc-mode [cl-struct-package-desc rnc-mode (20121227 1502) "A major mode for editing RELAX NG Compact syntax." nil single "melpa" nil nil nil] [cl-struct-package-desc rnc-mode (1 0 6) "A major mode for editing RELAX NG Compact syntax." nil single "melpa-stable" nil nil nil])
  (roguel-ike [cl-struct-package-desc roguel-ike (20140227 729) "A coffee-break roguelike" ((popup (0 5 0))) tar "melpa" nil nil nil] [cl-struct-package-desc roguel-ike (0 1 0) "A coffee-break roguelike" ((popup (0 5 0))) tar "melpa-stable" nil nil nil])
  (rope-read-mode [cl-struct-package-desc rope-read-mode (20151021 52) "Rearrange lines to read text smoothly" nil single "melpa" nil ((:url . "https://github.com/marcowahl/rope-read-mode") (:keywords "reading" "convenience" "chill")) nil] [cl-struct-package-desc rope-read-mode (0 3 1) "Rearrange lines to read text smoothly" nil single "melpa-stable" nil ((:url . "https://github.com/marcowahl/rope-read-mode") (:keywords "reading" "convenience")) nil])
  (rotate [cl-struct-package-desc rotate (20140123 116) "Rotate the layout of emacs" nil single "melpa" nil ((:url . "https://github.com/daic-h/emacs-rotate") (:keywords "window" "layout")) nil])
  (rpm-spec-mode [cl-struct-package-desc rpm-spec-mode (20150411 855) "RPM spec file editing commands for Emacs/XEmacs" nil single "melpa" nil ((:keywords "unix" "languages")) nil])
  (rpn-calc [cl-struct-package-desc rpn-calc (20150302 534) "quick RPN calculator for hackers" ((popup (0 4))) single "melpa" nil ((:url . "http://hins11.yu-yake.com/")) nil])
  (rsense [cl-struct-package-desc rsense (20100510 2105) "RSense client for Emacs" nil single "melpa" nil ((:keywords "convenience")) nil] [cl-struct-package-desc rsense (0 3) "RSense client for Emacs" nil single "melpa-stable" nil ((:keywords "convenience")) nil])
  (rtags [cl-struct-package-desc rtags (20151112 1339) "A front-end for rtags" nil tar "melpa" nil ((:url . "http://rtags.net")) nil] [cl-struct-package-desc rtags (2 0) "No description available." nil tar "melpa-stable" nil nil nil])
  (ruby-additional [cl-struct-package-desc ruby-additional (20150306 1759) "ruby-mode extensions yet to be merged into Emacs" ((emacs (24 3)) (ruby-mode (1 2))) tar "melpa" nil ((:url . "http://svn.ruby-lang.org/cgi-bin/viewvc.cgi/trunk/misc/") (:keywords "ruby" "languages")) nil])
  (ruby-dev [cl-struct-package-desc ruby-dev (20130811 151) "Interactive developement environment for Ruby." nil tar "melpa" nil nil nil])
  (ruby-electric [cl-struct-package-desc ruby-electric (20150424 752) "Minor mode for electrically editing ruby code" nil single "melpa" nil ((:url . "https://github.com/knu/ruby-electric.el") (:keywords "languages" "ruby")) nil])
  (ruby-factory [cl-struct-package-desc ruby-factory (20151011 823) "Minor mode for Ruby test object generation libraries" ((inflections (1 1))) tar "melpa" nil ((:url . "http://github.com/sshaw/ruby-factory-mode") (:keywords "ruby" "rails" "convenience")) nil])
  (ruby-guard [cl-struct-package-desc ruby-guard (20141218 1914) "Launching guard directly inside emacs." nil single "melpa" nil ((:url . "https://github.com/cheunghy/ruby-guard") (:keywords "ruby" "guard" "rails")) nil])
  (ruby-interpolation [cl-struct-package-desc ruby-interpolation (20131112 852) "Ruby string interpolation helpers" nil single "melpa" nil ((:url . "http://github.com/leoc/ruby-interpolation.el")) nil])
  (ruby-refactor [cl-struct-package-desc ruby-refactor (20151026 1347) "A minor mode which presents various Ruby refactoring helpers." ((ruby-mode (1 2))) single "melpa" nil ((:url . "https://github.com/ajvargo/ruby-refactor") (:keywords "refactor" "ruby")) nil])
  (runner [cl-struct-package-desc runner (20151113 931) "Improved \"open with\" suggestions for dired" nil single "melpa" nil ((:url . "https://github.com/thamer/runner") (:keywords "shell command" "dired" "file extension" "open with")) nil])
  (runtests [cl-struct-package-desc runtests (20150807 131) "Run unit tests from Emacs" nil single "melpa" nil ((:url . "https://github.com/sunesimonsen/emacs-runtests") (:keywords "test")) nil])
  (rustfmt [cl-struct-package-desc rustfmt (20151112 1216) "Format rust code using rustfmt" ((emacs (24))) single "melpa" nil ((:url . "https://github.com/fbergroth/emacs-rustfmt") (:keywords "convenience")) nil])
  (sage-shell-mode [cl-struct-package-desc sage-shell-mode (20151020 609) "A front-end for Sage Math" ((cl-lib (0 5)) (deferred (0 3 1))) tar "melpa" nil ((:url . "https://github.com/stakemori/sage-shell-mode") (:keywords "sage" "math")) nil] [cl-struct-package-desc sage-shell-mode (0 0 8 9) "A front-end for Sage Math" ((cl-lib (0 5)) (deferred (0 3 1))) tar "melpa-stable" nil ((:url . "https://github.com/stakemori/sage-shell-mode") (:keywords "sage" "math")) nil])
  (salt-mode [cl-struct-package-desc salt-mode (20150904 1113) "Major mode for Salt States" ((yaml-mode (0 0 12)) (mmm-mode (0 5 4)) (mmm-jinja2 (0 0 1))) single "melpa" nil ((:url . "https://github.com/beardedprojamz/salt-mode") (:keywords "languages")) nil])
  (sane-term [cl-struct-package-desc sane-term (20150917 1602) "Multi Term is crazy. This is not." ((emacs (24 1))) single "melpa" nil ((:url . "http://github.com/adamrt/sane-term")) nil])
  (save-load-path [cl-struct-package-desc save-load-path (20131228 1152) "save load-path and reuse it to test" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/save-load-path.el") (:keywords "lisp")) nil])
  (save-sexp [cl-struct-package-desc save-sexp (20150731 846) "save variables in files using setter forms like `setq'" nil tar "melpa" nil ((:url . "https://github.com/tarsius/save-sexp") (:keywords "convenience")) nil] [cl-struct-package-desc save-sexp (0 2 0) "save variables in files using setter forms like `setq'" nil tar "melpa-stable" nil ((:url . "https://github.com/tarsius/save-sexp") (:keywords "convenience")) nil])
  (savekill [cl-struct-package-desc savekill (20140417 1934) "Save kill ring to disk" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/savekill.el") (:keywords "tools")) nil])
  (sbt-mode [cl-struct-package-desc sbt-mode (20151014 42) "Major mode for sbt >= 0.12 with scala >= 2.9" ((scala-mode2 (0 22))) tar "melpa" nil nil nil] [cl-struct-package-desc sbt-mode (0 1) "Major mode for sbt >= 0.12 with scala >= 2.9" ((scala-mode2 (0 22))) tar "melpa-stable" nil nil nil])
  (scad-mode [cl-struct-package-desc scad-mode (20150330 2029) "A major mode for editing OpenSCAD code" nil single "melpa" nil ((:url . "https://raw.github.com/openscad/openscad/master/contrib/scad-mode.el") (:keywords "languages")) nil])
  (scad-preview [cl-struct-package-desc scad-preview (20150818 624) "Preview SCAD models in real-time within Emacs" ((scad-mode (91 0))) single "melpa" nil ((:url . "http://hins11.yu-yake.com/")) nil])
  (scala-mode2 [cl-struct-package-desc scala-mode2 (20150617 2350) "Major mode for editing Scala >= 2.9" nil tar "melpa" nil nil nil] [cl-struct-package-desc scala-mode2 (0 22) "Major mode for editing Scala >= 2.9" nil tar "melpa-stable" nil nil nil])
  (scala-outline-popup [cl-struct-package-desc scala-outline-popup (20150702 937) "scala file summary popup" ((dash (2 9 0)) (popup (0 5 3)) (scala-mode2 (0 22)) (flx-ido (0 5))) single "melpa" nil ((:url . "https://github.com/ancane/scala-outline-popup.el") (:keywords "scala" "structure" "summary")) nil] [cl-struct-package-desc scala-outline-popup (0 3 4) "scala file summary popup" ((dash (2 9 0)) (popup (0 5 2)) (scala-mode2 (0 22))) single "melpa-stable" nil ((:url . "https://github.com/ancane/scala-outline-popup.el") (:keywords "scala" "structure" "summary")) nil])
  (scf-mode [cl-struct-package-desc scf-mode (20111202 707) "shorten file-names in compilation type buffers" nil single "melpa" nil ((:url . "https://github.com/lewang/scf-mode") (:keywords "compilation")) nil])
  (scheme-complete [cl-struct-package-desc scheme-complete (20130220 403) "Smart tab completion for Scheme in Emacs" nil single "melpa" nil nil nil])
  (scion [cl-struct-package-desc scion (20130315 555) "Haskell Minor Mode for Interacting with the Scion Library" nil single "melpa" nil ((:url . "https://code.google.com/p/scion-lib/")) nil])
  (sclang-extensions [cl-struct-package-desc sclang-extensions (20131117 1439) "Extensions for the SuperCollider Emacs mode." ((auto-complete (1 4 0)) (s (1 3 1)) (dash (1 2 0)) (emacs (24 1))) tar "melpa" nil ((:keywords "sclang" "supercollider" "languages" "tools")) nil])
  (sclang-snippets [cl-struct-package-desc sclang-snippets (20130513 51) "Snippets for the SuperCollider Emacs mode" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "snippets")) nil])
  (scratch-ext [cl-struct-package-desc scratch-ext (20140103 2116) "Extensions for *scratch*" nil single "melpa" nil ((:url . "https://github.com/kyanagi/scratch-ext-el")) nil])
  (scratch-log [cl-struct-package-desc scratch-log (20141114 2343) "Utility for *scratch* buffer." nil single "melpa" nil nil nil])
  (scratches [cl-struct-package-desc scratches (20151005 2116) "Multiple scratches in any language" ((dash (2 11 0)) (f (0 17 0))) single "melpa" nil ((:keywords "scratch")) nil])
  (screenshot [cl-struct-package-desc screenshot (20120509 405) "Take a screenshot in Emacs" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/screenshot.el") (:keywords "images" "hypermedia")) nil])
  (search-web [cl-struct-package-desc search-web (20150312 403) "Post web search queries using `browse-url'." nil single "melpa" nil nil nil] [cl-struct-package-desc search-web (1 1) "Post web search queries using `browse-url'." nil single "melpa-stable" nil nil nil])
  (searchq [cl-struct-package-desc searchq (20150829 511) "Framework of queued search tasks using GREP, ACK, AG and more." ((emacs (24 3))) tar "melpa" nil nil nil])
  (second-sel [cl-struct-package-desc second-sel (20150104 1646) "Secondary selection commands" nil single "melpa" nil ((:url . "http://www.emacswiki.org/second-sel.el") (:keywords "region" "selection" "yank" "paste" "edit")) nil])
  (seeing-is-believing [cl-struct-package-desc seeing-is-believing (20151010 1029) "minor mode for running the seeing-is-believing ruby gem" nil single "melpa" nil nil nil])
  (sekka [cl-struct-package-desc sekka (20150708 459) "A client for Sekka IME server" ((cl-lib (0 3)) (concurrent (0 3 1)) (popup (0 5 2))) single "melpa" nil ((:url . "https://github.com/kiyoka/sekka") (:keywords "ime" "skk" "japanese")) nil] [cl-struct-package-desc sekka (1 6 4) "A client for Sekka IME server" ((cl-lib (0 3)) (concurrent (0 3 1)) (popup (0 5 2))) single "melpa-stable" nil ((:url . "https://github.com/kiyoka/sekka") (:keywords "ime" "skk" "japanese")) nil])
  (semi [cl-struct-package-desc semi (20150525 419) "A library to provide MIME features." ((flim (1 14 9))) tar "melpa" nil nil nil])
  (sentence-navigation [cl-struct-package-desc sentence-navigation (20150914 2146) "Commands to navigate one-spaced sentences." ((ample-regexps (0 1)) (emacs (24 4))) single "melpa" nil ((:url . "https://github.com/noctuid/emacs-sentence-navigation") (:keywords "sentence" "evil")) nil])
  (seoul256-theme [cl-struct-package-desc seoul256-theme (20150714 1535) "No description available." nil single "melpa" nil nil nil])
  (sequential-command [cl-struct-package-desc sequential-command (20150407 1747) "Many commands into one command" nil tar "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/sequential-command.el") (:keywords "convenience" "lisp")) nil])
  (servant [cl-struct-package-desc servant (20140216 419) "ELPA server written in Emacs Lisp" ((s (1 8 0)) (dash (2 2 0)) (f (0 11 0)) (ansi (0 3 0)) (commander (0 5 0)) (epl (0 2)) (shut-up (0 2 1)) (web-server (0 0 1))) tar "melpa" nil ((:url . "http://github.com/rejeep/servant.el") (:keywords "elpa" "server")) nil] [cl-struct-package-desc servant (0 3 0) "ELPA server written in Emacs Lisp" ((s (1 8 0)) (dash (2 2 0)) (f (0 11 0)) (ansi (0 3 0)) (commander (0 5 0)) (epl (0 2)) (shut-up (0 2 1)) (web-server (0 0 1))) tar "melpa-stable" nil ((:url . "http://github.com/rejeep/servant.el") (:keywords "elpa" "server")) nil])
  (serverspec [cl-struct-package-desc serverspec (20150623 455) "Serverspec minor mode" ((dash (2 6 0)) (s (1 9 0)) (f (0 16 2)) (helm (1 6 1))) tar "melpa" nil ((:url . "http://101000lab.org")) nil] [cl-struct-package-desc serverspec (0 0 7) "Serverspec minor mode" ((dash (2 6 0)) (s (1 9 0)) (f (0 16 2)) (helm (1 6 1))) tar "melpa-stable" nil ((:url . "http://101000lab.org")) nil])
  (seti-theme [cl-struct-package-desc seti-theme (20150314 122) "A dark colored theme, inspired by Seti Atom Theme" nil single "melpa" nil ((:url . "https://github.com/caisah/seti-theme") (:keywords "themes")) nil])
  (sexp-move [cl-struct-package-desc sexp-move (20150915 1030) "Improved S-Expression Movement" nil single "melpa" nil ((:url . "https://gitlab.com/elzair/sexp-move") (:keywords "sexp")) nil] [cl-struct-package-desc sexp-move (0 2 6) "Improved S-Expression Movement" nil single "melpa-stable" nil ((:url . "https://gitlab.com/elzair/sexp-move") (:keywords "sexp")) nil])
  (shader-mode [cl-struct-package-desc shader-mode (20151030 704) "Major mode for shader" ((emacs (24))) single "melpa" nil ((:url . "https://github.com/midnightSuyama/shader-mode")) nil])
  (shadow [cl-struct-package-desc shadow (20110507 24) "That's not the file. That's shadow." nil single "melpa" nil ((:keywords "shadow.vim" "files" "processes")) nil])
  (shakespeare-mode [cl-struct-package-desc shakespeare-mode (20150708 712) "A major mode for editing Shakespearean templates." nil single "melpa" nil ((:url . "http://github.com/CodyReichert/shakespeare-mode") (:keywords "shakespeare" "hamlet" "lucius" "julius" "mode")) nil])
  (shampoo [cl-struct-package-desc shampoo (20131230 219) "A remote Smalltalk development mode" nil tar "melpa" nil nil nil] [cl-struct-package-desc shampoo (0 0 1) "Shampoo, a remote Smalltalk developemnt" nil tar "melpa-stable" nil nil nil])
  (shell-command [cl-struct-package-desc shell-command (20090621 632) "enables tab-completion for `shell-command'" nil single "melpa" nil ((:keywords "shell")) nil])
  (shell-current-directory [cl-struct-package-desc shell-current-directory (20140101 1554) "create new shell based on buffer directory" nil single "melpa" nil ((:keywords "shell" "comint")) nil])
  (shell-history [cl-struct-package-desc shell-history (20100504 150) "integration with shell history" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/shell-history.el") (:keywords "processes" "convenience")) nil])
  (shell-split-string [cl-struct-package-desc shell-split-string (20150202 2036) "Split strings using shell-like syntax" nil single "melpa" nil ((:url . "https://github.com/10sr/shell-split-string-el") (:keywords "utility" "library" "shell" "string")) nil] [cl-struct-package-desc shell-split-string (0 1) "Split strings using shell-like syntax" nil single "melpa-stable" nil ((:url . "https://github.com/10sr/shell-split-string-el") (:keywords "utility" "library" "shell" "string")) nil])
  (shell-toggle [cl-struct-package-desc shell-toggle (20150226 611) "Toggle to and from the shell buffer" nil single "melpa" nil ((:url . "https://github.com/knu/shell-toggle.el") (:keywords "processes")) nil] [cl-struct-package-desc shell-toggle (1 3 1) "Toggle to and from the shell buffer" nil single "melpa-stable" nil ((:url . "https://github.com/knu/shell-toggle.el") (:keywords "processes")) nil])
  (shelldoc [cl-struct-package-desc shelldoc (20141230 534) "shell command editing support with man page." ((cl-lib (0 3)) (s (1 9 0))) single "melpa" nil ((:url . "http://github.com/mhayashi1120/Emacs-shelldoc/raw/master/shelldoc.el") (:keywords "applications")) nil] [cl-struct-package-desc shelldoc (0 0 5) "shell command editing support with man page." ((cl-lib (0 3)) (s (1 9 0))) single "melpa-stable" nil ((:url . "http://github.com/mhayashi1120/Emacs-shelldoc/raw/master/shelldoc.el") (:keywords "applications")) nil])
  (shelltest-mode [cl-struct-package-desc shelltest-mode (20141227 248) "Major mode for shelltestrunner" nil single "melpa" nil ((:url . "https://github.com/rtrn/shelltest-mode") (:keywords "languages")) nil] [cl-struct-package-desc shelltest-mode (1 1) "Major mode for shelltestrunner" nil single "melpa-stable" nil ((:url . "https://github.com/rtrn/shelltest-mode") (:keywords "languages")) nil])
  (shift-text [cl-struct-package-desc shift-text (20130831 955) "Move the region in 4 directions, in a way similar to Eclipse's" ((cl-lib (1 0)) (es-lib (0 3))) single "melpa" nil ((:url . "https://github.com/sabof/shift-text")) nil])
  (shimbun [cl-struct-package-desc shimbun (20120718 2038) "interfacing with web newspapers" nil tar "melpa" nil ((:keywords "news")) nil])
  (shm [cl-struct-package-desc shm (20150526 124) "Structured Haskell Mode" nil tar "melpa" nil ((:keywords "development" "haskell" "structured")) nil] [cl-struct-package-desc shm (1 0 20) "Structured Haskell Mode" nil tar "melpa-stable" nil ((:keywords "development" "haskell" "structured")) nil])
  (shoulda [cl-struct-package-desc shoulda (20140616 1133) "Shoulda test support for ruby" ((cl-lib (0 5))) single "melpa" nil ((:keywords "ruby" "tests" "shoulda")) nil])
  (showkey [cl-struct-package-desc showkey (20150527 848) "Show keys as you use them." nil single "melpa" nil ((:url . "http://www.emacswiki.org/showkey.el") (:keywords "help" "keys" "mouse")) nil])
  (showtip [cl-struct-package-desc showtip (20080329 1959) "Show tip at cursor" nil single "melpa" nil ((:keywords "help")) nil])
  (shpec-mode [cl-struct-package-desc shpec-mode (20150530 222) "Minor mode for shpec specification" nil single "melpa" nil ((:url . "http://github.com/shpec/shpec-mode") (:keywords "languages" "tools")) nil] [cl-struct-package-desc shpec-mode (0 1 0) "Minor mode for shpec specification" nil single "melpa-stable" nil ((:url . "http://github.com/shpec/shpec-mode") (:keywords "languages" "tools")) nil])
  (shrink-whitespace [cl-struct-package-desc shrink-whitespace (20150916 1215) "Whitespace removal DWIM key" nil single "melpa" nil ((:url . "https://github.com/jcpetkovich/shrink-whitespace.el") (:keywords "editing")) nil] [cl-struct-package-desc shrink-whitespace (0 0 1) "Whitespace removal DWIM key" nil single "melpa-stable" nil ((:url . "https://github.com/jcpetkovich/shrink-whitespace.el") (:keywords "editing")) nil])
  (shut-up [cl-struct-package-desc shut-up (20150423 522) "Shut up would you!" ((cl-lib (0 3)) (emacs (24))) single "melpa" nil ((:url . "http://github.com/rejeep/shut-up.el")) nil] [cl-struct-package-desc shut-up (0 3 2) "Shut up would you!" ((cl-lib (0 3)) (emacs (24))) single "melpa-stable" nil ((:url . "http://github.com/rejeep/shut-up.el")) nil])
  (sicp [cl-struct-package-desc sicp (20121014 1314) "No description available." nil tar "melpa" nil nil nil])
  (signature [cl-struct-package-desc signature (20140730 1249) "Signature Survey" nil tar "melpa" nil nil nil])
  (simple+ [cl-struct-package-desc simple+ (20150616 1322) "Extensions to standard library `simple.el'." ((strings (0))) single "melpa" nil ((:url . "http://www.emacswiki.org/simple%2b.el") (:keywords "internal" "lisp" "extensions" "abbrev")) nil])
  (simple-call-tree+ [cl-struct-package-desc simple-call-tree+ (20131009 712) "Extensions to simple-call-tree" nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/simple-call-tree+.el") (:keywords "programming")) nil])
  (simple-call-tree [cl-struct-package-desc simple-call-tree (20150806 1133) "analyze source code based on font-lock text-properties" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki.pl?CallTree") (:keywords "programming")) nil])
  (simple-mpc [cl-struct-package-desc simple-mpc (20150802 206) "provides a simple interface to mpc" nil tar "melpa" nil ((:keywords "multimedia" "mpd" "mpc")) nil])
  (simple-rtm [cl-struct-package-desc simple-rtm (20140926 439) "Interactive Emacs mode for Remember The Milk" nil tar "melpa" nil ((:keywords "remember" "the" "milk" "productivity" "todo")) nil])
  (simple-screen [cl-struct-package-desc simple-screen (20141023 758) "Simple screen configuration manager" nil single "melpa" nil ((:url . "https://github.com/wachikun/simple-screen") (:keywords "tools")) nil])
  (simplenote [cl-struct-package-desc simplenote (20141118 640) "Interact with simple-note.appspot.com" nil single "melpa" nil ((:keywords "simplenote")) nil])
  (simplenote2 [cl-struct-package-desc simplenote2 (20150630 716) "Interact with simple-note.appspot.com" ((request-deferred (0 2 0))) single "melpa" nil ((:keywords "simplenote")) nil] [cl-struct-package-desc simplenote2 (2 2 2) "Interact with simple-note.appspot.com" ((request-deferred (0 2 0))) single "melpa-stable" nil ((:keywords "simplenote")) nil])
  (skeletor [cl-struct-package-desc skeletor (20150228 1557) "Provides project skeletons for Emacs" ((s (1 7 0)) (f (0 14 0)) (dash (2 2 0)) (cl-lib (0 3)) (let-alist (1 0 3)) (emacs (24 1))) tar "melpa" nil nil nil] [cl-struct-package-desc skeletor (1 5 1) "Provides project skeletons for Emacs" ((s (1 7 0)) (f (0 14 0)) (dash (2 2 0)) (cl-lib (0 3)) (let-alist (1 0 3)) (emacs (24 1))) tar "melpa-stable" nil nil nil])
  (skewer-reload-stylesheets [cl-struct-package-desc skewer-reload-stylesheets (20150111 423) "live-edit CSS stylesheets." ((skewer-mode (1 5 3))) tar "melpa" nil nil nil])
  (skype [cl-struct-package-desc skype (20131001 2118) "skype UI for emacs users.." nil tar "melpa" nil ((:keywords "skype" "chat")) nil])
  (slideview [cl-struct-package-desc slideview (20150324 1540) "File slideshow" ((cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/mhayashi1120/Emacs-slideview") (:keywords "files")) nil] [cl-struct-package-desc slideview (0 6 1) "File slideshow" nil single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-slideview/raw/master/slideview.el") (:keywords "files")) nil])
  (slime-annot [cl-struct-package-desc slime-annot (20131230 1908) "cl-annot support for SLIME" ((slime (0))) single "melpa" nil ((:url . "https://github.com/arielnetworks/cl-annot")) nil])
  (slime-company [cl-struct-package-desc slime-company (20150703 718) "slime completion backend for company mode" ((slime (2 13)) (company (0 9 0))) single "melpa" nil ((:keywords "convenience" "lisp" "abbrev")) nil] [cl-struct-package-desc slime-company (0 9 1) "slime completion backend for company mode" ((slime (2 3 2)) (company (0 7))) single "melpa-stable" nil ((:keywords "convenience" "lisp" "abbrev")) nil])
  (slime-theme [cl-struct-package-desc slime-theme (20141115 2302) "an Emacs 24 theme based on Slime (tmTheme)" ((emacs (24 0))) single "melpa" nil ((:url . "https://github.com/emacsfodder/tmtheme-to-deftheme")) nil])
  (slime-volleyball [cl-struct-package-desc slime-volleyball (20140717 2141) "An SVG Slime Volleyball Game" nil tar "melpa" nil ((:keywords "games")) nil] [cl-struct-package-desc slime-volleyball (1 1) "An SVG Slime Volleyball Game" nil tar "melpa-stable" nil ((:keywords "games")) nil])
  (slovak-holidays [cl-struct-package-desc slovak-holidays (20150418 155) "Adds a list of slovak holidays to Emacs calendar" nil single "melpa" nil ((:keywords "calendar")) nil])
  (sly [cl-struct-package-desc sly (20151113 756) "Sylvester the Cat's Common Lisp IDE" ((emacs (24 3))) tar "melpa" nil ((:url . "https://github.com/capitaomorte/sly") (:keywords "languages" "lisp" "sly")) nil] [cl-struct-package-desc sly (2 14) "No description available." nil tar "melpa-stable" nil nil nil])
  (sly-company [cl-struct-package-desc sly-company (20141116 1417) "sly completion backend for company mode" ((sly (1 0 0 -3)) (company (0 7)) (emacs (24 3))) single "melpa" nil ((:keywords "convenience" "lisp" "abbrev")) nil] [cl-struct-package-desc sly-company (0 8) "sly completion backend for company mode" ((sly (1 0 0 -3)) (company (0 7)) (emacs (24 3))) single "melpa-stable" nil ((:keywords "convenience" "lisp" "abbrev")) nil])
  (sly-named-readtables [cl-struct-package-desc sly-named-readtables (20150817 816) "Support named readtables in Common Lisp files" ((sly (1 0 0 -2 2))) tar "melpa" nil ((:url . "https://github.com/capitaomorte/sly-named-readtables") (:keywords "languages" "lisp" "sly")) nil])
  (smart-compile [cl-struct-package-desc smart-compile (20150519 947) "an interface to `compile'" nil single "melpa" nil ((:keywords "tools" "unix")) nil])
  (smart-cursor-color [cl-struct-package-desc smart-cursor-color (20141124 919) "Change cursor color dynamically" nil single "melpa" nil ((:url . "https://github.com/7696122/smart-cursor-color/") (:keywords "cursor" "color" "face")) nil])
  (smart-indent-rigidly [cl-struct-package-desc smart-indent-rigidly (20141205 1615) "Smart rigid indenting" nil single "melpa" nil ((:url . "https://github.com/re5et/smart-indent-rigidly") (:keywords "indenting" "coffee-mode" "haml-mode" "sass-mode")) nil])
  (smart-mark [cl-struct-package-desc smart-mark (20150911 1910) "Restore point after C-g when mark" nil single "melpa" nil ((:keywords "mark" "restore")) nil])
  (smart-mode-line [cl-struct-package-desc smart-mode-line (20150803 338) "A color coded smart mode-line." ((emacs (24 3)) (rich-minority (0 1 1))) tar "melpa" nil ((:url . "http://github.com/Malabarba/smart-mode-line") (:keywords "mode-line" "faces" "themes")) nil] [cl-struct-package-desc smart-mode-line (2 9) "A color coded smart mode-line." ((emacs (24 3)) (rich-minority (0 1 1))) tar "melpa-stable" nil ((:url . "http://github.com/Malabarba/smart-mode-line") (:keywords "mode-line" "faces" "themes")) nil])
  (smart-mode-line-powerline-theme [cl-struct-package-desc smart-mode-line-powerline-theme (20150426 910) "smart-mode-line theme that mimics the powerline appearance." ((emacs (24 3)) (powerline (2 2)) (smart-mode-line (2 5))) single "melpa" nil ((:url . "http://github.com/Bruce-Connor/smart-mode-line") (:keywords "mode-line" "faces" "themes")) nil] [cl-struct-package-desc smart-mode-line-powerline-theme (2 9) "smart-mode-line theme that mimics the powerline appearance." ((emacs (24 3)) (powerline (2 2)) (smart-mode-line (2 5))) single "melpa-stable" nil ((:url . "http://github.com/Bruce-Connor/smart-mode-line") (:keywords "mode-line" "faces" "themes")) nil])
  (smart-newline [cl-struct-package-desc smart-newline (20131207 1940) "Provide smart newline for one keybind." nil single "melpa" nil nil nil])
  (smart-region [cl-struct-package-desc smart-region (20150903 703) "Smartly select region, rectangle, multi cursors" ((emacs (24 4)) (expand-region (0 10 0)) (multiple-cursors (1 3 0)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/uk-ar/smart-region") (:keywords "marking" "region")) nil])
  (smart-shift [cl-struct-package-desc smart-shift (20150202 2325) "Smart shift text left/right." nil single "melpa" nil ((:url . "https://github.com/hbin/smart-shift") (:keywords "convenience" "tools")) nil])
  (smart-tabs-mode [cl-struct-package-desc smart-tabs-mode (20140331 1629) "Intelligently indent with tabs, align with spaces!" nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/SmartTabs") (:keywords "languages")) nil] [cl-struct-package-desc smart-tabs-mode (1 0) "Intelligently indent with tabs, align with spaces!" nil single "melpa-stable" nil ((:url . "http://www.emacswiki.org/emacs/SmartTabs") (:keywords "languages")) nil])
  (smartscan [cl-struct-package-desc smartscan (20131230 739) "Jumps between other symbols found at point" nil single "melpa" nil ((:keywords "extensions")) nil] [cl-struct-package-desc smartscan (0 2) "Jumps between other symbols found at point" nil single "melpa-stable" nil ((:keywords "extensions")) nil])
  (smarty-mode [cl-struct-package-desc smarty-mode (20100703 458) "major mode for editing smarty templates" nil single "melpa" nil ((:url . "none yet") (:keywords "smarty" "php" "languages" "templates")) nil])
  (smeargle [cl-struct-package-desc smeargle (20151013 2242) "Highlighting region by last updated time" ((cl-lib (0 5)) (emacs (24))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-smeargle")) nil] [cl-struct-package-desc smeargle (0 2) "Highlighting region by last updated time" ((cl-lib (0 5)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-smeargle")) nil])
  (smotitah [cl-struct-package-desc smotitah (20150218 230) "Modular emacs configuration framework" nil tar "melpa" nil nil nil])
  (smyx-theme [cl-struct-package-desc smyx-theme (20141127 28) "smyx Color Theme" nil single "melpa" nil ((:keywords "color" "theme" "smyx")) nil])
  (snakemake-mode [cl-struct-package-desc snakemake-mode (20151103 2003) "Major mode for editing Snakemake files" ((emacs (24))) tar "melpa" nil ((:url . "https://github.com/kyleam/snakemake-mode") (:keywords "tools")) nil])
  (snapshot-timemachine [cl-struct-package-desc snapshot-timemachine (20150501 1100) "Step through (Btrfs, ZFS, ...) snapshots of files" ((emacs (24 4)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/mrBliss/snapshot-timemachine")) nil])
  (snippet [cl-struct-package-desc snippet (20130210 1515) "Insert snippets of text into a buffer" nil single "melpa" nil nil nil])
  (soft-charcoal-theme [cl-struct-package-desc soft-charcoal-theme (20140420 943) "Dark charcoal theme with soft colors" nil single "melpa" nil ((:url . "http://github.com/mswift42/soft-charcoal-theme")) nil])
  (soft-morning-theme [cl-struct-package-desc soft-morning-theme (20150918 1341) "Emacs24 theme with a light background." nil single "melpa" nil ((:url . "http://github.com/mswift42/soft-morning-theme")) nil])
  (soft-stone-theme [cl-struct-package-desc soft-stone-theme (20140614 135) "Emacs 24 theme with a light background." ((emacs (24))) single "melpa" nil ((:url . "http://github.com/mswift42/soft-stone-theme")) nil])
  (solidity-mode [cl-struct-package-desc solidity-mode (20151112 108) "Major mode for ethereum's solidity language" nil single "melpa" nil ((:keywords "languages")) nil])
  (sonic-pi [cl-struct-package-desc sonic-pi (20150919 330) "A Emacs client for SonicPi" ((cl-lib (0 5)) (osc (0 1)) (dash (2 2 0)) (emacs (24))) tar "melpa" nil ((:url . "http://www.github.com/repl-electric/sonic-pi.el") (:keywords "sonicpi" "ruby")) nil])
  (sos [cl-struct-package-desc sos (20141214 2003) "StackOverflow Search" ((org (7))) single "melpa" nil ((:url . "https://github.com/omouse/emacs-sos") (:keywords "tools" "search" "questions")) nil] [cl-struct-package-desc sos (0 1) "StackOverflow Search" ((org (7))) single "melpa-stable" nil ((:url . "https://github.com/omouse/emacs-sos") (:keywords "tools" "search" "questions")) nil])
  (sotclojure [cl-struct-package-desc sotclojure (20150914 1656) "Write clojure at the speed of thought." ((emacs (24 1)) (clojure-mode (4 0 0)) (cider (0 8)) (sotlisp (1 3))) single "melpa" nil ((:url . "https://github.com/Malabarba/speed-of-thought-clojure") (:keywords "convenience" "clojure")) nil])
  (sound-wav [cl-struct-package-desc sound-wav (20140303 457) "Play wav file" ((deferred (0 3 1)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-sound-wav")) nil] [cl-struct-package-desc sound-wav (0 1) "Play wav file" ((deferred (0 3 1)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-sound-wav")) nil])
  (soundcloud [cl-struct-package-desc soundcloud (20150501 2026) "a SoundCloud client for Emacs" ((emms (20131016)) (json (1 2)) (deferred (0 3 1)) (string-utils (0 3 2)) (request (20140316 417)) (request-deferred (20130526 1015))) single "melpa" nil ((:keywords "soundcloud" "music" "audio")) nil])
  (soundklaus [cl-struct-package-desc soundklaus (20150102 1321) "Play SoundCloud music in Emacs via EMMS" ((dash (1 5 0)) (emacs (24)) (emms (3 0)) (deferred (0 3 2)) (s (1 6 0)) (pkg-info (0 4)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/r0man/soundklaus.el") (:keywords "soundcloud" "music" "emms")) nil])
  (sourcegraph [cl-struct-package-desc sourcegraph (20150403 1927) "Minor mode for srclib" ((emacs (24 3))) single "melpa" nil ((:url . "https://github.com/sourcegraph/emacs-sourcegraph-mode") (:keywords "sourcegraph")) nil])
  (sourcemap [cl-struct-package-desc sourcemap (20150418 700) "Sourcemap parser" ((cl-lib (0 5)) (emacs (24))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-sourcemap")) nil] [cl-struct-package-desc sourcemap (0 2) "Sourcemap parser" ((cl-lib (0 5)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-sourcemap")) nil])
  (spacegray-theme [cl-struct-package-desc spacegray-theme (20150719 1231) "A Hyperminimal UI Theme" ((emacs (24 1))) single "melpa" nil ((:url . "http://github.com/bruce/emacs-spacegray-theme") (:keywords "themes")) nil])
  (spaceline [cl-struct-package-desc spaceline (20151109 121) "Modeline configuration library for powerline" ((emacs (24)) (cl-lib (0 5)) (powerline (2 3)) (dash (2 11 0)) (s (1 10 0))) tar "melpa" nil ((:url . "https://github.com/TheBB/spaceline") (:keywords "mode-line" "powerline" "spacemacs")) nil])
  (spacemacs-theme [cl-struct-package-desc spacemacs-theme (20151106 1501) "Color theme with a dark and light versions" nil tar "melpa" nil ((:keywords "color" "theme") (:url . "https://github.com/nashamri/spacemacs-theme")) nil])
  (spaces [cl-struct-package-desc spaces (20130610 49) "Create and switch between named window configurations." nil single "melpa" nil ((:url . "https://github.com/chumpage/chumpy-windows") (:keywords "frames" "convenience")) nil])
  (speech-tagger [cl-struct-package-desc speech-tagger (20150902 2202) "tag parts of speech using coreNLP" ((cl-lib (0 5))) tar "melpa" nil ((:url . "https://github.com/cosmicexplorer/speech-tagger") (:keywords "speech" "tag" "nlp" "language" "corenlp" "parsing" "natural")) nil] [cl-struct-package-desc speech-tagger (0 0 0) "No description available." nil single "melpa-stable" nil nil nil])
  (speechd-el [cl-struct-package-desc speechd-el (20141025 912) "Client to speech synthesizers and Braille displays." nil tar "melpa" nil nil nil])
  (speed-type [cl-struct-package-desc speed-type (20150120 2034) "Practice touch and speed typing" ((cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/hagleitn/speed-type") (:keywords "games")) nil])
  (sphinx-doc [cl-struct-package-desc sphinx-doc (20150616 1150) "Sphinx friendly docstrings for Python functions" ((s (1 9 0)) (cl-lib (0 5)) (dash (2 10 0))) single "melpa" nil ((:url . "https://github.com/naiquevin/sphinx-doc.el") (:keywords "sphinx" "python")) nil] [cl-struct-package-desc sphinx-doc (0 1 0) "Sphinx friendly docstrings for Python functions" ((s (1 9 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/naiquevin/sphinx-doc.el") (:keywords "sphinx" "python")) nil])
  (sphinx-frontend [cl-struct-package-desc sphinx-frontend (20131223 329) "Launch build process for rst documents via sphinx." nil single "melpa" nil ((:url . "https://github.com/kostafey/sphinx-frontend") (:keywords "compile" "sphinx" "restructuredtext")) nil])
  (splitjoin [cl-struct-package-desc splitjoin (20150505 732) "Transition between multiline and single-line code" ((cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-splitjoin")) nil] [cl-struct-package-desc splitjoin (0 1) "splitjoin" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-splitjoin")) nil])
  (splitter [cl-struct-package-desc splitter (20130705 50) "Manage window splits" nil single "melpa" nil ((:url . "https://github.com/chumpage/chumpy-windows") (:keywords "frames" "convenience")) nil])
  (spotlight [cl-struct-package-desc spotlight (20150929 55) "search files with Mac OS X spotlight" ((emacs (24 1)) (swiper (0 6 0)) (counsel (0 6 0))) single "melpa" nil ((:url . "http://www.pragmaticemacs.com") (:keywords "search" "external")) nil])
  (spray [cl-struct-package-desc spray (20150625 2345) "a speed reading mode" nil single "melpa" nil ((:url . "https://github.com/ian-kelling/spray") (:keywords "convenience")) nil])
  (springboard [cl-struct-package-desc springboard (20150505 1011) "Temporarily change default-directory for one command" ((helm (1 6 9))) single "melpa" nil ((:url . "https://github.com/jwiegley/springboard") (:keywords "helm")) nil])
  (sqlite [cl-struct-package-desc sqlite (20150416 2215) "use sqlite via elisp" nil single "melpa" nil nil nil])
  (sqlplus [cl-struct-package-desc sqlplus (20141009 739) "User friendly interface to SQL*Plus and support for PL/SQL compilation" nil single "melpa" nil ((:keywords "sql" "sqlplus" "oracle" "plsql")) nil])
  (sqlup-mode [cl-struct-package-desc sqlup-mode (20151004 906) "Upcase SQL words for you" nil single "melpa" nil ((:url . "https://github.com/trevoke/sqlup-mode.el") (:keywords "sql" "tools")) nil] [cl-struct-package-desc sqlup-mode (0 5 3) "Upcase SQL words for you" nil single "melpa-stable" nil ((:url . "https://github.com/trevoke/sqlup-mode.el") (:keywords "sql" "tools")) nil])
  (srefactor [cl-struct-package-desc srefactor (20150804 2254) "A refactoring tool based on Semantic parser framework" ((emacs (24 4))) tar "melpa" nil ((:url . "https://github.com/tuhdo/semantic-refactor") (:keywords "c" "languages" "tools")) nil] [cl-struct-package-desc srefactor (0 5) "A refactoring tool based on Semantic parser framework" ((emacs (24 4))) tar "melpa-stable" nil ((:url . "https://github.com/tuhdo/semantic-refactor") (:keywords "c" "languages" "tools")) nil])
  (ssh-agency [cl-struct-package-desc ssh-agency (20150929 747) "use ssh-agent on win32 from Emacs" ((emacs (24 4)) (dash (2 10 0))) single "melpa" nil ((:url . "https://github.com/magit/ssh-agency")) nil])
  (ssh-config-mode [cl-struct-package-desc ssh-config-mode (20141219 846) "Mode for fontification of ~/.ssh/config" nil single "melpa" nil ((:url . "http://www.mahalito.net/~harley/elisp/ssh-config-mode.el") (:keywords "ssh" "config" "emacs")) nil])
  (ssh-tunnels [cl-struct-package-desc ssh-tunnels (20141219 318) "Manage SSH tunnels" ((cl-lib (0 5)) (emacs (24))) single "melpa" nil ((:url . "http://github.com/death/ssh-tunnels") (:keywords "tools" "convenience")) nil])
  (stack-mode [cl-struct-package-desc stack-mode (20150923 823) "A minor mode enabling various features based on stack-ide." ((haskell-mode (13 14)) (cl-lib (0 5)) (flycheck (0 23))) tar "melpa" nil ((:url . "https://github.com/commercialhaskell/stack-ide") (:keywords "haskell" "stack")) nil])
  (stan-mode [cl-struct-package-desc stan-mode (20150829 2015) "Major mode for editing Stan files" nil tar "melpa" nil ((:url . "http://github.com/stan-dev/stan-mode") (:keywords "languanges")) nil] [cl-struct-package-desc stan-mode (7 1 0) "Major mode for editing Stan files" nil tar "melpa-stable" nil ((:url . "http://github.com/stan-dev/stan-mode") (:keywords "languanges")) nil])
  (stan-snippets [cl-struct-package-desc stan-snippets (20150728 2054) "Yasnippets for Stan" ((stan-mode (6 0 0)) (yasnippet (0 8 0))) tar "melpa" nil ((:url . "http://github.com/stan-dev/stan-mode") (:keywords "snippets")) nil] [cl-struct-package-desc stan-snippets (7 1 0) "Yasnippets for Stan" ((stan-mode (7 1 0)) (yasnippet (0 8 0))) tar "melpa-stable" nil ((:url . "http://github.com/stan-dev/stan-mode") (:keywords "snippets")) nil])
  (standoff-mode [cl-struct-package-desc standoff-mode (20150628 1642) "Create stand-off markup, also called external markup." nil tar "melpa" nil nil nil])
  (starter-kit-perl [cl-struct-package-desc starter-kit-perl (20120202 1132) "Some helpful Perl code" nil single "melpa" nil nil nil] [cl-struct-package-desc starter-kit-perl (2 0 3) "Some helpful Perl code" nil single "melpa-stable" nil nil nil])
  (stash [cl-struct-package-desc stash (20150201 1221) "lightweight persistent caching" nil single "melpa" nil ((:url . "https://www.github.com/vermiculus/stash.el/") (:keywords "extensions" "data" "internal" "lisp")) nil] [cl-struct-package-desc stash (0 4 1) "lightweight persistent caching" nil single "melpa-stable" nil ((:url . "https://www.github.com/vermiculus/stash.el/") (:keywords "extensions" "data" "internal" "lisp")) nil])
  (state [cl-struct-package-desc state (20151103 247) "Quick navigation between workspaces" ((emacs (24))) single "melpa" nil ((:url . "https://github.com/thisirs/state.git") (:keywords "convenience" "workspaces")) nil])
  (stekene-theme [cl-struct-package-desc stekene-theme (20141108 1211) "Low-contrast (except for strings) theme, in light and dark versions." ((emacs (24))) tar "melpa" nil nil nil] [cl-struct-package-desc stekene-theme (1 0 15) "Low-contrast (except for strings) theme, in light and dark versions." ((emacs (24))) tar "melpa-stable" nil nil nil])
  (stem [cl-struct-package-desc stem (20131102 409) "Routines for stemming" nil single "melpa" nil ((:url . "https://github.com/yuutayamada/stem") (:keywords "stemming")) nil])
  (stgit [cl-struct-package-desc stgit (20140213 348) "major mode for StGit interaction" nil single "melpa" nil ((:url . "http://www.procode.org/stgit")) nil] [cl-struct-package-desc stgit (0 17 1) "No description available." nil single "melpa-stable" nil nil nil])
  (sticky [cl-struct-package-desc sticky (20101129 1852) "Sticky key for capital letters" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/sticky.el") (:keywords "convenience")) nil])
  (stickyfunc-enhance [cl-struct-package-desc stickyfunc-enhance (20150429 1114) "An enhancement to stock `semantic-stickyfunc-mode'" ((emacs (24 3))) single "melpa" nil ((:url . "https://github.com/tuhdo/semantic-stickyfunc-enhance") (:keywords "c" "languages" "tools")) nil])
  (stock-ticker [cl-struct-package-desc stock-ticker (20150204 252) "Show stock prices in mode line" ((s (1 9 0)) (request (0 2 0))) single "melpa" nil ((:url . "https://github.com/hagleitn/stock-ticker") (:keywords "comms")) nil])
  (strie [cl-struct-package-desc strie (20140109 612) "A simple trie data structure implementation" nil single "melpa" nil nil nil])
  (string-inflection [cl-struct-package-desc string-inflection (20150805 256) "underscore -> UPCASE -> CamelCase -> lowerCamelCase conversion of names" nil single "melpa" nil ((:keywords "elisp")) nil])
  (strings [cl-struct-package-desc strings (20150805 1552) "Miscellaneous string functions." nil single "melpa" nil ((:url . "http://www.emacswiki.org/strings.el") (:keywords "internal" "strings" "text")) nil])
  (stumpwm-mode [cl-struct-package-desc stumpwm-mode (20140130 1816) "special lisp mode for evaluating code into running stumpwm" nil single "melpa" nil ((:keywords "comm" "lisp" "tools")) nil] [cl-struct-package-desc stumpwm-mode (0 9 8) "special lisp mode for evaluating code into running stumpwm" nil single "melpa-stable" nil ((:keywords "comm" "lisp" "tools")) nil])
  (stupid-indent-mode [cl-struct-package-desc stupid-indent-mode (20130816 1354) "Plain stupid indentation minor mode" nil single "melpa" nil nil nil])
  (subatomic256-theme [cl-struct-package-desc subatomic256-theme (20130620 1910) "Fork of subatomic-theme for terminals." nil single "melpa" nil ((:url . "https://github.com/cryon/subatomic256")) nil])
  (subemacs [cl-struct-package-desc subemacs (20150830 854) "Evaluating expressions in a fresh Emacs subprocess" nil single "melpa" nil ((:url . "https://github.com/kbauer/subemacs") (:keywords "extensions" "lisp" "multiprocessing")) nil])
  (sublime-themes [cl-struct-package-desc sublime-themes (20150915 3) "A collection of themes based on Sublime Text" nil tar "melpa" nil ((:keywords "faces")) nil])
  (sublimity [cl-struct-package-desc sublimity (20150918 1217) "smooth-scrolling, minimap and distraction-free mode" nil tar "melpa" nil ((:url . "http://hins11.yu-yake.com/")) nil])
  (subr+ [cl-struct-package-desc subr+ (20150104 1655) "Extensions to standard library `subr.el'." nil single "melpa" nil ((:url . "http://www.emacswiki.org/simple%2b.el") (:keywords "strings" "text")) nil])
  (sudo-ext [cl-struct-package-desc sudo-ext (20130130 1351) "sudo support" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/sudo-ext.el") (:keywords "unix")) nil])
  (summarye [cl-struct-package-desc summarye (20130328 327) "list up matched strings from a buffer, and display them in summary buffer" nil single "melpa" nil nil nil])
  (sunny-day-theme [cl-struct-package-desc sunny-day-theme (20140413 1425) "Emacs24 theme with a light background." nil single "melpa" nil ((:url . "http://github.com/mswift42/sunny-day-theme")) nil])
  (sunshine [cl-struct-package-desc sunshine (20151013 614) "Provide weather and forecast information." ((cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/aaronbieber/sunshine.el") (:keywords "tools" "weather")) nil])
  (svg-mode-line-themes [cl-struct-package-desc svg-mode-line-themes (20150425 1306) "SVG-based themes for mode-line" ((xmlgen (0 4))) tar "melpa" nil ((:url . "https://github.com/sabof/svg-mode-line-themes")) nil] [cl-struct-package-desc svg-mode-line-themes (0 1 3) "SVG-based themes for mode-line" ((xmlgen (0 4))) tar "melpa-stable" nil ((:url . "https://github.com/sabof/svg-mode-line-themes")) nil])
  (swap-buffers [cl-struct-package-desc swap-buffers (20150506 1439) "The quickest way to swap buffers between windows. Based on switch-window package." nil single "melpa" nil ((:url . "https://github.com/ekazakov/swap-buffers") (:keywords "window" "swap" "buffer" "exchange")) nil])
  (swbuff [cl-struct-package-desc swbuff (20041012 718) "Quick switch between Emacs buffers." nil single "melpa" nil ((:keywords "extensions" "convenience")) nil])
  (swbuff-x [cl-struct-package-desc swbuff-x (20130607 314) "Modifications to David Ponce's swbuff" ((swbuff (19991231 1800))) single "melpa" nil ((:url . "http://www.emacswiki.org/elisp/swbuff-x.el") (:keywords "files" "convenience")) nil])
  (sweetgreen [cl-struct-package-desc sweetgreen (20151112 812) "Order Salads from sweetgreen.com" ((dash (2 12 1)) (helm (1 5 6)) (request (0 2 0)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://www.github.com/CestDiego/sweetgreen.el") (:keywords "salad" "food" "sweetgreen" "request")) nil])
  (swift-mode [cl-struct-package-desc swift-mode (20151017 2320) "Major-mode for Apple's Swift programming language." ((emacs (24 4))) single "melpa" nil ((:keywords "languages" "swift")) nil] [cl-struct-package-desc swift-mode (0 3 0) "Major-mode for Apple's Swift programming language." ((emacs (24 1))) single "melpa-stable" nil ((:keywords "languages" "swift")) nil])
  (swiper-helm [cl-struct-package-desc swiper-helm (20150915 525) "Helm version of Swiper." ((emacs (24 1)) (swiper (0 1 0)) (helm (1 5 3))) single "melpa" nil ((:url . "https://github.com/abo-abo/swiper-helm") (:keywords "matching")) nil] [cl-struct-package-desc swiper-helm (0 1 0) "Helm version of Swiper." ((emacs (24 1)) (swiper (0 1 0)) (helm (1 5 3))) single "melpa-stable" nil ((:url . "https://github.com/abo-abo/swiper-helm") (:keywords "matching")) nil])
  (swoop [cl-struct-package-desc swoop (20140605 1410) "Peculiar buffer navigation for Emacs" ((ht (2 0)) (pcre2el (1 5)) (async (1 1)) (emacs (24))) tar "melpa" nil ((:url . "https://github.com/ShingoFukuyama/swoop") (:keywords "swoop" "inner" "buffer" "search" "navigation")) nil])
  (sx [cl-struct-package-desc sx (20151111 1846) "StackExchange client. Ask and answer questions on Stack Overflow, Super User, and the likes" ((emacs (24 1)) (cl-lib (0 5)) (json (1 3)) (markdown-mode (2 0)) (let-alist (1 0 3))) tar "melpa" nil ((:url . "https://github.com/vermiculus/sx.el/") (:keywords "help" "hypermedia" "tools")) nil] [cl-struct-package-desc sx (0 4) "StackExchange client. Ask and answer questions on Stack Overflow, Super User, and the likes" ((emacs (24 1)) (cl-lib (0 5)) (json (1 3)) (markdown-mode (2 0)) (let-alist (1 0 3))) tar "melpa-stable" nil ((:url . "https://github.com/vermiculus/sx.el/") (:keywords "help" "hypermedia" "tools")) nil])
  (symon [cl-struct-package-desc symon (20151108 1828) "tiny graphical system monitor" nil single "melpa" nil ((:url . "http://hins11.yu-yake.com/")) nil])
  (symon-lingr [cl-struct-package-desc symon-lingr (20150719 642) "A notification-based Lingr client powered by symon.el" ((symon (1 1 2)) (cl-lib (0 5))) single "melpa" nil ((:url . "http://hins11.yu-yake.com/")) nil])
  (sync-recentf [cl-struct-package-desc sync-recentf (20151005 326) "Synchronize the recent files list between Emacs instances" nil single "melpa" nil ((:url . "https://github.com/ffevotte/sync-recentf") (:keywords "recentf")) nil])
  (synonymous [cl-struct-package-desc synonymous (20150909 834) "A thesaurus at your fingertips" ((emacs (24)) (cl-lib (0 5)) (request (0 2 0))) single "melpa" nil ((:url . "http://github.com/toroidal-code/synonymous.el") (:keywords "utility")) nil])
  (syntax-subword [cl-struct-package-desc syntax-subword (20150415 1226) "make operations on words more fine-grained" nil single "melpa" nil nil nil] [cl-struct-package-desc syntax-subword (0 2) "make operations on words more fine-grained" nil single "melpa-stable" nil nil nil])
  (system-specific-settings [cl-struct-package-desc system-specific-settings (20140818 757) "Apply settings only on certain systems" nil single "melpa" nil ((:url . "https://github.com/DarwinAwardWinner/emacs-system-specific-settings") (:keywords "configuration")) nil] [cl-struct-package-desc system-specific-settings (0 2) "Apply settings only on certain systems" nil single "melpa-stable" nil ((:url . "https://github.com/DarwinAwardWinner/emacs-system-specific-settings") (:keywords "configuration")) nil])
  (systemd [cl-struct-package-desc systemd (20150928 609) "Major mode for editing systemd units" ((emacs (24 4))) tar "melpa" nil ((:keywords "tools" "unix")) nil] [cl-struct-package-desc systemd (1 3 1) "Major mode for editing systemd units" ((emacs (24 4))) tar "melpa-stable" nil ((:keywords "tools" "unix")) nil])
  (ta [cl-struct-package-desc ta (20150604 1024) "A tool to deal with Chinese homophonic characters" ((emacs (24 3)) (cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/kuanyui/ta.el") (:keywords "tools")) nil] [cl-struct-package-desc ta (1 5) "A tool to deal with Chinese homophonic characters" ((emacs (24 3)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "http://github.com/kuanyui/ta.el") (:keywords "tools")) nil])
  (tab-group [cl-struct-package-desc tab-group (20140306 650) "Grouped tabs and their tabbar" nil single "melpa" nil ((:url . "http://github.com/tarao/tab-group-el") (:keywords "convenience" "tabs")) nil])
  (tab-jump-out [cl-struct-package-desc tab-jump-out (20151005 1830) "Use tab to jump out of delimiter pairs." ((dash (2 10)) (emacs (24 4))) single "melpa" nil ((:keywords "tab" "editing")) nil])
  (tabbar [cl-struct-package-desc tabbar (20141109 143) "Display a tab bar in the header line" nil tar "melpa" nil ((:keywords "convenience")) nil])
  (table [cl-struct-package-desc table (20140721 2215) "create and edit WYSIWYG text based embedded tables" nil single "melpa" nil ((:url . "http://table.sourceforge.net/") (:keywords "wp" "convenience")) nil])
  (tablist [cl-struct-package-desc tablist (20150618 2218) "Extended tabulated-list-mode" ((emacs (24 3))) tar "melpa" nil ((:keywords "extensions" "lisp")) nil] [cl-struct-package-desc tablist (0 60) "Extended tabulated-list-mode" ((emacs (24 3))) tar "melpa-stable" nil ((:keywords "extensions" "lisp")) nil])
  (tabula-rasa [cl-struct-package-desc tabula-rasa (20141215 2147) "Distraction free writing mode" ((emacs (24 4))) single "melpa" nil ((:url . "https://github.com/idomagal/Tabula-Rasa/blob/master/tabula-rasa.el") (:keywords "distraction free" "writing")) nil])
  (take-off [cl-struct-package-desc take-off (20140531 217) "Emacs remote web access" ((emacs (24 3)) (web-server (0 1 0))) tar "melpa" nil ((:url . "https://github.com/tburette/take-off")) nil])
  (tango-plus-theme [cl-struct-package-desc tango-plus-theme (20140425 1511) "A color theme based on the tango palette" nil single "melpa" nil ((:url . "https://github.com/tmalsburg/tango-plus-theme")) nil])
  (tangotango-theme [cl-struct-package-desc tangotango-theme (20150702 104) "Tango Palette color theme for Emacs 24." nil single "melpa" nil ((:url . "https://github.com/juba/color-theme-tangotango") (:keywords "tango" "palette" "color" "theme" "emacs")) nil])
  (tao-theme [cl-struct-package-desc tao-theme (20151028 745) "Tao, light & dark themes for Emacs with greyscale palettes generated from the golden mean." nil tar "melpa" nil nil nil])
  (tbx2org [cl-struct-package-desc tbx2org (20140224 759) "Tinderbox to org-mode conversion" ((dash (2 5 0)) (s (1 8 0)) (cl-lib (0 4))) single "melpa" nil ((:url . "https://github.com/istib/tbx2org") (:keywords "org-mode")) nil])
  (tc [cl-struct-package-desc tc (20150113 1926) "a Japanese input method with T-Code on Emacs" nil tar "melpa" nil nil nil])
  (tco [cl-struct-package-desc tco (20140412 612) "tail-call optimisation for Emacs lisp" ((dash (1 2 0)) (emacs (24))) single "melpa" nil nil nil])
  (tea-time [cl-struct-package-desc tea-time (20120331 120) "Simple timer package, useful to make perfect tea." nil single "melpa" nil ((:keywords "timer" "tea-time")) nil])
  (telephone-line [cl-struct-package-desc telephone-line (20151104 1854) "Rewrite of Powerline" ((emacs (24 3)) (cl-lib (0 5)) (eieio (1 4)) (s (1 9 0)) (seq (1 8))) tar "melpa" nil ((:url . "https://github.com/dbordak/telephone-line") (:keywords "mode-line")) nil] [cl-struct-package-desc telephone-line (0 2) "Rewrite of Powerline" ((emacs (24 3)) (cl-lib (0 5)) (memoize (1 0 1)) (names (0 5)) (s (1 9 0)) (seq (1 8))) tar "melpa-stable" nil ((:url . "https://github.com/dbordak/telephone-line") (:keywords "mode-line")) nil])
  (term+ [cl-struct-package-desc term+ (20130612 652) "term-mode enhancement" nil tar "melpa" nil ((:url . "http://github.com/tarao/term+-el") (:keywords "terminal" "emulation")) nil])
  (term+key-intercept [cl-struct-package-desc term+key-intercept (20140210 2350) "term+ intercept key mapping" ((term+ (0 1)) (key-intercept (0 1))) single "melpa" nil ((:url . "http://github.com/tarao/term+-el") (:keywords "terminal" "emulation")) nil])
  (term+mux [cl-struct-package-desc term+mux (20140210 2349) "term+ terminal multiplexer and session management" ((term+ (0 1)) (tab-group (0 1))) single "melpa" nil ((:url . "http://github.com/tarao/term+-el") (:keywords "terminal" "emulation")) nil])
  (term-alert [cl-struct-package-desc term-alert (20141121 1205) "Get notifications when commands complete in the Emacs terminal emulator" ((term-cmd (1 0)) (alert (1 1))) single "melpa" nil ((:url . "https://github.com/CallumCameron/term-alert") (:keywords "notifications" "processes")) nil] [cl-struct-package-desc term-alert (1 0) "Get notifications when commands complete in the Emacs terminal emulator" ((term-cmd (1 0)) (alert (1 1))) single "melpa-stable" nil ((:url . "https://github.com/CallumCameron/term-alert") (:keywords "notifications" "processes")) nil])
  (term-cmd [cl-struct-package-desc term-cmd (20141114 1314) "Send commands to Emacs from programs running under term.el" nil single "melpa" nil ((:url . "https://github.com/CallumCameron/term-cmd") (:keywords "processes")) nil] [cl-struct-package-desc term-cmd (1 0) "Send commands to Emacs from programs running under term.el" nil single "melpa-stable" nil ((:url . "https://github.com/CallumCameron/term-cmd") (:keywords "processes")) nil])
  (term-run [cl-struct-package-desc term-run (20150601 6) "Run arbitrary command in terminal buffer" nil single "melpa" nil ((:url . "https://github.com/10sr/term-run-el") (:keywords "utility" "shell" "command" "term-mode")) nil] [cl-struct-package-desc term-run (0 1 4) "Run arbitrary command in terminal buffer" nil single "melpa-stable" nil ((:url . "https://github.com/10sr/term-run-el") (:keywords "utility" "shell" "command" "term-mode")) nil])
  (termbright-theme [cl-struct-package-desc termbright-theme (20151030 1935) "a more usable theme for white-on-black terminals" ((emacs (24 1))) single "melpa" nil ((:url . "https://github.com/bmastenbrook/termbright-theme-el") (:keywords "themes")) nil] [cl-struct-package-desc termbright-theme (1 0) "a more usable theme for white-on-black terminals" ((emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/bmastenbrook/termbright-theme-el") (:keywords "themes")) nil])
  (tern [cl-struct-package-desc tern (20150830 1256) "Tern-powered JavaScript integration" ((json (1 2)) (cl-lib (0 5)) (emacs (24))) single "melpa" nil ((:url . "http://ternjs.net/")) nil] [cl-struct-package-desc tern (0 16 0) "Tern-powered JavaScript integration" ((json (1 2)) (cl-lib (0 5)) (emacs (24))) single "melpa-stable" nil ((:url . "http://ternjs.net/")) nil])
  (tern-auto-complete [cl-struct-package-desc tern-auto-complete (20150611 639) "Tern Completion by auto-complete.el" ((tern (0 0 1)) (auto-complete (1 4)) (cl-lib (0 5)) (emacs (24))) single "melpa" nil nil nil] [cl-struct-package-desc tern-auto-complete (0 16 0) "Tern Completion by auto-complete.el" ((tern (0 0 1)) (auto-complete (1 4)) (cl-lib (0 5)) (emacs (24))) single "melpa-stable" nil nil nil])
  (tern-django [cl-struct-package-desc tern-django (20150121 1127) "Create tern projects for django applications." ((emacs (24)) (tern (0 0 1)) (f (0 17 1))) tar "melpa" nil ((:url . "https://github.com/proofit404/tern-django")) nil] [cl-struct-package-desc tern-django (0 1 0) "Create tern projects for django applications." ((emacs (24)) (tern (0 0 1)) (f (0 17 1))) tar "melpa-stable" nil ((:url . "https://github.com/proofit404/tern-django")) nil])
  (terraform-mode [cl-struct-package-desc terraform-mode (20151006 745) "Major mode for terraform configuration file" ((hcl-mode (0 1)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-terraform-mode")) nil] [cl-struct-package-desc terraform-mode (0 3) "Major mode for terraform configuration file" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-terraform-mode")) nil])
  (test-kitchen [cl-struct-package-desc test-kitchen (20151027 427) "Run test-kitchen inside of emacs" nil single "melpa" nil ((:url . "http://github.com/jjasghar/test-kitchen-el") (:keywords "chef" "ruby" "test-kitchen")) nil] [cl-struct-package-desc test-kitchen (0 2 1) "Run test-kitchen inside of emacs" nil single "melpa-stable" nil ((:url . "http://github.com/jjasghar/test-kitchen-el") (:keywords "chef" "ruby" "test-kitchen")) nil])
  (textile-mode [cl-struct-package-desc textile-mode (20120721 1258) "Textile markup editing major mode" nil single "melpa" nil nil nil])
  (tfs [cl-struct-package-desc tfs (20120508 1120) "MS Team Foundation Server commands for Emacs." nil single "melpa" nil ((:url . "http://cheeso.members.winisp.net/srcview.aspx?dir=emacs&file=tfs.el")) nil])
  (thing-cmds [cl-struct-package-desc thing-cmds (20150630 1432) "Commands that use things, as defined by `thingatpt.el'." ((hide-comnt (0))) single "melpa" nil ((:url . "http://www.emacswiki.org/thing-cmds.el") (:keywords "thingatpt" "thing" "region" "selection")) nil])
  (thingatpt+ [cl-struct-package-desc thingatpt+ (20150823 1711) "Extensions to `thingatpt.el'." nil single "melpa" nil ((:url . "http://www.emacswiki.org/thingatpt%2b.el") (:keywords "extensions" "matching" "mouse")) nil])
  (thingopt [cl-struct-package-desc thingopt (20150315 523) "Thing at Point optional utilities" nil single "melpa" nil ((:keywords "convenience")) nil])
  (thrift [cl-struct-package-desc thrift (20140312 1348) "Major mode for Apache Thrift files" nil single "melpa" nil ((:keywords "files")) nil] [cl-struct-package-desc thrift (0 9 3) "Major mode for Apache Thrift files" nil single "melpa-stable" nil ((:keywords "files")) nil])
  (thumb-frm [cl-struct-package-desc thumb-frm (20150913 1146) "Commands for thumbnail frames." ((frame-fns (0)) (frame-cmds (0))) single "melpa" nil ((:url . "http://www.emacswiki.org/thumb-frm.el") (:keywords "frame" "icon")) nil])
  (tide [cl-struct-package-desc tide (20151015 1820) "Typescript Interactive Development Environment" ((typescript-mode (0 1)) (emacs (24 1)) (flycheck (0 23)) (dash (2 10 0))) tar "melpa" nil nil nil])
  (time-ext [cl-struct-package-desc time-ext (20130130 1351) "more function for time/date" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/time-ext.el") (:keywords "lisp")) nil])
  (timer-revert [cl-struct-package-desc timer-revert (20150122 1232) "minor mode to revert buffer for a given time interval." nil tar "melpa" nil nil nil] [cl-struct-package-desc timer-revert (0 1) "minor mode to revert buffer for a given time interval." nil single "melpa-stable" nil ((:url . "http://github.com/yyr/timer-revert") (:keywords "timer" "revert" "auto-revert.")) nil])
  (timesheet [cl-struct-package-desc timesheet (20151107 604) "Timesheet management add-on for org-mode" ((s (1)) (org (7)) (auctex (11))) tar "melpa" nil ((:url . "https://github.com/tmarble/timesheet.el") (:keywords "org" "timesheet")) nil] [cl-struct-package-desc timesheet (0 3 0) "Timesheet management add-on for org-mode" ((s (1)) (org (7)) (auctex (11))) tar "melpa-stable" nil ((:url . "https://github.com/tmarble/timesheet.el") (:keywords "org" "timesheet")) nil])
  (tinkerer [cl-struct-package-desc tinkerer (20150219 2249) "Elisp wrapper for Tinkerer Blogging Engine." ((s (1 2 0))) single "melpa" nil ((:url . "https://github.com/yyr/tinkerer.el") (:keywords "tinkerer" "blog" "wrapper")) nil])
  (tinysegmenter [cl-struct-package-desc tinysegmenter (20141124 213) "Super compact Japanese tokenizer in Javascript ported to emacs lisp" ((cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/myuhe/tinysegmenter.el") (:keywords "convenience")) nil])
  (tj-mode [cl-struct-package-desc tj-mode (20150826 851) "Highlight JavaScript with Tern" ((emacs (24)) (tern (0 0 1)) (js2-mode (20150514))) single "melpa" nil ((:url . "https://github.com/katspaugh/tj-mode") (:keywords "languages" "javascript")) nil])
  (tmmofl [cl-struct-package-desc tmmofl (20121025 401) "Calls functions dependant on font lock highlighting at point" nil single "melpa" nil ((:keywords "minor mode" "font lock" "toggling.")) nil])
  (toc-org [cl-struct-package-desc toc-org (20150921 705) "add table of contents to org-mode files (formerly, org-toc)" nil single "melpa" nil ((:url . "https://github.com/snosov1/toc-org") (:keywords "org-mode" "org-toc" "toc-org" "org" "toc" "table" "of" "contents")) nil])
  (todochiku [cl-struct-package-desc todochiku (20150112 1254) "A mode for interfacing with Growl, Snarl, and the like." nil single "melpa" nil nil nil])
  (todotxt-mode [cl-struct-package-desc todotxt-mode (20150424 704) "Major mode for editing todo.txt files" nil single "melpa" nil ((:keywords "wp" "files")) nil])
  (togetherly [cl-struct-package-desc togetherly (20150820 138) "allow multiple clients to edit a single buffer online" ((cl-lib (0 3))) single "melpa" nil ((:url . "http://hins11.yu-yake.com/")) nil])
  (toggle [cl-struct-package-desc toggle (20140815 245) "quickly open corresponding file (eg test vs impl)." nil single "melpa" nil ((:keywords "files" "extensions" "convenience")) nil])
  (toggle-quotes [cl-struct-package-desc toggle-quotes (20140710 226) "Toggle between single and double quoted string" nil single "melpa" nil ((:url . "https://github.com/toctan/toggle-quotes.el") (:keywords "convenience" "quotes")) nil])
  (toggle-window [cl-struct-package-desc toggle-window (20141207 748) "toggle current window size between half and full" nil single "melpa" nil ((:url . "https://github.com/deadghost/toggle-window") (:keywords "hide" "window")) nil])
  (tomatinho [cl-struct-package-desc tomatinho (20140120 1540) "Tomatinho" nil tar "melpa" nil ((:keywords "time" "productivity" "pomodoro technique")) nil])
  (toml [cl-struct-package-desc toml (20130903 555) "TOML (Tom's Obvious, Minimal Language) parser" nil single "melpa" nil ((:url . "https://github.com/gongo/emacs-toml") (:keywords "toml" "parser")) nil])
  (tool-bar+ [cl-struct-package-desc tool-bar+ (20150104 1702) "Extensions to standard library tool-bar.el" nil single "melpa" nil ((:url . "http://www.emacswiki.org/tool-bar%2b.el") (:keywords "tool-bar" "convenience" "mouse" "button" "frame")) nil])
  (top-mode [cl-struct-package-desc top-mode (20130605 1039) "run \"top\" from emacs" nil single "melpa" nil ((:keywords "extensions" "processes")) nil])
  (tornado-template-mode [cl-struct-package-desc tornado-template-mode (20141128 208) "A major mode for editing tornado templates" nil single "melpa" nil nil nil])
  (totd [cl-struct-package-desc totd (20150519 740) "Display a random daily emacs command." ((s (1 9 0)) (cl-lib (0 5))) single "melpa" nil ((:keywords "help")) nil])
  (traad [cl-struct-package-desc traad (20150106 615) "emacs interface to the traad refactoring server." ((deferred (0 3 2)) (popup (0 5 0)) (request (0 2 0)) (request-deferred (0 2 0)) (python-environment (0 0 2))) tar "melpa" nil ((:url . "https://github.com/abingham/traad")) nil] [cl-struct-package-desc traad (0 4) "emacs interface to the traad refactoring server." nil tar "melpa-stable" nil ((:url . "https://github.com/abingham/traad")) nil])
  (traad-autocomplete [cl-struct-package-desc traad-autocomplete (20140817 411) "auto-complete sources for traad" ((traad (0 1)) (auto-complete (1 4 0))) single "melpa" nil ((:url . "https://github.com/abingham/traad")) nil])
  (tracwiki-mode [cl-struct-package-desc tracwiki-mode (20150119 821) "Emacs Major mode for working with Trac" ((xml-rpc (1 6 8))) single "melpa" nil ((:keywords "trac" "wiki" "tickets")) nil])
  (tramp-hdfs [cl-struct-package-desc tramp-hdfs (20151028 2036) "Tramp extension to access hadoop/hdfs file system in Emacs" nil single "melpa" nil ((:keywords "tramp" "emacs" "hdfs" "hadoop" "webhdfs" "rest")) nil])
  (tramp-term [cl-struct-package-desc tramp-term (20141104 1345) "Automatic setup of directory tracking in ssh sessions." nil single "melpa" nil ((:url . "https://github.com/randymorris/tramp-term.el") (:keywords "tramp" "ssh")) nil])
  (transpose-frame [cl-struct-package-desc transpose-frame (20131221 742) "Transpose windows arrangement in a frame" nil single "melpa" nil ((:keywords "window")) nil])
  (transpose-mark [cl-struct-package-desc transpose-mark (20150405 16) "Transpose data using the Emacs mark" nil single "melpa" nil ((:keywords "transpose" "convenience")) nil])
  (travis [cl-struct-package-desc travis (20150825 438) "Emacs client for Travis" ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) tar "melpa" nil ((:url . "https://github.com/nlamirault/emacs-travis") (:keywords "travis")) nil] [cl-struct-package-desc travis (0 6 0) "Emacs client for Travis" ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) tar "melpa-stable" nil ((:url . "https://github.com/nlamirault/emacs-travis") (:keywords "travis")) nil])
  (tree-mode [cl-struct-package-desc tree-mode (20151104 531) "A mode to manage tree widgets" nil single "melpa" nil ((:keywords "help" "convenience" "widget")) nil])
  (trident-mode [cl-struct-package-desc trident-mode (20130726 1207) "Live Parenscript interaction" ((emacs (24)) (slime (20130526)) (skewer-mode (1 5 0)) (dash (1 0 3))) single "melpa" nil ((:url . "https://github.com/johnmastro/trident-mode.el") (:keywords "languages" "lisp" "processes" "tools")) nil])
  (tss [cl-struct-package-desc tss (20150913 708) "provide a interface for auto-complete.el/flymake.el on typescript-mode." ((auto-complete (1 4 0)) (json-mode (1 1 0)) (log4e (0 2 0)) (yaxception (0 1))) tar "melpa" nil ((:url . "https://github.com/aki2o/emacs-tss") (:keywords "typescript" "completion")) nil] [cl-struct-package-desc tss (0 6 0) "provide a interface for auto-complete.el/flymake.el on typescript-mode." ((auto-complete (1 4 0)) (json-mode (1 1 0)) (log4e (0 2 0)) (yaxception (0 1))) tar "melpa-stable" nil ((:url . "https://github.com/aki2o/emacs-tss") (:keywords "typescript" "completion")) nil])
  (turnip [cl-struct-package-desc turnip (20150308 2329) "Interacting with tmux from Emacs" ((dash (2 6 0)) (s (1 9 0))) single "melpa" nil ((:keywords "terminals" "tools")) nil])
  (twig-mode [cl-struct-package-desc twig-mode (20130220 1050) "A major mode for twig" nil single "melpa" nil nil nil])
  (twilight-anti-bright-theme [cl-struct-package-desc twilight-anti-bright-theme (20140810 34) "A soothing Emacs 24 light-on-dark theme" nil single "melpa" nil ((:url . "https://github.com/jimeh/twilight-anti-bright-theme.el") (:keywords "themes")) nil] [cl-struct-package-desc twilight-anti-bright-theme (0 3 0) "A soothing Emacs 24 light-on-dark theme" nil single "melpa-stable" nil ((:url . "https://github.com/jimeh/twilight-anti-bright-theme.el") (:keywords "themes")) nil])
  (twilight-bright-theme [cl-struct-package-desc twilight-bright-theme (20130605 143) "A Emacs 24 faces port of the TextMate theme" nil single "melpa" nil ((:url . "https://github.com/jimeh/twilight-bright-theme.el") (:keywords "themes")) nil])
  (typed-clojure-mode [cl-struct-package-desc typed-clojure-mode (20151003 1122) "Typed Clojure minor mode for Emacs" ((clojure-mode (2 1 1)) (cider (0 10 0 -3))) tar "melpa" nil ((:url . "https://github.com/typedclojure/typed-clojure-mode")) nil] [cl-struct-package-desc typed-clojure-mode (1 0 0) "Typed Clojure minor mode for Emacs" ((clojure-mode (2 1 1)) (cider (0 5 0))) single "melpa-stable" nil ((:url . "https://github.com/typedclojure/typed-clojure-mode")) nil])
  (typescript-mode [cl-struct-package-desc typescript-mode (20150830 1828) "Major mode for editing typescript" nil single "melpa" nil ((:url . "http://github.com/ananthakumaran/typescript.el") (:keywords "typescript" "languages")) nil])
  (typing-game [cl-struct-package-desc typing-game (20151111 740) "a simple typing game" nil single "melpa" nil ((:keywords "lisp" "game")) nil])
  (ubuntu-theme [cl-struct-package-desc ubuntu-theme (20150805 806) "A theme inspired by the default terminal colors in Ubuntu" nil single "melpa" nil ((:url . "http://github.com/rocher/ubuntu-theme")) nil] [cl-struct-package-desc ubuntu-theme (4 2) "A theme inspired by the default terminal colors in Ubuntu" nil single "melpa-stable" nil ((:url . "http://github.com/rocher/ubuntu-theme")) nil])
  (ucs-cmds [cl-struct-package-desc ucs-cmds (20150508 1545) "Macro to create commands that insert Unicode chars." nil single "melpa" nil ((:url . "http://www.emacswiki.org/ucs-cmds.el") (:keywords "unicode" "characters" "encoding" "commands" "ucs-names")) nil])
  (uimage [cl-struct-package-desc uimage (20151012 604) "Url image minor mode." nil single "melpa" nil ((:keywords "lisp" "url" "image")) nil])
  (ukrainian-holidays [cl-struct-package-desc ukrainian-holidays (20130720 649) "Ukrainian holidays for Emacs calendar." nil single "melpa" nil ((:url . "https://github.com/abo-abo/ukrainian-holidays")) nil])
  (uncrustify-mode [cl-struct-package-desc uncrustify-mode (20130707 659) "Minor mode to automatically uncrustify." nil single "melpa" nil ((:keywords "uncrustify")) nil])
  (undercover [cl-struct-package-desc undercover (20150817 1010) "Test coverage library for Emacs" ((emacs (24)) (dash (2 0 0)) (shut-up (0 3 2))) single "melpa" nil ((:url . "https://github.com/sviridov/undercover.el") (:keywords "lisp" "tests" "coverage" "tools")) nil] [cl-struct-package-desc undercover (0 5 0) "Test coverage library for Emacs" ((emacs (24)) (dash (2 0 0)) (shut-up (0 3 2))) single "melpa-stable" nil ((:url . "https://github.com/sviridov/undercover.el") (:keywords "lisp" "tests" "coverage" "tools")) nil])
  (underwater-theme [cl-struct-package-desc underwater-theme (20131117 1602) "A gentle, deep blue color theme" nil single "melpa" nil ((:keywords "faces")) nil] [cl-struct-package-desc underwater-theme (1 1 0) "A gentle, deep blue color theme" nil single "melpa-stable" nil ((:keywords "faces")) nil])
  (undohist [cl-struct-package-desc undohist (20150315 542) "Persistent undo history for GNU Emacs" ((cl-lib (1 0))) single "melpa" nil ((:keywords "convenience")) nil])
  (unicode-emoticons [cl-struct-package-desc unicode-emoticons (20150204 308) "Shortcuts for common unicode emoticons" nil single "melpa" nil ((:url . "https://github.com/hagleitn/unicode-emoticons") (:keywords "games" "entertainment" "comms")) nil])
  (unicode-input [cl-struct-package-desc unicode-input (20141218 2320) "Support for unicode character input" nil single "melpa" nil ((:keywords "unicode" "input")) nil])
  (unicode-troll-stopper [cl-struct-package-desc unicode-troll-stopper (20151023 1831) "Minor mode for Highlighting Unicode homoglyphs" nil single "melpa" nil ((:url . "https://github.com/camsaul/emacs-unicode-troll-stopper") (:keywords "unicode")) nil])
  (unidecode [cl-struct-package-desc unidecode (20140317 2118) "Convert Unicode text into safe ASCII strings" ((cl-lib (0 4))) tar "melpa" nil nil nil])
  (unify-opening [cl-struct-package-desc unify-opening (20150221 414) "Make everything use the same mechanism to open files" ((emacs (24 4))) single "melpa" nil ((:url . "https://github.com/DamienCassou/unify-opening") (:keywords "dired" "org" "mu4e" "open" "runner" "extension" "file")) nil] [cl-struct-package-desc unify-opening (1 0 0) "Make everything use the same mechanism to open files" ((emacs (24 4))) single "melpa-stable" nil ((:url . "https://github.com/DamienCassou/unify-opening") (:keywords "dired" "org" "mu4e" "open" "runner" "extension" "file")) nil])
  (unipoint [cl-struct-package-desc unipoint (20140113 1424) "a simple way to insert unicode characters by TeX name" nil single "melpa" nil ((:url . "https://github.com/apgwoz/unipoint")) nil])
  (unison-mode [cl-struct-package-desc unison-mode (20150104 414) "Syntax highlighting for unison file synchronization program" nil single "melpa" nil ((:url . "https://github.com/impaktor/unison-mode") (:keywords "symchronization" "unison")) nil])
  (unkillable-scratch [cl-struct-package-desc unkillable-scratch (20150327 2318) "Disallow buffers from being killed by regexp -- default is *scratch* buffer" nil single "melpa" nil ((:keywords "scratch")) nil] [cl-struct-package-desc unkillable-scratch (0 1) "Disallow buffers from being killed by regexp -- default is *scratch* buffer" nil single "melpa-stable" nil ((:keywords "scratch")) nil])
  (url-shortener [cl-struct-package-desc url-shortener (20150805 2313) "shorten long url and expand tinyurl" nil single "melpa" nil ((:url . "https://github.com/yuyang0/url-shortener")) nil])
  (urlenc [cl-struct-package-desc urlenc (20140116 656) "URL encoding/decoding utility for Emacs." nil single "melpa" nil ((:url . "https://github.com/buzztaiki/urlenc-el") (:keywords "url")) nil])
  (usage-memo [cl-struct-package-desc usage-memo (20110722 851) "integration of Emacs help system and memo" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/usage-memo.el") (:keywords "convenience" "languages" "lisp" "help" "tools" "docs")) nil])
  (use-package [cl-struct-package-desc use-package (20151112 1439) "A use-package declaration for simplifying your .emacs" ((bind-key (1 0)) (diminish (0 44))) single "melpa" nil ((:url . "https://github.com/jwiegley/use-package") (:keywords "dotemacs" "startup" "speed" "config" "package")) nil] [cl-struct-package-desc use-package (2 1) "A use-package declaration for simplifying your .emacs" ((bind-key (1 0)) (diminish (0 44))) single "melpa-stable" nil ((:url . "https://github.com/jwiegley/use-package") (:keywords "dotemacs" "startup" "speed" "config" "package")) nil])
  (use-package-chords [cl-struct-package-desc use-package-chords (20151001 1328) "key-chord keyword for use-package" ((use-package (2 0)) (bind-key (1 0)) (bind-chord (0 1))) single "melpa" nil ((:url . "https://github.com/waymondo/use-package-chords") (:keywords "convenience" "tools" "extensions")) nil])
  (utop [cl-struct-package-desc utop (20151105 247) "Universal toplevel for OCaml" ((emacs (24))) single "melpa" nil ((:url . "https://github.com/diml/utop") (:keywords "ocaml" "languages")) nil] [cl-struct-package-desc utop (1 18 1) "Universal toplevel for OCaml" ((emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/diml/utop") (:keywords "ocaml" "languages")) nil])
  (uuidgen [cl-struct-package-desc uuidgen (20140918 1601) "Provides various UUID generating functions" nil single "melpa" nil ((:keywords "extensions" "lisp" "tools")) nil])
  (vagrant [cl-struct-package-desc vagrant (20141125 1959) "Manage a vagrant box from emacs" nil single "melpa" nil ((:url . "https://github.com/ottbot/vagrant.el") (:keywords "vagrant" "chef")) nil] [cl-struct-package-desc vagrant (0 5 2) "Manage a vagrant box from emacs" nil single "melpa-stable" nil ((:url . "https://github.com/ottbot/vagrant.el") (:keywords "vagrant" "chef")) nil])
  (vagrant-tramp [cl-struct-package-desc vagrant-tramp (20151018 1523) "Vagrant method for TRAMP" ((dash (2 12 0))) tar "melpa" nil ((:url . "https://github.com/dougm/vagrant-tramp") (:keywords "vagrant")) nil])
  (vala-snippets [cl-struct-package-desc vala-snippets (20150428 2052) "Yasnippets for Vala" ((yasnippet (0 8 0))) tar "melpa" nil ((:url . "https://github.com/gopar/vala-snippets")) nil])
  (vbasense [cl-struct-package-desc vbasense (20140221 1553) "provide a environment like Visual Basic Editor." ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 1))) tar "melpa" nil ((:url . "https://github.com/aki2o/emacs-vbasense") (:keywords "vba" "completion")) nil] [cl-struct-package-desc vbasense (0 1 1) "provide a environment like Visual Basic Editor." ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 1))) tar "melpa-stable" nil ((:url . "https://github.com/aki2o/emacs-vbasense") (:keywords "vba" "completion")) nil])
  (vc-auto-commit [cl-struct-package-desc vc-auto-commit (20150330 103) "Auto-committing feature for your repository" nil tar "melpa" nil ((:url . "http://github.com/thisirs/vc-auto-commit.git") (:keywords "vc" "convenience")) nil])
  (vc-check-status [cl-struct-package-desc vc-check-status (20150330 101) "Warn you when quitting emacs and leaving repo dirty." nil tar "melpa" nil ((:url . "https://github.com/thisirs/vc-check-status") (:keywords "vc" "convenience")) nil])
  (vc-fossil [cl-struct-package-desc vc-fossil (20141031 22) "VC backend for the fossil sofware configuraiton management system" nil tar "melpa" nil nil nil])
  (vc-osc [cl-struct-package-desc vc-osc (20120910 211) "non-resident support for osc version-control" nil single "melpa" nil nil nil])
  (vcl-mode [cl-struct-package-desc vcl-mode (20121129 1314) "Syntax highlighting for Varnish Command Language" nil single "melpa" nil nil nil])
  (vcomp [cl-struct-package-desc vcomp (20140906 1508) "compare version strings" nil single "melpa" nil ((:url . "https://github.com/tarsius/vcomp") (:keywords "versions")) nil] [cl-struct-package-desc vcomp (0 3 1) "compare version strings" nil single "melpa-stable" nil ((:url . "https://github.com/tarsius/vcomp") (:keywords "versions")) nil])
  (vertigo [cl-struct-package-desc vertigo (20151110 2013) "Jump across lines using the home row." ((dash (2 11 0))) single "melpa" nil ((:url . "https://github.com/noctuid/vertigo.el") (:keywords "vim" "vertigo")) nil])
  (vi-tilde-fringe [cl-struct-package-desc vi-tilde-fringe (20141027 1942) "Displays tildes in the fringe on empty lines a la Vi." ((emacs (24))) single "melpa" nil ((:url . "https://github.com/syl20bnr/vi-tilde-fringe") (:keywords "emulation")) nil])
  (viewer [cl-struct-package-desc viewer (20141021 1138) "View-mode extension" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/viewer.el") (:keywords "view" "extensions")) nil])
  (vim-empty-lines-mode [cl-struct-package-desc vim-empty-lines-mode (20150110 2026) "Vim-like empty line indicator at end of files." ((emacs (23))) single "melpa" nil ((:url . "https://github.com/jmickelin/vim-empty-lines-mode") (:keywords "emulations")) nil])
  (vim-region [cl-struct-package-desc vim-region (20140329 924) "Select region as vim" ((expand-region (20140127))) single "melpa" nil ((:url . "https://github.com/ongaeshi/emacs-vim-region")) nil] [cl-struct-package-desc vim-region (0 3 0) "Select region as vim" ((expand-region (20140127))) single "melpa-stable" nil ((:url . "https://github.com/ongaeshi/emacs-vim-region")) nil])
  (vimish-fold [cl-struct-package-desc vimish-fold (20151014 619) "Fold text like in Vim" ((emacs (24 4)) (cl-lib (0 5)) (f (0 18 0))) single "melpa" nil ((:url . "https://github.com/mrkkrp/vimish-fold") (:keywords "convenience")) nil] [cl-struct-package-desc vimish-fold (0 2 1) "Fold text like in Vim" ((emacs (24 4)) (cl-lib (0 5)) (f (0 18 0))) single "melpa-stable" nil ((:url . "https://github.com/mrkkrp/vimish-fold") (:keywords "convenience")) nil])
  (vimrc-mode [cl-struct-package-desc vimrc-mode (20150607 913) "Major mode for vimrc files" nil single "melpa" nil ((:url . "https://github.com/mcandre/vimrc-mode") (:keywords "languages" "vim")) nil])
  (virtualenvwrapper [cl-struct-package-desc virtualenvwrapper (20151005 806) "a featureful virtualenv tool for Emacs" ((dash (1 5 0)) (s (1 6 1))) single "melpa" nil ((:url . "http://github.com/porterjamesj/virtualenvwrapper.el") (:keywords "python" "virtualenv" "virtualenvwrapper")) nil])
  (visible-mark [cl-struct-package-desc visible-mark (20150623 2150) "Make marks visible." nil single "melpa" nil ((:url . "https://gitlab.com/iankelling/visible-mark") (:keywords "marking" "color" "faces")) nil])
  (visual-ascii-mode [cl-struct-package-desc visual-ascii-mode (20150129 246) "Visualize ascii code (small integer) on buffer." nil single "melpa" nil ((:url . "https://github.com/Dewdrops/visual-ascii-mode") (:keywords "presentation")) nil])
  (visual-fill-column [cl-struct-package-desc visual-fill-column (20151112 1441) "fill-column for visual-line-mode" ((emacs (24 3))) single "melpa" nil nil nil] [cl-struct-package-desc visual-fill-column (1 5) "fill-column for visual-line-mode" ((emacs (24 3))) single "melpa-stable" nil nil nil])
  (visual-regexp [cl-struct-package-desc visual-regexp (20151030 101) "A regexp/replace command for Emacs with interactive visual feedback" ((cl-lib (0 2))) single "melpa" nil ((:url . "https://github.com/benma/visual-regexp.el/") (:keywords "regexp" "replace" "visual" "feedback")) nil])
  (visual-regexp-steroids [cl-struct-package-desc visual-regexp-steroids (20150411 416) "Extends visual-regexp to support other regexp engines" ((visual-regexp (0 8))) tar "melpa" nil ((:url . "https://github.com/benma/visual-regexp-steroids.el/") (:keywords "external" "foreign" "regexp" "replace" "python" "visual" "feedback")) nil])
  (vkill [cl-struct-package-desc vkill (20091203 1022) "view and kill Unix processes from within Emacs" nil single "melpa" nil nil nil])
  (voca-builder [cl-struct-package-desc voca-builder (20150625 1133) "No description available." nil single "melpa" nil nil nil] [cl-struct-package-desc voca-builder (0 2 0) "No description available." nil single "melpa-stable" nil nil nil])
  (volume [cl-struct-package-desc volume (20150718 1309) "tweak your sound card volume from Emacs" nil single "melpa" nil ((:url . "http://www.brockman.se/software/volume-el/")) nil])
  (w32browser-dlgopen [cl-struct-package-desc w32browser-dlgopen (20150104 1706) "Use w32browser with standard Windows Open File box." nil single "melpa" nil ((:url . "http://www.emacswiki.org/w32browser-dlgopen.el") (:keywords "files" "extensions" "convenience" "dialog")) nil])
  (w3m [cl-struct-package-desc w3m (20151013 327) "an Emacs interface to w3m" nil tar "melpa" nil ((:keywords "w3m" "www" "hypermedia")) nil])
  (wakatime-mode [cl-struct-package-desc wakatime-mode (20151113 1038) "Automatic time tracking extension for WakaTime" nil single "melpa" nil ((:keywords "calendar" "comm")) nil])
  (wand [cl-struct-package-desc wand (20141104 1645) "Magic wand for Emacs - Selecting and executing" ((dash (2 5 0))) tar "melpa" nil ((:url . "https://github.com/cmpitg/wand") (:keywords "extensions" "tools")) nil])
  (wandbox [cl-struct-package-desc wandbox (20150905 824) "Wandbox API Library for Emacs" ((emacs (24)) (json (1 3)) (tabulated-list (1 0))) single "melpa" nil ((:url . "https://github.com/kosh04/emacs-wandbox") (:keywords "c" "programming" "tools")) nil])
  (wanderlust [cl-struct-package-desc wanderlust (20151005 530) "Yet Another Message Interface on Emacsen" ((semi (1 14 7))) tar "melpa" nil nil nil])
  (warm-night-theme [cl-struct-package-desc warm-night-theme (20150607 741) "Emacs 24 theme with a dark background." ((emacs (24))) single "melpa" nil nil nil])
  (wavefront-obj-mode [cl-struct-package-desc wavefront-obj-mode (20150501 1116) "Major mode for Wavefront obj files" nil single "melpa" nil ((:url . "http://github.com/abend/wavefront-obj-mode")) nil])
  (wc-goal-mode [cl-struct-package-desc wc-goal-mode (20140829 659) "Running word count with goals (minor mode)" nil single "melpa" nil ((:url . "https://github.com/bnbeckwith/wc-goal-mode")) nil] [cl-struct-package-desc wc-goal-mode (2 1) "Running word count with goals (minor mode)" nil single "melpa-stable" nil ((:url . "https://github.com/bnbeckwith/wc-goal-mode")) nil])
  (web-beautify [cl-struct-package-desc web-beautify (20131118 226) "Format HTML, CSS and JavaScript/JSON by js-beautify" nil single "melpa" nil ((:url . "https://github.com/yasuyk/web-beautify")) nil])
  (web-completion-data [cl-struct-package-desc web-completion-data (20150623 333) "Shared completion data for ac-html and company-web" nil tar "melpa" nil ((:url . "https://github.com/osv/web-completion-data") (:keywords "html" "auto-complete" "company")) nil] [cl-struct-package-desc web-completion-data (0 1) "Shared completion data for ac-html and company-web" nil tar "melpa-stable" nil ((:url . "https://github.com/osv/web-completion-data") (:keywords "html" "auto-complete" "company")) nil])
  (weblogger [cl-struct-package-desc weblogger (20110926 918) "Weblog maintenance via XML-RPC APIs" ((xml-rpc (1 6 8))) single "melpa" nil ((:url . "http://launchpad.net/weblogger-el") (:keywords "weblog" "blogger" "cms" "movable" "type" "openweblog" "blog")) nil])
  (weibo [cl-struct-package-desc weibo (20150307 1442) "Weibo client for Emacs" ((cl-lib (0 5))) tar "melpa" nil ((:url . "https://github.com/austin-----/weibo.emacs") (:keywords "weibo")) nil] [cl-struct-package-desc weibo (1 0) "No description available." nil tar "melpa-stable" nil nil nil])
  (wgrep-ag [cl-struct-package-desc wgrep-ag (20141012 311) "Writable ag buffer and apply the changes to files" ((wgrep (2 1 5))) single "melpa" nil ((:url . "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep-ag.el") (:keywords "grep" "edit" "extensions")) nil])
  (wgrep-pt [cl-struct-package-desc wgrep-pt (20140510 1531) "Writable pt buffer and apply the changes to files" ((wgrep (2 1 5))) single "melpa" nil ((:url . "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep-pt.el") (:keywords "grep" "edit" "extensions")) nil])
  (what-the-commit [cl-struct-package-desc what-the-commit (20150901 616) "Random commit message generator" nil single "melpa" nil ((:url . "http://barbarito.me/") (:keywords "git" "commit" "message")) nil])
  (which-key [cl-struct-package-desc which-key (20151113 1009) "Display available keybindings in popup" ((emacs (24 3))) single "melpa" nil ((:url . "https://github.com/justbur/emacs-which-key")) nil] [cl-struct-package-desc which-key (0 7) "Display available keybindings in popup" ((emacs (24 3))) single "melpa-stable" nil ((:url . "https://github.com/justbur/emacs-which-key")) nil])
  (whitaker [cl-struct-package-desc whitaker (20150814 422) "Comint interface for Whitaker's Words" ((dash (2 10 0))) single "melpa" nil ((:keywords "processes")) nil] [cl-struct-package-desc whitaker (0 3) "Comint interface for Whitaker's Words" ((dash (2 10 0))) single "melpa-stable" nil ((:keywords "processes")) nil])
  (white-sand-theme [cl-struct-package-desc white-sand-theme (20150822 147) "Emacs theme with a light background." ((emacs (24))) single "melpa" nil nil nil])
  (whole-line-or-region [cl-struct-package-desc whole-line-or-region (20110901 130) "operate on current line if region undefined" nil single "melpa" nil ((:keywords "kill" "yank" "cut" "copy" "paste" "whole" "lines")) nil] [cl-struct-package-desc whole-line-or-region (1 3 1) "operate on current line if region undefined" nil single "melpa-stable" nil ((:keywords "kill" "yank" "cut" "copy" "paste" "whole" "lines")) nil])
  (wid-edit+ [cl-struct-package-desc wid-edit+ (20150104 1707) "Extensions to standard library `wid-edit.el'." nil single "melpa" nil ((:url . "http://www.emacswiki.org/wid-edit%2b.el") (:keywords "widget" "color")) nil])
  (wide-column [cl-struct-package-desc wide-column (20120814 112) "Calls functions dependant on column position." nil single "melpa" nil ((:keywords "minor mode" "cursor colour" "column width")) nil])
  (widget-mvc [cl-struct-package-desc widget-mvc (20150101 2006) "MVC framework for the emacs widgets" nil single "melpa" nil ((:keywords "lisp" "widget")) nil])
  (wiki-summary [cl-struct-package-desc wiki-summary (20150408 1422) "View Wikipedia summaries in Emacs easily." ((emacs (24))) single "melpa" nil ((:url . "https://github.com/jozefg/wiki-summary.el") (:keywords "wikipedia" "utility")) nil])
  (wimpy-del [cl-struct-package-desc wimpy-del (20150104 1709) "Require confirmation for large region deletion." nil single "melpa" nil ((:url . "http://www.emacswiki.org/wimpy-del.el") (:keywords "region" "cut" "kill" "copy")) nil])
  (windata [cl-struct-package-desc windata (20080412 755) "convert window configuration to list" nil single "melpa" nil ((:keywords "convenience" "frames")) nil])
  (window+ [cl-struct-package-desc window+ (20150104 1711) "Extensions to `window.el'." nil single "melpa" nil ((:url . "http://www.emacswiki.org/window%2b.el") (:keywords "internal" "window")) nil])
  (window-jump [cl-struct-package-desc window-jump (20150213 1236) "Move left/right/up/down through your windows." nil single "melpa" nil ((:url . "https://github.com/chumpage/chumpy-windows") (:keywords "frames" "convenience")) nil])
  (window-layout [cl-struct-package-desc window-layout (20150716 2207) "window layout manager" nil single "melpa" nil ((:keywords "window" "layout")) nil] [cl-struct-package-desc window-layout (1 3) "window layout manager" nil single "melpa-stable" nil ((:keywords "window" "layout")) nil])
  (window-numbering [cl-struct-package-desc window-numbering (20150228 1247) "Numbered window shortcuts" nil single "melpa" nil ((:url . "http://nschum.de/src/emacs/window-numbering-mode/") (:keywords "faces" "matching")) nil] [cl-struct-package-desc window-numbering (1 1 2) "No description available." nil single "melpa-stable" nil nil nil])
  (window-purpose [cl-struct-package-desc window-purpose (20151031 331) "Purpose-based window management for Emacs" ((emacs (24)) (cl-lib (0 5)) (let-alist (1 0 3)) (imenu-list (0 1))) tar "melpa" nil ((:url . "https://github.com/bmag/emacs-purpose") (:keywords "frames")) nil] [cl-struct-package-desc window-purpose (1 4) "Purpose-based window management for Emacs" ((emacs (24)) (cl-lib (0 5)) (let-alist (1 0 3)) (imenu-list (0 1))) tar "melpa-stable" nil ((:url . "https://github.com/bmag/emacs-purpose") (:keywords "frames")) nil])
  (windsize [cl-struct-package-desc windsize (20110728 1336) "Simple, intuitive window resizing" nil single "melpa" nil ((:url . "http://github.com/grammati/windsize") (:keywords "window" "resizing" "convenience")) nil] [cl-struct-package-desc windsize (0 1) "Simple, intuitive window resizing" nil single "melpa-stable" nil ((:url . "http://github.com/grammati/windsize") (:keywords "window" "resizing" "convenience")) nil])
  (wispjs-mode [cl-struct-package-desc wispjs-mode (20140103 1432) "Major mode for Wisp code." ((clojure-mode (0))) single "melpa" nil ((:url . "https://github.com/krisajenkins/wispjs-mode")) nil] [cl-struct-package-desc wispjs-mode (0 2 0) "Major mode for Wisp code." ((clojure-mode (0))) single "melpa-stable" nil ((:url . "https://github.com/krisajenkins/wispjs-mode")) nil])
  (wn-mode [cl-struct-package-desc wn-mode (20151109 2152) "numeric window switching shortcuts" ((emacs (24))) single "melpa" nil ((:url . "https://github.com/luismbo/wn-mode") (:keywords "buffers" "windows" "switching-windows")) nil] [cl-struct-package-desc wn-mode (1 4) "numeric window switching shortcuts" ((emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/luismbo/wn-mode") (:keywords "buffers" "windows" "switching-windows")) nil])
  (wolfram-mode [cl-struct-package-desc wolfram-mode (20140118 757) "Mathematica editing and inferior mode." ((emacs (24 3))) single "melpa" nil ((:url . "https://github.com/kawabata/wolfram-mode/") (:keywords "languages" "processes" "tools")) nil])
  (wordnut [cl-struct-package-desc wordnut (20151002 1457) "Major mode interface to WordNet" ((emacs (24 4))) tar "melpa" nil nil nil])
  (wordsmith-mode [cl-struct-package-desc wordsmith-mode (20140203 427) "Syntax analysis and NLP text-processing in Emacs (OSX-only)" nil single "melpa" nil nil nil] [cl-struct-package-desc wordsmith-mode (1 0 0) "Syntax analysis and NLP text-processing in Emacs (OSX-only)" nil single "melpa-stable" nil nil nil])
  (worf [cl-struct-package-desc worf (20150823 2000) "A warrior does not press so many keys! (in org-mode)" ((helm (1 5 3)) (ace-link (0 1 0)) (hydra (0 13 0))) single "melpa" nil ((:url . "https://github.com/abo-abo/worf") (:keywords "lisp")) nil])
  (workgroups2 [cl-struct-package-desc workgroups2 (20141102 1122) "New workspaces for Emacs" ((cl-lib (0 4)) (dash (2 8 0)) (anaphora (1 0 0)) (f (0 17))) single "melpa" nil ((:url . "https://github.com/pashinin/workgroups2") (:keywords "session" "management" "window-configuration" "persistence")) nil])
  (writeroom-mode [cl-struct-package-desc writeroom-mode (20151111 101) "Minor mode for distraction-free writing" ((emacs (24 1)) (visual-fill-column (1 4))) tar "melpa" nil ((:keywords "text")) nil] [cl-struct-package-desc writeroom-mode (3 1) "Minor mode for distraction-free writing" ((emacs (24 1)) (visual-fill-column (1 4))) tar "melpa-stable" nil ((:keywords "text")) nil])
  (ws-butler [cl-struct-package-desc ws-butler (20150126 759) "Unobtrusively remove trailing whitespace." nil single "melpa" nil ((:url . "https://github.com/lewang/ws-butler")) nil] [cl-struct-package-desc ws-butler (0 3) "Unobtrusively remove trailing whitespace." nil single "melpa-stable" nil ((:url . "https://github.com/lewang/ws-butler")) nil])
  (wwtime [cl-struct-package-desc wwtime (20120629 1350) "Insert a time of day with appropriate world-wide localization" nil single "melpa" nil ((:keywords "time")) nil])
  (x-dict [cl-struct-package-desc x-dict (20091203 1023) "emacs interface for several online dictionaries" nil single "melpa" nil nil nil])
  (x86-lookup [cl-struct-package-desc x86-lookup (20151107 1247) "jump to x86 instruction documentation" ((emacs (24 3)) (cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/skeeto/x86-lookup")) nil])
  (xah-elisp-mode [cl-struct-package-desc xah-elisp-mode (20150814 1431) "Major mode for editing emacs lisp." nil single "melpa" nil ((:url . "http://ergoemacs.org/emacs/xah-elisp-mode.html") (:keywords "lisp" "languages")) nil])
  (xah-find [cl-struct-package-desc xah-find (20150726 1542) "find replace in pure emacs lisp. Purpose similar to unix grep/sed." nil single "melpa" nil ((:url . "http://ergoemacs.org/emacs/elisp-xah-find-text.html") (:keywords "convenience" "extensions" "files" "tools" "unix")) nil])
  (xah-fly-keys [cl-struct-package-desc xah-fly-keys (20151027 42) "A efficient modal keybinding set minor mode based on ergonomics." nil single "melpa" nil ((:url . "http://ergoemacs.org/misc/ergoemacs_vi_mode.html") (:keywords "convenience" "emulations" "vim" "ergoemacs")) nil])
  (xah-get-thing [cl-struct-package-desc xah-get-thing (20150712 1430) "get thing or selection at point." nil single "melpa" nil ((:url . "http://ergoemacs.org/emacs/elisp_get-selection-or-unit.html") (:keywords "extensions" "lisp" "tools")) nil])
  (xah-lookup [cl-struct-package-desc xah-lookup (20150602 1146) "look up word on internet" nil single "melpa" nil ((:url . "http://ergoemacs.org/emacs/emacs_lookup_ref.html") (:keywords "help" "docs" "convenience")) nil])
  (xah-math-input [cl-struct-package-desc xah-math-input (20150907 1700) "a minor mode for inputting math and Unicode symbols." nil single "melpa" nil ((:url . "http://ergoemacs.org/emacs/xmsi-math-symbols-input.html") (:keywords "abbrev" "convenience" "unicode" "math" "latex")) nil])
  (xah-replace-pairs [cl-struct-package-desc xah-replace-pairs (20150522 333) "Multi-pair find/replace in strings and region." nil single "melpa" nil ((:url . "http://ergoemacs.org/emacs/elisp_replace_string_region.html") (:keywords "lisp" "tools" "find replace")) nil])
  (xahk-mode [cl-struct-package-desc xahk-mode (20150504 1611) "Major mode for editing AutoHotkey scripts." nil single "melpa" nil ((:url . "http://xahlee.info/mswin/emacs_autohotkey_mode.html") (:keywords "languages")) nil])
  (xcscope [cl-struct-package-desc xcscope (20140510 1437) "cscope interface for (X)Emacs" nil single "melpa" nil ((:url . "https://github.com/dkogan/xcscope.el") (:keywords "languages" "c")) nil] [cl-struct-package-desc xcscope (1 1) "cscope interface for (X)Emacs" nil single "melpa-stable" nil ((:url . "https://github.com/dkogan/xcscope.el") (:keywords "languages" "c")) nil])
  (xmlunicode [cl-struct-package-desc xmlunicode (20140121 623) "Unicode support for XML" nil tar "melpa" nil ((:keywords "utf-8" "unicode" "xml" "characters")) nil])
  (xquery-mode [cl-struct-package-desc xquery-mode (20140121 943) "A simple mode for editing xquery programs" nil tar "melpa" nil nil nil])
  (xresources-theme [cl-struct-package-desc xresources-theme (20141219 917) "Use your .Xresources as your emacs theme" nil single "melpa" nil ((:keywords "xresources" "theme")) nil])
  (xterm-color [cl-struct-package-desc xterm-color (20150823 646) "ANSI & XTERM 256 color support" nil single "melpa" nil nil nil] [cl-struct-package-desc xterm-color (1 0) "ANSI & XTERM 256 color support" nil single "melpa-stable" nil nil nil])
  (xterm-frobs [cl-struct-package-desc xterm-frobs (20091211 1555) "manipulate xterm when running emacs in tty mode" nil single "melpa" nil nil nil])
  (xterm-keybinder [cl-struct-package-desc xterm-keybinder (20150808 1358) "Let you extra keybinds in xterm" ((emacs (24 3)) (cl-lib (0 5)) (let-alist (1 0 1))) tar "melpa" nil ((:keywords "convenient")) nil])
  (xterm-title [cl-struct-package-desc xterm-title (20091203 1023) "Update xterm titles" nil single "melpa" nil nil nil])
  (xtest [cl-struct-package-desc xtest (20141214 906) "Simple Testing with Emacs & ERT" ((cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/promethial/xtest") (:keywords "testing" "ert")) nil] [cl-struct-package-desc xtest (1 1 0) "Simple Testing with Emacs & ERT" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/promethial/xtest") (:keywords "testing" "ert")) nil])
  (yabin [cl-struct-package-desc yabin (20140205 1951) "Yet Another Bignum package (A thin wrapper of calc.el)." nil single "melpa" nil ((:keywords "data")) nil])
  (yafolding [cl-struct-package-desc yafolding (20141202 2056) "Yet another folding extension for Emacs" nil single "melpa" nil ((:keywords "folding")) nil] [cl-struct-package-desc yafolding (0 1 4) "Yet another folding extension for Emacs" nil single "melpa-stable" nil ((:keywords "folding")) nil])
  (yalinum [cl-struct-package-desc yalinum (20130217 243) "yet another display line numbers." nil single "melpa" nil ((:keywords "convenience" "tools")) nil])
  (yandex-weather [cl-struct-package-desc yandex-weather (20150821 414) "No description available." nil tar "melpa" nil nil nil])
  (yard-mode [cl-struct-package-desc yard-mode (20140816 1044) "Minor mode for Ruby YARD comments" nil single "melpa" nil ((:url . "https://github.com/pd/yard-mode.el")) nil])
  (yatemplate [cl-struct-package-desc yatemplate (20151111 1055) "File templates with yasnippet" ((yasnippet (0 8 1))) single "melpa" nil ((:url . "https://github.com/mineo/yatemplate") (:keywords "files" "convenience")) nil] [cl-struct-package-desc yatemplate (1 0) "File templates with yasnippet" ((yasnippet (0 8 1))) single "melpa-stable" nil ((:url . "https://github.com/mineo/yatemplate") (:keywords "files" "convenience")) nil])
  (yatex [cl-struct-package-desc yatex (20151014 2028) "Yet Another tex-mode for emacs //野鳥//" nil tar "melpa" nil nil nil] [cl-struct-package-desc yatex (0) "No description available." nil tar "melpa-stable" nil nil nil])
  (yaxception [cl-struct-package-desc yaxception (20150105 652) "Provide framework about exception like Java for Elisp" nil single "melpa" nil ((:url . "https://github.com/aki2o/yaxception") (:keywords "exception" "error" "signal")) nil] [cl-struct-package-desc yaxception (0 3 3) "Provide framework about exception like Java for Elisp" nil single "melpa-stable" nil ((:url . "https://github.com/aki2o/yaxception") (:keywords "exception" "error" "signal")) nil])
  (ycm [cl-struct-package-desc ycm (20150822 1136) "Emacs client for the YouCompleteMe auto-completion server." nil single "melpa" nil ((:keywords "c" "abbrev")) nil])
  (ycmd [cl-struct-package-desc ycmd (20151028 634) "emacs bindings to the ycmd completion server" ((emacs (24)) (f (0 17 1)) (dash (1 2 0)) (deferred (0 3 2)) (popup (0 5 0))) tar "melpa" nil ((:url . "https://github.com/abingham/emacs-ycmd")) nil] [cl-struct-package-desc ycmd (0 9) "emacs bindings to the ycmd completion server" ((emacs (24)) (f (0 17 1)) (dash (1 2 0)) (deferred (0 3 2)) (popup (0 5 0))) tar "melpa-stable" nil ((:url . "https://github.com/abingham/emacs-ycmd")) nil])
  (youdao-dictionary [cl-struct-package-desc youdao-dictionary (20150913 2344) "Youdao Dictionary interface for Emacs" ((popup (0 5 0)) (chinese-word-at-point (0 2)) (names (0 5)) (emacs (24))) single "melpa" nil ((:url . "https://github.com/xuchunyang/youdao-dictionary.el") (:keywords "convenience" "chinese" "dictionary")) nil] [cl-struct-package-desc youdao-dictionary (0 3) "Youdao Dictionary interface for Emacs" ((popup (0 5 0)) (chinese-word-at-point (0 2)) (names (0 5)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/xuchunyang/youdao-dictionary.el") (:keywords "convenience" "chinese" "dictionary")) nil])
  (zerodark-theme [cl-struct-package-desc zerodark-theme (20151106 334) "A dark, medium contrast theme for Emacs" nil single "melpa" nil ((:url . "https://github.com/NicolasPetton/zerodark-theme") (:keywords "themes")) nil] [cl-struct-package-desc zerodark-theme (1 0) "A dark, medium contrast theme for Emacs" nil single "melpa-stable" nil ((:url . "https://github.com/NicolasPetton/zerodark-theme") (:keywords "themes")) nil])
  (zlc [cl-struct-package-desc zlc (20151010 1857) "Provides zsh like completion system to Emacs" nil single "melpa" nil ((:keywords "matching" "convenience")) nil])
  (zombie [cl-struct-package-desc zombie (20141222 816) "major mode for editing ZOMBIE programs" nil single "melpa" nil ((:url . "http://hins11.yu-yake.com/")) nil])
  (zombie-trellys-mode [cl-struct-package-desc zombie-trellys-mode (20150304 648) "A minor mode for interaction with Zombie Trellys" ((emacs (24)) (cl-lib (0 5)) (haskell-mode (1 5))) single "melpa" nil ((:keywords "languages")) nil] [cl-struct-package-desc zombie-trellys-mode (0 2 1) "A minor mode for interaction with Zombie Trellys" ((emacs (24)) (cl-lib (0 5)) (haskell-mode (1 5))) single "melpa-stable" nil ((:keywords "languages")) nil])
  (zones [cl-struct-package-desc zones (20150908 1238) "Zones of text - like multiple regions" nil single "melpa" nil ((:url . "http://www.emacswiki.org/zones.el") (:keywords "narrow" "restriction" "widen" "region" "zone")) nil])
  (zonokai-theme [cl-struct-package-desc zonokai-theme (20150408 2002) "No description available." nil tar "melpa" nil nil nil])
  (zoom-frm [cl-struct-package-desc zoom-frm (20151101 1024) "Commands to zoom frame font size." ((frame-fns (0)) (frame-cmds (0))) single "melpa" nil ((:url . "http://www.emacswiki.org/zoom-frm.el") (:keywords "frames" "extensions" "convenience")) nil])
  (zoom-window [cl-struct-package-desc zoom-window (20151031 632) "Zoom window like tmux" nil single "melpa" nil ((:url . "https://github.com/syohex/emacs-zoom-window")) nil] [cl-struct-package-desc zoom-window (0 1) "Zoom window like tmux" nil single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-zoom-window")) nil])
  (zop-to-char [cl-struct-package-desc zop-to-char (20150901 47) "A replacement of zap-to-char." ((cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/thierryvolpiatto/zop-to-char")) nil] [cl-struct-package-desc zop-to-char (1 0) "A replacement of zap-to-char." ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/thierryvolpiatto/zop-to-char")) nil])
  (zossima [cl-struct-package-desc zossima (20121123 1635) "Ruby from Emacs" ((inf-ruby (2 2 3))) tar "melpa" nil ((:url . "https://github.com/technomancy/zossima") (:keywords "ruby" "convenience")) nil])
  (zotelo [cl-struct-package-desc zotelo (20151105 341) "Manage Zotero collections from emacs" ((cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/vitoshka/zotelo") (:keywords "zotero" "emacs" "reftex" "bibtex" "mozrepl" "bibliography manager")) nil] [cl-struct-package-desc zotelo (1 3) "Manage Zotero collections from emacs" nil single "melpa-stable" nil ((:url . "https://github.com/vitoshka/zotelo") (:keywords "zotero" "emacs" "reftex" "bibtex" "mozrepl" "bibliography manager")) nil])
  (zotxt [cl-struct-package-desc zotxt (20151031 959) "Tools to integrate emacs with Zotero via the zotxt plugin." ((request-deferred (0 2 0))) tar "melpa" nil nil nil])
  (zygospore [cl-struct-package-desc zygospore (20140703 152) "reversible C-x 1 (delete-other-windows)" nil single "melpa" nil ((:url . "https://github.com/louiskottmann/zygospore.el")) nil] [cl-struct-package-desc zygospore (0 0 3) "reversible C-x 1 (delete-other-windows)" nil single "melpa-stable" nil ((:url . "https://github.com/louiskottmann/zygospore.el")) nil])
  (zzz-to-char [cl-struct-package-desc zzz-to-char (20151030 32) "Fancy version of `zap-to-char' command" ((emacs (24 4)) (cl-lib (0 5)) (avy (0 3 0))) single "melpa" nil ((:url . "https://github.com/mrkkrp/zzz-to-char") (:keywords "convenience")) nil] [cl-struct-package-desc zzz-to-char (0 1 0) "Fancy version of `zap-to-char' command" ((emacs (24 4)) (cl-lib (0 5)) (avy (0 3 0))) single "melpa-stable" nil ((:url . "https://github.com/mrkkrp/zzz-to-char") (:keywords "convenience")) nil])
  (abl-mode [cl-struct-package-desc abl-mode (20140724 635) "Python TDD minor mode" nil single "melpa" nil ((:url . "http://github.com/afroisalreadyinu/abl-mode")) nil] [cl-struct-package-desc abl-mode (0 9 0) "Python TDD minor mode" nil single "marmalade" nil nil nil])
  (ac-R [cl-struct-package-desc ac-R (0 2) "Autocompletion routines for R" nil single "marmalade" nil nil nil])
  (ac-cider [cl-struct-package-desc ac-cider (20151012 308) "Clojure auto-complete sources using CIDER" ((cider (0 8 0)) (auto-complete (1 4)) (cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/clojure-emacs/ac-cider") (:keywords "languages" "clojure" "nrepl" "cider" "compliment")) nil] [cl-struct-package-desc ac-cider (0 2 1) "Clojure auto-complete sources using CIDER" ((cider (0 8 0)) (auto-complete (1 4)) (cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/clojure-emacs/ac-cider") (:keywords "languages" "clojure" "nrepl" "cider" "compliment")) nil] [cl-struct-package-desc ac-cider (0 2 0) "Clojure auto-complete sources using CIDER" ((cider (0 8 0)) (auto-complete (1 4)) (cl-lib (0 3))) single "marmalade" nil nil nil])
  (ac-geiser [cl-struct-package-desc ac-geiser (20130928 2347) "Auto-complete backend for geiser" ((geiser (0 5)) (auto-complete (1 4))) tar "melpa" nil nil nil] [cl-struct-package-desc ac-geiser (0 1) "Auto-complete backend for geiser" ((geiser (0 5)) (auto-complete (1 4))) tar "melpa-stable" nil nil nil] [cl-struct-package-desc ac-geiser (0 1) "Auto-complete backend for geiser" ((geiser (0 5)) (auto-complete (1 4))) tar "marmalade" nil nil nil])
  (ac-inf-ruby [cl-struct-package-desc ac-inf-ruby (20131115 350) "Enable auto-complete in inf-ruby sessions" ((inf-ruby (2 3 2)) (auto-complete (1 4))) single "melpa" nil ((:keywords "languages" "tools")) nil] [cl-struct-package-desc ac-inf-ruby (0 4) "Enable auto-complete in inf-ruby sessions" ((inf-ruby (2 3 2)) (auto-complete (1 4))) single "melpa-stable" nil ((:keywords "languages" "tools")) nil] [cl-struct-package-desc ac-inf-ruby (0 4) "Enable auto-complete in inf-ruby sessions" ((inf-ruby (2 3 2)) (auto-complete (1 4))) single "marmalade" nil nil nil])
  (ac-ja [cl-struct-package-desc ac-ja (0 0 1) "auto-complete-mode source for Japanese" nil single "marmalade" nil nil nil])
  (ac-nrepl [cl-struct-package-desc ac-nrepl (0 21) "auto-complete sources for Clojure using nrepl completions" ((cider (0 1)) (auto-complete (1 4))) single "marmalade" nil nil nil])
  (ac-python [cl-struct-package-desc ac-python (20110519) "Simple Python Completion Source for Auto-Complete" ((auto-complete (1 4))) single "marmalade" nil nil nil])
  (ac-slime [cl-struct-package-desc ac-slime (20150729 2035) "An auto-complete source using slime completions" ((auto-complete (1 4)) (slime (2 9)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/purcell/ac-slime")) nil] [cl-struct-package-desc ac-slime (0 8) "An auto-complete source using slime completions" ((auto-complete (1 4)) (slime (2 9)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/purcell/ac-slime")) nil] [cl-struct-package-desc ac-slime (0 5) "An auto-complete source using slime completions" nil single "marmalade" nil nil nil])
  (ace-jump-mode [cl-struct-package-desc ace-jump-mode (20140616 115) "a quick cursor location minor mode for emacs" nil single "melpa" nil ((:url . "https://github.com/winterTTr/ace-jump-mode/") (:keywords "motion" "location" "cursor")) nil] [cl-struct-package-desc ace-jump-mode (2 0) "a quick cursor location minor mode for emacs" nil single "melpa-stable" nil ((:url . "https://github.com/winterTTr/ace-jump-mode/") (:keywords "motion" "location" "cursor")) nil] [cl-struct-package-desc ace-jump-mode (2 0 0 0) "a quick cursor location minor mode for emacs" nil single "marmalade" nil nil nil])
  (ack-and-a-half [cl-struct-package-desc ack-and-a-half (1 2 0) "Yet another front-end for ack" nil single "marmalade" nil nil nil])
  (adoc-mode [cl-struct-package-desc adoc-mode (20150524 909) "a major-mode for editing AsciiDoc files in Emacs" ((markup-faces (1 0 0))) single "melpa" nil ((:url . "https://github.com/sensorflo/adoc-mode/wiki") (:keywords "wp" "asciidoc")) nil] [cl-struct-package-desc adoc-mode (0 6 4) "a major-mode for editing AsciiDoc files in Emacs" ((markup-faces (1 0 0))) single "melpa-stable" nil ((:url . "https://github.com/sensorflo/adoc-mode/wiki") (:keywords "wp" "asciidoc")) nil] [cl-struct-package-desc adoc-mode (0 6 2) "a major-mode for editing AsciiDoc files in Emacs" ((markup-faces (1 0 0))) single "marmalade" nil nil nil])
  (ag [cl-struct-package-desc ag (20151102 1429) "A front-end for ag ('the silver searcher'), the C ack replacement." ((dash (2 8 0)) (s (1 9 0)) (cl-lib (0 5))) single "melpa" nil nil nil] [cl-struct-package-desc ag (0 46) "A front-end for ag ('the silver searcher'), the C ack replacement." ((dash (2 8 0)) (s (1 9 0)) (cl-lib (0 5))) single "melpa-stable" nil nil nil] [cl-struct-package-desc ag (0 42) "A front-end for ag ('the silver searcher'), the C ack replacement." nil single "marmalade" nil nil nil])
  (ahg [cl-struct-package-desc ahg (20151030 737) "Alberto's Emacs interface for Mercurial (Hg)" nil single "melpa" nil ((:url . "https://bitbucket.org/agriggio/ahg")) nil] [cl-struct-package-desc ahg (0 99) "Alberto's Emacs interface for Mercurial (Hg)" nil single "marmalade" nil nil nil])
  (alchemist [cl-struct-package-desc alchemist (20151027 2251) "Elixir tooling integration into Emacs" ((elixir-mode (2 2 5)) (dash (2 11 0)) (emacs (24 4)) (company (0 8 0)) (pkg-info (0 4))) tar "melpa" nil ((:url . "http://www.github.com/tonini/alchemist.el") (:keywords "languages" "elixir" "elixirc" "mix" "hex" "alchemist")) nil] [cl-struct-package-desc alchemist (1 6 0) "Elixir tooling integration into Emacs" ((elixir-mode (2 2 5)) (dash (2 11 0)) (emacs (24 4)) (company (0 8 0)) (pkg-info (0 4))) tar "melpa-stable" nil ((:url . "http://www.github.com/tonini/alchemist.el") (:keywords "languages" "elixir" "elixirc" "mix" "hex" "alchemist")) nil] [cl-struct-package-desc alchemist (1 5 0) "Elixir tooling integration into Emacs" ((elixir-mode (2 2 5)) (dash (2 11 0)) (emacs (24 4)) (company (0 8 0)) (pkg-info (0 4))) tar "marmalade" nil nil nil])
  (align-cljlet [cl-struct-package-desc align-cljlet (20151105 2354) "Space align various Clojure forms" ((clojure-mode (1 11 5))) single "melpa" nil ((:url . "https://github.com/gstamp/align-cljlet")) nil] [cl-struct-package-desc align-cljlet (0 3) "Space align various Clojure forms" ((clojure-mode (1 11 5))) single "marmalade" nil nil nil])
  (alpha [cl-struct-package-desc alpha (1 0) "increase frame transparency" nil single "marmalade" nil nil nil])
  (ample-theme [cl-struct-package-desc ample-theme (20150814 1101) "Calm Dark Theme for Emacs" nil tar "melpa" nil ((:url . "https://github.com/jordonbiondo/ample-theme") (:keywords "theme" "dark")) nil] [cl-struct-package-desc ample-theme (0 12) "Calm Dark Theme for Emacs" ((color-theme (6 5 5))) single "marmalade" nil nil nil])
  (ample-zen-theme [cl-struct-package-desc ample-zen-theme (20150119 1354) "AmpleZen Theme for Emacs 24" nil single "melpa" nil ((:url . "https://github.com/mjwall/ample-zen") (:keywords "theme" "dark" "emacs 24")) nil] [cl-struct-package-desc ample-zen-theme (0 3) "AmpleZen Theme for Emacs 24" nil single "marmalade" nil nil nil])
  (anaphora [cl-struct-package-desc anaphora (20140728 1536) "anaphoric macros providing implicit temp variables" nil single "melpa" nil ((:url . "http://github.com/rolandwalker/anaphora") (:keywords "extensions")) nil] [cl-struct-package-desc anaphora (1 0 0) "anaphoric macros providing implicit temp variables" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/anaphora") (:keywords "extensions")) nil] [cl-struct-package-desc anaphora (1 0 0) "anaphoric macros providing implicit temp variables" nil single "marmalade" nil nil nil])
  (android-mode [cl-struct-package-desc android-mode (20150106 544) "Minor mode for Android application development" nil single "melpa" nil ((:url . "https://github.com/remvee/android-mode") (:keywords "tools" "processes")) nil] [cl-struct-package-desc android-mode (0 4 0) "Minor mode for Android application development" nil single "melpa-stable" nil ((:url . "https://github.com/remvee/android-mode") (:keywords "tools" "processes")) nil] [cl-struct-package-desc android-mode (0 4 0) "Minor mode for Android application development" nil single "marmalade" nil nil nil])
  (angular-snippets [cl-struct-package-desc angular-snippets (20140513 2223) "Yasnippets for AngularJS" ((s (1 4 0)) (dash (1 2 0))) tar "melpa" nil nil nil] [cl-struct-package-desc angular-snippets (0 2 3) "Yasnippets for AngularJS" ((s (1 4 0)) (dash (1 2 0))) tar "melpa-stable" nil nil nil] [cl-struct-package-desc angular-snippets (0 2 3) "Yasnippets for AngularJS" ((s (1 4 0)) (dash (1 2 0))) tar "marmalade" nil nil nil])
  (annotate [cl-struct-package-desc annotate (20151006 933) "annotate files without changing them" nil single "melpa" nil ((:url . "https://github.com/bastibe/annotate.el")) nil] [cl-struct-package-desc annotate (0 4 4) "annotate files without changing them" nil single "melpa-stable" nil ((:url . "https://github.com/bastibe/annotate.el")) nil] [cl-struct-package-desc annotate (0 4 4) "annotate files without changing them" nil single "marmalade" nil nil nil])
  (ansible-doc [cl-struct-package-desc ansible-doc (20150524 1005) "Ansible documentation Minor Mode" ((emacs (24 1))) single "melpa" nil ((:url . "https://github.com/lunaryorn/ansible-doc.el") (:keywords "tools" "help")) nil] [cl-struct-package-desc ansible-doc (0 3) "Ansible documentation Minor Mode" ((emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/lunaryorn/ansible-doc.el") (:keywords "tools" "help")) nil] [cl-struct-package-desc ansible-doc (0 3) "Ansible documentation Minor Mode" ((emacs (24 1))) single "marmalade" nil nil nil])
  (anzu [cl-struct-package-desc anzu (20151015 405) "Show number of matches in mode-line while searching" ((cl-lib (0 5)) (emacs (24))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-anzu")) nil] [cl-struct-package-desc anzu (0 59) "Show number of matches in mode-line while searching" ((cl-lib (0 5)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-anzu")) nil] [cl-struct-package-desc anzu (0 22) "Show number of matches in mode-line while searching" nil single "marmalade" nil nil nil])
  (aok [cl-struct-package-desc aok (20130824 427) "various useful ways to do `multi-occur'" nil single "melpa" nil nil nil] [cl-struct-package-desc aok (0 1) "various useful ways to do `multi-occur'" nil single "marmalade" nil nil nil])
  (apache-mode [cl-struct-package-desc apache-mode (20150828 714) "major mode for editing Apache configuration files" nil single "melpa" nil ((:keywords "languages" "faces")) nil] [cl-struct-package-desc apache-mode (2 0) "major mode for editing Apache configuration files" nil single "marmalade" nil nil nil])
  (applescript-mode [cl-struct-package-desc applescript-mode (20090320 2332) "major mode for editing AppleScript source" nil single "melpa" nil ((:keywords "languages" "tools")) nil] [cl-struct-package-desc applescript-mode (1 1) "major mode for editing AppleScript source" nil single "marmalade" nil nil nil])
  (apt-utils [cl-struct-package-desc apt-utils (1 212) "Emacs interface to APT (Debian package management)" nil single "marmalade" nil nil nil])
  (apt-utils-ido [cl-struct-package-desc apt-utils-ido (0 2) "Ido commands for apt-utils" ((apt-utils (1 212))) single "marmalade" nil nil nil])
  (ariadne [cl-struct-package-desc ariadne (20131117 911) "Ariadne plugin for Emacs" ((bert (0 1))) single "melpa" nil ((:keywords "comm" "convenience" "processes")) nil] [cl-struct-package-desc ariadne (0 1) "Ariadne plugin for Emacs" ((bert (0 1))) single "marmalade" nil nil nil])
  (ascii [cl-struct-package-desc ascii (20130824 500) "ASCII code display." nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/ViniciusJoseLatorre") (:keywords "data" "ascii")) nil] [cl-struct-package-desc ascii (3 1) "ASCII code display." nil single "marmalade" nil nil nil])
  (assemblage-theme [cl-struct-package-desc assemblage-theme (20130715 621) "a dark theme for Emacs 24" nil single "marmalade" nil nil nil])
  (async [cl-struct-package-desc async (20151104 2113) "Asynchronous processing in Emacs" ((emacs (24)) (cl-lib (0 5))) tar "melpa" nil ((:url . "https://github.com/jwiegley/emacs-async")) nil] [cl-struct-package-desc async (1 5) "Asynchronous processing in Emacs" ((emacs (24)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/jwiegley/emacs-async")) nil] [cl-struct-package-desc async (1 5) "Asynchronous processing in Emacs" nil tar "marmalade" nil nil nil])
  (auto-complete [cl-struct-package-desc auto-complete (20151112 2030) "Auto Completion for GNU Emacs" ((popup (0 5 0)) (cl-lib (0 5))) tar "melpa" nil nil nil] [cl-struct-package-desc auto-complete (1 5 0) "Auto Completion for GNU Emacs" ((popup (0 5 0)) (cl-lib (0 5))) tar "melpa-stable" nil nil nil] [cl-struct-package-desc auto-complete (1 4) "Auto Completion for GNU Emacs" ((popup (0 5))) tar "marmalade" nil nil nil])
  (auto-complete-etags [cl-struct-package-desc auto-complete-etags (0 2) "Auto-complete etags" ((auto-complete (1 3))) single "marmalade" nil nil nil])
  (auto-complete-octave [cl-struct-package-desc auto-complete-octave (0 1) "Auto-complete for Octave" nil single "marmalade" nil nil nil])
  (auto-complete-verilog [cl-struct-package-desc auto-complete-verilog (0 0) "Verukig" nil single "marmalade" nil nil nil])
  (auto-highlight-symbol [cl-struct-package-desc auto-highlight-symbol (20130313 243) "Automatic highlighting current symbol minor mode" nil single "melpa" nil ((:url . "http://github.com/gennad/auto-highlight-symbol/raw/master/auto-highlight-symbol.el") (:keywords "highlight" "face" "match" "convenience")) nil] [cl-struct-package-desc auto-highlight-symbol (1 55) "Automatic highlighting current symbol minor mode" nil single "marmalade" nil nil nil])
  (auto-indent-mode [cl-struct-package-desc auto-indent-mode (20140505 655) "Auto indent Minor mode" nil tar "melpa" nil ((:url . "https://github.com/mlf176f2/auto-indent-mode.el/") (:keywords "auto" "indentation")) nil] [cl-struct-package-desc auto-indent-mode (0 126) "Auto indent Minor mode" nil tar "melpa-stable" nil ((:url . "https://github.com/mlf176f2/auto-indent-mode.el/") (:keywords "auto" "indentation")) nil] [cl-struct-package-desc auto-indent-mode (0 126) "Auto indent Minor mode" nil single "marmalade" nil nil nil])
  (autopair [cl-struct-package-desc autopair (20140825 427) "Automagically pair braces and quotes like TextMate" ((cl-lib (0 3))) single "melpa" nil ((:url . "http://autopair.googlecode.com") (:keywords "convenience" "emulations")) nil] [cl-struct-package-desc autopair (0 6 1) "Automagically pair braces and quotes like TextMate" ((cl-lib (0 3))) single "melpa-stable" nil ((:url . "http://autopair.googlecode.com") (:keywords "convenience" "emulations")) nil] [cl-struct-package-desc autopair (0 3) "Automagically pair braces and quotes like TextMate" nil single "marmalade" nil nil nil])
  (awk-it [cl-struct-package-desc awk-it (20130917 1148) "Run AWK interactively on region!" nil single "melpa" nil ((:keywords "awk")) nil] [cl-struct-package-desc awk-it (0 77) "Run AWK interactively on region!" nil single "marmalade" nil nil nil])
  (babcore [cl-struct-package-desc babcore (0 0 5) "Core Emacs configuration. This should be the minimum in every emacs config." nil single "marmalade" nil nil nil])
  (back-button [cl-struct-package-desc back-button (20150804 1304) "Visual navigation through mark rings" ((nav-flash (1 0 0)) (smartrep (0 0 3)) (ucs-utils (0 7 2)) (list-utils (0 4 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa" nil ((:url . "http://github.com/rolandwalker/back-button") (:keywords "convenience" "navigation" "interface")) nil] [cl-struct-package-desc back-button (0 6 6) "Visual navigation through mark rings" ((nav-flash (1 0 0)) (smartrep (0 0 3)) (ucs-utils (0 7 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/back-button") (:keywords "convenience" "navigation" "interface")) nil] [cl-struct-package-desc back-button (0 6 6) "Visual navigation through mark rings" ((nav-flash (1 0 0)) (smartrep (0 0 3)) (ucs-utils (0 7 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "marmalade" nil nil nil])
  (backtrace-mode [cl-struct-package-desc backtrace-mode (0 0 10) "A better way to browse /var/log/messages files" nil single "marmalade" nil nil nil])
  (bang [cl-struct-package-desc bang (0 1 0) "A modern list library for Emacs" nil single "marmalade" nil nil nil])
  (bar-cursor [cl-struct-package-desc bar-cursor (1 1) "package used to switch block cursor to a bar" nil single "marmalade" nil nil nil])
  (batch-mode [cl-struct-package-desc batch-mode (20140807 1350) "major mode for editing ESRI batch scrips" nil single "melpa" nil nil nil] [cl-struct-package-desc batch-mode (1 0) "major mode for editing ESRI batch scrips" nil single "marmalade" nil nil nil])
  (bbcode-mode [cl-struct-package-desc bbcode-mode (20141103 1341) "Major mode for writing BBCode markup" nil single "melpa" nil ((:url . "https://github.com/ejmr/bbcode-mode")) nil] [cl-struct-package-desc bbcode-mode (2 0 0) "Major mode for writing BBCode markup" nil single "melpa-stable" nil ((:url . "https://github.com/ejmr/bbcode-mode")) nil] [cl-struct-package-desc bbcode-mode (1 1 0) "Major mode for writing BBCode markup" nil single "marmalade" nil nil nil])
  (bbdb-ext [cl-struct-package-desc bbdb-ext (20130513 1152) "Extra commands for BBDB" ((bbdb (2 36))) single "melpa" nil ((:url . "https://github.com/vapniks/bbdb-ext") (:keywords "extensions")) nil] [cl-struct-package-desc bbdb-ext (0 1) "Extra commands for BBDB" ((bbdb (2 36))) single "marmalade" nil nil nil])
  (bbdb2erc [cl-struct-package-desc bbdb2erc (20130606 2329) "make bbdb show if pal is online with ERC, click i to chat" ((bbdb (3 0))) single "melpa" nil ((:keywords "irc" "contacts" "chat" "client" "internet")) nil] [cl-struct-package-desc bbdb2erc (0 1 3) "make bbdb show if pal is online with ERC, click i to chat" ((bbdb (3 0))) single "melpa-stable" nil ((:keywords "irc" "contacts" "chat" "client" "internet")) nil] [cl-struct-package-desc bbdb2erc (0 1 0) "make bbdb show if pal is online with ERC, click i to chat" nil single "marmalade" nil nil nil])
  (bert [cl-struct-package-desc bert (20131117 214) "BERT serialization library for Emacs" nil single "melpa" nil ((:keywords "comm" "data")) nil] [cl-struct-package-desc bert (0 1) "BERT serialization library for Emacs" nil single "marmalade" nil nil nil])
  (better-defaults [cl-struct-package-desc better-defaults (20150404 223) "Fixing weird quirks and poor defaults" nil single "melpa" nil ((:url . "https://github.com/technomancy/better-defaults") (:keywords "convenience")) nil] [cl-struct-package-desc better-defaults (0 1 2) "Fixing weird quirks and poor defaults" nil single "melpa-stable" nil ((:url . "https://github.com/technomancy/better-defaults") (:keywords "convenience")) nil] [cl-struct-package-desc better-defaults (0 1 2) "Fixing weird quirks and poor defaults" nil single "marmalade" nil nil nil])
  (bigint [cl-struct-package-desc bigint (1 0 0) "A simple bigint package for emacs" nil single "marmalade" nil nil nil])
  (bitlbee [cl-struct-package-desc bitlbee (20130328 1018) "Help get Bitlbee (http://www.bitlbee.org) up and running." nil single "melpa" nil nil nil] [cl-struct-package-desc bitlbee (1 0) "Help get Bitlbee (http://www.bitlbee.org) up and running" nil single "marmalade" nil nil nil])
  (bitly [cl-struct-package-desc bitly (20130503 149) "Shorten URLs using the bitly.com shortener service" nil single "melpa" nil ((:url . "https://github.com/jorgenschaefer/bitly-el")) nil] [cl-struct-package-desc bitly (1 0) "Shorten URLs using the bitly.com shortener service" nil single "marmalade" nil nil nil])
  (bm [cl-struct-package-desc bm (20151105 1522) "Visible bookmarks in buffer." nil single "melpa" nil ((:url . "https://github.com/joodland/bm") (:keywords "bookmark" "highlight" "faces" "persistent")) nil] [cl-struct-package-desc bm (1 53) "Visible bookmarks in buffer." nil single "marmalade" nil nil nil])
  (boxquote [cl-struct-package-desc boxquote (20081011 1326) "Quote text with a semi-box." nil single "melpa" nil nil nil] [cl-struct-package-desc boxquote (1 23) "Quote text with a semi-box." nil single "marmalade" nil nil nil] [cl-struct-package-desc boxquote (1 22) "Quote text with a semi-box." nil single "melpa-stable" nil nil nil])
  (browse-kill-ring [cl-struct-package-desc browse-kill-ring (20150829 632) "interactively insert items from kill-ring" nil single "melpa" nil ((:url . "https://github.com/browse-kill-ring/browse-kill-ring") (:keywords "convenience")) nil] [cl-struct-package-desc browse-kill-ring (2 0 0) "interactively insert items from kill-ring" nil single "melpa-stable" nil ((:url . "https://github.com/browse-kill-ring/browse-kill-ring") (:keywords "convenience")) nil] [cl-struct-package-desc browse-kill-ring (2 0 0) "interactively insert items from kill-ring" nil single "marmalade" nil nil nil])
  (browse-url-dwim [cl-struct-package-desc browse-url-dwim (20140731 1222) "Context-sensitive external browse URL or Internet search" ((string-utils (0 3 2))) single "melpa" nil ((:url . "http://github.com/rolandwalker/browse-url-dwim") (:keywords "hypermedia")) nil] [cl-struct-package-desc browse-url-dwim (0 6 8) "Context-sensitive external browse URL or Internet search" ((string-utils (0 3 2))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/browse-url-dwim") (:keywords "hypermedia")) nil] [cl-struct-package-desc browse-url-dwim (0 6 6) "Context-sensitive external browse URL or Internet search" ((string-utils (0 3 2))) single "marmalade" nil nil nil])
  (bs-ext [cl-struct-package-desc bs-ext (20130824 459) "Extensions to emacs buffer-selection library (bs.el)" nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/bs-ext.el") (:keywords "convenience" "files")) nil] [cl-struct-package-desc bs-ext (0 2) "Extensions to emacs buffer-selection library (bs.el)" nil single "marmalade" nil nil nil])
  (bubbleberry-theme [cl-struct-package-desc bubbleberry-theme (20141017 244) "A theme based on LightTable for Emacs24" ((emacs (24 1))) single "melpa" nil ((:url . "https://github.com/jasonm23/emacs-bubbleberry-theme")) nil] [cl-struct-package-desc bubbleberry-theme (0 1 2) "A theme based on LightTable for Emacs24" ((emacs (24 1))) single "marmalade" nil nil nil])
  (buffer-file-utils [cl-struct-package-desc buffer-file-utils (1 0) "utilities operating on a buffer and the associated file" nil single "marmalade" nil nil nil])
  (buffer-move [cl-struct-package-desc buffer-move (20151106 49) "easily swap buffers" nil single "melpa" nil ((:url . "https://github.com/lukhas/buffer-move") (:keywords "lisp" "convenience")) nil] [cl-struct-package-desc buffer-move (0 6 2) "" nil single "melpa-stable" nil ((:url . "https://github.com/lukhas/buffer-move") (:keywords "lisp" "convenience")) nil] [cl-struct-package-desc buffer-move (0 6 1) "" nil single "marmalade" nil nil nil])
  (buffer-stack [cl-struct-package-desc buffer-stack (20101223 220) "Enhanced intelligent switch-to-other-buffer replacement." nil single "melpa" nil ((:url . "http://www.sixfingeredman.net/proj/xemacs") (:keywords "buffer" "buffers" "switching buffers")) nil] [cl-struct-package-desc buffer-stack (1 5) "Enhanced intelligent switch-to-other-buffer replacement." nil single "marmalade" nil nil nil])
  (buffer-utils [cl-struct-package-desc buffer-utils (20140512 700) "Buffer-manipulation utility functions" nil single "melpa" nil ((:url . "http://github.com/rolandwalker/buffer-utils") (:keywords "extensions")) nil] [cl-struct-package-desc buffer-utils (0 1 0) "Buffer-manipulation utility functions" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/buffer-utils") (:keywords "extensions")) nil] [cl-struct-package-desc buffer-utils (0 1 0) "Buffer-manipulation utility functions" nil single "marmalade" nil nil nil])
  (bufshow [cl-struct-package-desc bufshow (20130711 1039) "A simple presentation tool for Emacs." ((emacs (24 1))) single "melpa" nil ((:url . "https://github.com/pjones/bufshow")) nil] [cl-struct-package-desc bufshow (0 1 0) "No description available." nil single "melpa-stable" nil nil nil] [cl-struct-package-desc bufshow (0 1 0) "A simple presentation tool for Emacs." nil tar "marmalade" nil nil nil])
  (bug-reference-github [cl-struct-package-desc bug-reference-github (20131202 1303) "Automatically set `bug-reference-url-format' in Github repositories." nil tar "melpa" nil ((:url . "https://github.com/arnested/bug-reference-github") (:keywords "programming" "tools")) nil] [cl-struct-package-desc bug-reference-github (0 2 0) "Automatically set `bug-reference-url-format' in Github repositories." nil single "melpa-stable" nil ((:url . "https://github.com/arnested/bug-reference-github") (:keywords "programming" "tools")) nil] [cl-struct-package-desc bug-reference-github (0 2 0) "Automatically set `bug-reference-url-format' in Github repositories." nil single "marmalade" nil nil nil])
  (butler [cl-struct-package-desc butler (20150811 1708) "Emacs client for Jenkins" ((deferred (0 3 2)) (json (1 2)) (emacs (24))) tar "melpa" nil nil nil] [cl-struct-package-desc butler (0 2 4) "Emacs client for Jenkins" ((deferred (3 2)) (json (1 2)) (emacs (24))) tar "melpa-stable" nil nil nil] [cl-struct-package-desc butler (0 2 0) "Emacs client for Jenkins" ((deferred (3 1)) (json (1 2))) tar "marmalade" nil nil nil])
  (buttercup [cl-struct-package-desc buttercup (20150927 306) "Behavior-Driven Emacs Lisp Testing" nil tar "melpa" nil nil nil] [cl-struct-package-desc buttercup (1 1) "Behavior-Driven Emacs Lisp Testing" nil tar "melpa-stable" nil nil nil] [cl-struct-package-desc buttercup (1 1) "Behavior-Driven Emacs Lisp Testing" nil tar "marmalade" nil nil nil])
  (button-lock [cl-struct-package-desc button-lock (20150223 554) "Clickable text defined by regular expression" nil single "melpa" nil ((:url . "http://github.com/rolandwalker/button-lock") (:keywords "mouse" "button" "hypermedia" "extensions")) nil] [cl-struct-package-desc button-lock (1 0 2) "Clickable text defined by regular expression" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/button-lock") (:keywords "mouse" "button" "hypermedia" "extensions")) nil] [cl-struct-package-desc button-lock (1 0 2) "Clickable text defined by regular expression" nil single "marmalade" nil nil nil])
  (c-eldoc [cl-struct-package-desc c-eldoc (20150904 132) "helpful description of the arguments to C functions" nil single "melpa" nil ((:url . "http://github.com/nflath/c-eldoc")) nil] [cl-struct-package-desc c-eldoc (0 7) "helpful description of the arguments to C functions" nil single "marmalade" nil nil nil])
  (cache [cl-struct-package-desc cache (20111019 1600) "implementation of a hash table whose key-value pairs expire" nil single "melpa" nil nil nil] [cl-struct-package-desc cache (0 1) "implementation of a hash table whose key-value pairs expire" nil single "marmalade" nil nil nil])
  (cacoo [cl-struct-package-desc cacoo (20120319 1659) "Minor mode for Cacoo : http://cacoo.com" ((concurrent (0 3 1))) tar "melpa" nil nil nil] [cl-struct-package-desc cacoo (2 1 2) "Minor mode for Cacoo : http://cacoo.com" ((concurrent (0 3 1))) tar "melpa-stable" nil nil nil] [cl-struct-package-desc cacoo (2 1 2) "Minor mode for Cacoo : http://cacoo.com" ((concurrent (0 3 1))) tar "marmalade" nil nil nil])
  (calfw-gcal [cl-struct-package-desc calfw-gcal (20120111 200) "edit Google calendar for calfw.el." nil tar "melpa" nil ((:url . "https://github.com/myuhe/calfw-gcal.el") (:keywords "convenience" "calendar" "calfw.el")) nil] [cl-struct-package-desc calfw-gcal (0 0 3) "edit Google calendar for calfw.el." nil single "marmalade" nil nil nil])
  (caml [cl-struct-package-desc caml (20151009 845) "OCaml code editing commands for Emacs" nil tar "melpa" nil nil nil] [cl-struct-package-desc caml (3 12 0 1) "OCaml code editing commands for Emacs" nil tar "marmalade" nil nil nil])
  (cdlatex [cl-struct-package-desc cdlatex (20140707 426) "Fast input methods for LaTeX environments and math" nil single "melpa" nil ((:keywords "tex")) nil] [cl-struct-package-desc cdlatex (4 7) "Fast input methods for LaTeX environments and math" nil single "melpa-stable" nil ((:keywords "tex")) nil] [cl-struct-package-desc cdlatex (4 0) "Fast input methods for LaTeX environments and math" nil single "marmalade" nil nil nil])
  (cedit [cl-struct-package-desc cedit (20141231 814) "paredit-like commands for c-like languages" nil single "melpa" nil ((:url . "http://hins11.yu-yake.com/")) nil] [cl-struct-package-desc cedit (0 0 0) "paredit-like commands for c-like languages" nil single "marmalade" nil nil nil])
  (celery [cl-struct-package-desc celery (20150812 147) "a minor mode to draw stats from celery and more?" ((emacs (24)) (dash-functional (2 11 0)) (s (1 9 0)) (deferred (0 3 2))) single "melpa" nil ((:url . "https://github.com/ardumont/emacs-celery") (:keywords "celery" "convenience")) nil] [cl-struct-package-desc celery (0 0 3) "a minor mode to draw stats from celery and more?" ((emacs (24)) (dash-functional (2 11 0)) (s (1 9 0)) (deferred (0 3 2))) single "melpa-stable" nil ((:url . "https://github.com/ardumont/emacs-celery") (:keywords "celery" "convenience")) nil] [cl-struct-package-desc celery (0 0 3) "a minor mode to draw stats from celery and more?" ((emacs (24)) (dash-functional (2 11 0)) (s (1 9 0)) (deferred (0 3 2))) single "marmalade" nil nil nil])
  (center-text [cl-struct-package-desc center-text (0 8) "Center the text in a fixed-width column" nil single "marmalade" nil nil nil])
  (centered-cursor-mode [cl-struct-package-desc centered-cursor-mode (20151001 634) "cursor stays vertically centered" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/centered-cursor-mode.el") (:keywords "convenience")) nil] [cl-struct-package-desc centered-cursor-mode (0 5 1) "cursor stays vertically centered" nil single "marmalade" nil nil nil])
  (charmap [cl-struct-package-desc charmap (20131019 2158) "Unicode table for Emacs" nil single "melpa" nil ((:url . "https://github.com/lateau/charmap") (:keywords "unicode" "character" "ucs")) nil] [cl-struct-package-desc charmap (0 0 1) "Unicode table for Emacs" nil single "melpa-stable" nil ((:url . "https://github.com/lateau/charmap") (:keywords "unicode" "character" "ucs")) nil] [cl-struct-package-desc charmap (0 0 1) "Unicode table for Emacs" nil single "marmalade" nil nil nil])
  (checkbox [cl-struct-package-desc checkbox (20141116 1658) "Quick manipulation of textual checkboxes" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/camdez/checkbox.el") (:keywords "convenience")) nil] [cl-struct-package-desc checkbox (0 2 1) "Quick manipulation of textual checkboxes" ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "http://github.com/camdez/checkbox.el") (:keywords "convenience")) nil] [cl-struct-package-desc checkbox (0 2 1) "Quick manipulation of textual checkboxes" ((emacs (24)) (cl-lib (0 5))) single "marmalade" nil nil nil])
  (chicken-scheme [cl-struct-package-desc chicken-scheme (20141116 1139) "Scheme-mode extensions for Chicken Scheme" nil single "melpa" nil ((:url . "http://github.com/dleslie/chicken-scheme")) nil] [cl-struct-package-desc chicken-scheme (1 3 0) "Scheme-mode extensions for Chicken Scheme" nil single "marmalade" nil nil nil])
  (chm-view [cl-struct-package-desc chm-view (20110616 1019) "View CHM file." nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/chm-view.el") (:keywords "chm" "chm-view")) nil] [cl-struct-package-desc chm-view (0 2 2) "View CHM file." nil single "marmalade" nil nil nil])
  (cider [cl-struct-package-desc cider (20151113 1129) "Clojure Interactive Development Environment that Rocks" ((emacs (24 3)) (clojure-mode (5 0 0)) (pkg-info (0 4)) (queue (0 1 1)) (spinner (1 4)) (seq (1 9))) tar "melpa" nil ((:url . "http://www.github.com/clojure-emacs/cider") (:keywords "languages" "clojure" "cider")) nil] [cl-struct-package-desc cider (0 9 1) "Clojure Interactive Development Environment that Rocks" ((clojure-mode (4 0 0)) (dash (2 4 1)) (pkg-info (0 4)) (emacs (24 3)) (queue (0 1 1))) tar "melpa-stable" nil ((:url . "http://www.github.com/clojure-emacs/cider") (:keywords "languages" "clojure" "cider")) nil] [cl-struct-package-desc cider (0 8 2) "Clojure Integrated Development Environment and REPL" ((clojure-mode (3 0 0)) (cl-lib (0 5)) (dash (2 4 1)) (pkg-info (0 4)) (emacs (24)) (queue (0 1 1))) tar "marmalade" nil nil nil])
  (circe [cl-struct-package-desc circe (20151108 458) "Client for IRC in Emacs" ((cl-lib (0 5))) tar "melpa" nil ((:url . "https://github.com/jorgenschaefer/circe")) nil] [cl-struct-package-desc circe (2 0) "Client for IRC in Emacs" ((cl-lib (0 5))) tar "melpa-stable" nil nil nil] [cl-struct-package-desc circe (1 6) "Client for IRC in Emacs" ((lui (1 6)) (lcs (1 1))) tar "marmalade" nil nil nil])
  (citrus-mode [cl-struct-package-desc citrus-mode (0 0 2) "Major mode for editing Citrus files" nil single "marmalade" nil nil nil])
  (cl-format [cl-struct-package-desc cl-format (1 1) "CL format routine." nil tar "marmalade" nil nil nil])
  (cl-lib-highlight [cl-struct-package-desc cl-lib-highlight (20140127 1312) "full cl-lib font-lock highlighting" ((cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/skeeto/cl-lib-highlight")) nil] [cl-struct-package-desc cl-lib-highlight (1 0 0) "full cl-lib font-lock highlighting" ((cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/skeeto/cl-lib-highlight")) nil] [cl-struct-package-desc cl-lib-highlight (1 0 0) "full cl-lib font-lock highlighting" ((cl-lib (0 3))) single "marmalade" nil nil nil])
  (clips-mode [cl-struct-package-desc clips-mode (20131012 1401) "Major mode for editing CLIPS code and REPL" nil tar "melpa" nil nil nil] [cl-struct-package-desc clips-mode (0 7) "Major mode for editing CLIPS code and REPL" nil tar "melpa-stable" nil nil nil] [cl-struct-package-desc clips-mode (0 7) "Major mode for editing CLIPS code and REPL" nil tar "marmalade" nil nil nil])
  (clj-mode [cl-struct-package-desc clj-mode (0 9) "basic Major mode (clj) for Clojure code" nil single "marmalade" nil nil nil])
  (clj-refactor [cl-struct-package-desc clj-refactor (20151112 117) "A collection of clojure refactoring functions" ((emacs (24 4)) (s (1 8 0)) (dash (2 4 0)) (yasnippet (0 6 1)) (paredit (24)) (multiple-cursors (1 2 2)) (cider (0 10 0 -3)) (edn (1 1 2)) (inflections (2 3)) (hydra (0 13 2))) tar "melpa" nil ((:keywords "convenience" "clojure" "cider")) nil] [cl-struct-package-desc clj-refactor (1 1 0) "A collection of clojure refactoring functions" ((emacs (24 3)) (s (1 8 0)) (dash (2 4 0)) (yasnippet (0 6 1)) (paredit (24)) (multiple-cursors (1 2 2)) (cider (0 9 1)) (edn (1 1 1))) tar "melpa-stable" nil ((:keywords "convenience" "clojure" "cider")) nil] [cl-struct-package-desc clj-refactor (1 1 0) "A collection of clojure refactoring functions" ((emacs (24 3)) (s (1 8 0)) (dash (2 4 0)) (yasnippet (0 6 1)) (paredit (24)) (multiple-cursors (1 2 2)) (cider (0 9 1)) (edn (1 1 1))) single "marmalade" nil nil nil])
  (cljdoc [cl-struct-package-desc cljdoc (0 1 0) "eldoc mode for clojure" nil single "marmalade" nil nil nil])
  (cljsbuild-mode [cl-struct-package-desc cljsbuild-mode (20140619 126) "A minor mode for the ClojureScript 'lein cljsbuild' command" nil single "melpa" nil ((:url . "http://github.com/kototama/cljsbuild-mode") (:keywords "clojure" "clojurescript" "leiningen" "compilation")) nil] [cl-struct-package-desc cljsbuild-mode (0 2 0) "A minor mode for the ClojureScript 'lein cljsbuild' command" nil single "marmalade" nil nil nil])
  (clojure-env [cl-struct-package-desc clojure-env (0 0 4) "manage clojure environments with Emacs" nil single "marmalade" nil nil nil])
  (clojure-here [cl-struct-package-desc clojure-here (0 11) "Clojure process in a buffer" nil single "marmalade" nil nil nil])
  (clojure-mode [cl-struct-package-desc clojure-mode (20151110 341) "Major mode for Clojure code" ((emacs (24 3))) single "melpa" nil ((:url . "http://github.com/clojure-emacs/clojure-mode") (:keywords "languages" "clojure" "clojurescript" "lisp")) nil] [cl-struct-package-desc clojure-mode (5 0 0) "Major mode for Clojure code" ((emacs (24 3))) single "melpa-stable" nil ((:url . "http://github.com/clojure-emacs/clojure-mode") (:keywords "languages" "clojure" "clojurescript" "lisp")) nil] [cl-struct-package-desc clojure-mode (4 0 1) "Major mode for Clojure code" ((emacs (24 1))) single "marmalade" nil nil nil])
  (clojure-mode-extra-font-locking [cl-struct-package-desc clojure-mode-extra-font-locking (20150110 505) "Extra font-locking for Clojure mode" ((clojure-mode (3 0))) single "melpa" nil ((:url . "http://github.com/clojure-emacs/clojure-mode") (:keywords "languages" "lisp")) nil] [cl-struct-package-desc clojure-mode-extra-font-locking (5 0 0) "Extra font-locking for Clojure mode" ((clojure-mode (3 0))) single "melpa-stable" nil ((:url . "http://github.com/clojure-emacs/clojure-mode") (:keywords "languages" "lisp")) nil] [cl-struct-package-desc clojure-mode-extra-font-locking (3 0 0) "Extra font-locking for Clojure mode" ((clojure-mode (3 0))) single "marmalade" nil nil nil])
  (clojure-project [cl-struct-package-desc clojure-project (1 0) "Extends project-mode for Clojure projects" ((project-mode (1 0))) single "marmalade" nil nil nil])
  (clojure-project-mode [cl-struct-package-desc clojure-project-mode (1 0) "Extends project-mode for Clojure projects" ((project-mode (1 0))) single "marmalade" nil nil nil])
  (clojurescript-mode [cl-struct-package-desc clojurescript-mode (0 5) "Major mode for ClojureScript code" nil single "marmalade" nil nil nil])
  (closure-lint-mode [cl-struct-package-desc closure-lint-mode (20101118 1324) "minor mode for the Closure Linter" nil single "melpa" nil ((:url . "https://github.com/r0man/closure-lint-mode") (:keywords "tools" "closure" "javascript" "lint" "flymake")) nil] [cl-struct-package-desc closure-lint-mode (0 1) "minor mode for the Closure Linter" nil single "marmalade" nil nil nil])
  (closure-template-html-mode [cl-struct-package-desc closure-template-html-mode (0 1) "highlighting for google closure templates" nil single "marmalade" nil nil nil])
  (cloud-to-butt-erc [cl-struct-package-desc cloud-to-butt-erc (20130627 1608) "Replace 'the cloud' with 'my butt'" nil single "melpa" nil ((:url . "http://www.github.com/leathekd/cloud-to-butt-erc")) nil] [cl-struct-package-desc cloud-to-butt-erc (1 0 0) "Replace 'the cloud' with 'my butt'" nil single "marmalade" nil nil nil])
  (clues-theme [cl-struct-package-desc clues-theme (20140922 2056) "an Emacs 24 theme which may well be fully awesome..." ((emacs (24 0))) single "melpa" nil ((:url . "https://github.com/jasonm23/emacs-clues-theme")) nil] [cl-struct-package-desc clues-theme (20130908 801) "an Emacs 24 theme which may well be fully awesome..." ((emacs (24 0))) single "marmalade" nil nil nil])
  (cm-mode [cl-struct-package-desc cm-mode (20141112 1715) "Minor mode for CriticMarkup" nil single "melpa" nil ((:keywords "text" "markdown")) nil] [cl-struct-package-desc cm-mode (1 1) "Minor mode for CriticMarkup" nil single "melpa-stable" nil ((:keywords "text" "markdown")) nil] [cl-struct-package-desc cm-mode (0 1 0) "Wrapper for CodeMirror-style Emacs modes" nil single "marmalade" nil nil nil])
  (cmake-mode [cl-struct-package-desc cmake-mode (20151012 726) "No description available." nil single "melpa" nil nil nil] [cl-struct-package-desc cmake-mode (20110824) "Major mode for editing CMake sources." nil single "marmalade" nil nil nil] [cl-struct-package-desc cmake-mode (3 4 0) "No description available." nil single "melpa-stable" nil nil nil])
  (cmake-project [cl-struct-package-desc cmake-project (20150720 1359) "Integrates CMake build process with Emacs" nil single "melpa" nil ((:url . "http://github.com/alamaison/emacs-cmake-project") (:keywords "c" "cmake" "languages" "tools")) nil] [cl-struct-package-desc cmake-project (0 7) "Integrates CMake build process with Emacs" nil single "melpa-stable" nil ((:url . "http://github.com/alamaison/emacs-cmake-project") (:keywords "c" "cmake" "languages" "tools")) nil] [cl-struct-package-desc cmake-project (0 7) "Integrates CMake build process with Emacs" nil single "marmalade" nil nil nil])
  (cmuclojure [cl-struct-package-desc cmuclojure (0 2) "Clojure process in a buffer" nil single "marmalade" nil nil nil])
  (cobra-mode [cl-struct-package-desc cobra-mode (20140116 1316) "Major mode for .NET-based Cobra language" nil single "melpa" nil ((:url . "http://github.com/Nekroze/cobra-mode") (:keywords "languages")) nil] [cl-struct-package-desc cobra-mode (1 0 1) "Major mode for .NET-based Cobra language" nil single "marmalade" nil nil nil])
  (code-headers [cl-struct-package-desc code-headers (0 7) "Navigate code with headers embedded in comments.  -*- mode: Emacs-Lisp; lexical-binding: t; -*" nil single "marmalade" nil nil nil])
  (col-highlight [cl-struct-package-desc col-highlight (20150104 1334) "Highlight the current column." ((vline (0))) single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/col-highlight.el") (:keywords "faces" "frames" "emulation" "highlight" "cursor" "accessibility")) nil] [cl-struct-package-desc col-highlight (22 0) "Highlight the current column." ((vline (1 10))) single "marmalade" nil nil nil])
  (color-file-completion [cl-struct-package-desc color-file-completion (1 0 1) "add colors to file completion" nil single "marmalade" nil nil nil])
  (color-theme [cl-struct-package-desc color-theme (20080305 34) "install color themes" nil tar "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki.pl?ColorTheme") (:keywords "faces")) nil] [cl-struct-package-desc color-theme (6 6 1) "install color themes" nil single "marmalade" nil nil nil])
  (color-theme-actress [cl-struct-package-desc color-theme-actress (0 2 2) "A dark color theme for GNU Emacs." ((color-theme (6 6 1))) single "marmalade" nil nil nil])
  (color-theme-buffer-local [cl-struct-package-desc color-theme-buffer-local (20151012 1628) "No description available." nil single "melpa" nil nil nil] [cl-struct-package-desc color-theme-buffer-local (0 0 2) "Install color-themes by buffer." nil single "marmalade" nil nil nil])
  (color-theme-cobalt [cl-struct-package-desc color-theme-cobalt (0 0 2) "Cobalt Color Theme for Emacs" ((color-theme (6 6 1))) single "marmalade" nil nil nil])
  (color-theme-complexity [cl-struct-package-desc color-theme-complexity (0 1 1) "A black and green color theme for Emacs." ((color-theme (6 6 0))) single "marmalade" nil nil nil])
  (color-theme-dg [cl-struct-package-desc color-theme-dg (0 1 0) "A black and green color theme for Emacs." ((color-theme (6 6 0))) single "marmalade" nil nil nil])
  (color-theme-dpaste [cl-struct-package-desc color-theme-dpaste (0 0 1) "Dpaste color theme for GNU Emacs." ((color-theme (6 6 1))) single "marmalade" nil nil nil])
  (color-theme-eclipse [cl-struct-package-desc color-theme-eclipse (0 0 2) "Eclipse color theme for GNU Emacs." ((color-theme (6 6 1))) single "marmalade" nil nil nil])
  (color-theme-emacs-revert-theme [cl-struct-package-desc color-theme-emacs-revert-theme (0 1) "Color-theme revert to emacs colors" nil single "marmalade" nil nil nil])
  (color-theme-github [cl-struct-package-desc color-theme-github (0 0 3) "Github color theme for GNU Emacs." ((color-theme (6 6 1))) single "marmalade" nil nil nil])
  (color-theme-gruber-darker [cl-struct-package-desc color-theme-gruber-darker (1) "Gruber Darker color theme for Emacs by Jason Blevins" ((color-theme (6 6 1))) single "marmalade" nil nil nil])
  (color-theme-heroku [cl-struct-package-desc color-theme-heroku (1 0 0) "Heroku color theme" nil single "marmalade" nil nil nil])
  (color-theme-ir-black [cl-struct-package-desc color-theme-ir-black (1 0 1) "pastel color theme" ((color-theme (6 6 1))) single "marmalade" nil nil nil])
  (color-theme-library [cl-struct-package-desc color-theme-library (0 0 10) "The real color theme functions" ((color-theme (6 6 1))) single "marmalade" nil nil nil])
  (color-theme-molokai [cl-struct-package-desc color-theme-molokai (0 1) "Molokai color theme by Lloyd" nil single "marmalade" nil nil nil])
  (color-theme-monokai [cl-struct-package-desc color-theme-monokai (0 0 5) "Monokai Color Theme for Emacs." ((color-theme (6 5 5))) single "marmalade" nil nil nil])
  (color-theme-railscasts [cl-struct-package-desc color-theme-railscasts (0 0 2) "Railscasts color theme for GNU Emacs." ((color-theme (6 6 1))) single "marmalade" nil nil nil])
  (color-theme-sanityinc-solarized [cl-struct-package-desc color-theme-sanityinc-solarized (20150803 1420) "A version of Ethan Schoonover's Solarized themes" nil tar "melpa" nil nil nil] [cl-struct-package-desc color-theme-sanityinc-solarized (2 29) "A version of Ethan Schoonover's Solarized themes" nil tar "melpa-stable" nil nil nil] [cl-struct-package-desc color-theme-sanityinc-solarized (2 25) "A version of Ethan Schoonover's Solarized themes" nil tar "marmalade" nil nil nil])
  (color-theme-sanityinc-tomorrow [cl-struct-package-desc color-theme-sanityinc-tomorrow (20150803 1419) "A version of Chris Kempson's various Tomorrow themes" nil tar "melpa" nil nil nil] [cl-struct-package-desc color-theme-sanityinc-tomorrow (1 16) "A version of Chris Kempson's various Tomorrow themes" nil tar "melpa-stable" nil nil nil] [cl-struct-package-desc color-theme-sanityinc-tomorrow (1 10) "A version of Chris Kempson's various Tomorrow themes" nil tar "marmalade" nil nil nil])
  (color-theme-solarized [cl-struct-package-desc color-theme-solarized (20150619 1734) "Solarized themes for Emacs" ((color-theme (6 5 5))) tar "melpa" nil nil nil] [cl-struct-package-desc color-theme-solarized (20120301) "Solarized themes for Emacs" nil tar "marmalade" nil nil nil])
  (color-theme-tango [cl-struct-package-desc color-theme-tango (0 0 2) "Tango palette color theme for GNU Emacs." ((color-theme (6 6 1))) single "marmalade" nil nil nil])
  (color-theme-tangotango [cl-struct-package-desc color-theme-tangotango (0 0 2) "Tango Palette color theme for Emacs." ((color-theme (6 6 1))) single "marmalade" nil nil nil])
  (color-theme-twilight [cl-struct-package-desc color-theme-twilight (0 1) "Twilight Colour Theme for Emacs." nil single "marmalade" nil nil nil])
  (color-theme-vim-insert-mode [cl-struct-package-desc color-theme-vim-insert-mode (0 1) "Color theme VIM insert mode" nil single "marmalade" nil nil nil])
  (color-theme-wombat [cl-struct-package-desc color-theme-wombat (0 0 1) "The wombat color theme for Emacs." ((color-theme (6 6 1))) single "marmalade" nil nil nil])
  (color-theme-x [cl-struct-package-desc color-theme-x (1 3) "convert color themes to X11 resource settings" nil single "marmalade" nil nil nil])
  (color-theme-zenburn [cl-struct-package-desc color-theme-zenburn (0 3) "A low contrast color theme for Emacs." ((color-theme (6 6 1))) single "marmalade" nil nil nil])
  (colour-region [cl-struct-package-desc colour-region (0 4) "Toggle regions of the buffer with different text snippets" nil single "marmalade" nil nil nil])
  (combinators [cl-struct-package-desc combinators (0 0 1) "" nil single "marmalade" nil nil nil])
  (comint-better-defaults [cl-struct-package-desc comint-better-defaults (1 0) "better defaults for comint-derived modes" nil single "marmalade" nil nil nil])
  (command-frequency [cl-struct-package-desc command-frequency (1 1) "Track command frequencies" nil single "marmalade" nil nil nil])
  (command-stats [cl-struct-package-desc command-stats (0 1) "Track frequency of commands executed in emacs" nil single "marmalade" nil nil nil])
  (command-t [cl-struct-package-desc command-t (0 0 1) "Finds file in project using fuzzy search." ((find-file-in-project (3 2)) (popwin (0 4))) single "marmalade" nil nil nil])
  (company-cmake [cl-struct-package-desc company-cmake (0 1) "company-mode completion back-end for CMake" ((company (0 6 8))) single "marmalade" nil nil nil])
  (company-inf-ruby [cl-struct-package-desc company-inf-ruby (20140805 1354) "company-mode completion back-end for inf-ruby" ((company (0 6 10)) (inf-ruby (2 2 7)) (emacs (24 1))) single "melpa" nil ((:url . "https://github.com/company-mode/company-inf-ruby")) nil] [cl-struct-package-desc company-inf-ruby (0 2) "company-mode completion back-end for inf-ruby" ((company (0 6 10)) (inf-ruby (2 2 7))) single "marmalade" nil nil nil])
  (concurrent [cl-struct-package-desc concurrent (20150309 2052) "Concurrent utility functions for emacs lisp" ((deferred (0 3 1))) single "melpa" nil ((:url . "https://github.com/kiwanami/emacs-deferred/blob/master/README-concurrent.markdown") (:keywords "deferred" "async" "concurrent")) nil] [cl-struct-package-desc concurrent (0 3 2) "Concurrent utility functions for emacs lisp" ((deferred (0 3 1))) single "melpa-stable" nil ((:url . "https://github.com/kiwanami/emacs-deferred/blob/master/README-concurrent.markdown") (:keywords "deferred" "async" "concurrent")) nil] [cl-struct-package-desc concurrent (0 3 1) "Concurrent utility functions for emacs lisp" ((deferred (0 3 1))) single "marmalade" nil nil nil])
  (config-block [cl-struct-package-desc config-block (0 0 1) "config-block is utility for individual settings (e.g. .emacs)." nil single "marmalade" nil nil nil])
  (confluence [cl-struct-package-desc confluence (20140410 1723) "Emacs mode for interacting with confluence wikis" ((xml-rpc (1 6 4))) tar "melpa" nil ((:url . "http://code.google.com/p/confluence-el/") (:keywords "confluence" "wiki" "xmlrpc")) nil] [cl-struct-package-desc confluence (1 6) "Confluence major mode" ((xml-rpc (1 6 7))) tar "marmalade" nil nil nil])
  (control-lock [cl-struct-package-desc control-lock (1 1 2) "Like caps-lock, but for your control key.  Give your pinky a rest!" nil single "marmalade" nil nil nil])
  (cparen [cl-struct-package-desc cparen (1 0) "coloured parentheses in Lisp-derived modes" nil single "marmalade" nil nil nil])
  (cppcheck [cl-struct-package-desc cppcheck (1 0) "run cppcheck putting hits in a grep buffer" nil single "marmalade" nil nil nil])
  (cpputils-cmake [cl-struct-package-desc cpputils-cmake (20151030 403) "Easy real time C++ syntax check and intellisense if you use CMake" nil tar "melpa" nil nil nil] [cl-struct-package-desc cpputils-cmake (0 5 2) "Easy real time C++ syntax check and intellisense if you use CMake" nil tar "melpa-stable" nil nil nil] [cl-struct-package-desc cpputils-cmake (0 4 8) "Easy real time C++ syntax check and intellisense if you use CMake" nil tar "marmalade" nil nil nil])
  (creds [cl-struct-package-desc creds (20140510 1006) "A parser credentials file library (not limited to credentials entries)" ((s (1 9 0)) (dash (2 5 0))) tar "melpa" nil nil nil] [cl-struct-package-desc creds (0 0 6 1) "A parser credentials file library (not limited to credentials entries)" ((s (1 9 0)) (dash (2 5 0))) tar "melpa-stable" nil nil nil] [cl-struct-package-desc creds (0 0 6 1) "A parser credentials file library (not limited to credentials entries)" ((s (1 9 0)) (dash (2 5 0))) tar "marmalade" nil nil nil])
  (creole [cl-struct-package-desc creole (20140924 800) "A parser for the Creole Wiki language" ((noflet (0 0 3)) (kv (0 0 17))) single "melpa" nil ((:keywords "lisp" "creole" "wiki")) nil] [cl-struct-package-desc creole (1 0 6) "A parser for the Creole Wiki language" ((noflet (0 0 3)) (kv (0 0 17))) single "marmalade" nil nil nil])
  (creole-mode [cl-struct-package-desc creole-mode (20130721 1750) "a markup mode for creole" nil single "melpa" nil ((:url . "https://github.com/nicferrier/creole-mode") (:keywords "hypermedia" "wp")) nil] [cl-struct-package-desc creole-mode (0 0 5) "a markup mode for creole" nil single "marmalade" nil nil nil])
  (crontab-mode [cl-struct-package-desc crontab-mode (20090510 1355) "Mode for editing crontab files" nil single "melpa" nil ((:url . "http://www.mahalito.net/~harley/elisp/crontab-mode.el") (:keywords "cron" "crontab" "emacs")) nil] [cl-struct-package-desc crontab-mode (1 2) "Mode for editing crontab files" nil single "marmalade" nil nil nil])
  (crosshairs [cl-struct-package-desc crosshairs (20150104 1339) "Highlight the current line and column." ((hl-line+ (0)) (col-highlight (0)) (vline (0))) single "melpa" nil ((:url . "http://www.emacswiki.org/crosshairs.el") (:keywords "faces" "frames" "emulation" "highlight" "cursor" "accessibility")) nil] [cl-struct-package-desc crosshairs (22 0) "Highlight the current line and column." nil single "marmalade" nil nil nil])
  (cryptol-mode [cl-struct-package-desc cryptol-mode (20140426 1004) "Cryptol major mode for Emacs" nil single "melpa" nil ((:url . "http://github.com/thoughtpolice/cryptol-mode") (:keywords "cryptol" "cryptography")) nil] [cl-struct-package-desc cryptol-mode (0 1 0) "Cryptol major mode for Emacs" nil single "melpa-stable" nil ((:url . "http://github.com/thoughtpolice/cryptol-mode") (:keywords "cryptol" "cryptography")) nil] [cl-struct-package-desc cryptol-mode (0 1 0) "Cryptol major mode for Emacs" nil single "marmalade" nil nil nil])
  (csharp-mode [cl-struct-package-desc csharp-mode (20151111 612) "C# mode derived mode" nil single "melpa" nil ((:url . "https://github.com/josteink/csharp-mode") (:keywords "c#" "languages" "oop" "mode")) nil] [cl-struct-package-desc csharp-mode (0 8 10) "C# mode derived mode" nil single "melpa-stable" nil ((:url . "https://github.com/josteink/csharp-mode") (:keywords "c#" "languages" "oop" "mode")) nil] [cl-struct-package-desc csharp-mode (0 8 10) "C# mode derived mode" nil tar "marmalade" nil nil nil])
  (ctable [cl-struct-package-desc ctable (20140304 1659) "Table component for Emacs Lisp" nil single "melpa" nil ((:url . "https://github.com/kiwanami/emacs-ctable") (:keywords "table")) nil] [cl-struct-package-desc ctable (0 1 2) "Table component for Emacs Lisp" nil single "melpa-stable" nil ((:url . "https://github.com/kiwanami/emacs-ctable") (:keywords "table")) nil] [cl-struct-package-desc ctable (0 1 1) "Table component for Emacs Lisp" nil single "marmalade" nil nil nil])
  (ctags [cl-struct-package-desc ctags (20110911 304) "Exuberant Ctags utilities for Emacs" nil single "melpa" nil ((:url . "https://bitbucket.org/semente/ctags.el") (:keywords "tags" "ctags" "etags")) nil] [cl-struct-package-desc ctags (1 1 1) "No description available." nil single "melpa-stable" nil nil nil] [cl-struct-package-desc ctags (1 1 1) "Exuberant Ctags utilities for Emacs" nil single "marmalade" nil nil nil])
  (ctags-update [cl-struct-package-desc ctags-update (20150427 2014) "(auto) update TAGS in parent directory using exuberant-ctags" nil single "melpa" nil ((:url . "https://github.com/jixiuf/helm-etags-plus") (:keywords "exuberant-ctags" "etags")) nil] [cl-struct-package-desc ctags-update (0 2 0) "(auto) update TAGS in parent directory using exuberant-ctags" nil single "melpa-stable" nil ((:url . "https://github.com/jixiuf/helm-etags-plus") (:keywords "exuberant-ctags" "etags")) nil] [cl-struct-package-desc ctags-update (0 1 2) "auto update TAGS in parent directory using exuberant-ctags" nil single "marmalade" nil nil nil])
  (ctypes [cl-struct-package-desc ctypes (1 2) "Enhanced Font lock support for custom defined types." nil single "marmalade" nil nil nil])
  (cubicle-mode [cl-struct-package-desc cubicle-mode (0 1) "Cubicle major mode for emacs" nil single "marmalade" nil nil nil])
  (cups [cl-struct-package-desc cups (0 1) "CUPS features for Emacs" nil single "marmalade" nil nil nil])
  (curl-for-url [cl-struct-package-desc curl-for-url (0 0 2) "use url-retrieve with curl doing the work" ((noflet (0 0 15))) single "marmalade" nil nil nil])
  (current-story [cl-struct-package-desc current-story (0 1 0) "Track and insert current Pivotal Tracker" nil single "marmalade" nil nil nil])
  (cursor-chg [cl-struct-package-desc cursor-chg (20150104 1339) "Change cursor dynamically, depending on the context." nil single "melpa" nil ((:url . "http://www.emacswiki.org/cursor-chg.el") (:keywords "cursor" "accessibility")) nil] [cl-struct-package-desc cursor-chg (20 1) "Change cursor dynamically, depending on the context." nil single "marmalade" nil nil nil])
  (cycbuf [cl-struct-package-desc cycbuf (20131203 1237) "Cycle buffers, inspired by swbuff.el, swbuff-x.el, and bs.el" nil single "melpa" nil ((:url . "https://github.com/martinp26/cycbuf") (:keywords "files" "convenience" "buffer switching")) nil] [cl-struct-package-desc cycbuf (0 5 0) "Cycle buffers code by Martin Pohlack, inspired by" nil single "marmalade" nil nil nil])
  (cygwin-mount [cl-struct-package-desc cygwin-mount (20131111 1346) "Teach EMACS about cygwin styles and mount points." nil single "melpa" nil ((:keywords "files" "mount" "cygwin")) nil] [cl-struct-package-desc cygwin-mount (2001) "Teach EMACS about cygwin styles and mount points." nil single "marmalade" nil nil nil])
  (d-mode [cl-struct-package-desc d-mode (20150621 614) "D Programming Language major mode for (X)Emacs" nil single "melpa" nil ((:keywords "d" "programming" "language" "emacs" "cc-mode")) nil] [cl-struct-package-desc d-mode (2 0 6) "D Programming Language mode for (X)Emacs" nil single "melpa-stable" nil ((:keywords "d" "programming" "language" "emacs" "cc-mode")) nil] [cl-struct-package-desc d-mode (2 0 4) "D Programming Language mode for (X)Emacs" nil tar "marmalade" nil nil nil])
  (dart-mode [cl-struct-package-desc dart-mode (20150721 1654) "Major mode for editing Dart files" ((cl-lib (0 5)) (dash (2 10 0)) (flycheck (0 23))) single "melpa" nil ((:url . "http://code.google.com/p/dart-mode") (:keywords "language")) nil] [cl-struct-package-desc dart-mode (0 14) "Major mode for editing Dart files" ((cl-lib (0 5)) (dash (2 10 0)) (flycheck (0 23))) single "melpa-stable" nil ((:url . "http://code.google.com/p/dart-mode") (:keywords "language")) nil] [cl-struct-package-desc dart-mode (0 14) "Major mode for editing Dart files" ((cl-lib (0 5)) (dash (2 10 0)) (flycheck (0 23))) single "marmalade" nil nil nil])
  (dash-functional [cl-struct-package-desc dash-functional (20150828 413) "Collection of useful combinators for Emacs Lisp" ((dash (2 0 0)) (emacs (24))) single "melpa" nil ((:keywords "lisp" "functions" "combinators")) nil] [cl-struct-package-desc dash-functional (2 12 1) "Collection of useful combinators for Emacs Lisp" ((dash (2 0 0)) (emacs (24))) single "melpa-stable" nil ((:keywords "lisp" "functions" "combinators")) nil] [cl-struct-package-desc dash-functional (1 2 0) "Collection of useful combinators for Emacs Lisp" ((dash (2 0 0)) (emacs (24))) single "marmalade" nil nil nil])
  (db [cl-struct-package-desc db (20140421 1411) "A database for EmacsLisp" ((kv (0 0 11))) single "melpa" nil ((:keywords "data" "lisp")) nil] [cl-struct-package-desc db (0 0 7) "A database for EmacsLisp" ((kv (0 0 19))) single "marmalade" nil nil nil])
  (db-pg [cl-struct-package-desc db-pg (20130131 1102) "A PostgreSQL adapter for emacs-db" ((pg (0 12)) (db (0 0 6))) single "melpa" nil ((:keywords "data" "comm" "database" "postgresql")) nil] [cl-struct-package-desc db-pg (0 0 3) "A PostgreSQL adapter for emacs-db" ((pg (0 12)) (db (0 0 6))) single "marmalade" nil nil nil])
  (debian-changelog-mode [cl-struct-package-desc debian-changelog-mode (1 96) "major mode for Debian changelog files." nil single "marmalade" nil nil nil])
  (dedicated [cl-struct-package-desc dedicated (20090428 1231) "A very simple minor mode for dedicated buffers" nil single "melpa" nil ((:keywords "dedicated" "buffer")) nil] [cl-struct-package-desc dedicated (1 0 0) "A very simple minor mode for dedicated buffers" nil single "melpa-stable" nil ((:keywords "dedicated" "buffer")) nil] [cl-struct-package-desc dedicated (1 0 0) "A very simple minor mode for dedicated buffers" nil single "marmalade" nil nil nil])
  (deep-thought-theme [cl-struct-package-desc deep-thought-theme (0 1 1) "Emacs 24 theme with the Answer to The Ultimate Question" nil single "marmalade" nil nil nil])
  (deferred [cl-struct-package-desc deferred (20151007 1657) "Simple asynchronous functions for emacs lisp" nil single "melpa" nil ((:url . "https://github.com/kiwanami/emacs-deferred") (:keywords "deferred" "async")) nil] [cl-struct-package-desc deferred (0 3 2) "Simple asynchronous functions for emacs lisp" nil single "melpa-stable" nil ((:url . "https://github.com/kiwanami/emacs-deferred") (:keywords "deferred" "async")) nil] [cl-struct-package-desc deferred (0 3 1) "Simple asynchronous functions for emacs lisp" nil single "marmalade" nil nil nil])
  (deft [cl-struct-package-desc deft (20151008 822) "quickly browse, filter, and edit plain text notes" nil single "melpa" nil ((:url . "http://jblevins.org/projects/deft/") (:keywords "plain text" "notes" "simplenote" "notational velocity")) nil] [cl-struct-package-desc deft (0 6) "quickly browse, filter, and edit plain text notes" nil single "melpa-stable" nil ((:url . "http://jblevins.org/projects/deft/") (:keywords "plain text" "notes" "simplenote" "notational velocity")) nil] [cl-struct-package-desc deft (0 3) "quickly browse, filter, and edit plain text notes" nil single "marmalade" nil nil nil])
  (demo-multifile [cl-struct-package-desc demo-multifile (0 0 2) "a demo multifile package." nil tar "marmalade" nil nil nil])
  (descbinds-anything [cl-struct-package-desc descbinds-anything (1 5) "Yet Another `describe-bindings' with `anything'." ((anything (1 287))) single "marmalade" nil nil nil])
  (desktop [cl-struct-package-desc desktop (0 1) "save partial status of Emacs when killed" nil single "marmalade" nil nil nil])
  (desktop-registry [cl-struct-package-desc desktop-registry (20140119 1343) "Keep a central registry of desktop files" nil single "melpa" nil ((:url . "http://projects.ryuslash.org/desktop-registry/") (:keywords "convenience")) nil] [cl-struct-package-desc desktop-registry (1 2 0) "Keep a central registry of desktop files" nil single "melpa-stable" nil ((:url . "http://projects.ryuslash.org/desktop-registry/") (:keywords "convenience")) nil] [cl-struct-package-desc desktop-registry (1 2 0) "Keep a central registry of desktop files" nil single "marmalade" nil nil nil])
  (diatheke [cl-struct-package-desc diatheke (1 0) "A minor mode using the diatheke command-line Bible tool" nil single "marmalade" nil nil nil])
  (diminish [cl-struct-package-desc diminish (20091203 1012) "Diminished modes are minor modes with no modeline display" nil single "melpa" nil ((:url . "http://www.eskimo.com/~seldon") (:keywords "extensions" "diminish" "minor" "codeprose")) nil] [cl-struct-package-desc diminish (0 44) "Diminished modes are minor modes with no modeline display" nil single "melpa-stable" nil ((:url . "http://www.eskimo.com/~seldon") (:keywords "extensions" "diminish" "minor" "codeprose")) nil] [cl-struct-package-desc diminish (0 44) "Diminished modes are minor modes with no modeline display" nil single "marmalade" nil nil nil])
  (dircmp [cl-struct-package-desc dircmp (20141204 956) "Compare and sync directories." nil tar "melpa" nil ((:url . "https://github.com/matthewlmcclure/dircmp-mode") (:keywords "unix" "tools")) nil] [cl-struct-package-desc dircmp (1) "Compare and sync directories." nil single "marmalade" nil nil nil])
  (dired-details [cl-struct-package-desc dired-details (20130824 458) "make file details hide-able in dired" nil single "melpa" nil ((:keywords "dired" "hide")) nil] [cl-struct-package-desc dired-details (1 3 1) "make file details hide-able in dired" nil single "marmalade" nil nil nil])
  (dired-dups [cl-struct-package-desc dired-dups (20130527 1425) "Find duplicate files and display them in a dired buffer" nil single "melpa" nil ((:url . "https://github.com/vapniks/dired-dups") (:keywords "unix")) nil] [cl-struct-package-desc dired-dups (0 3) "Find duplicate files and display them in a dired buffer" nil single "marmalade" nil nil nil])
  (dired-efap [cl-struct-package-desc dired-efap (20140122 856) "Edit Filename At Point in a dired buffer" nil single "melpa" nil ((:url . "https://github.com/juan-leon/dired-efap") (:keywords "dired" "environment" "files" "renaming")) nil] [cl-struct-package-desc dired-efap (0 8) "Edit Filename At Point in a dired buffer" nil single "melpa-stable" nil ((:keywords "dired" "environment" "files" "renaming")) nil] [cl-struct-package-desc dired-efap (0 8) "Edit Filename At Point in a dired buffer" nil single "marmalade" nil nil nil])
  (dired-nav-enhance [cl-struct-package-desc dired-nav-enhance (1 0) "Enhanced navigation for dired buffers" nil single "marmalade" nil nil nil])
  (dired-single [cl-struct-package-desc dired-single (20130824 500) "Reuse the current dired buffer to visit another directory" nil single "melpa" nil ((:keywords "dired" "reuse" "buffer")) nil] [cl-struct-package-desc dired-single (1 7) "reuse the current dired buffer to visit another directory" nil single "marmalade" nil nil nil])
  (dirtrack-buffer-name-track-mode [cl-struct-package-desc dirtrack-buffer-name-track-mode (1 0 0) "minor mode to cause shell buffers to reflect the working directory" nil single "marmalade" nil nil nil])
  (discord [cl-struct-package-desc discord (0 5) "Discordian dates for calendar" nil single "marmalade" nil nil nil])
  (dispass [cl-struct-package-desc dispass (20140202 731) "Emacs wrapper for DisPass" ((dash (1 0 0))) single "melpa" nil ((:url . "http://projects.ryuslash.org/dispass.el/") (:keywords "processes")) nil] [cl-struct-package-desc dispass (1 1 2) "Emacs wrapper for DisPass" nil single "melpa-stable" nil ((:url . "http://projects.ryuslash.org/dispass.el/") (:keywords "processes")) nil] [cl-struct-package-desc dispass (1 1 2) "Emacs wrapper for DisPass" nil single "marmalade" nil nil nil])
  (dix [cl-struct-package-desc dix (0 1 0) "minor mode for editing Apertium XML dictionary files" nil single "marmalade" nil nil nil])
  (dizzee [cl-struct-package-desc dizzee (20111009 616) "A more pleasant way to manage your project's subprocesses in Emacs." nil tar "melpa" nil nil nil] [cl-struct-package-desc dizzee (0 1 1) "A more pleasant way to manage your project's subprocesses in Emacs." nil tar "marmalade" nil nil nil])
  (django-theme [cl-struct-package-desc django-theme (20131022 202) "Custom face theme for Emacs" nil single "melpa" nil ((:url . "http://github/anrzejsliwa/django-theme")) nil] [cl-struct-package-desc django-theme (1 3 0) "Custom face theme for Emacs" nil single "marmalade" nil nil nil])
  (dna-mode [cl-struct-package-desc dna-mode (20130821 1105) "a major mode for editing dna sequences" nil tar "melpa" nil ((:url . "http://www.mahalito.net/~harley/elisp/dna-mode.el") (:keywords "dna" "emacs" "editing")) nil] [cl-struct-package-desc dna-mode (1 44) "a major mode for editing dna sequences" nil single "marmalade" nil nil nil])
  (doctags [cl-struct-package-desc doctags (0 1) "Generation of tags documentation in Doxygen syntax" nil single "marmalade" nil nil nil])
  (dot-mode [cl-struct-package-desc dot-mode (20151029 655) "minor mode to repeat typing or commands" nil single "melpa" nil nil nil] [cl-struct-package-desc dot-mode (1 12) "minor mode to repeat typing or commands" nil single "marmalade" nil nil nil])
  (dotassoc [cl-struct-package-desc dotassoc (0 0 1) "dot access embedded alists" nil single "marmalade" nil nil nil])
  (downplay-mode [cl-struct-package-desc downplay-mode (20140110 2058) "focus attention on a region of the buffer" nil single "melpa" nil ((:url . "https://github.com/tobias/downplay-mode/")) nil] [cl-struct-package-desc downplay-mode (0 1) "focus attention on a region of the buffer" nil single "melpa-stable" nil ((:url . "https://github.com/tobias/downplay-mode/")) nil] [cl-struct-package-desc downplay-mode (0 1) "focus attention on a region of the buffer" nil single "marmalade" nil nil nil])
  (dpaste [cl-struct-package-desc dpaste (20150528 600) "Emacs integration for dpaste.com" nil single "melpa" nil ((:keywords "paste" "pastie" "pastebin" "dpaste" "python")) nil] [cl-struct-package-desc dpaste (0 2) "Emacs integration for dpaste.com" nil single "marmalade" nil nil nil])
  (drag-stuff [cl-struct-package-desc drag-stuff (20150717 532) "Drag stuff (lines, words, region, etc...) around" nil tar "melpa" nil nil nil] [cl-struct-package-desc drag-stuff (0 1 0) "Drag stuff (lines, words, region, etc...) around" nil tar "melpa-stable" nil nil nil] [cl-struct-package-desc drag-stuff (0 0 4) "Drag stuff (lines, words, region, etc...) around" nil single "marmalade" nil nil nil])
  (dropbox [cl-struct-package-desc dropbox (20130513 1537) "Emacs backend for dropbox" ((json (1 2)) (oauth (1 0 3))) single "melpa" nil ((:keywords "dropbox")) nil] [cl-struct-package-desc dropbox (0 9 1) "Emacs backend for dropbox" ((json (1 2)) (oauth (1 0 3))) single "marmalade" nil nil nil])
  (drupal-mode [cl-struct-package-desc drupal-mode (20150830 1227) "Advanced minor mode for Drupal development" ((php-mode (1 5 0))) tar "melpa" nil ((:url . "https://github.com/arnested/drupal-mode") (:keywords "programming" "php" "drupal")) nil] [cl-struct-package-desc drupal-mode (0 6 1) "Advanced minor mode for Drupal development" ((php-mode (1 5 0))) tar "melpa-stable" nil ((:url . "https://github.com/arnested/drupal-mode") (:keywords "programming" "php" "drupal")) nil] [cl-struct-package-desc drupal-mode (0 6 1) "Advanced minor mode for Drupal development" ((php-mode (1 5 0))) tar "marmalade" nil nil nil])
  (drupal-spell [cl-struct-package-desc drupal-spell (20130520 955) "Aspell extra dictionary for Drupal" nil tar "melpa" nil ((:url . "https://github.com/arnested/drupal-spell") (:keywords "wp")) nil] [cl-struct-package-desc drupal-spell (0 2 2) "Aspell extra dictionary for Drupal" nil tar "melpa-stable" nil ((:url . "https://github.com/arnested/drupal-spell") (:keywords "wp")) nil] [cl-struct-package-desc drupal-spell (0 2 2) "Aspell extra dictionary for Drupal" nil tar "marmalade" nil nil nil])
  (dsvn [cl-struct-package-desc dsvn (20130120 1257) "Subversion interface" nil single "melpa" nil ((:keywords "docs")) nil] [cl-struct-package-desc dsvn (922257) "Subversion interface" nil single "marmalade" nil nil nil])
  (dtrt-indent [cl-struct-package-desc dtrt-indent (20151013 214) "Adapt to foreign indentation offsets" nil tar "melpa" nil ((:keywords "convenience" "files" "languages" "c")) nil] [cl-struct-package-desc dtrt-indent (0 2 0) "Adapt to foreign indentation offsets" nil single "marmalade" nil nil nil])
  (dummy-package [cl-struct-package-desc dummy-package (0 0 25) "a fake package for the marmalade test suite" ((timeclock (2 6 1))) single "marmalade" nil nil nil])
  (durendal [cl-struct-package-desc durendal (0 2) "A bucket of tricks for Clojure and Slime." ((clojure-mode (1 7)) (slime (20100404)) (paredit (22))) single "marmalade" nil nil nil])
  (dxr [cl-struct-package-desc dxr (2 2) "Convenient access to a DXR server" nil single "marmalade" nil nil nil])
  (dynamic-fonts [cl-struct-package-desc dynamic-fonts (20140731 526) "Set faces based on available fonts" ((font-utils (0 7 0)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa" nil ((:url . "http://github.com/rolandwalker/dynamic-fonts") (:keywords "faces" "frames")) nil] [cl-struct-package-desc dynamic-fonts (0 6 4) "Set faces based on available fonts" ((font-utils (0 7 0)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/dynamic-fonts") (:keywords "faces" "frames")) nil] [cl-struct-package-desc dynamic-fonts (0 6 4) "Set faces based on available fonts" ((font-utils (0 7 0)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "marmalade" nil nil nil])
  (ecb [cl-struct-package-desc ecb (20140215 114) "a code browser for Emacs" nil tar "melpa" nil ((:keywords "browser" "code" "programming" "tools")) nil] [cl-struct-package-desc ecb (2 40) "Emacs Code Browser" nil tar "marmalade" nil nil nil] [cl-struct-package-desc ecb (2 -3 24) "a code browser for Emacs" nil tar "melpa-stable" nil ((:keywords "browser" "code" "programming" "tools")) nil])
  (ecb-snapshot [cl-struct-package-desc ecb-snapshot (20120830) "Emacs Code Browser CVS snapshot" nil tar "marmalade" nil nil nil])
  (edbi [cl-struct-package-desc edbi (20140920 35) "Emacs Database Interface" ((concurrent (0 3 1)) (ctable (0 1 2)) (epc (0 1 1))) tar "melpa" nil nil nil] [cl-struct-package-desc edbi (0 1 2) "Emacs Database Interface" ((concurrent (0 3 1)) (ctable (0 1 1)) (epc (0 1 1))) tar "melpa-stable" nil nil nil] [cl-struct-package-desc edbi (0 1 1) "Emacs Database Interface" ((concurrent (0 3 1)) (ctable (0 1 1)) (epc (0 1 1))) tar "marmalade" nil nil nil])
  (edebug-x [cl-struct-package-desc edebug-x (20130615 2325) "Extensions for Edebug" nil single "melpa" nil ((:url . "https://github.com/ScottyB/edebug-x") (:keywords "extensions")) nil] [cl-struct-package-desc edebug-x (1 2) "Extensions for Edebug" ((dash (1 1 0))) single "marmalade" nil nil nil])
  (edit-list [cl-struct-package-desc edit-list (20100930 743) "edit a single list" nil single "melpa" nil ((:url . "http://mwolson.org/static/dist/elisp/edit-list.el")) nil] [cl-struct-package-desc edit-list (0 4) "edit a single list" nil single "marmalade" nil nil nil] [cl-struct-package-desc edit-list (0 3) "edit a single list" nil single "melpa-stable" nil ((:url . "http://mwolson.org/static/dist/elisp/edit-list.el")) nil])
  (editorconfig [cl-struct-package-desc editorconfig (20151105 54) "EditorConfig Emacs Plugin" nil single "melpa" nil ((:url . "https://github.com/editorconfig/editorconfig-emacs#readme")) nil] [cl-struct-package-desc editorconfig (0 4) "EditorConfig Emacs extension" nil single "melpa-stable" nil ((:url . "http://github.com/editorconfig/editorconfig-emacs#readme")) nil] [cl-struct-package-desc editorconfig (0 4) "EditorConfig Emacs extension" nil single "marmalade" nil nil nil])
  (egison-mode [cl-struct-package-desc egison-mode (20150827 2129) "Egison editing mode" nil single "melpa" nil ((:url . "https://github.com/egisatoshi/egison3/blob/master/elisp/egison-mode.el")) nil] [cl-struct-package-desc egison-mode (3 5 10) "Egison editing mode" nil single "melpa-stable" nil ((:url . "https://github.com/egisatoshi/egison3/blob/master/elisp/egison-mode.el")) nil] [cl-struct-package-desc egison-mode (0 1 4) "Egison editing mode" nil single "marmalade" nil nil nil])
  (eh-basic [cl-struct-package-desc eh-basic (0 0 2) "tuamshu's emacs basic configure" ((starter-kit (2 0 2)) (browse-kill-ring (1 3 1))) tar "marmalade" nil nil nil])
  (eh-common [cl-struct-package-desc eh-common (0 0 1) "Tumashu's  emacs functions" nil single "marmalade" nil nil nil])
  (eh-functions [cl-struct-package-desc eh-functions (0 0 1) "tuamshu's emacs functions" ((starter-kit (2 0 2))) tar "marmalade" nil nil nil])
  (eh-gnus [cl-struct-package-desc eh-gnus (0 0 6) "tuamshu's gnus configure" nil tar "marmalade" nil nil nil])
  (eh-keybindings [cl-struct-package-desc eh-keybindings (0 0 1) "tuamshu's emacs keybindings" ((eh-functions (0 0 1)) (starter-kit-bindings (2 0 2))) tar "marmalade" nil nil nil])
  (eieio [cl-struct-package-desc eieio (1 4) "Enhanced Implementation of Emacs Interpreted Objects" nil single "marmalade" nil nil nil])
  (eimp [cl-struct-package-desc eimp (20140630 747) "Emacs Image Manipulation Package" nil single "melpa" nil nil nil] [cl-struct-package-desc eimp (1 4 0) "Emacs Image Manipulation Package" nil single "marmalade" nil nil nil])
  (el-autoyas [cl-struct-package-desc el-autoyas (20120918 617) "Automatically create Emacs-Lisp Yasnippets" nil tar "melpa" nil ((:url . "https://github.com/mlf176f2/el-autoyas.el") (:keywords "emacs" "lisp" "mode" "yasnippet")) nil] [cl-struct-package-desc el-autoyas (0 20) "Automatically create Emacs-Lisp Yasnippets" nil single "marmalade" nil nil nil] [cl-struct-package-desc el-autoyas (0 5) "Automatically create Emacs-Lisp Yasnippets" nil tar "melpa-stable" nil ((:url . "https://github.com/mlf176f2/el-autoyas.el") (:keywords "emacs" "lisp" "mode" "yasnippet")) nil])
  (el-init [cl-struct-package-desc el-init (20150728 220) "A loader inspired by init-loader" ((emacs (24)) (cl-lib (0 5)) (anaphora (1 0 0))) single "melpa" nil ((:url . "https://github.com/HKey/el-init")) nil] [cl-struct-package-desc el-init (20130416) "Loader for configuration files" nil tar "marmalade" nil nil nil] [cl-struct-package-desc el-init (0 2 0) "A loader inspired by init-loader" ((emacs (24)) (cl-lib (0 5)) (anaphora (1 0 0))) single "melpa-stable" nil ((:url . "https://github.com/HKey/el-init")) nil])
  (el-spec [cl-struct-package-desc el-spec (20121018 4) "ruby's rspec like syntax test frame work" nil single "melpa" nil ((:url . "https://github.com/uk-ar/el-spec") (:keywords "test")) nil] [cl-struct-package-desc el-spec (0 2) "ruby's rspec like syntax test frame work" nil single "marmalade" nil nil nil])
  (el-swank-fuzzy [cl-struct-package-desc el-swank-fuzzy (20130824 457) "fuzzy symbol completion." nil single "melpa" nil ((:keywords "matching" "completion" "string")) nil] [cl-struct-package-desc el-swank-fuzzy (0 1) "fuzzy symbol completion." nil single "marmalade" nil nil nil])
  (el-x [cl-struct-package-desc el-x (20140111 1401) "main entry point for el-x package" nil tar "melpa" nil ((:keywords "lisp")) nil] [cl-struct-package-desc el-x (0 3 1) "main entry point for el-x package" nil tar "melpa-stable" nil ((:keywords "lisp")) nil] [cl-struct-package-desc el-x (0 3 0) "Emacs-lisp extensions." ((cl-lib (0 2))) tar "marmalade" nil nil nil])
  (eldoro [cl-struct-package-desc eldoro (0 1 0) "A pomodoro timer/tracker that works with org-mode." nil tar "marmalade" nil nil nil])
  (electric-case [cl-struct-package-desc electric-case (20150417 412) "insert camelCase, snake_case words without \"Shift\"ing" nil single "melpa" nil ((:url . "http://hins11.yu-yake.com/")) nil] [cl-struct-package-desc electric-case (2 2 1) "insert camelCase, snake_case words without \"Shift\"ing" nil single "marmalade" nil nil nil])
  (elein [cl-struct-package-desc elein (20120120 316) "running leiningen commands from emacs" nil single "melpa" nil ((:url . "https://github.com/remvee/elein") (:keywords "tools" "processes")) nil] [cl-struct-package-desc elein (0 2 2) "running leiningen commands from emacs" nil single "marmalade" nil nil nil])
  (elfeed [cl-struct-package-desc elfeed (20151101 435) "an Emacs Atom/RSS feed reader" ((emacs (24 3))) tar "melpa" nil nil nil] [cl-struct-package-desc elfeed (1 2 0) "an Emacs Atom/RSS feed reader" ((emacs (24 3))) tar "melpa-stable" nil nil nil] [cl-struct-package-desc elfeed (1 2 0) "an Emacs Atom/RSS feed reader" ((emacs (24 3))) tar "marmalade" nil nil nil])
  (elfeed-web [cl-struct-package-desc elfeed-web (20151101 428) "web interface to Elfeed" ((simple-httpd (1 4 3)) (elfeed (1 0 1)) (emacs (24 1))) tar "melpa" nil nil nil] [cl-struct-package-desc elfeed-web (1 2 0) "web interface to Elfeed" ((simple-httpd (1 4 3)) (elfeed (1 0 1)) (emacs (24 1))) tar "melpa-stable" nil nil nil] [cl-struct-package-desc elfeed-web (1 1 0) "web interface to Elfeed" ((simple-httpd (1 4 3)) (elfeed (1 0 1)) (emacs (24 1))) tar "marmalade" nil nil nil])
  (elisp-cache [cl-struct-package-desc elisp-cache (1 15) "Faster emacs startup through byte-compiling." nil single "marmalade" nil nil nil])
  (elisp-depend [cl-struct-package-desc elisp-depend (20120426 1823) "Parse depend libraries of elisp file." nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/elisp-depend.el") (:keywords "elisp-depend")) nil] [cl-struct-package-desc elisp-depend (1 0 2) "Parse depend libraries of elisp file." nil single "marmalade" nil nil nil])
  (elisp-indexer [cl-struct-package-desc elisp-indexer (0 0 9) "indexing utils for emacslisp" nil single "marmalade" nil nil nil])
  (elisp-slime-nav [cl-struct-package-desc elisp-slime-nav (20150805 1248) "Make M-. and M-, work in elisp like they do in slime" nil single "melpa" nil ((:url . "https://github.com/purcell/elisp-slime-nav") (:keywords "navigation" "slime" "elisp" "emacs-lisp")) nil] [cl-struct-package-desc elisp-slime-nav (0 8) "Make M-. and M-, work in elisp like they do in slime" ((cl-lib (0 2))) single "melpa-stable" nil ((:url . "https://github.com/purcell/elisp-slime-nav") (:keywords "navigation" "slime" "elisp" "emacs-lisp")) nil] [cl-struct-package-desc elisp-slime-nav (0 7) "Make M-. and M-, work in elisp like they do in slime" ((cl-lib (0 2))) single "marmalade" nil nil nil])
  (elixir-mix [cl-struct-package-desc elixir-mix (1 0 0) "Emacs integration for Elixir's mix" nil single "marmalade" nil nil nil])
  (elixir-mode [cl-struct-package-desc elixir-mode (20151028 10) "Major mode for editing Elixir files" ((emacs (24)) (pkg-info (0 4))) tar "melpa" nil ((:url . "https://github.com/elixir-lang/emacs-elixir") (:keywords "languages" "elixir")) nil] [cl-struct-package-desc elixir-mode (2 2 8) "Major mode for editing Elixir files" ((emacs (24)) (pkg-info (0 4))) tar "melpa-stable" nil ((:url . "https://github.com/elixir-lang/emacs-elixir") (:keywords "languages" "elixir")) nil] [cl-struct-package-desc elixir-mode (1 0 0) "Major mode for editing Elixir files" nil single "marmalade" nil nil nil])
  (elnode [cl-struct-package-desc elnode (20140203 1506) "The Emacs webserver." ((web (0 1 4)) (dash (1 1 0)) (noflet (0 0 7)) (s (1 5 0)) (creole (0 8 14)) (fakir (0 1 6)) (db (0 0 5)) (kv (0 0 17))) tar "melpa" nil nil nil] [cl-struct-package-desc elnode (0 9 9 8 8) "The Emacs webserver." ((web (0 4 3)) (dash (2 9 0)) (noflet (0 0 14)) (s (1 5 0)) (creole (1 0 6)) (fakir (0 1 9)) (db (0 0 6)) (kv (0 0 19))) tar "marmalade" nil nil nil])
  (elpa-audit [cl-struct-package-desc elpa-audit (20141023 631) "Handy functions for inspecting and comparing package archives" nil single "melpa" nil ((:url . "https://github.com/purcell/elpa-audit") (:keywords "maint")) nil] [cl-struct-package-desc elpa-audit (0 4) "Handy functions for inspecting and comparing package archives" nil single "melpa-stable" nil ((:url . "https://github.com/purcell/elpa-audit") (:keywords "maint")) nil] [cl-struct-package-desc elpa-audit (0 4) "Handy functions for inspecting and comparing package archives" nil single "marmalade" nil nil nil])
  (elpa-mirror [cl-struct-package-desc elpa-mirror (20150923 525) "ELPA mirror from locally installed packages is easy" nil tar "melpa" nil nil nil] [cl-struct-package-desc elpa-mirror (1 2 0) "ELPA mirror from locally installed packages is easy" nil tar "melpa-stable" nil nil nil] [cl-struct-package-desc elpa-mirror (1 1 2) "ELPA mirror from locally installed packages is easy" nil tar "marmalade" nil nil nil])
  (elpakit [cl-struct-package-desc elpakit (2 0 4) "The ELPA package maintainer's friend" ((dash (2 9 0)) (shadchen (1 2)) (noflet (0 0 14)) (s (1 9 0))) tar "marmalade" nil nil nil])
  (elpy [cl-struct-package-desc elpy (20151101 401) "Emacs Python Development Environment" ((company (0 8 2)) (find-file-in-project (3 3)) (highlight-indentation (0 5 0)) (pyvenv (1 3)) (yasnippet (0 8 0))) tar "melpa" nil nil nil] [cl-struct-package-desc elpy (1 10 0) "Emacs Python Development Environment" ((company (0 8 2)) (find-file-in-project (3 3)) (highlight-indentation (0 5 0)) (pyvenv (1 3)) (yasnippet (0 8 0))) tar "melpa-stable" nil nil nil] [cl-struct-package-desc elpy (1 8 0) "Emacs Python Development Environment" ((company (0 8 2)) (find-file-in-project (3 3)) (highlight-indentation (0 5 0)) (pyvenv (1 3)) (yasnippet (0 8 0))) tar "marmalade" nil nil nil])
  (elscreen [cl-struct-package-desc elscreen (20151025 1800) "Emacs window session manager" nil tar "melpa" nil nil nil] [cl-struct-package-desc elscreen (1 4 6) "Screen for Emacsen" nil single "marmalade" nil nil nil])
  (emacs-cl [cl-struct-package-desc emacs-cl (0 5) "Emacs Common Lisp" nil tar "marmalade" nil nil nil])
  (emacs-droid [cl-struct-package-desc emacs-droid (0 0 0) "Android application development tools for Emacs" nil single "marmalade" nil nil nil])
  (emacs-xkcd [cl-struct-package-desc emacs-xkcd (1 0) "View xkcd from Emacs" ((json (1 4))) single "marmalade" nil nil nil])
  (emacsd-tile [cl-struct-package-desc emacsd-tile (0 1) "tiling windows for emacs" nil single "marmalade" nil nil nil])
  (emamux [cl-struct-package-desc emamux (20151021 2102) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil] [cl-struct-package-desc emamux (0 13) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil] [cl-struct-package-desc emamux (0 1) "Interact with tmux" nil single "marmalade" nil nil nil])
  (emmet-mode [cl-struct-package-desc emmet-mode (20151005 1850) "Unofficial Emmet's support for emacs" nil single "melpa" nil ((:url . "https://github.com/smihica/emmet-mode") (:keywords "convenience")) nil] [cl-struct-package-desc emmet-mode (1 0 10) "Unofficial Emmet's support for emacs" nil single "marmalade" nil nil nil] [cl-struct-package-desc emmet-mode (1 0 8) "Unofficial Emmet's support for emacs" nil single "melpa-stable" nil ((:url . "https://github.com/smihica/emmet-mode") (:keywords "convenience")) nil])
  (emms-mark-ext [cl-struct-package-desc emms-mark-ext (20130528 2027) "Extra functions for emms-mark-mode and emms-tag-edit-mode" ((emms (3 0))) single "melpa" nil ((:url . "https://github.com/vapniks/emms-mark-ext") (:keywords "convenience" "multimedia")) nil] [cl-struct-package-desc emms-mark-ext (0 3) "Extra functions for emms-mark-mode and emms-tag-edit-mode" ((emms (3 0))) single "marmalade" nil nil nil])
  (emstar [cl-struct-package-desc emstar (1 4) "Casual game, like a brainy Pac-Man" nil tar "marmalade" nil nil nil])
  (enclose [cl-struct-package-desc enclose (20121008 914) "Enclose cursor within punctuation pairs." nil tar "melpa" nil nil nil] [cl-struct-package-desc enclose (0 0 2) "Enclose cursor within punctuation pairs" nil single "marmalade" nil nil nil])
  (env-var-import [cl-struct-package-desc env-var-import (2 1) "Import shell environment variables in GUI Emacs" nil single "marmalade" nil nil nil])
  (epc [cl-struct-package-desc epc (20140609 2234) "A RPC stack for the Emacs Lisp" ((concurrent (0 3 1)) (ctable (0 1 2))) tar "melpa" nil ((:url . "https://github.com/kiwanami/emacs-epc") (:keywords "lisp" "rpc")) nil] [cl-struct-package-desc epc (0 1 1) "A RPC stack for the Emacs Lisp" ((concurrent (0 3 1)) (ctable (0 1 1))) single "marmalade" nil nil nil] [cl-struct-package-desc epc (0 1 0) "A RPC stack for the Emacs Lisp" ((concurrent (0 3 1)) (ctable (0 1 0))) tar "melpa-stable" nil ((:url . "https://github.com/kiwanami/emacs-epc") (:keywords "lisp" "rpc")) nil])
  (epl [cl-struct-package-desc epl (20150517 433) "Emacs Package Library" ((cl-lib (0 3))) single "melpa" nil ((:url . "http://github.com/cask/epl") (:keywords "convenience")) nil] [cl-struct-package-desc epl (71 4 8098) "Emacs Package Library" ((cl-lib (0 3))) single "melpa-stable" nil ((:url . "http://github.com/cask/epl") (:keywords "convenience")) nil] [cl-struct-package-desc epl (0 8) "Emacs Package Library" ((cl-lib (0 3))) single "marmalade" nil nil nil])
  (eprime-mode [cl-struct-package-desc eprime-mode (20140513 1116) "An E-prime checking mode for Emacs" nil single "melpa" nil ((:url . "https://github.com/AndrewHynes/eprime-mode") (:keywords "e-prime" "english" "grammar")) nil] [cl-struct-package-desc eprime-mode (1 1 2) "An E-prime checking mode for Emacs" nil single "marmalade" nil nil nil])
  (erc-hl-nicks [cl-struct-package-desc erc-hl-nicks (20140619 522) "ERC nick highlighter that ignores uniquifying chars when colorizing" nil single "melpa" nil ((:url . "http://www.github.com/leathekd/erc-hl-nicks")) nil] [cl-struct-package-desc erc-hl-nicks (1 3 1) "ERC nick highlighter that ignores uniquifying chars when colorizing" nil single "marmalade" nil nil nil] [cl-struct-package-desc erc-hl-nicks (1 3 0) "ERC nick highlighter that ignores uniquifying chars when colorizing" nil single "melpa-stable" nil ((:url . "http://www.github.com/leathekd/erc-hl-nicks")) nil])
  (erc-nick-notify [cl-struct-package-desc erc-nick-notify (0 2 1) "Notify popup for ERC" nil single "marmalade" nil nil nil])
  (ercn [cl-struct-package-desc ercn (20150523 803) "Flexible ERC notifications" nil single "melpa" nil ((:url . "http://www.github.com/leathekd/ercn")) nil] [cl-struct-package-desc ercn (1 1 1) "Flexible ERC notifications" nil single "melpa-stable" nil ((:url . "http://www.github.com/leathekd/ercn")) nil] [cl-struct-package-desc ercn (1 0 2) "Flexible ERC notifications" nil single "marmalade" nil nil nil])
  (eredis [cl-struct-package-desc eredis (20120808 2007) "eredis, a Redis client in emacs lisp" nil single "melpa" nil ((:url . "http://code.google.com/p/eredis/")) nil] [cl-struct-package-desc eredis (0 5 0) "eredis, a Redis client in emacs lisp" nil single "marmalade" nil nil nil])
  (erefactor [cl-struct-package-desc erefactor (20150620 1743) "Emacs-Lisp refactoring utilities" ((cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/mhayashi1120/Emacs-erefactor") (:keywords "extensions" "tools" "maint")) nil] [cl-struct-package-desc erefactor (0 7 0) "Emacs-Lisp refactoring utilities" ((cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-erefactor") (:keywords "extensions" "tools" "maint")) nil] [cl-struct-package-desc erefactor (0 6 10) "Emacs-Lisp refactoring utilities" nil single "marmalade" nil nil nil])
  (erlang [cl-struct-package-desc erlang (20151013 157) "Erlang major mode" nil tar "melpa" nil nil nil] [cl-struct-package-desc erlang (2 4 1) "Major modes for editing and running Erlang" nil single "marmalade" nil nil nil])
  (ert [cl-struct-package-desc ert (0) "Emacs Lisp Regression Testing" nil single "marmalade" nil nil nil])
  (ert-x [cl-struct-package-desc ert-x (0) "Staging area for experimental extensions to ERT" ((ert (0))) single "marmalade" nil nil nil])
  (ertx [cl-struct-package-desc ertx (0 0 2) "Extra useful testing functions for EmacsLisp." nil single "marmalade" nil nil nil])
  (eruby-mode [cl-struct-package-desc eruby-mode (1 20151111) "minor mode for eRuby (.erb) template files" nil single "marmalade" nil nil nil])
  (es-windows [cl-struct-package-desc es-windows (20140211 104) "Window-management utilities" ((cl-lib (0 3)) (emacs (24))) single "melpa" nil ((:url . "https://github.com/sabof/es-windows")) nil] [cl-struct-package-desc es-windows (0 3) "Window-management utilities" ((cl-lib (0 3)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/sabof/es-windows")) nil] [cl-struct-package-desc es-windows (0 2) "Window-management utilities" ((cl-lib (0 3)) (emacs (24))) single "marmalade" nil nil nil])
  (eshell-fringe-status [cl-struct-package-desc eshell-fringe-status (1 0 0) "Show last status in fringe" nil single "marmalade" nil nil nil])
  (eshell-manual [cl-struct-package-desc eshell-manual (20141024) "An manual for Eshell." nil tar "marmalade" nil nil nil])
  (esk [cl-struct-package-desc esk (0 1) "Emacs Search Kit - An easy way to find files and/or strings in a project" nil tar "marmalade" nil nil nil])
  (ess [cl-struct-package-desc ess (20151112 900) "Emacs Speaks Statistics" ((julia-mode (0 3))) tar "melpa" nil ((:url . "http://ess.r-project.org")) nil] [cl-struct-package-desc ess (15 9) "Emacs Speaks Statistics" ((julia-mode (0 3))) tar "melpa-stable" nil ((:url . "http://ess.r-project.org")) nil] [cl-struct-package-desc ess (5 14) "Edit and interact with statistical programs like R, S-Plus, SAS, Stata and JAGS" nil tar "marmalade" nil nil nil])
  (ess-R-object-popup [cl-struct-package-desc ess-R-object-popup (20130302 336) "popup description of R object" ((popup (20130117 1954)) (ess (20130225 1754))) single "melpa" nil ((:url . "https://github.com/myuhe/ess-R-object-popup.el") (:keywords "convenience" "ess")) nil] [cl-struct-package-desc ess-R-object-popup (1 0) "popup description of R object" ((popup (20130117 1954)) (ess (20130225 1754))) single "melpa-stable" nil ((:url . "https://github.com/myuhe/ess-R-object-popup.el") (:keywords "convenience" "ess")) nil] [cl-struct-package-desc ess-R-object-popup (0 0 6) "popup description of R object" nil single "marmalade" nil nil nil])
  (ess-smart-underscore [cl-struct-package-desc ess-smart-underscore (20131229 1851) "Ess Smart Underscore" ((ess (0))) tar "melpa" nil ((:url . "http://github.com/mlf176f2/ess-smart-underscore.el") (:keywords "ess" "underscore")) nil] [cl-struct-package-desc ess-smart-underscore (0 79) "Ess Smart Underscore" nil tar "melpa-stable" nil ((:url . "http://github.com/mlf176f2/ess-smart-underscore.el") (:keywords "ess" "underscore")) nil] [cl-struct-package-desc ess-smart-underscore (0 79) "Ess Smart Underscore" nil single "marmalade" nil nil nil])
  (esxml [cl-struct-package-desc esxml (20151013 1128) "Library for working with xml via esxml and sxml" ((kv (0 0 5))) single "melpa" nil ((:keywords "tools" "lisp" "comm")) nil] [cl-struct-package-desc esxml (0 3 0) "Handle HTML with lists." ((db (0 0 1))) tar "marmalade" nil nil nil])
  (etags-select [cl-struct-package-desc etags-select (20130824 500) "Select from multiple tags" nil single "melpa" nil ((:keywords "etags" "tags" "tag" "select")) nil] [cl-struct-package-desc etags-select (1 13) "Select from multiple tags" nil single "marmalade" nil nil nil])
  (etags-table [cl-struct-package-desc etags-table (20130824 457) "Set tags table(s) based on current file" nil single "melpa" nil ((:keywords "etags" "tags" "tag")) nil] [cl-struct-package-desc etags-table (1 1) "Set tags table(s) based on current file" nil single "marmalade" nil nil nil])
  (evernote-mode [cl-struct-package-desc evernote-mode (0 41) "Evernote client for Emacs" nil tar "marmalade" nil nil nil])
  (everything [cl-struct-package-desc everything (0 1 5) "Bridge to MS Windows desktop-search engine Everything" nil single "marmalade" nil nil nil])
  (evil [cl-struct-package-desc evil (20151109 829) "Extensible Vi layer for Emacs." ((undo-tree (0 6 3)) (goto-chg (1 6))) tar "melpa" nil nil nil] [cl-struct-package-desc evil (1 2 8) "Extensible Vi layer for Emacs." ((undo-tree (0 6 3)) (goto-chg (1 6))) tar "melpa-stable" nil nil nil] [cl-struct-package-desc evil (1 0 8) "Extensible Vi layer for Emacs." ((undo-tree (0 6 3)) (goto-last-change (1 2))) tar "marmalade" nil nil nil])
  (evil-escape [cl-struct-package-desc evil-escape (20150926 2152) "Escape from anything with a customizable key sequence" ((emacs (24)) (evil (1 0 9)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syl20bnr/evil-escape") (:keywords "convenience" "editing" "evil")) nil] [cl-struct-package-desc evil-escape (3 10) "Escape from anything with a customizable key sequence" ((emacs (24)) (evil (1 0 9)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syl20bnr/evil-escape") (:keywords "convenience" "editing" "evil")) nil] [cl-struct-package-desc evil-escape (2 11) "Escape from anything with a customizable key sequence" ((emacs (24)) (evil (1 0 9))) single "marmalade" nil nil nil])
  (evil-indent-textobject [cl-struct-package-desc evil-indent-textobject (20130831 1519) "evil textobjects based on indentation" ((evil (0))) single "melpa" nil ((:url . "http://github.com/cofi/evil-indent-textobject") (:keywords "convenience" "evil")) nil] [cl-struct-package-desc evil-indent-textobject (0 2) "evil textobjects based on indentation" ((evil (0))) single "marmalade" nil nil nil])
  (evil-leader [cl-struct-package-desc evil-leader (20140606 543) "let there be <leader>" ((evil (0))) single "melpa" nil ((:url . "http://github.com/cofi/evil-leader") (:keywords "evil" "vim-emulation" "leader")) nil] [cl-struct-package-desc evil-leader (0 4 3) "let there be <leader>" ((evil (0))) single "melpa-stable" nil ((:url . "http://github.com/cofi/evil-leader") (:keywords "evil" "vim-emulation" "leader")) nil] [cl-struct-package-desc evil-leader (0 4 3) "let there be <leader>" ((evil (0))) single "marmalade" nil nil nil])
  (evil-matchit [cl-struct-package-desc evil-matchit (20150921 536) "Vim matchit ported into Emacs (requires EVIL)" nil tar "melpa" nil nil nil] [cl-struct-package-desc evil-matchit (2 1 1) "Vim matchit ported into Emacs (requires EVIL)" nil tar "melpa-stable" nil nil nil] [cl-struct-package-desc evil-matchit (1 3 0) "Vim matchit ported into Emacs (requires EVIL)" nil tar "marmalade" nil nil nil])
  (evil-nerd-commenter [cl-struct-package-desc evil-nerd-commenter (20151111 2326) "Comment/uncomment lines efficiently. Like Nerd Commenter in Vim" nil tar "melpa" nil nil nil] [cl-struct-package-desc evil-nerd-commenter (2 1) "Comment/uncomment lines efficiently. Like Nerd Commenter in Vim" nil tar "melpa-stable" nil nil nil] [cl-struct-package-desc evil-nerd-commenter (1 3 1) "Comment/uncomment lines efficiently. Like Nerd Commenter in Vim" nil tar "marmalade" nil nil nil])
  (evil-numbers [cl-struct-package-desc evil-numbers (20140606 551) "increment/decrement numbers like in vim" nil single "melpa" nil ((:url . "http://github.com/cofi/evil-numbers") (:keywords "numbers" "increment" "decrement" "octal" "hex" "binary")) nil] [cl-struct-package-desc evil-numbers (0 4) "increment/decrement numbers like in vim" nil single "melpa-stable" nil ((:url . "http://github.com/cofi/evil-numbers") (:keywords "numbers" "increment" "decrement" "octal" "hex" "binary")) nil] [cl-struct-package-desc evil-numbers (0 4) "increment/decrement numbers like in vim" nil single "marmalade" nil nil nil])
  (evil-paredit [cl-struct-package-desc evil-paredit (20150413 1348) "Paredit support for evil keybindings" ((evil (1 0 9)) (paredit (25 -2))) single "melpa" nil ((:url . "https://github.com/roman/evil-paredit") (:keywords "paredit" "evil")) nil] [cl-struct-package-desc evil-paredit (0 0 1) "Paredit support for evil keybindings" ((evil (0 0 0)) (paredit (1))) single "marmalade" nil nil nil])
  (exec-path-from-shell [cl-struct-package-desc exec-path-from-shell (20151006 2253) "Get environment variables such as $PATH from the shell" nil single "melpa" nil ((:url . "https://github.com/purcell/exec-path-from-shell") (:keywords "environment")) nil] [cl-struct-package-desc exec-path-from-shell (1 10) "Get environment variables such as $PATH from the shell" nil single "melpa-stable" nil ((:url . "https://github.com/purcell/exec-path-from-shell") (:keywords "environment")) nil] [cl-struct-package-desc exec-path-from-shell (1 7) "Get environment variables such as $PATH from the shell" nil single "marmalade" nil nil nil])
  (exercism [cl-struct-package-desc exercism (0 0 1) "An Emacs mode for submitting current file to exercism.io" nil single "marmalade" nil nil nil])
  (expand-region [cl-struct-package-desc expand-region (20150902 558) "Increase selected region by semantic units." nil tar "melpa" nil nil nil] [cl-struct-package-desc expand-region (0 10 0) "Increase selected region by semantic units." nil tar "melpa-stable" nil nil nil] [cl-struct-package-desc expand-region (0 10 0) "Increase selected region by semantic units." nil tar "marmalade" nil nil nil])
  (expectations-mode [cl-struct-package-desc expectations-mode (0 0 5) "Minor mode for expectations tests" ((cider (0 7 0))) single "marmalade" nil nil nil])
  (express [cl-struct-package-desc express (20140508 1341) "Alternatives to `message'" ((string-utils (0 3 2))) single "melpa" nil ((:url . "http://github.com/rolandwalker/express") (:keywords "extensions" "message" "interface")) nil] [cl-struct-package-desc express (0 6 0) "Alternatives to `message'" ((string-utils (0 3 2))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/express") (:keywords "extensions" "message" "interface")) nil] [cl-struct-package-desc express (0 6 0) "Alternatives to `message'" ((string-utils (0 3 2))) single "marmalade" nil nil nil])
  (extend-dnd [cl-struct-package-desc extend-dnd (20130328 1034) "R drag and Drop" nil tar "melpa" nil ((:url . "https://github.com/mlf176f2/extend-dnd") (:keywords "extend" "drag and drop")) nil] [cl-struct-package-desc extend-dnd (0 5) "R drag and Drop" nil tar "melpa-stable" nil ((:url . "https://github.com/mlf176f2/extend-dnd") (:keywords "extend" "drag and drop")) nil] [cl-struct-package-desc extend-dnd (0 5) "R drag and Drop" nil single "marmalade" nil nil nil])
  (eyebrowse [cl-struct-package-desc eyebrowse (20151008 1142) "Easy window config switching" ((dash (2 7 0)) (emacs (24 3 1))) single "melpa" nil ((:url . "https://github.com/wasamasa/eyebrowse") (:keywords "convenience")) nil] [cl-struct-package-desc eyebrowse (0 6 7) "Easy window config switching" ((dash (2 7 0)) (emacs (24 3 1))) single "marmalade" nil nil nil] [cl-struct-package-desc eyebrowse (0 6 6) "Easy window config switching" ((dash (2 7 0)) (emacs (24 3 1))) single "melpa-stable" nil ((:url . "https://github.com/wasamasa/eyebrowse") (:keywords "convenience")) nil])
  (f [cl-struct-package-desc f (20151113 123) "Modern API for working with files and directories" ((s (1 7 0)) (dash (2 2 0))) single "melpa" nil ((:url . "http://github.com/rejeep/f.el") (:keywords "files" "directories")) nil] [cl-struct-package-desc f (0 18 0) "Modern API for working with files and directories" ((s (1 7 0)) (dash (2 2 0))) single "melpa-stable" nil ((:url . "http://github.com/rejeep/f.el") (:keywords "files" "directories")) nil] [cl-struct-package-desc f (0 11 0) "Modern API for working with files and directories" ((s (1 7 0)) (dash (2 2 0))) single "marmalade" nil nil nil])
  (fakir [cl-struct-package-desc fakir (20140729 952) "fakeing bits of Emacs" ((noflet (0 0 8)) (dash (1 3 2)) (kv (0 0 19))) single "melpa" nil ((:url . "http://github.com/nicferrier/emacs-fakir") (:keywords "lisp" "tools")) nil] [cl-struct-package-desc fakir (0 1 9) "fakeing bits of Emacs" ((noflet (0 0 8)) (dash (1 3 2)) (kv (0 0 19))) single "marmalade" nil nil nil])
  (fancy-battery [cl-struct-package-desc fancy-battery (20150101 404) "Fancy battery display" ((emacs (24 1))) single "melpa" nil ((:url . "https://github.com/lunaryorn/fancy-battery.el") (:keywords "convenience" "tools" "hardware")) nil] [cl-struct-package-desc fancy-battery (0 2) "Fancy battery display" ((emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/lunaryorn/fancy-battery.el") (:keywords "convenience" "tools" "hardware")) nil] [cl-struct-package-desc fancy-battery (0 2) "Fancy battery display" ((emacs (24 1))) single "marmalade" nil nil nil])
  (fancy-mode [cl-struct-package-desc fancy-mode (0 1) "Major mode for programming with the Fancy language." nil single "marmalade" nil nil nil])
  (fastnav [cl-struct-package-desc fastnav (20120211 657) "Fast navigation and editing routines." nil single "melpa" nil ((:keywords "nav" "fast" "fastnav" "navigation")) nil] [cl-struct-package-desc fastnav (1 0 7) "Fast navigation and editing routines." nil single "melpa-stable" nil ((:keywords "nav" "fast" "fastnav" "navigation")) nil] [cl-struct-package-desc fastnav (1 0 7) "Fast navigation and editing routines." nil single "marmalade" nil nil nil])
  (feature-mode [cl-struct-package-desc feature-mode (20141121 1030) "Major mode for editing Gherkin (i.e. Cucumber) user stories" nil tar "melpa" nil nil nil] [cl-struct-package-desc feature-mode (0 4) "Major mode for editing Gherkin (i.e. Cucumber) user stories" nil tar "melpa-stable" nil nil nil] [cl-struct-package-desc feature-mode (0 4) "Major mode for editing Gherkin (i.e. Cucumber) user stories" nil tar "marmalade" nil nil nil])
  (fic-ext-mode [cl-struct-package-desc fic-ext-mode (0 1) "Show FIXME/TODO/BUG(...) in special face only in comments and strings" nil single "marmalade" nil nil nil])
  (file-format [cl-struct-package-desc file-format (0 0 4) "templates with files as the source" ((s (1 5 0))) single "marmalade" nil nil nil])
  (fill-column-indicator [cl-struct-package-desc fill-column-indicator (20151030 1233) "Graphically indicate the fill column" nil single "melpa" nil ((:keywords "convenience")) nil] [cl-struct-package-desc fill-column-indicator (1 87) "Graphically indicate the fill column" nil single "marmalade" nil nil nil] [cl-struct-package-desc fill-column-indicator (1 81) "Graphically indicate the fill column" nil tar "melpa-stable" nil ((:keywords "convenience")) nil])
  (finalize [cl-struct-package-desc finalize (20140127 1046) "finalizers for Emacs Lisp" ((emacs (24 1)) (cl-lib (0 3)) (eieio (1 4))) tar "melpa" nil nil nil] [cl-struct-package-desc finalize (1 0 0) "finalizers for Emacs Lisp" ((emacs (24 1)) (cl-lib (0 3)) (eieio (1 4))) tar "melpa-stable" nil nil nil] [cl-struct-package-desc finalize (1 0 0) "finalizers for Emacs Lisp" ((emacs (24 1)) (cl-lib (0 3)) (eieio (1 4))) tar "marmalade" nil nil nil])
  (find-file-in-git-repo [cl-struct-package-desc find-file-in-git-repo (0 1 2) "Utility to find files in a git repo" nil single "marmalade" nil nil nil])
  (find-file-in-project [cl-struct-package-desc find-file-in-project (20151113 242) "Find files in a project quickly, on any OS" ((swiper (0 6 0)) (emacs (24 3))) single "melpa" nil ((:url . "https://github.com/technomancy/find-file-in-project") (:keywords "project" "convenience")) nil] [cl-struct-package-desc find-file-in-project (4 0) "Find files in a project quickly, on any OS" ((swiper (0 6 0)) (emacs (24 3))) single "melpa-stable" nil ((:url . "https://github.com/technomancy/find-file-in-project") (:keywords "project" "convenience")) nil] [cl-struct-package-desc find-file-in-project (3 3) "Find files in a project quickly." nil single "marmalade" nil nil nil])
  (find-file-in-repository [cl-struct-package-desc find-file-in-repository (20151113 519) "Quickly find files in a git, mercurial or other repository" nil single "melpa" nil ((:url . "https://github.com/hoffstaetter/find-file-in-repository") (:keywords "files" "convenience" "repository" "project" "source control")) nil] [cl-struct-package-desc find-file-in-repository (1 3) "Quickly find files in a git, mercurial or other repository" nil single "marmalade" nil nil nil] [cl-struct-package-desc find-file-in-repository (1 2) "Quickly find files in a git, mercurial or other repository" nil single "melpa-stable" nil ((:url . "https://github.com/hoffstaetter/find-file-in-repository") (:keywords "files" "convenience" "repository" "project" "source control")) nil])
  (find-things-fast [cl-struct-package-desc find-things-fast (20150519 1526) "Find things fast, leveraging the power of git" nil single "melpa" nil ((:keywords "project" "convenience")) nil] [cl-struct-package-desc find-things-fast (20111123) "An emacs mode to find things fast and move around in a project quickly" nil tar "marmalade" nil nil nil])
  (findr [cl-struct-package-desc findr (20130824 507) "Breadth-first file-finding facility for (X)Emacs" nil single "melpa" nil ((:keywords "files")) nil] [cl-struct-package-desc findr (0 7) "Breadth-first file-finding facility for (X)Emacs" nil single "marmalade" nil nil nil])
  (fiplr [cl-struct-package-desc fiplr (20140723 2345) "Fuzzy Search for Files in Projects" ((grizzl (0 1 0)) (cl-lib (0 1))) tar "melpa" nil nil nil] [cl-struct-package-desc fiplr (0 2 4) "Fuzzy Search for Files in Projects" ((grizzl (0 1 0))) tar "melpa-stable" nil nil nil] [cl-struct-package-desc fiplr (0 1 3) "Fuzzy finder for files in a project." nil single "marmalade" nil nil nil])
  (firestarter [cl-struct-package-desc firestarter (20150913 1325) "Execute (shell) commands on save" nil single "melpa" nil ((:url . "https://github.com/wasamasa/firestarter") (:keywords "convenience")) nil] [cl-struct-package-desc firestarter (0 2 3) "Execute (shell) commands on save" nil single "melpa-stable" nil ((:url . "https://github.com/wasamasa/firestarter") (:keywords "convenience")) nil] [cl-struct-package-desc firestarter (0 2 2) "Execute (shell) commands on save" nil single "marmalade" nil nil nil])
  (fit-frame [cl-struct-package-desc fit-frame (20150104 1404) "Resize a frame.  In particular, fit a frame to its buffers." nil single "melpa" nil ((:url . "http://www.emacswiki.org/fit-frame.el") (:keywords "internal" "extensions" "convenience" "local")) nil] [cl-struct-package-desc fit-frame (0) "Resize a frame.  In particular, fit a frame to its buffers." nil single "marmalade" nil nil nil])
  (fixme-mode [cl-struct-package-desc fixme-mode (1 0 2) "fixme minor mode to highlight warning words" nil single "marmalade" nil nil nil])
  (fixmee [cl-struct-package-desc fixmee (20150223 555) "Quickly navigate to FIXME notices in code" ((button-lock (1 0 2)) (nav-flash (1 0 0)) (back-button (0 6 0)) (smartrep (0 0 3)) (string-utils (0 3 2)) (tabulated-list (0))) single "melpa" nil ((:url . "http://github.com/rolandwalker/fixmee") (:keywords "navigation" "convenience")) nil] [cl-struct-package-desc fixmee (0 8 6) "Quickly navigate to FIXME notices in code" ((button-lock (1 0 2)) (nav-flash (1 0 0)) (back-button (0 6 0)) (smartrep (0 0 3)) (string-utils (0 3 2)) (tabulated-list (0))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/fixmee") (:keywords "navigation" "convenience")) nil] [cl-struct-package-desc fixmee (0 8 6) "Quickly navigate to FIXME notices in code" ((button-lock (1 0 2)) (nav-flash (1 0 0)) (back-button (0 6 0)) (smartrep (0 0 3)) (string-utils (0 3 2)) (tabulated-list (0))) single "marmalade" nil nil nil])
  (flatland-theme [cl-struct-package-desc flatland-theme (20140805 305) "A simple theme for Emacs based on the Flatland theme for Sublime Text" nil single "melpa" nil ((:url . "http://github.com/gregchapple/flatland-emacs")) nil] [cl-struct-package-desc flatland-theme (0 1 2) "A simple theme for Emacs." nil single "marmalade" nil nil nil])
  (flex-autopair [cl-struct-package-desc flex-autopair (20120809 518) "Automatically insert pair braces and quotes, insertion conditions & actions are highly customizable." nil single "melpa" nil ((:url . "https://github.com/uk-ar/flex-autopair.el") (:keywords "keyboard" "input")) nil] [cl-struct-package-desc flex-autopair (0 3) "Automatically insert pair braces and quotes, insertion conditions & actions are highly customizable." nil single "marmalade" nil nil nil])
  (flx [cl-struct-package-desc flx (20151030 1112) "fuzzy matching with good sorting" ((cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/lewang/flx")) nil] [cl-struct-package-desc flx (0 6 1) "fuzzy matching with good sorting" ((cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/lewang/flx")) nil] [cl-struct-package-desc flx (0 1) "fuzzy matching with good sorting" nil single "marmalade" nil nil nil])
  (flx-ido [cl-struct-package-desc flx-ido (20151030 1112) "flx integration for ido" ((flx (0 1)) (cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/lewang/flx")) nil] [cl-struct-package-desc flx-ido (0 6 1) "flx integration for ido" ((flx (0 1)) (cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/lewang/flx")) nil] [cl-struct-package-desc flx-ido (0 2) "flx integration for ido" ((flx (0 1))) single "marmalade" nil nil nil])
  (flycheck [cl-struct-package-desc flycheck (20151113 858) "On-the-fly syntax checking" ((dash (2 4 0)) (pkg-info (0 4)) (let-alist (1 0 1)) (cl-lib (0 3)) (emacs (24 3))) tar "melpa" nil ((:url . "https://www.flycheck.org") (:keywords "convenience" "languages" "tools")) nil] [cl-struct-package-desc flycheck (0 24) "On-the-fly syntax checking" ((dash (2 4 0)) (pkg-info (0 4)) (let-alist (1 0 1)) (cl-lib (0 3)) (emacs (24 3))) tar "melpa-stable" nil ((:url . "https://www.flycheck.org") (:keywords "convenience" "languages" "tools")) nil] [cl-struct-package-desc flycheck (0 23) "Modern on-the-fly syntax checking for GNU Emacs" ((emacs (24 1)) (cl-lib (0 3)) (let-alist (1 0 1)) (pkg-info (0 4)) (dash (2 4 0))) tar "marmalade" nil nil nil])
  (flycheck-cask [cl-struct-package-desc flycheck-cask (20150920 453) "Cask support in Flycheck" ((emacs (24 1)) (flycheck (0 14)) (dash (2 4 0))) single "melpa" nil ((:url . "https://github.com/flycheck/flycheck-cask") (:keywords "tools" "convenience")) nil] [cl-struct-package-desc flycheck-cask (0 3) "Cask support in Flycheck" ((emacs (24 1)) (flycheck (0 14)) (dash (2 4 0))) single "melpa-stable" nil ((:url . "https://github.com/flycheck/flycheck-cask") (:keywords "tools" "convenience")) nil] [cl-struct-package-desc flycheck-cask (0 2 1) "Cask support in Flycheck" ((emacs (24 1)) (flycheck (0 14)) (dash (2 4 0))) single "marmalade" nil nil nil])
  (flycheck-color-mode-line [cl-struct-package-desc flycheck-color-mode-line (20131125 2138) "Change mode line color with Flycheck status" ((flycheck (0 15)) (dash (1 2)) (emacs (24 1))) single "melpa" nil ((:keywords "convenience" "language" "tools")) nil] [cl-struct-package-desc flycheck-color-mode-line (0 3) "Change mode line color with Flycheck status" ((flycheck (0 15)) (dash (1 2)) (emacs (24 1))) single "melpa-stable" nil ((:keywords "convenience" "language" "tools")) nil] [cl-struct-package-desc flycheck-color-mode-line (0 3) "Change mode line color with Flycheck status" ((flycheck (0 15)) (dash (1 2)) (emacs (24 1))) single "marmalade" nil nil nil])
  (flycheck-gdc [cl-struct-package-desc flycheck-gdc (0 3) "Provides support for use of GDC as a Flycheck checker for Dlang." ((d-mode (20150317 117)) (flycheck (20150317 2246))) tar "marmalade" nil nil nil])
  (flycheck-gdc-dub [cl-struct-package-desc flycheck-gdc-dub (0 1) "Provides support for retrieving include paths from dub build descriptions.." ((d-mode (20150317 117)) (flycheck (20150317 2246))) tar "marmalade" nil nil nil])
  (flycheck-haskell [cl-struct-package-desc flycheck-haskell (20151010 340) "Flycheck: Cabal projects and sandboxes" ((emacs (24 1)) (flycheck (0 22)) (haskell-mode (13 7)) (dash (2 4 0)) (let-alist (1 0 1))) tar "melpa" nil ((:url . "https://github.com/flycheck/flycheck-haskell") (:keywords "tools" "convenience")) nil] [cl-struct-package-desc flycheck-haskell (0 7 2) "Flycheck: Cabal projects and sandboxes" ((emacs (24 1)) (flycheck (0 22)) (haskell-mode (13 7)) (dash (2 4 0)) (let-alist (1 0 1))) tar "melpa-stable" nil ((:url . "https://github.com/flycheck/flycheck-haskell") (:keywords "tools" "convenience")) nil] [cl-struct-package-desc flycheck-haskell (0 7) "Flycheck: Cabal projects and sandboxes" ((flycheck (0 22)) (haskell-mode (13 7)) (dash (2 4 0)) (let-alist (1 0 1))) tar "marmalade" nil nil nil])
  (flycheck-hdevtools [cl-struct-package-desc flycheck-hdevtools (20150329 323) "A flycheck checker for Haskell using hdevtools" ((flycheck (0 21 -3 1)) (dash (2 0))) single "melpa" nil ((:url . "https://github.com/flycheck/flycheck-hdevtools") (:keywords "convenience" "languages" "tools")) nil] [cl-struct-package-desc flycheck-hdevtools (0 3) "A flycheck checker for Haskell using hdevtools" ((flycheck (0 15))) single "melpa-stable" nil ((:url . "https://github.com/flycheck/flycheck-hdevtools") (:keywords "convenience" "languages" "tools")) nil] [cl-struct-package-desc flycheck-hdevtools (0 2) "A flycheck checker for Haskell using hdevtools" ((flycheck (0 15))) single "marmalade" nil nil nil])
  (flycheck-ledger [cl-struct-package-desc flycheck-ledger (20140605 1146) "Flycheck integration for ledger files" ((flycheck (0 15))) single "melpa" nil ((:keywords "convenience" "languages" "tools")) nil] [cl-struct-package-desc flycheck-ledger (0 4) "Flycheck integration for ledger files" ((flycheck (0 15))) single "melpa-stable" nil ((:keywords "convenience" "languages" "tools")) nil] [cl-struct-package-desc flycheck-ledger (0 2) "Flycheck integration for ledger files" ((flycheck (0 15))) single "marmalade" nil nil nil])
  (flycheck-ocaml [cl-struct-package-desc flycheck-ocaml (20151103 212) "Flycheck: OCaml support" ((emacs (24 1)) (flycheck (0 22)) (merlin (2 3)) (let-alist (1 0 3))) single "melpa" nil ((:url . "https://github.com/flycheck/flycheck-ocaml") (:keywords "convenience" "tools" "languages")) nil] [cl-struct-package-desc flycheck-ocaml (0 3) "Flycheck: OCaml support" ((emacs (24 1)) (flycheck (0 22)) (merlin (2 3)) (let-alist (1 0 3))) single "melpa-stable" nil ((:url . "https://github.com/flycheck/flycheck-ocaml") (:keywords "convenience" "tools" "languages")) nil] [cl-struct-package-desc flycheck-ocaml (0 2) "Flycheck: OCaml support" ((emacs (24 1)) (flycheck (0 22 -3 1)) (merlin (2 0)) (let-alist (1 0 3))) single "marmalade" nil nil nil])
  (flycheck-tcl [cl-struct-package-desc flycheck-tcl (0 4) "A flycheck checker for Tcl using ActiveState's tclchecker" ((flycheck (0 17))) single "marmalade" nil nil nil])
  (flycheck-vala [cl-struct-package-desc flycheck-vala (0 1) "Provides support for use of valac as a Flycheck checker for Vala." ((vala-mode (20150324 1525)) (flycheck (20150317 2246))) tar "marmalade" nil nil nil])
  (flymake [cl-struct-package-desc flymake (0 4 16) "a universal on-the-fly syntax checker" nil single "marmalade" nil nil nil])
  (flymake-checkers [cl-struct-package-desc flymake-checkers (0 5) "Transition package to Flycheck" nil single "marmalade" nil nil nil])
  (flymake-coffee [cl-struct-package-desc flymake-coffee (20140809 324) "A flymake handler for coffee script" ((flymake-easy (0 1))) single "melpa" nil ((:url . "https://github.com/purcell/flymake-coffee")) nil] [cl-struct-package-desc flymake-coffee (0 12) "A flymake handler for coffee script" ((flymake-easy (0 1))) single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-coffee")) nil] [cl-struct-package-desc flymake-coffee (0 12) "A flymake handler for coffee script" ((flymake-easy (0 1))) single "marmalade" nil nil nil])
  (flymake-css [cl-struct-package-desc flymake-css (20121104 1104) "Flymake support for css using csslint" ((flymake-easy (0 1))) single "melpa" nil ((:url . "https://github.com/purcell/flymake-css")) nil] [cl-struct-package-desc flymake-css (0 3) "Flymake support for css using csslint" ((flymake-easy (0 1))) single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-css")) nil] [cl-struct-package-desc flymake-css (0 3) "Flymake support for css using csslint" ((flymake-easy (0 1))) single "marmalade" nil nil nil])
  (flymake-csslint [cl-struct-package-desc flymake-csslint (1 1 0) "making flymake work with CSSLint" ((flymake (0 3))) tar "marmalade" nil nil nil])
  (flymake-cursor [cl-struct-package-desc flymake-cursor (20130822 332) "displays flymake error msg in minibuffer after delay" nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/flymake-cursor.el") (:keywords "languages" "mode" "flymake")) nil] [cl-struct-package-desc flymake-cursor (1 0 2) "Show flymake messages in the minibuffer after delay" ((flymake (0 3))) tar "marmalade" nil nil nil])
  (flymake-d [cl-struct-package-desc flymake-d (0 1) "A flymake handler for d-mode files" nil single "marmalade" nil nil nil])
  (flymake-easy [cl-struct-package-desc flymake-easy (20140818 55) "Helpers for easily building flymake checkers" nil single "melpa" nil ((:url . "https://github.com/purcell/flymake-easy") (:keywords "convenience" "internal")) nil] [cl-struct-package-desc flymake-easy (0 10) "Helpers for easily building flymake checkers" nil single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-easy") (:keywords "convenience" "internal")) nil] [cl-struct-package-desc flymake-easy (0 9) "Helpers for easily building flymake checkers" nil single "marmalade" nil nil nil])
  (flymake-elixir [cl-struct-package-desc flymake-elixir (20130810 717) "A flymake handler for elixir-mode .ex files." nil single "melpa" nil nil nil] [cl-struct-package-desc flymake-elixir (0 5) "A flymake handler for elixir-mode .ex files." nil single "marmalade" nil nil nil])
  (flymake-gdc [cl-struct-package-desc flymake-gdc (0 1) "A flymake handler for d-mode files using the GDC compiler" nil tar "marmalade" nil nil nil])
  (flymake-go [cl-struct-package-desc flymake-go (20150714 33) "A flymake handler for go-mode files" nil single "melpa" nil ((:url . "https://github.com/robert-zaremba/flymake-go") (:keywords "go" "flymake")) nil] [cl-struct-package-desc flymake-go (2013 3 14) "A flymake handler for go-mode files" ((flymake (0 4 13))) single "marmalade" nil nil nil])
  (flymake-haml [cl-struct-package-desc flymake-haml (20130324 351) "A flymake handler for haml files" ((flymake-easy (0 1))) single "melpa" nil ((:url . "https://github.com/purcell/flymake-haml")) nil] [cl-struct-package-desc flymake-haml (0 8) "A flymake handler for haml files" ((flymake-easy (0 1))) single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-haml")) nil] [cl-struct-package-desc flymake-haml (0 7) "A flymake handler for haml files" ((flymake-easy (0 1))) single "marmalade" nil nil nil])
  (flymake-haskell-multi [cl-struct-package-desc flymake-haskell-multi (20130620 422) "Syntax-check haskell-mode using both ghc and hlint" ((flymake-easy (0 1))) tar "melpa" nil nil nil] [cl-struct-package-desc flymake-haskell-multi (0 3) "Syntax-check haskell-mode using both ghc and hlint" ((flymake-easy (0 1))) tar "melpa-stable" nil nil nil] [cl-struct-package-desc flymake-haskell-multi (0 3) "Syntax-check haskell-mode using both ghc and hlint" ((flymake-easy (0 1))) single "marmalade" nil nil nil])
  (flymake-hlint [cl-struct-package-desc flymake-hlint (20130309 145) "A flymake handler for haskell-mode files using hlint" ((flymake-easy (0 1))) single "melpa" nil ((:url . "https://github.com/purcell/flymake-hlint")) nil] [cl-struct-package-desc flymake-hlint (0 2) "A flymake handler for haskell-mode files using hlint" ((flymake-easy (0 1))) single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-hlint")) nil] [cl-struct-package-desc flymake-hlint (0 2) "A flymake handler for haskell-mode files using hlint" ((flymake-easy (0 1))) single "marmalade" nil nil nil])
  (flymake-jshint [cl-struct-package-desc flymake-jshint (20140319 1500) "making flymake work with JSHint" ((flymake-easy (0 8))) single "melpa" nil ((:keywords "flymake" "jshint" "javascript")) nil] [cl-struct-package-desc flymake-jshint (1 0) "making flymake work with JSHint" nil single "marmalade" nil nil nil])
  (flymake-jslint [cl-struct-package-desc flymake-jslint (20130613 202) "A flymake handler for javascript using jslint" ((flymake-easy (0 1))) single "melpa" nil ((:url . "https://github.com/purcell/flymake-jslint")) nil] [cl-struct-package-desc flymake-jslint (0 23) "Flymake support for javascript using jslint" nil single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-jslint")) nil] [cl-struct-package-desc flymake-jslint (0 10) "A flymake handler for javascript using jslint" ((flymake-easy (0 1))) single "marmalade" nil nil nil])
  (flymake-json [cl-struct-package-desc flymake-json (20130423 2357) "A flymake handler for json using jsonlint" ((flymake-easy (0 1))) single "melpa" nil ((:url . "https://github.com/purcell/flymake-json")) nil] [cl-struct-package-desc flymake-json (0 1) "A flymake handler for json using jsonlint" ((flymake-easy (0 1))) single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-json")) nil] [cl-struct-package-desc flymake-json (0 1) "A flymake handler for json using jsonlint" ((flymake-easy (0 1))) single "marmalade" nil nil nil])
  (flymake-less [cl-struct-package-desc flymake-less (0 3) "Flymake handler for LESS stylesheets (lesscss.org)" ((less-css-mode (0 15))) single "marmalade" nil nil nil])
  (flymake-lua [cl-struct-package-desc flymake-lua (20140310 230) "Flymake for Lua" nil single "melpa" nil ((:keywords "lua")) nil] [cl-struct-package-desc flymake-lua (1 0) "Flymake for Lua" nil single "marmalade" nil nil nil])
  (flymake-perlcritic [cl-struct-package-desc flymake-perlcritic (20120328 114) "Flymake handler for Perl to invoke Perl::Critic" ((flymake (0 3))) tar "melpa" nil ((:url . "https://github.com/illusori/emacs-flymake-perlcritic")) nil] [cl-struct-package-desc flymake-perlcritic (1 0 3) "Flymake handler for Perl to invoke Perl::Critic" ((flymake (0 3))) tar "melpa-stable" nil ((:url . "https://github.com/illusori/emacs-flymake-perlcritic")) nil] [cl-struct-package-desc flymake-perlcritic (1 0 3) "Flymake handler for Perl to invoke Perl::Critic" ((flymake (0 3))) tar "marmalade" nil nil nil])
  (flymake-php [cl-struct-package-desc flymake-php (20121104 1102) "A flymake handler for php-mode files" ((flymake-easy (0 1))) single "melpa" nil ((:url . "https://github.com/purcell/flymake-php")) nil] [cl-struct-package-desc flymake-php (0 5) "A flymake handler for php-mode files" ((flymake-easy (0 1))) single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-php")) nil] [cl-struct-package-desc flymake-php (0 5) "A flymake handler for php-mode files" ((flymake-easy (0 1))) single "marmalade" nil nil nil])
  (flymake-phpcs [cl-struct-package-desc flymake-phpcs (20140712 2331) "making flymake work with PHP CodeSniffer" ((flymake-easy (0 9))) single "melpa" nil ((:url . "https://github.com/senda-akiha/flymake-phpcs/") (:keywords "flymake" "phpcs" "php")) nil] [cl-struct-package-desc flymake-phpcs (1 0 5) "Flymake handler for PHP to invoke PHP-CodeSniffer" ((flymake (0 3))) tar "marmalade" nil nil nil])
  (flymake-puppet [cl-struct-package-desc flymake-puppet (20141006 1855) "An Emacs flymake handler for syntax-checking puppet using puppet-lint" ((flymake-easy (0 9))) single "melpa" nil ((:url . "https://github.com/benprew/flymake-puppet")) nil] [cl-struct-package-desc flymake-puppet (1 0 0) "An Emacs flymake handler for syntax-checking puppet using puppet-lint" ((flymake-easy (0 9))) single "marmalade" nil nil nil])
  (flymake-python-pyflakes [cl-struct-package-desc flymake-python-pyflakes (20131127 6) "A flymake handler for python-mode files using pyflakes (or flake8)" ((flymake-easy (0 8))) single "melpa" nil ((:url . "https://github.com/purcell/flymake-python-pyflakes")) nil] [cl-struct-package-desc flymake-python-pyflakes (0 9) "A flymake handler for python-mode files using pyflakes (or flake8)" ((flymake-easy (0 8))) single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-python-pyflakes")) nil] [cl-struct-package-desc flymake-python-pyflakes (0 9) "A flymake handler for python-mode files using pyflakes (or flake8)" ((flymake-easy (0 8))) single "marmalade" nil nil nil])
  (flymake-racket [cl-struct-package-desc flymake-racket (0 40) "A flymake handler for scheme-mode files" ((flymake-easy (0 1))) single "marmalade" nil nil nil])
  (flymake-ruby [cl-struct-package-desc flymake-ruby (20121104 1059) "A flymake handler for ruby-mode files" ((flymake-easy (0 1))) single "melpa" nil ((:url . "https://github.com/purcell/flymake-ruby")) nil] [cl-struct-package-desc flymake-ruby (0 8) "A flymake handler for ruby-mode files" ((flymake-easy (0 1))) single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-ruby")) nil] [cl-struct-package-desc flymake-ruby (0 8) "A flymake handler for ruby-mode files" ((flymake-easy (0 1))) single "marmalade" nil nil nil])
  (flymake-sass [cl-struct-package-desc flymake-sass (20140308 325) "Flymake handler for sass and scss files" ((flymake-easy (0 1))) single "melpa" nil ((:url . "https://github.com/purcell/flymake-sass")) nil] [cl-struct-package-desc flymake-sass (0 6) "Flymake handler for sass files" ((flymake-easy (0 1))) single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-sass")) nil] [cl-struct-package-desc flymake-sass (0 6) "Flymake handler for sass files" ((flymake-easy (0 1))) single "marmalade" nil nil nil])
  (flymake-shell [cl-struct-package-desc flymake-shell (20121104 1100) "A flymake syntax-checker for shell scripts" ((flymake-easy (0 1))) single "melpa" nil ((:url . "https://github.com/purcell/flymake-shell")) nil] [cl-struct-package-desc flymake-shell (0 8) "A flymake syntax-checker for shell scripts" ((flymake-easy (0 1))) single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-shell")) nil] [cl-struct-package-desc flymake-shell (0 8) "A flymake syntax-checker for shell scripts" ((flymake-easy (0 1))) single "marmalade" nil nil nil])
  (flyspell-lazy [cl-struct-package-desc flyspell-lazy (20141222 652) "Improve flyspell responsiveness using idle timers" nil single "melpa" nil ((:url . "http://github.com/rolandwalker/flyspell-lazy") (:keywords "spelling")) nil] [cl-struct-package-desc flyspell-lazy (0 6 10) "Improve flyspell responsiveness using idle timers" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/flyspell-lazy") (:keywords "spelling")) nil] [cl-struct-package-desc flyspell-lazy (0 6 6) "Improve flyspell responsiveness using idle timers" nil single "marmalade" nil nil nil])
  (fm [cl-struct-package-desc fm (20130612 1) "follow mode for compilation/output buffers" nil single "marmalade" nil nil nil] [cl-struct-package-desc fm (20130126 1618) "follow mode for compilation/output buffers" nil single "melpa" nil ((:keywords "outlines")) nil] [cl-struct-package-desc fm (1 0) "follow mode for compilation/output buffers" nil single "melpa-stable" nil ((:keywords "outlines")) nil])
  (fold-dwim [cl-struct-package-desc fold-dwim (20140208 837) "Unified user interface for Emacs folding modes" nil single "melpa" nil ((:url . "http://www.dur.ac.uk/p.j.heslin/Software/Emacs")) nil] [cl-struct-package-desc fold-dwim (1 2) "No description available." nil single "melpa-stable" nil nil nil] [cl-struct-package-desc fold-dwim (1 2) "Unified user interface for Emacs folding modes" nil single "marmalade" nil nil nil])
  (fold-dwim-org [cl-struct-package-desc fold-dwim-org (20131203 551) "Fold DWIM bound to org key-strokes." ((fold-dwim (1 2))) single "melpa" nil ((:url . "https://github.com/mlf176f2/fold-dwim-org") (:keywords "folding" "emacs" "org-mode")) nil] [cl-struct-package-desc fold-dwim-org (0 6) "Fold DWIM bound to org key-strokes." ((fold-dwim (1 2))) single "melpa-stable" nil ((:url . "https://github.com/mlf176f2/fold-dwim-org") (:keywords "folding" "emacs" "org-mode")) nil] [cl-struct-package-desc fold-dwim-org (0 5) "Fold DWIM bound to org key-strokes." ((fold-dwim (1 2))) single "marmalade" nil nil nil])
  (fold-this [cl-struct-package-desc fold-this (20150601 342) "Just fold this region please" nil single "melpa" nil ((:keywords "convenience")) nil] [cl-struct-package-desc fold-this (0 3 0) "Just fold this region please" nil single "melpa-stable" nil ((:keywords "convenience")) nil] [cl-struct-package-desc fold-this (0 3 0) "Just fold this region please" nil single "marmalade" nil nil nil])
  (font-utils [cl-struct-package-desc font-utils (20150806 1051) "Utility functions for working with fonts" ((persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa" nil ((:url . "http://github.com/rolandwalker/font-utils") (:keywords "extensions")) nil] [cl-struct-package-desc font-utils (0 7 8) "Utility functions for working with fonts" ((persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/font-utils") (:keywords "extensions")) nil] [cl-struct-package-desc font-utils (0 7 0) "Utility functions for working with fonts" ((persistent-soft (0 8 8)) (pcache (0 2 3))) single "marmalade" nil nil nil])
  (fooddice [cl-struct-package-desc fooddice (0 1) "Help me I am hungry and dont know what to eat!" nil single "marmalade" nil nil nil])
  (form-feed [cl-struct-package-desc form-feed (20150926 556) "Display ^L glyphs as horizontal lines" nil single "melpa" nil ((:url . "https://github.com/wasamasa/form-feed") (:keywords "faces")) nil] [cl-struct-package-desc form-feed (0 2 2) "Display ^L glyphs as horizontal lines" nil single "melpa-stable" nil ((:url . "https://github.com/wasamasa/form-feed") (:keywords "faces")) nil] [cl-struct-package-desc form-feed (0 2 2) "Display ^L glyphs as horizontal lines" nil single "marmalade" nil nil nil])
  (fpaste [cl-struct-package-desc fpaste (0 1 3) "Send text to http://fpaste.org" nil single "marmalade" nil nil nil])
  (frame-restore [cl-struct-package-desc frame-restore (20140811 1409) "Restore Emacs frame" ((emacs (24 1))) single "melpa" nil ((:url . "https://github.com/lunaryorn/frame-restore.el") (:keywords "frames" "convenience")) nil] [cl-struct-package-desc frame-restore (0 5) "Restore Emacs frame" ((emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/lunaryorn/frame-restore.el") (:keywords "frames" "convenience")) nil] [cl-struct-package-desc frame-restore (0 5) "Restore Emacs frame" ((emacs (24 1))) single "marmalade" nil nil nil])
  (frame-tag [cl-struct-package-desc frame-tag (20120527 136) "Minor mode that assigns a unique number to each frame for easy switching" nil single "melpa" nil ((:url . "http://github.com/liangzan/frame-tag.el") (:keywords "frame" "movement")) nil] [cl-struct-package-desc frame-tag (0 1 0) "Minor mode that assigns a unique number to each frame for easy switching" nil single "marmalade" nil nil nil])
  (framesize [cl-struct-package-desc framesize (20131017 1432) "change the size of frames in Emacs" ((key-chord (0 5 20080915))) single "melpa" nil ((:url . "http://github.com/nicferrier/emacs-framesize") (:keywords "frames")) nil] [cl-struct-package-desc framesize (0 0 5) "change the size of frames in Emacs" ((key-chord (0 5 20080915))) single "marmalade" nil nil nil])
  (fringe-helper [cl-struct-package-desc fringe-helper (20140620 1409) "helper functions for fringe bitmaps" nil single "melpa" nil ((:url . "http://nschum.de/src/emacs/fringe-helper/") (:keywords "lisp")) nil] [cl-struct-package-desc fringe-helper (1 0 1) "helper functions for fringe bitmaps" nil single "melpa-stable" nil ((:url . "http://nschum.de/src/emacs/fringe-helper/") (:keywords "lisp")) nil] [cl-struct-package-desc fringe-helper (1 0 1) "helper functions for fringe bitmaps" nil single "marmalade" nil nil nil])
  (fsvn [cl-struct-package-desc fsvn (0 9 13) "Another frontend of subversion." nil tar "marmalade" nil nil nil])
  (full-ack [cl-struct-package-desc full-ack (20140223 932) "a front-end for ack" nil single "melpa" nil ((:url . "http://nschum.de/src/emacs/full-ack/") (:keywords "tools" "matching")) nil] [cl-struct-package-desc full-ack (1 0) "a front-end for ack" nil single "melpa-stable" nil ((:url . "http://nschum.de/src/emacs/full-ack/") (:keywords "tools" "matching")) nil] [cl-struct-package-desc full-ack (0 2 3) "a front-end for ack" nil single "marmalade" nil nil nil])
  (fullscreen-mode [cl-struct-package-desc fullscreen-mode (0 0 1) "fullscreen window support for Emacs" nil single "marmalade" nil nil nil])
  (furl [cl-struct-package-desc furl (20110112 1707) "Friendly URL retrieval" nil single "melpa" nil nil nil] [cl-struct-package-desc furl (0 0 3) "Friendly URL retrieval" nil single "marmalade" nil nil nil])
  (fuzzy [cl-struct-package-desc fuzzy (20150729 2037) "Fuzzy Matching" nil single "melpa" nil ((:keywords "convenience")) nil] [cl-struct-package-desc fuzzy (0 1) "Fuzzy Matching" nil single "melpa-stable" nil ((:keywords "convenience")) nil] [cl-struct-package-desc fuzzy (0 1) "Fuzzy Matching" nil single "marmalade" nil nil nil])
  (fuzzy-format [cl-struct-package-desc fuzzy-format (20130824 500) "select indent-tabs-mode and format code automatically." nil single "melpa" nil ((:url . "http://code.101000lab.org, http://trac.codecheck.in")) nil] [cl-struct-package-desc fuzzy-format (0 1 1) "select indent-tabs-mode and format code automatically." nil single "marmalade" nil nil nil])
  (fuzzy-match [cl-struct-package-desc fuzzy-match (20150104 1409) "fuzzy matching" nil single "melpa" nil ((:url . "http://www.emacswiki.org/fuzzy-match.el") (:keywords "matching" "completion" "string")) nil] [cl-struct-package-desc fuzzy-match (1 4) "fuzzy matching" nil single "marmalade" nil nil nil])
  (gandalf-theme [cl-struct-package-desc gandalf-theme (20130809 247) "Gandalf color theme" nil single "melpa" nil ((:keywords "color" "theme")) nil] [cl-struct-package-desc gandalf-theme (0 1) "Gandalf color theme" nil single "marmalade" nil nil nil])
  (garoon [cl-struct-package-desc garoon (0 0 1) "A Garoon client." nil single "marmalade" nil nil nil])
  (gather [cl-struct-package-desc gather (20141230 538) "Gather string in buffer." nil single "melpa" nil ((:url . "https://github.com/mhayashi1120/Emacs-gather/raw/master/gather.el") (:keywords "matching" "convenience" "tools")) nil] [cl-struct-package-desc gather (1 1 0) "Gather string in buffer." nil single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-gather/raw/master/gather.el") (:keywords "matching" "convenience" "tools")) nil] [cl-struct-package-desc gather (1 0 4) "Gather string in buffer." nil single "marmalade" nil nil nil])
  (gccsense [cl-struct-package-desc gccsense (0 2) "GCCSense client for Emacs" nil single "marmalade" nil nil nil])
  (geben [cl-struct-package-desc geben (20100330 343) "DBGp protocol frontend, a script debugger" nil tar "melpa" nil ((:url . "http://code.google.com/p/geben-on-emacs/") (:keywords "dbgp" "debugger" "php" "xdebug" "perl" "python" "ruby" "tcl" "komodo")) nil] [cl-struct-package-desc geben (0 26) "A remote debugging environment for Emacs." nil tar "marmalade" nil nil nil])
  (gecf [cl-struct-package-desc gecf (0 1 0) "G\366ktu's Emacs configuration framework." nil single "marmalade" nil nil nil])
  (geiser [cl-struct-package-desc geiser (20151020 1729) "GNU Emacs and Scheme talk to each other" nil tar "melpa" nil nil nil] [cl-struct-package-desc geiser (0 8 1) "GNU Emacs and Scheme talk to each other" nil tar "melpa-stable" nil nil nil] [cl-struct-package-desc geiser (0 6) "GNU Emacs and Scheme talk to each other" nil tar "marmalade" nil nil nil])
  (generate-autoloads [cl-struct-package-desc generate-autoloads (0 0 10) "A package to help you lazy-load everything" nil single "marmalade" nil nil nil])
  (gerrit-download [cl-struct-package-desc gerrit-download (20150714 708) "Show gerrit reviews in a diff buffer." ((emacs (24 0)) (magit (2 1 0))) single "melpa" nil ((:url . "https://github.com/chmouel/gerrit-download.el") (:keywords "tools" "gerrit" "git")) nil] [cl-struct-package-desc gerrit-download (0 2) "Show gerrit reviews in a diff buffer." ((magit (20130828 1540))) single "marmalade" nil nil nil])
  (gh [cl-struct-package-desc gh (20150906 848) "A GitHub library for Emacs" ((emacs (24 4)) (pcache (0 3 1)) (logito (0 1))) tar "melpa" nil nil nil] [cl-struct-package-desc gh (0 9 2) "A GitHub library for Emacs" ((eieio (1 4)) (pcache (0 3 0)) (logito (0 1))) tar "melpa-stable" nil nil nil] [cl-struct-package-desc gh (0 9 2) "A GitHub library for Emacs" ((eieio (1 4)) (pcache (0 3 0)) (logito (0 1))) tar "marmalade" nil nil nil])
  (ghc [cl-struct-package-desc ghc (20151013 1219) "Sub mode for Haskell mode" ((haskell-mode (13 0))) tar "melpa" nil nil nil] [cl-struct-package-desc ghc (5 4 0 0) "Sub mode for Haskell mode" ((haskell-mode (13 0))) tar "melpa-stable" nil nil nil] [cl-struct-package-desc ghc (1 10 2) "Happy Haskell programming on Emacs" ((haskell-mode (2 8 0))) tar "marmalade" nil nil nil])
  (ghci-completion [cl-struct-package-desc ghci-completion (20140316 2331) "Completion for GHCi commands in inferior-haskell buffers" ((emacs (24 1))) single "melpa" nil ((:keywords "convenience")) nil] [cl-struct-package-desc ghci-completion (0 1 3) "Completion for GHCi commands in inferior-haskell buffers" nil single "marmalade" nil nil nil])
  (gimme [cl-struct-package-desc gimme (2 1) "The XMMS2 interface we all love! Check out http://gimmeplayer.org for more info." nil tar "marmalade" nil nil nil])
  (gist [cl-struct-package-desc gist (20150906 954) "Emacs integration for gist.github.com" ((emacs (24 1)) (gh (0 9 2))) single "melpa" nil ((:url . "https://github.com/defunkt/gist.el") (:keywords "tools")) nil] [cl-struct-package-desc gist (1 3 1) "Emacs integration for gist.github.com" ((emacs (24 1)) (gh (0 9 2))) single "melpa-stable" nil ((:url . "https://github.com/defunkt/gist.el") (:keywords "tools")) nil] [cl-struct-package-desc gist (1 3 1) "Emacs integration for gist.github.com" ((emacs (24 1)) (gh (0 9 2))) single "marmalade" nil nil nil])
  (git-auto-commit-mode [cl-struct-package-desc git-auto-commit-mode (20150404 751) "Emacs Minor mode to automatically commit and push" nil single "melpa" nil ((:url . "http://projects.ryuslash.org/git-auto-commit-mode/") (:keywords "vc")) nil] [cl-struct-package-desc git-auto-commit-mode (4 4 0) "Emacs Minor mode to automatically commit and push" nil single "melpa-stable" nil ((:url . "http://projects.ryuslash.org/git-auto-commit-mode/") (:keywords "vc")) nil] [cl-struct-package-desc git-auto-commit-mode (4 4 0) "Emacs Minor mode to automatically commit and push" nil single "marmalade" nil nil nil])
  (git-commit [cl-struct-package-desc git-commit (20151111 418) "Edit Git commit messages" ((emacs (24 4)) (dash (20151021 113)) (with-editor (20151111))) single "melpa" nil ((:url . "https://github.com/magit/magit") (:keywords "git" "tools" "vc")) nil] [cl-struct-package-desc git-commit (2 3 1) "Edit Git commit messages" ((emacs (24 4)) (dash (2 12 1)) (with-editor (2 3 1))) single "melpa-stable" nil ((:url . "https://github.com/magit/magit") (:keywords "git" "tools" "vc")) nil] [cl-struct-package-desc git-commit (2 3 1) "Edit Git commit messages" ((emacs (24 4)) (dash (2 12 1)) (with-editor (2 3 1))) single "marmalade" nil nil nil])
  (git-draft [cl-struct-package-desc git-draft (0 0 2) "draft git commit messages" ((dash (2 9 0))) single "marmalade" nil nil nil])
  (git-gutter [cl-struct-package-desc git-gutter (20150915 50) "Port of Sublime Text plugin GitGutter" ((cl-lib (0 5)) (emacs (24))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-git-gutter")) nil] [cl-struct-package-desc git-gutter (0 83) "Port of Sublime Text plugin GitGutter" ((cl-lib (0 5)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-git-gutter")) nil] [cl-struct-package-desc git-gutter (0 78) "Port of Sublime Text plugin GitGutter" ((cl-lib (0 5)) (emacs (24))) single "marmalade" nil nil nil])
  (git-gutter-fringe [cl-struct-package-desc git-gutter-fringe (20150331 2139) "Fringe version of git-gutter.el" ((git-gutter (0 82)) (fringe-helper (0 1 1)) (cl-lib (0 5)) (emacs (24))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-git-gutter-fringe")) nil] [cl-struct-package-desc git-gutter-fringe (0 22) "Fringe version of git-gutter.el" ((git-gutter (0 82)) (fringe-helper (0 1 1)) (cl-lib (0 5)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-git-gutter-fringe")) nil] [cl-struct-package-desc git-gutter-fringe (0 12) "Fringe version of git-gutter.el" ((git-gutter (0 42)) (fringe-helper (0 1 1))) single "marmalade" nil nil nil])
  (gitattributes-mode [cl-struct-package-desc gitattributes-mode (20150330 1048) "Major mode for editing .gitattributes files" nil single "melpa" nil ((:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git")) nil] [cl-struct-package-desc gitattributes-mode (1 2 0) "Major mode for editing .gitattributes files" nil single "melpa-stable" nil ((:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git")) nil] [cl-struct-package-desc gitattributes-mode (1 2 0) "Major mode for editing .gitattributes files" nil single "marmalade" nil nil nil])
  (gitattributes-whitespace [cl-struct-package-desc gitattributes-whitespace (1 20141128) "configure whitespace settings from gitattributes" nil single "marmalade" nil nil nil])
  (gitconfig [cl-struct-package-desc gitconfig (20130718 235) "Emacs lisp interface to work with git-config variables" nil single "melpa" nil ((:keywords "git" "gitconfig" "git-config")) nil] [cl-struct-package-desc gitconfig (1 0 0) "Emacs lisp interface to work with git-config variables" nil single "melpa-stable" nil ((:keywords "git" "gitconfig" "git-config")) nil] [cl-struct-package-desc gitconfig (1 0 0) "Emacs lisp interface to work with git-config variables" nil single "marmalade" nil nil nil])
  (gitconfig-mode [cl-struct-package-desc gitconfig-mode (20150330 1048) "Major mode for editing .gitconfig files" nil single "melpa" nil ((:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git")) nil] [cl-struct-package-desc gitconfig-mode (1 2 0) "Major mode for editing .gitconfig files" nil single "melpa-stable" nil ((:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git")) nil] [cl-struct-package-desc gitconfig-mode (1 2 0) "Major mode for editing .gitconfig files" nil single "marmalade" nil nil nil])
  (github-browse-file [cl-struct-package-desc github-browse-file (20151112 1625) "View the file you're editing on GitHub" ((cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/osener/github-browse-file") (:keywords "convenience" "vc" "git" "github")) nil] [cl-struct-package-desc github-browse-file (0 5 0) "View the file you're editing on GitHub" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/osener/github-browse-file") (:keywords "convenience" "vc" "git" "github")) nil] [cl-struct-package-desc github-browse-file (0 4 0) "View the file you're editing on GitHub" ((cl-lib (0 5))) single "marmalade" nil nil nil])
  (github-theme [cl-struct-package-desc github-theme (0 0 3) "Github color theme for GNU Emacs 24" nil single "marmalade" nil nil nil])
  (gitignore-mode [cl-struct-package-desc gitignore-mode (20150330 1048) "Major mode for editing .gitignore files" nil single "melpa" nil ((:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git")) nil] [cl-struct-package-desc gitignore-mode (1 2 0) "Major mode for editing .gitignore files" nil single "melpa-stable" nil ((:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git")) nil] [cl-struct-package-desc gitignore-mode (1 2 0) "Major mode for editing .gitignore files" nil single "marmalade" nil nil nil])
  (gitty [cl-struct-package-desc gitty (20121014 742) "vc-mode extension for fast git interaction" nil single "melpa" nil ((:url . "https://github.com/jorgenschaefer/gitty") (:keywords "vc")) nil] [cl-struct-package-desc gitty (1 0) "vc-mode extension for fast git interaction" nil single "marmalade" nil nil nil])
  (gnomenm [cl-struct-package-desc gnomenm (20150316 1218) "Emacs interface to Gnome nmcli command" ((s (1 9 0)) (dash (2 3 0)) (kv (0 0 19))) single "melpa" nil ((:url . "http://github.com/nicferrier/emacs-nm") (:keywords "processes" "hardware")) nil] [cl-struct-package-desc gnomenm (0 0 3) "Emacs interface to Gnome nmcli command" nil single "marmalade" nil nil nil])
  (gnuplot [cl-struct-package-desc gnuplot (20141231 1337) "drive gnuplot from within emacs" nil tar "melpa" nil ((:keywords "gnuplot" "plotting")) nil] [cl-struct-package-desc gnuplot (0 7 0) "drive gnuplot from within emacs" nil tar "melpa-stable" nil ((:keywords "gnuplot" "plotting")) nil] [cl-struct-package-desc gnuplot (0 6 0) "drive gnuplot from within emacs" nil single "marmalade" nil nil nil])
  (gnus-summary-ext [cl-struct-package-desc gnus-summary-ext (20150119 1833) "Extra limit and process mark commands for the gnus summary buffer" nil single "melpa" nil ((:url . "https://github.com/vapniks/gnus-summary-ext") (:keywords "comm")) nil] [cl-struct-package-desc gnus-summary-ext (0 1) "Extra limit and process mark commands for the gnus summary buffer" ((macro-utils (1 0))) single "marmalade" nil nil nil])
  (gnusnotes [cl-struct-package-desc gnusnotes (0 91) "Adding per-message notes in gnus summary buffer" nil single "marmalade" nil nil nil])
  (go-mode [cl-struct-package-desc go-mode (20150817 2318) "Major mode for the Go programming language" nil tar "melpa" nil ((:url . "https://github.com/dominikh/go-mode.el") (:keywords "languages" "go")) nil] [cl-struct-package-desc go-mode (20131222) "Major mode for the Go programming language" nil single "marmalade" nil nil nil] [cl-struct-package-desc go-mode (1 3 1) "Major mode for the Go programming language" nil tar "melpa-stable" nil ((:url . "https://github.com/dominikh/go-mode.el") (:keywords "languages" "go")) nil])
  (go-play [cl-struct-package-desc go-play (20120914 1248) "Paste to play.golang.org" nil single "melpa" nil nil nil] [cl-struct-package-desc go-play (0 0 1) "Paste to play.golang.org" nil single "marmalade" nil nil nil])
  (god-mode [cl-struct-package-desc god-mode (20151005 925) "God-like command entering minor mode" nil tar "melpa" nil ((:url . "https://github.com/chrisdone/god-mode")) nil] [cl-struct-package-desc god-mode (2 12 0) "God-like command entering minor mode" nil single "marmalade" nil nil nil])
  (google-translate [cl-struct-package-desc google-translate (20151016 1220) "Emacs interface to Google Translate." nil tar "melpa" nil nil nil] [cl-struct-package-desc google-translate (0 11 2) "Emacs interface to Google Translate." nil tar "melpa-stable" nil nil nil] [cl-struct-package-desc google-translate (0 10 4) "Emacs interface to Google Translate." nil tar "marmalade" nil nil nil])
  (gopher [cl-struct-package-desc gopher (0 0 2) "easily access and navigate Gopher servers" nil single "marmalade" nil nil nil])
  (gotham-theme [cl-struct-package-desc gotham-theme (20151009 1505) "A very dark Emacs color theme." nil single "melpa" nil ((:url . "https://github.com/wasamasa/gotham-theme")) nil] [cl-struct-package-desc gotham-theme (1 1 4) "A very dark Emacs color theme." nil single "melpa-stable" nil ((:url . "https://github.com/wasamasa/gotham-theme")) nil] [cl-struct-package-desc gotham-theme (1 1 4) "A very dark Emacs color theme." nil single "marmalade" nil nil nil])
  (goto-chg [cl-struct-package-desc goto-chg (20131228 659) "goto last change" nil single "melpa" nil ((:keywords "convenience" "matching")) nil] [cl-struct-package-desc goto-chg (1 6) "goto last change" nil single "marmalade" nil nil nil])
  (goto-last-change [cl-struct-package-desc goto-last-change (20150109 1023) "Move point through buffer-undo-list positions" nil single "melpa" nil ((:url . "https://github.com/camdez/goto-last-change.el") (:keywords "convenience")) nil] [cl-struct-package-desc goto-last-change (1 2 1) "Move point through buffer-undo-list positions" nil single "melpa-stable" nil ((:url . "https://github.com/camdez/goto-last-change.el") (:keywords "convenience")) nil] [cl-struct-package-desc goto-last-change (1 2) "Move point through buffer-undo-list positions" nil single "marmalade" nil nil nil])
  (gplusify [cl-struct-package-desc gplusify (20150312 1244) "Add Google Plus markup to a piece of code" nil single "melpa" nil ((:url . "https://github.com/jorgenschaefer/gplusify")) nil] [cl-struct-package-desc gplusify (1 0) "Add Google Plus markup to a piece of code" nil single "marmalade" nil nil nil])
  (grails-mode [cl-struct-package-desc grails-mode (20141024 949) "minor-mode that adds some Grails project management to a grails project" nil single "melpa" nil ((:url . "http://blog.wolfman.com")) nil] [cl-struct-package-desc grails-mode (0 1) "minor-mode that adds some Grails project management to a grails project" nil single "marmalade" nil nil nil])
  (graphviz-dot-mode [cl-struct-package-desc graphviz-dot-mode (20151010 2359) "Mode for the dot-language used by graphviz (att)." nil single "melpa" nil ((:url . "http://ppareit.github.com/graphviz-dot-mode/") (:keywords "mode" "dot" "dot-language" "dotlanguage" "graphviz" "graphs" "att")) nil] [cl-struct-package-desc graphviz-dot-mode (0 4) "Mode for the dot-language used by graphviz (att)." nil single "melpa-stable" nil ((:url . "http://ppareit.github.com/graphviz-dot-mode/") (:keywords "mode" "dot" "dot-language" "dotlanguage" "graphviz" "graphs" "att")) nil] [cl-struct-package-desc graphviz-dot-mode (0 3 7) "Mode for the dot-language used by graphviz (att)." nil single "marmalade" nil nil nil])
  (grapnel [cl-struct-package-desc grapnel (20131001 834) "HTTP request lib with flexible callback dispatch" nil single "melpa" nil ((:url . "http://www.github.com/leathekd/grapnel")) nil] [cl-struct-package-desc grapnel (0 5 3) "HTTP request lib with flexible callback dispatch" nil single "melpa-stable" nil ((:url . "http://www.github.com/leathekd/grapnel")) nil] [cl-struct-package-desc grapnel (0 5 3) "HTTP request lib with flexible callback dispatch" nil single "marmalade" nil nil nil])
  (gratuitous-dark-theme [cl-struct-package-desc gratuitous-dark-theme (1 3) "A theme originally by 'cofi' from #emacs, Freenode. It is a combination of Monokai and several other themes. The modeline has been modelled after AwesomeWM because it looks cool." nil single "marmalade" nil nil nil])
  (grep-a-lot [cl-struct-package-desc grep-a-lot (20131006 647) "manages multiple search results buffers for grep.el" nil single "melpa" nil ((:url . "https://github.com/ZungBang/emacs-grep-a-lot") (:keywords "tools" "convenience" "search")) nil] [cl-struct-package-desc grep-a-lot (1 0 7) "manages multiple search results buffers for grep.el" nil single "marmalade" nil nil nil])
  (grep-o-matic [cl-struct-package-desc grep-o-matic (1 0 6) "auto grep word under cursor" nil single "marmalade" nil nil nil])
  (grin [cl-struct-package-desc grin (20110805 2358) "run grin and grind (python replacements for grep and find) putting hits in a grep buffer" nil single "melpa" nil ((:url . "http://bitbucket.org/dariusp686/emacs-grin") (:keywords "python" "grin" "grind" "grep" "find")) nil] [cl-struct-package-desc grin (1 0) "run grin and grind (python replacements for grep and find) putting hits in a grep buffer" nil single "melpa-stable" nil ((:url . "http://bitbucket.org/dariusp686/emacs-grin") (:keywords "python" "grin" "grind" "grep" "find")) nil] [cl-struct-package-desc grin (1 0) "run grin and grind (python replacements for grep and find) putting hits in a grep buffer" nil single "marmalade" nil nil nil])
  (grizzl [cl-struct-package-desc grizzl (20150711 2230) "Fast fuzzy search index for Emacs." ((cl-lib (0 5)) (emacs (24 3))) single "melpa" nil ((:url . "https://github.com/grizzl/grizzl") (:keywords "convenience" "usability")) nil] [cl-struct-package-desc grizzl (0 1 1) "Fuzzy Search Library & Completing Read" nil tar "melpa-stable" nil nil nil] [cl-struct-package-desc grizzl (0 1 1) "Fuzzy Search Library & Completing Read" ((cl-lib (0 1))) tar "marmalade" nil nil nil])
  (groovy-mode [cl-struct-package-desc groovy-mode (201203310931) "Groovy mode derived mode" nil single "marmalade" nil nil nil] [cl-struct-package-desc groovy-mode (20150725 1050) "Major mode for Groovy source files" nil tar "melpa" nil ((:keywords "languages")) nil])
  (grr [cl-struct-package-desc grr (1 0 0) "Simple Growl notifications for Emacs and Mac OS X" nil single "marmalade" nil nil nil])
  (gruber-darker-theme [cl-struct-package-desc gruber-darker-theme (20151018 2310) "Gruber Darker color theme for Emacs 24." nil single "melpa" nil ((:url . "http://github.com/rexim/gruber-darker-theme")) nil] [cl-struct-package-desc gruber-darker-theme (0 6) "Gruber Darker color theme for Emacs 24." nil single "melpa-stable" nil ((:url . "http://github.com/rexim/gruber-darker-theme")) nil] [cl-struct-package-desc gruber-darker-theme (0 6) "Gruber Darker color theme for Emacs 24." nil single "marmalade" nil nil nil])
  (gtags [cl-struct-package-desc gtags (3 3) "gtags facility for Emacs" nil single "marmalade" nil nil nil])
  (guess-offset [cl-struct-package-desc guess-offset (0 1 1) "Automatically determine c-basic-offset" nil single "marmalade" nil nil nil])
  (guile-scheme [cl-struct-package-desc guile-scheme (0 1) "Guile Scheme editing mode" nil single "marmalade" nil nil nil])
  (guru-mode [cl-struct-package-desc guru-mode (20151027 2228) "Become an Emacs guru" nil single "melpa" nil ((:url . "https://github.com/bbatsov/guru-mode") (:keywords "convenience")) nil] [cl-struct-package-desc guru-mode (0 2) "Become an Emacs guru" nil single "melpa-stable" nil ((:url . "https://github.com/bbatsov/guru-mode") (:keywords "convenience")) nil] [cl-struct-package-desc guru-mode (0 2) "Become an Emacs guru" nil single "marmalade" nil nil nil])
  (gvpr-mode [cl-struct-package-desc gvpr-mode (20131208 918) "A major mode offering basic syntax coloring for gvpr scripts." nil single "melpa" nil ((:url . "https://raw.github.com/rodw/gvpr-lib/master/extra/gvpr-mode.el") (:keywords "graphviz" "gv" "dot" "gvpr" "graph")) nil] [cl-struct-package-desc gvpr-mode (0 1 0) "A major mode offering basic syntax coloring for gvpr scripts." nil single "marmalade" nil nil nil])
  (hackernews [cl-struct-package-desc hackernews (20150901 817) "Access the hackernews aggregator from Emacs" ((json (1 2))) tar "melpa" nil nil nil] [cl-struct-package-desc hackernews (0 2 1) "Access the hackernews aggregator from Emacs" ((json (1 2))) tar "marmalade" nil nil nil] [cl-struct-package-desc hackernews (0 2) "Access the hackernews aggregator from Emacs" ((json (1 2))) tar "melpa-stable" nil nil nil])
  (haml-mode [cl-struct-package-desc haml-mode (20150508 2011) "Major mode for editing Haml files" ((ruby-mode (1 0))) single "melpa" nil ((:url . "http://github.com/nex3/haml/tree/master") (:keywords "markup" "language" "html")) nil] [cl-struct-package-desc haml-mode (3 1 9) "Major mode for editing Haml files" ((ruby-mode (1 0))) single "melpa-stable" nil ((:url . "http://github.com/nex3/haml/tree/master") (:keywords "markup" "language" "html")) nil] [cl-struct-package-desc haml-mode (3 1 8) "Major mode for editing Haml files" ((ruby-mode (1 0))) single "marmalade" nil nil nil])
  (handlebars-mode [cl-struct-package-desc handlebars-mode (20150211 949) "A major mode for editing Handlebars files." nil single "melpa" nil nil nil] [cl-struct-package-desc handlebars-mode (1 3) "A major mode for editing Handlebars files." nil single "marmalade" nil nil nil])
  (handlebars-sgml-mode [cl-struct-package-desc handlebars-sgml-mode (20130623 1633) "Add Handlebars contextual indenting support to sgml-mode" nil single "melpa" nil ((:url . "http://github.com/jacott/handlebars-sgml-mode")) nil] [cl-struct-package-desc handlebars-sgml-mode (0 1 0) "Add Handlebars contextual indenting support to sgml-mode" nil single "marmalade" nil nil nil])
  (hardcore-mode [cl-struct-package-desc hardcore-mode (20151113 901) "Disable arrow keys + optionally backspace and return" nil single "melpa" nil nil nil] [cl-struct-package-desc hardcore-mode (1 0 0) "Disable arrow keys + optionally backspace and return" nil single "marmalade" nil nil nil] [cl-struct-package-desc hardcore-mode (0 1 0) "Disable arrow keys + optionally backspace and return" nil single "melpa-stable" nil nil nil])
  (hardhat [cl-struct-package-desc hardhat (20140827 1856) "Protect against clobbering user-writable files" ((ignoramus (0 7 0))) single "melpa" nil ((:url . "http://github.com/rolandwalker/hardhat") (:keywords "convenience")) nil] [cl-struct-package-desc hardhat (0 4 4) "Protect against clobbering user-writable files" ((ignoramus (0 7 0))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/hardhat") (:keywords "convenience")) nil] [cl-struct-package-desc hardhat (0 4 4) "Protect against clobbering user-writable files" ((ignoramus (0 7 0))) single "marmalade" nil nil nil])
  (haskell-mode [cl-struct-package-desc haskell-mode (20151110 2309) "A Haskell editing mode" ((cl-lib (0 5))) tar "melpa" nil nil nil] [cl-struct-package-desc haskell-mode (13 14 2) "A Haskell editing mode" ((cl-lib (0 5))) tar "melpa-stable" nil nil nil] [cl-struct-package-desc haskell-mode (13 7) "A Haskell editing mode" nil tar "marmalade" nil nil nil])
  (haste [cl-struct-package-desc haste (20141030 1334) "Emacs client for hastebin (http://hastebin.com/about.md)" ((json (1 2))) single "melpa" nil ((:url . "http://github.com/rlister/emacs-haste-client")) nil] [cl-struct-package-desc haste (1) "Emacs client for hastebin (http://hastebin.com/about.md)" ((json (1 2))) single "marmalade" nil nil nil])
  (haxe-mode [cl-struct-package-desc haxe-mode (20131004 142) "An Emacs major mode for Haxe" nil single "melpa" nil ((:url . "http://people.debian.org/~jps/misc/haxe-mode.el")) nil] [cl-struct-package-desc haxe-mode (0 3 1) "An Emacs major mode for haXe" nil single "marmalade" nil nil nil])
  (header2 [cl-struct-package-desc header2 (20150104 1410) "Support for creation and update of file headers." nil single "melpa" nil ((:url . "http://www.emacswiki.org/header2.el") (:keywords "tools" "docs" "maint" "abbrev" "local")) nil] [cl-struct-package-desc header2 (21 0) "Support for creation and update of file headers." nil single "marmalade" nil nil nil])
  (helm-ag [cl-struct-package-desc helm-ag (20151029 2208) "the silver searcher with helm interface" ((helm (1 7 7)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-helm-ag")) nil] [cl-struct-package-desc helm-ag (0 47) "the silver searcher with helm interface" ((helm (1 7 7)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-helm-ag")) nil] [cl-struct-package-desc helm-ag (0 4) "the silver search with helm interface" ((helm (1 0))) single "marmalade" nil nil nil])
  (helm-dash [cl-struct-package-desc helm-dash (20151102 409) "Offline documentation browser for +150 APIs using Dash docsets." ((helm (0 0 0)) (cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/areina/helm-dash") (:keywords "docs")) nil] [cl-struct-package-desc helm-dash (1 1 0) "Helm extension to search dash docsets" ((helm (0 0 0))) single "melpa-stable" nil ((:url . "http://github.com/areina/helm-dash") (:keywords "docs")) nil] [cl-struct-package-desc helm-dash (1 1) "Helm extension to search dash docsets" ((helm (0 0 0))) single "marmalade" nil nil nil])
  (helm-delicious [cl-struct-package-desc helm-delicious (1 3) "helm extensions for delicious bookmarks" nil single "marmalade" nil nil nil])
  (helm-gtags [cl-struct-package-desc helm-gtags (20151107 1848) "GNU GLOBAL helm interface" ((helm (1 7 7)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-helm-gtags")) nil] [cl-struct-package-desc helm-gtags (1 5 0) "GNU GLOBAL helm interface" ((helm (1 7 7)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-helm-gtags")) nil] [cl-struct-package-desc helm-gtags (0 9 2) "GNU GLOBAL helm interface" ((helm (1 0))) single "marmalade" nil nil nil])
  (helm-helm-commands [cl-struct-package-desc helm-helm-commands (20130902 1048) "List all helm commands with helm" ((helm (1 5 4))) single "melpa" nil ((:url . "https://github.com/vapniks/helm-helm-commands") (:keywords "convenience")) nil] [cl-struct-package-desc helm-helm-commands (0 2) "List all helm commands with helm" ((helm (1 5 4))) single "marmalade" nil nil nil])
  (helm-projectile [cl-struct-package-desc helm-projectile (20151021 248) "Helm integration for Projectile" ((helm (1 7 7)) (projectile (0 13 0)) (dash (1 5 0)) (cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/bbatsov/projectile") (:keywords "project" "convenience")) nil] [cl-struct-package-desc helm-projectile (0 13 0) "Helm integration for Projectile" ((helm (1 7 7)) (projectile (0 13 0)) (dash (1 5 0)) (cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/bbatsov/projectile") (:keywords "project" "convenience")) nil] [cl-struct-package-desc helm-projectile (0 10 0) "Helm integration for Projectile" ((helm (1 4 0)) (projectile (0 10 0))) single "marmalade" nil nil nil])
  (heroku [cl-struct-package-desc heroku (20120629 1113) "Interface to Heroku apps." nil single "melpa" nil ((:url . "https://github.com/technomancy/heroku.el") (:keywords "convenience" "api" "database")) nil] [cl-struct-package-desc heroku (1 1 0) "Interface to Heroku apps." nil single "marmalade" nil nil nil])
  (heroku-theme [cl-struct-package-desc heroku-theme (20150522 1919) "Heroku color theme" nil single "melpa" nil ((:url . "https://github.com/jonathanchu/color-theme-heroku")) nil] [cl-struct-package-desc heroku-theme (1 1 0) "Heroku color theme" nil single "marmalade" nil nil nil])
  (hexrgb [cl-struct-package-desc hexrgb (20150708 1836) "Functions to manipulate colors, including RGB hex strings." nil single "melpa" nil ((:url . "http://www.emacswiki.org/hexrgb.el") (:keywords "number" "hex" "rgb" "color" "background" "frames" "display")) nil] [cl-struct-package-desc hexrgb (21 0) "Functions to manipulate colors, including RGB hex strings." nil single "marmalade" nil nil nil])
  (hide-comnt [cl-struct-package-desc hide-comnt (20150801 920) "Hide/show comments in code." nil single "melpa" nil ((:url . "http://www.emacswiki.org/hide-comnt.el") (:keywords "comment" "hide" "show")) nil] [cl-struct-package-desc hide-comnt (40) "Hide/show comments in code." nil tar "marmalade" nil nil nil])
  (hide-lines [cl-struct-package-desc hide-lines (20130824 507) "Commands for hiding lines based on a regexp" nil single "melpa" nil ((:url . "https://github.com/vapniks/hide-lines") (:keywords "convenience")) nil] [cl-struct-package-desc hide-lines (20130623 1701) "Commands for hiding lines based on a regexp" nil single "marmalade" nil nil nil])
  (hideshowvis [cl-struct-package-desc hideshowvis (20130824 500) "Add markers to the fringe for regions foldable by hideshow.el" nil single "melpa" nil nil nil] [cl-struct-package-desc hideshowvis (0 5) "Add markers to the fringe for regions foldable by hideshow.el" nil single "marmalade" nil nil nil])
  (highlight [cl-struct-package-desc highlight (20150818 1118) "Highlighting commands." nil single "melpa" nil ((:url . "http://www.emacswiki.org/highlight.el") (:keywords "faces" "help" "local")) nil] [cl-struct-package-desc highlight (21 0) "Highlighting commands." nil single "marmalade" nil nil nil])
  (highlight-current-line [cl-struct-package-desc highlight-current-line (20051013 1056) "highlight line where the cursor is." nil single "melpa" nil ((:keywords "faces")) nil] [cl-struct-package-desc highlight-current-line (0 57) "highlight line where the cursor is." nil single "marmalade" nil nil nil])
  (highlight-escape-sequences [cl-struct-package-desc highlight-escape-sequences (20150729 1910) "Highlight escape sequences" nil single "melpa" nil ((:url . "https://github.com/dgutov/highlight-escape-sequences") (:keywords "convenience")) nil] [cl-struct-package-desc highlight-escape-sequences (0 1) "Highlight escape sequences" nil single "marmalade" nil nil nil])
  (highlight-indentation [cl-struct-package-desc highlight-indentation (20150307 208) "Minor modes for highlighting indentation" nil single "melpa" nil ((:url . "https://github.com/antonj/Highlight-Indentation-for-Emacs")) nil] [cl-struct-package-desc highlight-indentation (0 7 0) "Minor modes for highlighting indentation" nil single "melpa-stable" nil ((:url . "https://github.com/antonj/Highlight-Indentation-for-Emacs")) nil] [cl-struct-package-desc highlight-indentation (0 5 0) "Function for highlighting indentation" nil single "marmalade" nil nil nil])
  (highlight-parentheses [cl-struct-package-desc highlight-parentheses (20151107 2316) "highlight surrounding parentheses" nil single "melpa" nil ((:url . "https://github.com/tsdh/highlight-parentheses.el") (:keywords "faces" "matching")) nil] [cl-struct-package-desc highlight-parentheses (1 1 0) "highlight surrounding parentheses" nil single "melpa-stable" nil ((:url . "https://github.com/tsdh/highlight-parentheses.el") (:keywords "faces" "matching")) nil] [cl-struct-package-desc highlight-parentheses (1 0 1) "highlight surrounding parentheses" nil single "marmalade" nil nil nil])
  (highlight-sexp [cl-struct-package-desc highlight-sexp (1 0) "highlight current zone according to its context" nil single "marmalade" nil nil nil])
  (highlight-symbol [cl-struct-package-desc highlight-symbol (20151005 451) "automatic and manual symbol highlighting" nil single "melpa" nil ((:url . "http://nschum.de/src/emacs/highlight-symbol/") (:keywords "faces" "matching")) nil] [cl-struct-package-desc highlight-symbol (1 3) "automatic and manual symbol highlighting" nil single "melpa-stable" nil ((:url . "http://nschum.de/src/emacs/highlight-symbol/") (:keywords "faces" "matching")) nil] [cl-struct-package-desc highlight-symbol (1 1) "automatic and manual symbol highlighting" nil single "marmalade" nil nil nil])
  (highline [cl-struct-package-desc highline (7 2 2) "minor mode to highlight current line in buffer" nil single "marmalade" nil nil nil])
  (hippie-expand-haskell [cl-struct-package-desc hippie-expand-haskell (0 0 1) "Hippie expand try function using ghc's completion function." nil single "marmalade" nil nil nil])
  (hippie-expand-slime [cl-struct-package-desc hippie-expand-slime (20130907 132) "Hook slime's completion into hippie-expand" nil single "melpa" nil ((:url . "https://github.com/purcell/hippie-expand-slime")) nil] [cl-struct-package-desc hippie-expand-slime (0 1) "Hook slime's completion into hippie-expand" nil single "melpa-stable" nil ((:url . "https://github.com/purcell/hippie-expand-slime")) nil] [cl-struct-package-desc hippie-expand-slime (0 1) "Hook slime's completion into hippie-expand" nil single "marmalade" nil nil nil])
  (hippie-namespace [cl-struct-package-desc hippie-namespace (20140508 1341) "Special treatment for namespace prefixes in hippie-expand" nil single "melpa" nil ((:url . "http://github.com/rolandwalker/hippie-namespace") (:keywords "convenience" "lisp" "tools" "completion")) nil] [cl-struct-package-desc hippie-namespace (0 5 8) "Special treatment for namespace prefixes in hippie-expand" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/hippie-namespace") (:keywords "convenience" "lisp" "tools" "completion")) nil] [cl-struct-package-desc hippie-namespace (0 5 8) "Special treatment for namespace prefixes in hippie-expand" nil single "marmalade" nil nil nil])
  (hive [cl-struct-package-desc hive (20131217 712) "Hive SQL mode extension" ((sql (3 0))) single "melpa" nil ((:keywords "sql" "hive")) nil] [cl-struct-package-desc hive (0 1 1) "Hive SQL mode extension" ((sql (3 0))) single "marmalade" nil nil nil])
  (hjkl-mode [cl-struct-package-desc hjkl-mode (0 1) "import some vim's key bindings" ((key-chord (0 5))) tar "marmalade" nil nil nil])
  (hl-sentence [cl-struct-package-desc hl-sentence (20140802 920) "highlight a sentence based on customizable face" nil single "melpa" nil ((:url . "http://github.com/milkypostman/hl-sentence") (:keywords "highlighting")) nil] [cl-struct-package-desc hl-sentence (3) "highlight a sentence based on customizable face" nil single "melpa-stable" nil ((:url . "http://github.com/milkypostman/hl-sentence") (:keywords "highlighting")) nil] [cl-struct-package-desc hl-sentence (2) "highlight a sentence based on customizable face" nil single "marmalade" nil nil nil])
  (hl-sexp [cl-struct-package-desc hl-sexp (20101130 443) "highlight the current sexp" nil single "melpa" nil ((:keywords "faces" "frames" "emulation")) nil] [cl-struct-package-desc hl-sexp (1 0 0) "highlight the current sexp" nil single "melpa-stable" nil ((:keywords "faces" "frames" "emulation")) nil] [cl-struct-package-desc hl-sexp (1 0 0) "highlight the current sexp" nil single "marmalade" nil nil nil])
  (hl-spotlight [cl-struct-package-desc hl-spotlight (20150104 1424) "Extension of hl-line.el to spotlight current few lines." nil single "melpa" nil ((:url . "http://www.emacswiki.org/hl-spotlight.el") (:keywords "highlight" "cursor" "accessibility")) nil] [cl-struct-package-desc hl-spotlight (0) "Extension of hl-line.el to spotlight current few lines." nil single "marmalade" nil nil nil])
  (hlinum [cl-struct-package-desc hlinum (20150621 1933) "Extension for linum.el to highlight current line number" ((cl-lib (0 2))) single "melpa" nil ((:url . "https://github.com/tom-tan/hlinum-mode/") (:keywords "convenience" "extensions")) nil] [cl-struct-package-desc hlinum (1 0) "Extension for linum.el to highlight current line number" nil single "marmalade" nil nil nil])
  (hook-utils [cl-struct-package-desc hook-utils (1 0) "Add a few utility functions for manipulating hooks" nil single "marmalade" nil nil nil])
  (how-many-lines-in-project [cl-struct-package-desc how-many-lines-in-project (20140806 2142) "Calculate how many lines are there in your project." nil single "melpa" nil ((:keywords "project" "convenience")) nil] [cl-struct-package-desc how-many-lines-in-project (0 3) "Calculate how many lines are there in your project." ((find-file-in-project (3 3))) single "marmalade" nil nil nil])
  (ht [cl-struct-package-desc ht (20150830 1115) "The missing hash table library for Emacs" nil single "melpa" nil ((:keywords "hash table" "hash map" "hash")) nil] [cl-struct-package-desc ht (2 0) "The missing hash table library for Emacs" nil single "melpa-stable" nil ((:keywords "hash table" "hash map" "hash")) nil] [cl-struct-package-desc ht (1 5) "The missing hash table library for Emacs" nil single "marmalade" nil nil nil])
  (html-script-src [cl-struct-package-desc html-script-src (20120403 1115) "Insert <script src=\"..\"> for popular JavaScript libraries" nil single "melpa" nil ((:url . "http://github.com/rejeep/html-script-src") (:keywords "tools" "convenience")) nil] [cl-struct-package-desc html-script-src (0 0 2) "Insert <script src=\"..\"> for popular JavaScript libraries" nil single "marmalade" nil nil nil])
  (htmlfontify [cl-struct-package-desc htmlfontify (0 21) "htmlise a buffer/source tree with optional hyperlinks" nil single "marmalade" nil nil nil])
  (htmlize [cl-struct-package-desc htmlize (20130207 1202) "Convert buffer text and decorations to HTML." nil single "melpa" nil ((:keywords "hypermedia" "extensions")) nil] [cl-struct-package-desc htmlize (1 39) "Convert buffer text and decorations to HTML." nil single "marmalade" nil nil nil])
  (http-twiddle [cl-struct-package-desc http-twiddle (20121117 812) "send & twiddle & resend HTTP requests" nil single "melpa" nil ((:url . "https://github.com/hassy/http-twiddle/blob/master/http-twiddle.el") (:keywords "http" "rest" "soap")) nil] [cl-struct-package-desc http-twiddle (1 0) "send & twiddle & resend HTTP requests" nil single "marmalade" nil nil nil])
  (httpcode [cl-struct-package-desc httpcode (20121001 2045) "explains the meaning of an HTTP status code" nil single "melpa" nil ((:url . "http://github.com/rspivak/httpcode.el")) nil] [cl-struct-package-desc httpcode (0 1) "explains the meaning of an HTTP status code" nil single "melpa-stable" nil ((:url . "http://github.com/rspivak/httpcode.el")) nil] [cl-struct-package-desc httpcode (0 1) "explains the meaning of an HTTP status code" nil single "marmalade" nil nil nil])
  (httpd [cl-struct-package-desc httpd (1 0 1) "HTTP/1.0 web server for emacs" nil single "marmalade" nil nil nil])
  (hungry-delete [cl-struct-package-desc hungry-delete (20141207 2125) "hungry delete minor mode" nil single "melpa" nil ((:url . "http://github.com/nflath/hungry-delete")) nil] [cl-struct-package-desc hungry-delete (1 1 2) "hungry delete minor mode" nil single "marmalade" nil nil nil])
  (huskie [cl-struct-package-desc huskie (0 0 2) "chainsaw powered logging" ((anaphora (0 0 6))) single "marmalade" nil nil nil])
  (iasm-mode [cl-struct-package-desc iasm-mode (20131004 1644) "interactive assembly major mode." nil single "melpa" nil ((:url . "https://github.com/RAttab/iasm-mode") (:keywords ":" "tools")) nil] [cl-struct-package-desc iasm-mode (0 1) "interactive assembly major mode." nil single "marmalade" nil nil nil])
  (ibuffer-vc [cl-struct-package-desc ibuffer-vc (20150714 1320) "Group ibuffer's list by VC project, or show VC status" ((cl-lib (0 2))) single "melpa" nil ((:url . "http://github.com/purcell/ibuffer-vc") (:keywords "themes")) nil] [cl-struct-package-desc ibuffer-vc (0 10) "Group ibuffer's list by VC project, or show VC status" ((cl-lib (0 2))) single "melpa-stable" nil ((:url . "http://github.com/purcell/ibuffer-vc") (:keywords "themes")) nil] [cl-struct-package-desc ibuffer-vc (0 7) "Group ibuffer's list by VC project, or show VC status" ((cl-lib (0 2))) single "marmalade" nil nil nil])
  (ical-pull [cl-struct-package-desc ical-pull (0 0 3) "pull ical feeds into org-agenda" ((shadchen (1 2)) (dash (2 9 0)) (s (1 9 0)) (noflet (0 0 14)) (web (0 5 1))) single "marmalade" nil nil nil])
  (idle-highlight [cl-struct-package-desc idle-highlight (1 0) "highlight the word the point is on" nil single "marmalade" nil nil nil])
  (idle-highlight-mode [cl-struct-package-desc idle-highlight-mode (20120920 948) "highlight the word the point is on" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/IdleHighlight") (:keywords "convenience")) nil] [cl-struct-package-desc idle-highlight-mode (1 1 3) "highlight the word the point is on" nil single "melpa-stable" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/IdleHighlight") (:keywords "convenience")) nil] [cl-struct-package-desc idle-highlight-mode (1 1 2) "highlight the word the point is on" nil single "marmalade" nil nil nil])
  (idle-require [cl-struct-package-desc idle-require (20090715 1503) "load elisp libraries while Emacs is idle" nil single "melpa" nil ((:url . "http://nschum.de/src/emacs/idle-require/") (:keywords "internal")) nil] [cl-struct-package-desc idle-require (1 0) "load elisp libraries while Emacs is idle" nil single "marmalade" nil nil nil])
  (ido-better-flex [cl-struct-package-desc ido-better-flex (0 2) "A better flex (fuzzy) algorithm for Ido." nil single "marmalade" nil nil nil])
  (ido-gnus [cl-struct-package-desc ido-gnus (20140216 846) "Access gnus groups or servers using ido" ((gnus (5 13))) single "melpa" nil ((:url . "https://github.com/vapniks/ido-gnus") (:keywords "comm")) nil] [cl-struct-package-desc ido-gnus (0 4) "Access gnus groups or servers using ido" ((gnus (5 13))) single "marmalade" nil nil nil])
  (ido-load-library [cl-struct-package-desc ido-load-library (20140611 900) "Load-library alternative using ido-completing-read" ((persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa" nil ((:url . "http://github.com/rolandwalker/ido-load-library") (:keywords "maint" "completion")) nil] [cl-struct-package-desc ido-load-library (0 2 0) "Load-library alternative using ido-completing-read" ((persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/ido-load-library") (:keywords "maint" "completion")) nil] [cl-struct-package-desc ido-load-library (0 2 0) "Load-library alternative using ido-completing-read" ((persistent-soft (0 8 8)) (pcache (0 2 3))) single "marmalade" nil nil nil])
  (ido-select-window [cl-struct-package-desc ido-select-window (20131220 1247) "Select a window using ido and buffer names" ((emacs (24 1))) single "melpa" nil ((:url . "https://github.com/pjones/ido-select-window")) nil] [cl-struct-package-desc ido-select-window (0 1 0) "Select a window using ido and buffer names." nil tar "marmalade" nil nil nil])
  (ido-ubiquitous [cl-struct-package-desc ido-ubiquitous (20151005 2131) "Use ido (nearly) everywhere." ((emacs (24 1)) (ido-completing-read+ (3 0))) single "melpa" nil ((:url . "https://github.com/DarwinAwardWinner/ido-ubiquitous") (:keywords "convenience" "completion" "ido")) nil] [cl-struct-package-desc ido-ubiquitous (3 7) "Use ido (nearly) everywhere." ((emacs (24 1)) (ido-completing-read+ (3 0))) single "melpa-stable" nil ((:url . "https://github.com/DarwinAwardWinner/ido-ubiquitous") (:keywords "convenience" "completion" "ido")) nil] [cl-struct-package-desc ido-ubiquitous (2 10) "Use ido (nearly) everywhere." ((emacs (24 1))) single "marmalade" nil nil nil])
  (ido-vertical-mode [cl-struct-package-desc ido-vertical-mode (20151003 1833) "Makes ido-mode display vertically." nil single "melpa" nil ((:url . "https://github.com/creichert/ido-vertical-mode.el") (:keywords "convenience")) nil] [cl-struct-package-desc ido-vertical-mode (0 1 6) "Makes ido-mode display vertically." nil single "melpa-stable" nil ((:url . "https://github.com/gempesaw/ido-vertical-mode.el") (:keywords "convenience")) nil] [cl-struct-package-desc ido-vertical-mode (0 1 1) "Makes ido-mode display vertically." nil single "marmalade" nil nil nil])
  (ido-yes-or-no [cl-struct-package-desc ido-yes-or-no (20140625 2106) "Use Ido to answer yes-or-no questions" nil single "melpa" nil ((:url . "https://github.com/DarwinAwardWinner/ido-yes-or-no")) nil] [cl-struct-package-desc ido-yes-or-no (1 2) "Use Ido to answer yes-or-no questions" nil single "melpa-stable" nil ((:url . "https://github.com/DarwinAwardWinner/ido-yes-or-no")) nil] [cl-struct-package-desc ido-yes-or-no (1 1) "Use Ido to answer yes-or-no questions" ((ido (0))) single "marmalade" nil nil nil])
  (idomenu [cl-struct-package-desc idomenu (20141123 1320) "imenu tag selection a la ido" nil single "melpa" nil nil nil] [cl-struct-package-desc idomenu (0 1) "imenu tag selection with ido" nil single "melpa-stable" nil ((:url . "https://github.com/birkenfeld/idomenu") (:keywords "extensions" "convenience")) nil] [cl-struct-package-desc idomenu (0 1) "imenu tag selection with ido" nil single "marmalade" nil nil nil])
  (iedit [cl-struct-package-desc iedit (20150915 2022) "Edit multiple regions in the same way simultaneously." nil tar "melpa" nil ((:url . "http://www.emacswiki.org/emacs/Iedit") (:keywords "occurrence" "region" "simultaneous" "refactoring")) nil] [cl-struct-package-desc iedit (0 97) "Edit multiple regions in the same way simultaneously." nil tar "marmalade" nil nil nil] [cl-struct-package-desc iedit (0 9 9) "Edit multiple regions in the same way simultaneously." nil tar "melpa-stable" nil ((:url . "http://www.emacswiki.org/emacs/Iedit") (:keywords "occurrence" "region" "simultaneous" "refactoring")) nil])
  (ignoramus [cl-struct-package-desc ignoramus (20150216 1342) "Ignore backups, build files, et al." nil single "melpa" nil ((:url . "http://github.com/rolandwalker/ignoramus") (:keywords "convenience" "tools")) nil] [cl-struct-package-desc ignoramus (0 7 2) "Ignore backups, build files, et al." nil single "marmalade" nil nil nil] [cl-struct-package-desc ignoramus (0 7 0) "Ignore backups, build files, et al." nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/ignoramus") (:keywords "convenience" "tools")) nil])
  (igrep [cl-struct-package-desc igrep (20130824 507) "An improved interface to `grep` and `find`" nil single "melpa" nil ((:keywords "tools" "processes" "search")) nil] [cl-struct-package-desc igrep (2 113) "An improved interface to `grep` and `find`" nil single "marmalade" nil nil nil])
  (imgur [cl-struct-package-desc imgur (20120307 225) "imgur client for Emacs" ((anything (1 287))) single "melpa" nil ((:keywords "multimedia" "convenience")) nil] [cl-struct-package-desc imgur (0 1) "imgur client for Emacs" ((anything (1 287))) single "marmalade" nil nil nil])
  (immutant-server [cl-struct-package-desc immutant-server (20140311 1508) "Run your Immutant server in Emacs" nil single "melpa" nil ((:url . "http://www.github.com/leathekd/immutant-server.el")) nil] [cl-struct-package-desc immutant-server (1 2 0) "Run your Immutant server in Emacs" nil single "melpa-stable" nil ((:url . "http://www.github.com/leathekd/immutant-server.el")) nil] [cl-struct-package-desc immutant-server (1 0 1) "Run your Immutant server in Emacs" nil single "marmalade" nil nil nil])
  (inf-clojure [cl-struct-package-desc inf-clojure (20151108 2345) "an inferior-clojure mode" ((emacs (24 1)) (clojure-mode (4 0))) single "melpa" nil ((:url . "http://github.com/clojure-emacs/inf-clojure") (:keywords "processes" "clojure")) nil] [cl-struct-package-desc inf-clojure (1 3 0) "an inferior-clojure mode" ((emacs (24 1)) (clojure-mode (4 0))) single "melpa-stable" nil ((:url . "http://github.com/clojure-emacs/inf-clojure") (:keywords "processes" "clojure")) nil] [cl-struct-package-desc inf-clojure (1 0 0) "an inferior-clojure mode" ((emacs (24 1)) (clojure-mode (4 0))) single "marmalade" nil nil nil])
  (inf-groovy [cl-struct-package-desc inf-groovy (2 0) "minor-mode that adds some Grails project management to a grails project" nil single "marmalade" nil nil nil])
  (inf-ruby [cl-struct-package-desc inf-ruby (20151104 1237) "Run a Ruby process in a buffer" nil single "melpa" nil ((:url . "http://github.com/nonsequitur/inf-ruby") (:keywords "languages" "ruby")) nil] [cl-struct-package-desc inf-ruby (2 4 0) "Run a Ruby process in a buffer" nil single "melpa-stable" nil ((:url . "http://github.com/nonsequitur/inf-ruby") (:keywords "languages" "ruby")) nil] [cl-struct-package-desc inf-ruby (2 3 2) "Run a Ruby process in a buffer" nil single "marmalade" nil nil nil])
  (inform-mode [cl-struct-package-desc inform-mode (1 6 2) "Major mode for Inform 6 interactive fiction code" nil single "marmalade" nil nil nil])
  (initchart [cl-struct-package-desc initchart (0 1 1) "Emacs' init process performance visualization" ((cl-lib (0 3))) single "marmalade" nil nil nil])
  (inline-crypt [cl-struct-package-desc inline-crypt (20130409 507) "Simple inline encryption via openssl" nil tar "melpa" nil nil nil] [cl-struct-package-desc inline-crypt (0 1 4) "Simple inline encryption via openssl" nil tar "melpa-stable" nil nil nil] [cl-struct-package-desc inline-crypt (0 1 4) "Simple inline encryption via openssl" nil tar "marmalade" nil nil nil])
  (insert-shebang [cl-struct-package-desc insert-shebang (20141119 427) "Insert shebang line automatically." nil single "melpa" nil ((:url . "http://github.com/psachin/insert-shebang") (:keywords "shebang" "tool" "convenience")) nil] [cl-struct-package-desc insert-shebang (0 9 4) "Insert shebang line automatically." nil single "melpa-stable" nil ((:url . "http://github.com/psachin/insert-shebang") (:keywords "shebang" "tool" "convenience")) nil] [cl-struct-package-desc insert-shebang (0 9 3) "Insert shebang line automatically." nil single "marmalade" nil nil nil])
  (ipython [cl-struct-package-desc ipython (2927) "Adds support for IPython to python-mode.el" nil single "marmalade" nil nil nil])
  (ir-black-theme [cl-struct-package-desc ir-black-theme (20130302 2355) "Port of ir-black theme" nil single "melpa" nil ((:keywords "faces")) nil] [cl-struct-package-desc ir-black-theme (1 0 1) "Port of ir-black theme" nil single "melpa-stable" nil ((:keywords "faces")) nil] [cl-struct-package-desc ir-black-theme (1 0) "Port of ir-black theme" nil single "marmalade" nil nil nil])
  (iregister [cl-struct-package-desc iregister (20150515 1407) "Interactive register commands for Emacs." nil tar "melpa" nil ((:url . "https://github.com/atykhonov/iregister.el") (:keywords "convenience")) nil] [cl-struct-package-desc iregister (0 5 0) "Interactive register commands for Emacs." nil tar "marmalade" nil nil nil])
  (irfc [cl-struct-package-desc irfc (20130824 507) "Interface for IETF RFC document." nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/irfc.el") (:keywords "rfc" "ietf")) nil] [cl-struct-package-desc irfc (0 5 6) "Interface for IETF RFC document." nil single "marmalade" nil nil nil])
  (isea [cl-struct-package-desc isea (0 0 2) "interactive server eval at mode, a comint for a daemonized emacs" ((elpakit (0 0 18))) single "marmalade" nil nil nil])
  (isearch-switch [cl-struct-package-desc isearch-switch (1 0) "switch the manner you are isearching in." nil single "marmalade" nil nil nil])
  (isgd [cl-struct-package-desc isgd (20150414 236) "Shorten URLs using the isgd.com shortener service" nil single "melpa" nil ((:url . "https://github.com/chmouel/isgd.el")) nil] [cl-struct-package-desc isgd (20130927) "Shorten URLs using the isgd.com shortener service" nil single "marmalade" nil nil nil] [cl-struct-package-desc isgd (1 1) "Shorten URLs using the isgd.com shortener service" nil single "melpa-stable" nil ((:url . "https://github.com/chmouel/isgd.el")) nil])
  (issue-tracker [cl-struct-package-desc issue-tracker (0 0 1) "Poor man's issue tracker" nil tar "marmalade" nil nil nil])
  (ix [cl-struct-package-desc ix (20131027 929) "Emacs client for http://ix.io pastebin" ((grapnel (0 5 3))) single "melpa" nil ((:url . "http://www.github.com/theanalyst/ix.el")) nil] [cl-struct-package-desc ix (0 7) "Emacs client for http://ix.io pastebin" ((grapnel (0 5 3))) single "melpa-stable" nil ((:url . "http://www.github.com/theanalyst/ix.el")) nil] [cl-struct-package-desc ix (0 7) "Emacs client for http://ix.io pastebin" ((grapnel (0 5 3))) single "marmalade" nil nil nil])
  (iy-go-to-char [cl-struct-package-desc iy-go-to-char (20141029 849) "Go to next CHAR which is similar to \"f\" and \"t\" in vim" nil single "melpa" nil ((:url . "https://github.com/doitian/iy-go-to-char") (:keywords "navigation" "search")) nil] [cl-struct-package-desc iy-go-to-char (1 0) "Go to next CHAR which is similar to \"f\" in vim" nil single "marmalade" nil nil nil])
  (j-mode [cl-struct-package-desc j-mode (20140702 809) "Major mode for editing J programs" nil tar "melpa" nil ((:url . "http://github.com/zellio/j-mode") (:keywords "j" "langauges")) nil] [cl-struct-package-desc j-mode (1 1 1) "Major mode for editing J programs" nil tar "melpa-stable" nil ((:url . "http://github.com/zellio/j-mode") (:keywords "j" "langauges")) nil] [cl-struct-package-desc j-mode (0 3) "Major mode for editing J programs" nil single "marmalade" nil nil nil])
  (jabber [cl-struct-package-desc jabber (20151025 1604) "A Jabber client for Emacs." ((fsm (0 2))) tar "melpa" nil nil nil] [cl-struct-package-desc jabber (0 8 92) "A Jabber client for Emacs." nil tar "melpa-stable" nil nil nil] [cl-struct-package-desc jabber (0 8 90) "A Jabber client for Emacs." nil tar "marmalade" nil nil nil])
  (jade-mode [cl-struct-package-desc jade-mode (20150801 944) "Major mode for editing .jade files" nil single "melpa" nil ((:url . "https://github.com/brianc/jade-mode")) nil] [cl-struct-package-desc jade-mode (1 0 0) "Major mode for editing .jade files" nil single "melpa-stable" nil ((:url . "https://github.com/brianc/jade-mode")) nil] [cl-struct-package-desc jade-mode (0 1) "Major mode for editing jade templates." nil single "marmalade" nil nil nil])
  (jam-mode [cl-struct-package-desc jam-mode (0 3) "Font-lock support for Jam files" nil single "marmalade" nil nil nil])
  (jammer [cl-struct-package-desc jammer (20150914 125) "Punish yourself for using Emacs inefficiently" nil single "melpa" nil ((:url . "https://github.com/wasamasa/jammer") (:keywords "games")) nil] [cl-struct-package-desc jammer (0 1) "Punish yourself for using Emacs inefficiently" nil single "melpa-stable" nil ((:url . "https://github.com/wasamasa/jammer") (:keywords "games")) nil] [cl-struct-package-desc jammer (0 0 3) "Punish yourself for using Emacs inefficiently" nil single "marmalade" nil nil nil])
  (jasmin [cl-struct-package-desc jasmin (1 2) "major editing mode for Jasmin Java bytecode assembler files" nil single "marmalade" nil nil nil])
  (jaunte [cl-struct-package-desc jaunte (20130413 219) "Emacs Hit a Hint" nil single "melpa" nil nil nil] [cl-struct-package-desc jaunte (0 0 0) "Emacs Hit a Hint" nil single "marmalade" nil nil nil])
  (java-file-create [cl-struct-package-desc java-file-create (1 0) "automatically insert contents of empty java files" nil single "marmalade" nil nil nil])
  (javap [cl-struct-package-desc javap (8) "Javap major mode" nil single "marmalade" nil nil nil])
  (javap-mode [cl-struct-package-desc javap-mode (20120223 1408) "Javap major mode" nil single "melpa" nil ((:url . "http://github.com/hiredman/javap-mode")) nil] [cl-struct-package-desc javap-mode (9) "Javap major mode" nil single "marmalade" nil nil nil])
  (javarun [cl-struct-package-desc javarun (0 1 1) "Minor mode for quick development of Java programs" nil single "marmalade" nil nil nil])
  (jb-misc-macros [cl-struct-package-desc jb-misc-macros (0 4) "Miscellaneous macros" ((macro-utils (1 0))) single "marmalade" nil nil nil])
  (jcuken-fix [cl-struct-package-desc jcuken-fix (1 0) "Map Modifier-CyrillicLetter to the underlying Modifier-LatinLetter." nil single "marmalade" nil nil nil])
  (jedi [cl-struct-package-desc jedi (20151029 2202) "a Python auto-completion for Emacs" ((emacs (24)) (jedi-core (0 2 2)) (auto-complete (1 4))) single "melpa" nil nil nil] [cl-struct-package-desc jedi (0 2 6) "a Python auto-completion for Emacs" ((emacs (24)) (jedi-core (0 2 2)) (auto-complete (1 4))) single "melpa-stable" nil nil nil] [cl-struct-package-desc jedi (0 1 2) "Python auto-completion for Emacs" ((epc (0 1 0)) (auto-complete (1 4))) tar "marmalade" nil nil nil])
  (jenkins-watch [cl-struct-package-desc jenkins-watch (20121004 1626) "Watch continuous integration build status" nil single "melpa" nil ((:url . "https://github.com/ataylor284/jenkins-watch")) nil] [cl-struct-package-desc jenkins-watch (1 2) "Watch continuous integration build status" nil single "marmalade" nil nil nil])
  (jinja2-mode [cl-struct-package-desc jinja2-mode (20141128 207) "A major mode for jinja2" nil single "melpa" nil nil nil] [cl-struct-package-desc jinja2-mode (0 1) "A major mode for jinja2" nil single "marmalade" nil nil nil])
  (jira [cl-struct-package-desc jira (20131210 1022) "Connect to JIRA issue tracking software" nil single "melpa" nil nil nil] [cl-struct-package-desc jira (0 3 3) "Connect to JIRA issue tracking software" nil single "marmalade" nil nil nil])
  (journal [cl-struct-package-desc journal (1 2 1) "a simple org-mode based journaling mode" nil single "marmalade" nil nil nil])
  (js-comint [cl-struct-package-desc js-comint (20080530 757) "Run javascript in an inferior process window." nil single "melpa" nil ((:keywords "javascript" "inferior-mode" "convenience")) nil] [cl-struct-package-desc js-comint (0 0 1) "Run javascript in an inferior process window." nil single "marmalade" nil nil nil])
  (json [cl-struct-package-desc json (1 2) "JavaScript Object Notation parser / generator" nil single "marmalade" nil nil nil])
  (json-mode [cl-struct-package-desc json-mode (20150413 1948) "Major mode for editing JSON files" ((json-reformat (20141009 1155)) (json-snatcher (20131110 1107))) single "melpa" nil ((:url . "https://github.com/joshwnj/json-mode")) nil] [cl-struct-package-desc json-mode (1 5 0) "Major mode for editing JSON files" ((json-reformat (20141009 1155)) (json-snatcher (20131110 1107))) single "melpa-stable" nil ((:url . "https://github.com/joshwnj/json-mode")) nil] [cl-struct-package-desc json-mode (1 2 0) "Major mode for editing JSON files" nil single "marmalade" nil nil nil])
  (json-snatcher [cl-struct-package-desc json-snatcher (20150511 2047) "Grabs the path to JSON values in a JSON file" ((emacs (24))) single "melpa" nil ((:url . "http://github.com/sterlingg/json-snatcher")) nil] [cl-struct-package-desc json-snatcher (1 0) "Grabs the path to JSON values in a JSON file." nil single "marmalade" nil nil nil])
  (jujube-theme [cl-struct-package-desc jujube-theme (0 1) "Pastel theme loosely based on jellybeans" nil single "marmalade" nil nil nil])
  (jump [cl-struct-package-desc jump (20151009 129) "build functions which contextually jump between files" ((findr (0 7)) (inflections (1 1))) single "melpa" nil ((:url . "http://github.com/eschulte/jump.el/tree/master") (:keywords "project" "convenience" "navigation")) nil] [cl-struct-package-desc jump (2 3) "build functions which contextually jump between files" ((findr (0 7)) (inflections (1 1))) single "melpa-stable" nil ((:url . "http://github.com/eschulte/jump.el/tree/master") (:keywords "project" "convenience" "navigation")) nil] [cl-struct-package-desc jump (2 3) "build functions which contextually jump between files" ((findr (0 7)) (inflections (1 1))) single "marmalade" nil nil nil])
  (jump-char [cl-struct-package-desc jump-char (20150108 1235) "navigation by char" nil single "melpa" nil ((:url . "https://github.com/lewang/jump-char")) nil] [cl-struct-package-desc jump-char (0 1) "navigation by char" nil single "marmalade" nil nil nil])
  (jump-dls [cl-struct-package-desc jump-dls (0 6) "Jump to definition of symbol using various methods." nil single "marmalade" nil nil nil])
  (kanban [cl-struct-package-desc kanban (20150930 917) "Parse org-todo headlines to use org-tables as Kanban tables" nil single "melpa" nil ((:keywords "outlines" "convenience")) nil] [cl-struct-package-desc kanban (0 1 6) "Parse org-todo headlines to use org-tables as Kanban tables" nil single "marmalade" nil nil nil])
  (karma [cl-struct-package-desc karma (20150120 2158) "Karma Test Runner Emacs Integration" ((pkg-info (0 4)) (emacs (24))) single "melpa" nil ((:url . "http://github.com/tonini/karma.el") (:keywords "language" "javascript" "js" "karma" "testing")) nil] [cl-struct-package-desc karma (0 1 0) "Karma Test Runner Emacs Integration" nil single "melpa-stable" nil ((:url . "http://github.com/tonini/karma.el") (:keywords "javascript" "js" "karma" "testing")) nil] [cl-struct-package-desc karma (0 1 0) "Karma Test Runner Emacs Integration" nil single "marmalade" nil nil nil])
  (key-choices [cl-struct-package-desc key-choices (0 201) "Key Choices -- Also Viper has different colors in different modes" ((color-theme-vim-insert-mode (0 1)) (color-theme-emacs-revert-theme (0 1))) single "marmalade" nil nil nil])
  (key-chord [cl-struct-package-desc key-chord (20150808 1005) "map pairs of simultaneously pressed keys to commands" nil single "melpa" nil ((:keywords "keyboard" "chord" "input")) nil] [cl-struct-package-desc key-chord (0 5 20080915) "map pairs of simultaneously pressed keys to commands" nil single "marmalade" nil nil nil])
  (key-combo [cl-struct-package-desc key-combo (20150324 739) "map key sequence to commands" nil single "melpa" nil ((:url . "https://github.com/uk-ar/key-combo") (:keywords "keyboard" "input")) nil] [cl-struct-package-desc key-combo (1 6) "map key sequence to commands" nil single "melpa-stable" nil ((:url . "https://github.com/uk-ar/key-combo") (:keywords "keyboard" "input")) nil] [cl-struct-package-desc key-combo (1 5 1) "map key sequence to commands" nil single "marmalade" nil nil nil])
  (keyfreq [cl-struct-package-desc keyfreq (20150924 2005) "track command frequencies" nil single "melpa" nil nil nil] [cl-struct-package-desc keyfreq (1 7) "track command frequencies" nil single "melpa-stable" nil nil nil] [cl-struct-package-desc keyfreq (0 0 3) "track command frequencies" ((json (1 2))) single "marmalade" nil nil nil])
  (keywiz [cl-struct-package-desc keywiz (1 4) "Emacs key sequence quiz" nil single "marmalade" nil nil nil])
  (kmacro-decision [cl-struct-package-desc kmacro-decision (1 5) "Add conditional branching to keyboard macros" ((el-x (1 0)) (jb-misc-macros (0 2))) single "marmalade" nil nil nil])
  (kpm-list [cl-struct-package-desc kpm-list (20130131 148) "An emacs buffer list that tries to intelligently group together buffers." nil single "melpa" nil ((:url . "https://github.com/KMahoney/kpm-list/")) nil] [cl-struct-package-desc kpm-list (1 0) "An emacs buffer list that tries to intelligently group together buffers." nil single "marmalade" nil nil nil])
  (kv [cl-struct-package-desc kv (20140108 734) "key/value data structure functions" nil single "melpa" nil ((:keywords "lisp")) nil] [cl-struct-package-desc kv (0 0 19) "key/value data structure functions" nil single "marmalade" nil nil nil])
  (kwin [cl-struct-package-desc kwin (20150308 1112) "communicatewith the KWin window manager" nil single "melpa" nil ((:url . "http://github.com/reactormonk/kwin-minor-mode")) nil] [cl-struct-package-desc kwin (0 1) "communcate with the KWin window manager" nil single "marmalade" nil nil nil])
  (lacarte [cl-struct-package-desc lacarte (20150104 1550) "Execute menu items as commands, with completion." nil single "melpa" nil ((:url . "http://www.emacswiki.org/lacarte.el") (:keywords "menu-bar" "menu" "command" "help" "abbrev" "minibuffer" "keys" "completion" "matching" "local" "internal" "extensions")) nil] [cl-struct-package-desc lacarte (22 0) "Execute menu items as commands, with completion." nil single "marmalade" nil nil nil])
  (lang-refactor [cl-struct-package-desc lang-refactor (0 1 1) "Simple refactorings, primarily for Perl" nil single "marmalade" nil nil nil])
  (langtool [cl-struct-package-desc langtool (20150917 413) "Grammar check utility using LanguageTool" ((cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/mhayashi1120/Emacs-langtool") (:keywords "docs")) nil] [cl-struct-package-desc langtool (1 5 0) "Grammar check utility using LanguageTool" ((cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-langtool") (:keywords "docs")) nil] [cl-struct-package-desc langtool (1 2 1) "Grammar check utility using LanguageTool" nil single "marmalade" nil nil nil])
  (late-night-theme [cl-struct-package-desc late-night-theme (0 0) "Late Night theme for Emacs 24" nil single "marmalade" nil nil nil])
  (latest-clojars [cl-struct-package-desc latest-clojars (0 3) "Clojure dependency resolver" nil single "marmalade" nil nil nil])
  (latest-clojure-libraries [cl-struct-package-desc latest-clojure-libraries (20140314 617) "Clojure dependency resolver" nil single "melpa" nil ((:url . "http://github.com/AdamClements/latest-clojure-libraries/")) nil] [cl-struct-package-desc latest-clojure-libraries (0 5) "Clojure dependency resolver" nil single "marmalade" nil nil nil])
  (latex-pretty-symbols [cl-struct-package-desc latex-pretty-symbols (20151112 244) "Display many latex symbols as their unicode counterparts" nil single "melpa" nil ((:url . "https://bitbucket.org/mortiferus/latex-pretty-symbols.el") (:keywords "convenience" "display")) nil] [cl-struct-package-desc latex-pretty-symbols (1 0) "Display many latex symbols as their unicode counterparts" nil single "marmalade" nil nil nil])
  (latex-preview-pane [cl-struct-package-desc latex-preview-pane (20151023 1303) "Makes LaTeX editing less painful by providing a updatable preview pane" nil tar "melpa" nil nil nil] [cl-struct-package-desc latex-preview-pane (20140205) "Makes LaTeX editing less painful by providing a updatable preview pane" nil tar "marmalade" nil nil nil])
  (layout-restore [cl-struct-package-desc layout-restore (0 4) "keep window configuration as layout and restore it simply." nil single "marmalade" nil nil nil])
  (lcs [cl-struct-package-desc lcs (1 6) "find out the longest common sequence" nil single "marmalade" nil nil nil])
  (legalese [cl-struct-package-desc legalese (20120706) "Add legalese to your program files" nil single "marmalade" nil nil nil] [cl-struct-package-desc legalese (20100119 1348) "Add legalese to your program files" nil single "melpa" nil ((:keywords "convenience")) nil])
  (lentic [cl-struct-package-desc lentic (20151102 39) "One buffer as a view of another" ((emacs (24 4)) (m-buffer (0 13)) (dash (2 5 0)) (f (0 17 2)) (s (1 9 0))) tar "melpa" nil nil nil] [cl-struct-package-desc lentic (0 10) "One buffer as a view of another" ((emacs (24 4)) (m-buffer (0 13)) (dash (2 5 0)) (f (0 17 2)) (s (1 9 0))) tar "melpa-stable" nil nil nil] [cl-struct-package-desc lentic (0 7) "One buffer as a view of another" ((emacs (24 4)) (m-buffer (0 8)) (dash (2 5 0)) (f (0 17 2))) tar "marmalade" nil nil nil])
  (less-css-mode [cl-struct-package-desc less-css-mode (20150511 319) "Major mode for editing LESS CSS files (lesscss.org)" nil single "melpa" nil ((:url . "https://github.com/purcell/less-css-mode") (:keywords "less" "css" "mode")) nil] [cl-struct-package-desc less-css-mode (0 20) "Major mode for editing LESS CSS files (lesscss.org)" nil single "melpa-stable" nil ((:url . "https://github.com/purcell/less-css-mode") (:keywords "less" "css" "mode")) nil] [cl-struct-package-desc less-css-mode (0 18) "Major mode for editing LESS CSS files (lesscss.org)" nil single "marmalade" nil nil nil])
  (let-recur [cl-struct-package-desc let-recur (0 0 5) "Simplified implementation of recur" nil single "marmalade" nil nil nil])
  (levenshtein [cl-struct-package-desc levenshtein (20051013 1056) "Edit distance between two strings." nil single "melpa" nil ((:keywords "lisp")) nil] [cl-struct-package-desc levenshtein (1 0) "Edit distance between two strings." nil single "marmalade" nil nil nil])
  (lexbind-mode [cl-struct-package-desc lexbind-mode (20141027 729) "Puts the value of lexical-binding in the mode line" nil single "melpa" nil ((:url . "https://github.com/spacebat/lexbind-mode") (:keywords "convenience" "lisp")) nil] [cl-struct-package-desc lexbind-mode (0 9) "Puts the value of lexical-binding in the mode line" nil single "marmalade" nil nil nil])
  (lib-requires [cl-struct-package-desc lib-requires (20150104 1551) "Commands to list Emacs Lisp library dependencies." nil single "melpa" nil ((:url . "http://www.emacswiki.org/lib-requires.el") (:keywords "libraries" "files")) nil] [cl-struct-package-desc lib-requires (21 0) "Commands to list Emacs Lisp library dependencies." nil single "marmalade" nil nil nil])
  (linear-undo [cl-struct-package-desc linear-undo (5 2) "Intuitive undo/redo." nil single "marmalade" nil nil nil])
  (lineno [cl-struct-package-desc lineno (0 1) "Alternate mode to display line numbers." nil single "marmalade" nil nil nil])
  (linky-client [cl-struct-package-desc linky-client (0 0 2) "a client for linky.elnode.org" nil single "marmalade" nil nil nil])
  (linum-off [cl-struct-package-desc linum-off (20130419 2054) "Provides an interface for turning line-numbering off" nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/auto-indent-mode.el ") (:keywords "line" "numbering")) nil] [cl-struct-package-desc linum-off (0 1) "Provides an interface for turning line-numbering off" nil single "marmalade" nil nil nil])
  (lisp-editing [cl-struct-package-desc lisp-editing (0 0 5) "lisp editing tools" nil single "marmalade" nil nil nil])
  (lisp-infection [cl-struct-package-desc lisp-infection (0 0 10) "Commands to *enhance* S-exp editing" nil single "marmalade" nil nil nil])
  (lispyscript-mode [cl-struct-package-desc lispyscript-mode (20130828 719) "Major mode for LispyScript code." nil single "melpa" nil ((:url . "https://github.com/krisajenkins/lispyscript-mode") (:keywords "lisp" "languages")) nil] [cl-struct-package-desc lispyscript-mode (0 3 5) "Major mode for LispyScript code." nil single "melpa-stable" nil ((:url . "https://github.com/krisajenkins/lispyscript-mode") (:keywords "lisp" "languages")) nil] [cl-struct-package-desc lispyscript-mode (0 3 1) "Major mode for LispyScript code." nil single "marmalade" nil nil nil])
  (list-register [cl-struct-package-desc list-register (20130824 500) "List register" nil single "melpa" nil nil nil] [cl-struct-package-desc list-register (2 2) "List register" nil single "marmalade" nil nil nil])
  (list-utils [cl-struct-package-desc list-utils (20140508 1341) "List-manipulation utility functions" nil single "melpa" nil ((:url . "http://github.com/rolandwalker/list-utils") (:keywords "extensions")) nil] [cl-struct-package-desc list-utils (0 4 2) "List-manipulation utility functions" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/list-utils") (:keywords "extensions")) nil] [cl-struct-package-desc list-utils (0 4 2) "List-manipulation utility functions" nil single "marmalade" nil nil nil])
  (livecoder [cl-struct-package-desc livecoder (0 0 2) "tools for live coders" nil single "marmalade" nil nil nil])
  (livescript-mode [cl-struct-package-desc livescript-mode (20140612 2121) "Major mode for editing LiveScript files" nil single "melpa" nil ((:url . "https://github.com/yhisamatsu/livescript-mode") (:keywords "languages" "livescript")) nil] [cl-struct-package-desc livescript-mode (0 0 1) "Major mode for LiveScript files in Emacs" nil single "marmalade" nil nil nil])
  (livid-mode [cl-struct-package-desc livid-mode (20131116 544) "Live browser eval of JavaScript every time a buffer changes" ((skewer-mode (1 5 3)) (s (1 8 0))) single "melpa" nil ((:url . "https://github.com/pandeiro/livid-mode")) nil] [cl-struct-package-desc livid-mode (0 1 0) "Live browser eval of JavaScript every time a buffer changes" ((skewer-mode (1 5 3)) (s (1 8 0))) single "marmalade" nil nil nil])
  (load-theme-buffer-local [cl-struct-package-desc load-theme-buffer-local (20120702 1336) "Install emacs24 color themes by buffer." nil single "melpa" nil ((:url . "http://github.com/vic/color-theme-buffer-local") (:keywords "faces")) nil] [cl-struct-package-desc load-theme-buffer-local (0 0 2) "Install emacs24 color themes by buffer." nil single "marmalade" nil nil nil])
  (logito [cl-struct-package-desc logito (20120225 1255) "logging library for Emacs" ((eieio (1 3))) single "melpa" nil ((:keywords "lisp" "tool")) nil] [cl-struct-package-desc logito (0 1) "logging library for Emacs" ((eieio (1 3))) single "melpa-stable" nil ((:keywords "lisp" "tool")) nil] [cl-struct-package-desc logito (0 1) "logging library for Emacs" ((eieio (1 3))) single "marmalade" nil nil nil])
  (lolcode-mode [cl-struct-package-desc lolcode-mode (20111002 147) "Major mode for editing LOLCODE" nil single "melpa" nil ((:url . "http://github.com/bodil/lolcode-mode") (:keywords "lolcode" "major" "mode")) nil] [cl-struct-package-desc lolcode-mode (0 2) "Major mode for editing LOLCODE" nil single "marmalade" nil nil nil])
  (look-dired [cl-struct-package-desc look-dired (20151106 1752) "Extensions to look-mode for dired buffers" ((look-mode (1 0))) single "melpa" nil ((:url . "https://github.com/vapniks/look-dired") (:keywords "convenience")) nil] [cl-struct-package-desc look-dired (0 1) "Extensions to look-mode for dired buffers" ((look-mode (1 0))) single "marmalade" nil nil nil])
  (look-mode [cl-struct-package-desc look-mode (20130824 506) "quick file viewer for image and text file browsing" nil single "melpa" nil nil nil] [cl-struct-package-desc look-mode (1 0) "quick file viewer for image and text file browsing" nil single "marmalade" nil nil nil])
  (loop [cl-struct-package-desc loop (20130309 805) "friendly imperative loop structures" nil single "melpa" nil ((:keywords "loop" "while" "for each" "break" "continue")) nil] [cl-struct-package-desc loop (1 1) "friendly imperative loop structures" nil single "marmalade" nil nil nil])
  (lorem-ipsum [cl-struct-package-desc lorem-ipsum (20140911 1408) "Insert dummy pseudo Latin text." nil single "melpa" nil ((:keywords "tools" "language" "convenience")) nil] [cl-struct-package-desc lorem-ipsum (0 1) "Insert dummy pseudo Latin text." nil single "marmalade" nil nil nil])
  (lua-mode [cl-struct-package-desc lua-mode (20151025 530) "a major-mode for editing Lua scripts" nil tar "melpa" nil ((:url . "http://immerrr.github.com/lua-mode") (:keywords "languages" "processes" "tools")) nil] [cl-struct-package-desc lua-mode (20151025) "a major-mode for editing Lua scripts" nil tar "melpa-stable" nil ((:url . "http://immerrr.github.com/lua-mode") (:keywords "languages" "processes" "tools")) nil] [cl-struct-package-desc lua-mode (20110428) "a major-mode for editing Lua scripts" nil single "marmalade" nil nil nil])
  (lui [cl-struct-package-desc lui (1 6) "Linewise User Interface" ((tracking (1 6))) tar "marmalade" nil nil nil])
  (lxc [cl-struct-package-desc lxc (20140410 1322) "lxc integration with Emacs" nil single "melpa" nil ((:url . "https://github.com/nicferrier/emacs-lxc") (:keywords "processes")) nil] [cl-struct-package-desc lxc (0 0 2) "lxc integration with Emacs" nil single "marmalade" nil nil nil])
  (lyskom [cl-struct-package-desc lyskom (20131008) "LysKOM elisp client." nil single "marmalade" nil nil nil])
  (m-buffer [cl-struct-package-desc m-buffer (20151025 916) "List-Oriented, Functional Buffer Manipulation" ((dash (2 8 0)) (emacs (24 3))) tar "melpa" nil nil nil] [cl-struct-package-desc m-buffer (0 12) "List-Oriented, Functional Buffer Manipulation" ((dash (2 8 0)) (emacs (24 3))) tar "melpa-stable" nil nil nil] [cl-struct-package-desc m-buffer (0 8) "Buffer Manipulation Functions" ((emacs (24 3)) (dash (2 5 0))) tar "marmalade" nil nil nil])
  (mac-key-mode [cl-struct-package-desc mac-key-mode (2010 1 3) "provide mac-style key bindings on Carbon Emacs" nil single "marmalade" nil nil nil])
  (macro-utils [cl-struct-package-desc macro-utils (1 0) "Utilities for writing macros." nil single "marmalade" nil nil nil])
  (macrostep [cl-struct-package-desc macrostep (20151001 2043) "interactive macro expander" nil single "melpa" nil ((:url . "https://github.com/joddie/macrostep") (:keywords "lisp" "languages" "macro" "debugging")) nil] [cl-struct-package-desc macrostep (0 8) "interactive macro stepper for Emacs Lisp" nil single "melpa-stable" nil ((:url . "https://github.com/joddie/macrostep") (:keywords "lisp" "languages" "macro" "debugging")) nil] [cl-struct-package-desc macrostep (0 8) "interactive macro stepper for Emacs Lisp" nil single "marmalade" nil nil nil])
  (mactag [cl-struct-package-desc mactag (0 0 1) "Mode for automatically handle multiple tags files with Mactag rubygem" nil single "marmalade" nil nil nil])
  (magit [cl-struct-package-desc magit (20151111 1855) "A Git porcelain inside Emacs" ((emacs (24 4)) (async (20150909 2257)) (dash (20151021 113)) (with-editor (20151111)) (git-commit (20151111)) (magit-popup (20151111))) tar "melpa" nil ((:url . "https://github.com/magit/magit") (:keywords "git" "tools" "vc")) nil] [cl-struct-package-desc magit (2 3 1) "A Git porcelain inside Emacs" ((emacs (24 4)) (async (1 5)) (dash (2 12 1)) (with-editor (2 3 1)) (git-commit (2 3 1)) (magit-popup (2 3 1))) tar "melpa-stable" nil ((:url . "https://github.com/magit/magit") (:keywords "git" "tools" "vc")) nil] [cl-struct-package-desc magit (2 3 1) "A Git porcelain inside Emacs" ((emacs (24 4)) (async (1 5)) (dash (2 12 1)) (with-editor (2 3 1)) (git-commit (2 3 1)) (magit-popup (2 3 1))) tar "marmalade" nil nil nil])
  (magit-find-file [cl-struct-package-desc magit-find-file (20150702 130) "completing-read over all files in Git" ((magit (2 1 0)) (dash (2 8 0))) single "melpa" nil ((:url . "https://github.com/bradleywright/magit-find-file.el") (:keywords "git")) nil] [cl-struct-package-desc magit-find-file (2 1 0) "completing-read over all files in Git" ((magit (2 1 0)) (dash (2 8 0))) single "melpa-stable" nil ((:url . "https://github.com/bradleywright/magit-find-file.el") (:keywords "git")) nil] [cl-struct-package-desc magit-find-file (1 0 4) "completing-read over all files in Git" ((magit (1 2 0))) single "marmalade" nil nil nil])
  (magit-gh-pulls [cl-struct-package-desc magit-gh-pulls (20151021 202) "GitHub pull requests extension for Magit" ((emacs (24)) (gh (0 9 1)) (magit (2 1 0)) (pcache (0 2 3)) (s (1 6 1))) single "melpa" nil ((:url . "https://github.com/sigma/magit-gh-pulls") (:keywords "git" "tools")) nil] [cl-struct-package-desc magit-gh-pulls (0 5 2) "GitHub pull requests extension for Magit" ((emacs (24)) (gh (0 9 1)) (magit (2 1 0)) (pcache (0 2 3)) (s (1 6 1))) single "melpa-stable" nil ((:url . "https://github.com/sigma/magit-gh-pulls") (:keywords "git" "tools")) nil] [cl-struct-package-desc magit-gh-pulls (0 3) "GitHub pull requests extension for Magit" ((gh (0 4 3)) (magit (1 1 0))) single "marmalade" nil nil nil])
  (magit-popup [cl-struct-package-desc magit-popup (20151111 1022) "Define prefix-infix-suffix command combos" ((emacs (24 4)) (async (20150909 2257)) (dash (20151021 113))) tar "melpa" nil ((:url . "https://github.com/magit/magit") (:keywords "bindings")) nil] [cl-struct-package-desc magit-popup (2 3 1) "Define prefix-infix-suffix command combos" ((emacs (24 4)) (async (1 5)) (dash (2 12 1))) tar "melpa-stable" nil ((:url . "https://github.com/magit/magit") (:keywords "bindings")) nil] [cl-struct-package-desc magit-popup (2 3 1) "Define prefix-infix-suffix command combos" ((emacs (24 4)) (async (1 5)) (dash (2 12 1))) tar "marmalade" nil nil nil])
  (magit-simple-keys [cl-struct-package-desc magit-simple-keys (1 0 0) "simple keybindings for Magit" ((magit (1 0 0))) single "marmalade" nil nil nil])
  (magit-tramp [cl-struct-package-desc magit-tramp (0 1 0) "git method for TRAMP" ((magit (1 2 0))) single "marmalade" nil nil nil])
  (maildir [cl-struct-package-desc maildir (0 0 28) "Simple maildir based MUA." ((kv (0 0 17)) (dash (2 3 0)) (s (1 9 0)) (noflet (0 0 8))) tar "marmalade" nil nil nil])
  (main-line [cl-struct-package-desc main-line (20130404 1904) "modeline replacement forked from an early version of powerline.el" nil single "melpa" nil ((:url . "https://github.com/jasonm23/emacs-mainline") (:keywords "statusline" "/" "modeline")) nil] [cl-struct-package-desc main-line (1 2 8) "modeline replacement forked from an early version of powerline.el" nil single "marmalade" nil nil nil])
  (mainline [cl-struct-package-desc mainline (1 1 0) "modeline replacement forked from an early version of powerline.el" nil single "marmalade" nil nil nil])
  (makefile-runner [cl-struct-package-desc makefile-runner (1 1 2) "Searches for Makefile and fetches targets" nil single "marmalade" nil nil nil])
  (man-commands [cl-struct-package-desc man-commands (20130627 1653) "Add interactive commands for every manpages installed in your computer." nil single "melpa" nil ((:url . "http://github.com/nflath/man-commands")) nil] [cl-struct-package-desc man-commands (1 1) "Add interactive commands for every manpages installed in your computer." nil single "marmalade" nil nil nil])
  (margo [cl-struct-package-desc margo (2012 9 18) "Client for MarGo, providing Go utilities" ((web (0 1 8)) (json (1 2))) single "marmalade" nil nil nil])
  (mark [cl-struct-package-desc mark (0 3) "Navigate and visualize the mark-ring" ((fm (1 0))) single "marmalade" nil nil nil])
  (mark-more-like-this [cl-struct-package-desc mark-more-like-this (1 0) "Mark additional regions in buffer matching current region." nil single "marmalade" nil nil nil])
  (mark-multiple [cl-struct-package-desc mark-multiple (20121118 754) "Sorta lets you mark several regions at once." nil tar "melpa" nil nil nil] [cl-struct-package-desc mark-multiple (1 0) "A library that sorta lets you mark several regions at once" nil single "marmalade" nil nil nil])
  (mark-tools [cl-struct-package-desc mark-tools (20130614 325) "Some simple tools to access the mark-ring in Emacs" nil single "melpa" nil ((:url . "https://github.com/stsquad/emacs-mark-tools")) nil] [cl-struct-package-desc mark-tools (0 3) "Some simple tools to access the mark-ring in Emacs" nil single "melpa-stable" nil ((:url . "https://github.com/stsquad/emacs-mark-tools")) nil] [cl-struct-package-desc mark-tools (0 3) "Some simple tools to access the mark-ring in Emacs" nil single "marmalade" nil nil nil])
  (markdown-mode [cl-struct-package-desc markdown-mode (20151108 735) "Emacs Major mode for Markdown-formatted text files" nil single "melpa" nil ((:url . "http://jblevins.org/projects/markdown-mode/") (:keywords "markdown" "github flavored markdown" "itex")) nil] [cl-struct-package-desc markdown-mode (2 0) "Emacs Major mode for Markdown-formatted text files" nil single "melpa-stable" nil ((:url . "http://jblevins.org/projects/markdown-mode/") (:keywords "markdown" "github flavored markdown" "itex")) nil] [cl-struct-package-desc markdown-mode (2 0) "Emacs Major mode for Markdown-formatted text files" nil single "marmalade" nil nil nil])
  (markdown-toc [cl-struct-package-desc markdown-toc (20150715 914) "A simple TOC generator for markdown file" ((s (1 9 0)) (dash (2 11 0)) (markdown-mode (2 0))) tar "melpa" nil nil nil] [cl-struct-package-desc markdown-toc (0 0 8) "A simple TOC generator for markdown file" ((s (1 9 0)) (dash (2 11 0)) (markdown-mode (2 0))) tar "melpa-stable" nil nil nil] [cl-struct-package-desc markdown-toc (0 0 8) "A simple TOC generator for markdown file" ((markdown-mode (2 0)) (dash (2 11 0)) (s (1 9 0))) single "marmalade" nil nil nil])
  (markup-faces [cl-struct-package-desc markup-faces (20141110 17) "collection of faces for markup language modes" nil single "melpa" nil ((:url . "https://github.com/sensorflo/markup-faces") (:keywords "wp" "faces")) nil] [cl-struct-package-desc markup-faces (1 0 0) "collection of faces for markup language modes" nil single "melpa-stable" nil ((:url . "https://github.com/sensorflo/markup-faces") (:keywords "wp" "faces")) nil] [cl-struct-package-desc markup-faces (1 0 0) "collection of faces for markup language modes" nil single "marmalade" nil nil nil])
  (marmalade [cl-struct-package-desc marmalade (20110602 1622) "Elisp interface for the Emacs Lisp package server." ((furl (0 0 2))) single "melpa" nil ((:url . "http://code.google.com/p/marmalade")) nil] [cl-struct-package-desc marmalade (0 0 4) "Elisp interface for the Emacs Lisp package server." ((furl (0 0 2))) single "melpa-stable" nil ((:url . "http://code.google.com/p/marmalade")) nil] [cl-struct-package-desc marmalade (0 0 4) "Elisp interface for the Emacs Lisp package server." ((furl (0 0 2))) single "marmalade" nil nil nil])
  (marmalade-client [cl-struct-package-desc marmalade-client (20141231 1207) "client for marmalade API from emacs" ((web (0 5 2)) (kv (0 0 19)) (gh (0 8 0))) tar "melpa" nil ((:url . "https://github.com/nicferrier/emacs-marmalade-upload") (:keywords "lisp")) nil] [cl-struct-package-desc marmalade-client (0 0 12) "client for marmalade API from emacs" ((web (0 5 2)) (kv (0 0 19)) (gh (0 8 0))) single "marmalade" nil nil nil])
  (marmalade-demo [cl-struct-package-desc marmalade-demo (0 0 5) "a demonstration elpa package" nil single "marmalade" nil nil nil])
  (marmalade-service [cl-struct-package-desc marmalade-service (2 0 16) "The Marmalade package store service." ((dash (1 1 0)) (s (1 6 0)) (kv (0 0 16)) (noflet (0 0 7)) (elnode (0 9 9 8 6)) (file-format (0 0 1)) (htmlize (1 3 9))) tar "marmalade" nil nil nil])
  (marmalade-test [cl-struct-package-desc marmalade-test (0 0 1) "A test tarball package." nil tar "marmalade" nil nil nil])
  (marmalade-upload [cl-struct-package-desc marmalade-upload (0 0 5) "upload client for marmalade from emacs" ((web (0 4 2)) (kv (0 0 19))) single "marmalade" nil nil nil])
  (marshal [cl-struct-package-desc marshal (20150916 1857) "eieio extension for automatic (un)marshalling" ((eieio (1 4)) (json (1 3))) single "melpa" nil ((:url . "https://github.com/sigma/marshal.el") (:keywords "eieio")) nil] [cl-struct-package-desc marshal (0 5 3) "eieio extension for automatic (un)marshalling" ((eieio (1 4)) (json (1 3))) single "melpa-stable" nil ((:url . "https://github.com/sigma/marshal.el") (:keywords "eieio")) nil] [cl-struct-package-desc marshal (0 5 1) "eieio extension for automatic (un)marshalling" ((eieio (1 4)) (json (1 3))) single "marmalade" nil nil nil])
  (master-mode [cl-struct-package-desc master-mode (0 1) "Become an Emacs master" nil single "marmalade" nil nil nil])
  (math-at-point [cl-struct-package-desc math-at-point (0 0 1) "Utilities for modifying numbers at point" nil single "marmalade" nil nil nil])
  (maxframe [cl-struct-package-desc maxframe (20140916 754) "maximize the emacs frame based on display size" nil single "melpa" nil ((:keywords "display" "frame" "window" "maximize")) nil] [cl-struct-package-desc maxframe (0 5 1) "maximize the emacs frame based on display size" nil single "marmalade" nil nil nil] [cl-struct-package-desc maxframe (0 5) "No description available." nil single "melpa-stable" nil nil nil])
  (mbe [cl-struct-package-desc mbe (20141112 1042) "Macros by Example" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/ijp/mbe.el") (:keywords "tools" "macros")) nil] [cl-struct-package-desc mbe (0 1) "Macros by Example" ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/ijp/mbe.el") (:keywords "tools" "macros")) nil] [cl-struct-package-desc mbe (0 1) "Macros by Example" ((emacs (24)) (cl-lib (0 5))) single "marmalade" nil nil nil])
  (mc-jump [cl-struct-package-desc mc-jump (1 0 0) "like \"jump-char\", but \"multiple-cursors\" friendly" nil single "marmalade" nil nil nil])
  (mediawiki [cl-struct-package-desc mediawiki (20150711 1734) "mediawiki frontend" nil single "melpa" nil ((:url . "http://github.com/hexmode/mediawiki-el") (:keywords "mediawiki" "wikipedia" "network" "wiki")) nil] [cl-struct-package-desc mediawiki (2 2 5) "mediawiki frontend" nil single "melpa-stable" nil ((:url . "http://github.com/hexmode/mediawiki-el") (:keywords "mediawiki" "wikipedia" "network" "wiki")) nil] [cl-struct-package-desc mediawiki (2 2 3) "mediawiki frontend" nil single "marmalade" nil nil nil])
  (memoize [cl-struct-package-desc memoize (20130421 1234) "Memoization functions" nil single "melpa" nil ((:url . "https://github.com/skeeto/emacs-memoize")) nil] [cl-struct-package-desc memoize (1 0 1) "Memoization functions" nil single "marmalade" nil nil nil])
  (message-templ [cl-struct-package-desc message-templ (0 1 20141026) "Templates for message-mode." nil single "marmalade" nil nil nil])
  (meta-presenter [cl-struct-package-desc meta-presenter (20150501 410) "A simple multi-file presentation tool for Emacs" nil single "melpa" nil ((:url . "http://ismail.teamfluxion.com") (:keywords "productivity" "presentation")) nil] [cl-struct-package-desc meta-presenter (20150501 410) "A simple multi-file presentation tool for Emacs" nil single "marmalade" nil nil nil])
  (mic-paren [cl-struct-package-desc mic-paren (20140714 19) "advanced highlighting of matching parentheses" nil single "melpa" nil ((:keywords "languages" "faces" "parenthesis" "matching")) nil] [cl-struct-package-desc mic-paren (3 8) "advanced highlighting of matching parentheses" nil single "marmalade" nil nil nil])
  (midje-mode [cl-struct-package-desc midje-mode (20150921 1750) "Minor mode for running Midje tests in emacs" ((cider (0 1 4)) (clojure-mode (1 0))) tar "melpa" nil nil nil] [cl-struct-package-desc midje-mode (0 1 2) "Minor mode for running Midje tests in emacs, see: https://github.com/dnaumov/midje-mode" ((slime (1 0)) (clojure-mode (1 0))) tar "marmalade" nil nil nil])
  (minimal-session-saver [cl-struct-package-desc minimal-session-saver (20140508 1341) "Very lean session saver" nil single "melpa" nil ((:url . "http://github.com/rolandwalker/minimal-session-saver") (:keywords "tools" "frames" "project")) nil] [cl-struct-package-desc minimal-session-saver (0 6 2) "Very lean session saver" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/minimal-session-saver") (:keywords "tools" "frames" "project")) nil] [cl-struct-package-desc minimal-session-saver (0 6 2) "Very lean session saver" nil single "marmalade" nil nil nil])
  (minitest [cl-struct-package-desc minitest (20151015 1131) "An Emacs mode for ruby minitest files" ((dash (1 0 0))) tar "melpa" nil ((:url . "https://github.com/arthurnn/minitest-emacs")) nil] [cl-struct-package-desc minitest (0 9 1) "An Emacs mode for ruby minitest files" ((dash (1 0 0))) single "marmalade" nil nil nil] [cl-struct-package-desc minitest (0 8 0) "An Emacs mode for ruby minitest files" ((dash (1 0 0))) tar "melpa-stable" nil ((:url . "https://github.com/arthurnn/minitest-emacs")) nil])
  (mldonkey [cl-struct-package-desc mldonkey (0 0 4) "Multi-networks peer-to-peer client." nil tar "marmalade" nil nil nil])
  (mo-git-blame [cl-struct-package-desc mo-git-blame (20140409 320) "An interactive, iterative 'git blame' mode for Emacs" nil single "melpa" nil ((:keywords "tools")) nil] [cl-struct-package-desc mo-git-blame (0 1 0) "An interactive, iterative 'git blame' mode for Emacs" nil single "marmalade" nil nil nil])
  (moccur-edit [cl-struct-package-desc moccur-edit (2 16) "apply replaces to multiple files" ((color-moccur (2 71))) single "marmalade" nil nil nil])
  (mocker [cl-struct-package-desc mocker (20150916 1854) "mocking framework for emacs" ((eieio (1 3)) (el-x (0 2 4))) single "melpa" nil ((:keywords "lisp" "testing")) nil] [cl-struct-package-desc mocker (0 3 1) "mocking framework for emacs" ((eieio (1 3)) (el-x (0 2 4))) single "melpa-stable" nil ((:keywords "lisp" "testing")) nil] [cl-struct-package-desc mocker (0 3 0) "mocking framework for emacs" ((eieio (1 3)) (el-x (0 2 4))) single "marmalade" nil nil nil])
  (mode-compile [cl-struct-package-desc mode-compile (2 29) "Smart command for compiling files" nil single "marmalade" nil nil nil])
  (mode-icons [cl-struct-package-desc mode-icons (20130602 548) "Show icons for modes" nil tar "melpa" nil ((:url . "http://ryuslash.org/projects/mode-icons.html") (:keywords "multimedia")) nil] [cl-struct-package-desc mode-icons (0 1 0) "Show icons for modes" nil tar "melpa-stable" nil ((:url . "http://ryuslash.org/projects/mode-icons.html") (:keywords "multimedia")) nil] [cl-struct-package-desc mode-icons (0 1 0) "Show icons for modes" nil tar "marmalade" nil nil nil])
  (modeline-posn [cl-struct-package-desc modeline-posn (20150228 1013) "Set up `mode-line-position'." nil single "melpa" nil ((:url . "http://www.emacswiki.org/modeline-posn.el") (:keywords "mode-line" "region" "column")) nil] [cl-struct-package-desc modeline-posn (22 0) "Set up `mode-line-position'." nil single "marmalade" nil nil nil])
  (modtime-skip-mode [cl-struct-package-desc modtime-skip-mode (20140128 1401) "Minor mode for disabling modtime and supersession checks on files." nil single "melpa" nil ((:url . "http://www.github.com/jordonbiondo/modtime-skip-mode")) nil] [cl-struct-package-desc modtime-skip-mode (0 9) "Minor mode for disabling modtime and supersession checks on files." nil single "marmalade" nil nil nil])
  (moinmoin-mode [cl-struct-package-desc moinmoin-mode (1 0) "a major mode to edit MoinMoin wiki pages" ((screen-lines (0 55))) single "marmalade" nil nil nil])
  (mongo [cl-struct-package-desc mongo (20150315 519) "MongoDB driver for Emacs Lisp" nil tar "melpa" nil ((:keywords "convenience")) nil] [cl-struct-package-desc mongo (0 5) "A MongoDB client." nil tar "marmalade" nil nil nil])
  (mongo-elnode [cl-struct-package-desc mongo-elnode (0 5 0) "elnode adapter for mongo-el" ((mongo (0 5)) (elnode (0 9 9))) single "marmalade" nil nil nil])
  (monky [cl-struct-package-desc monky (20150404 18) "Control Hg from Emacs." nil tar "melpa" nil nil nil] [cl-struct-package-desc monky (0 1) "control Hg from Emacs." nil single "marmalade" nil nil nil])
  (monokai-theme [cl-struct-package-desc monokai-theme (20151022 703) "A fruity color theme for Emacs." nil single "melpa" nil ((:url . "http://github.com/oneKelvinSmith/monokai-emacs")) nil] [cl-struct-package-desc monokai-theme (1 0 0) "A fruity color theme for Emacs." nil single "melpa-stable" nil ((:url . "http://github.com/oneKelvinSmith/monokai-emacs")) nil] [cl-struct-package-desc monokai-theme (0 0 12) "DEPRECATED: Monokai Color Theme for Emacs." nil single "marmalade" nil nil nil])
  (monroe [cl-struct-package-desc monroe (20141111 107) "Yet another client for nREPL" nil single "melpa" nil ((:url . "http://www.github.com/sanel/monroe") (:keywords "languages" "clojure" "nrepl" "lisp")) nil] [cl-struct-package-desc monroe (0 2 0) "Yet another client for nREPL" nil single "melpa-stable" nil ((:url . "http://www.github.com/sanel/monroe") (:keywords "languages" "clojure" "nrepl" "lisp")) nil] [cl-struct-package-desc monroe (0 2 0) "Yet another client for nREPL" nil single "marmalade" nil nil nil])
  (mote-mode [cl-struct-package-desc mote-mode (20121014 2119) "Mote minor mode" ((ruby-mode (1 1))) single "melpa" nil ((:url . "http://inkel.github.com/mote-mode/")) nil] [cl-struct-package-desc mote-mode (1 0 0) "Mote minor mode" ((ruby-mode (1 1))) single "marmalade" nil nil nil])
  (move-line [cl-struct-package-desc move-line (0 0 1) "utilities for moving lines in file" nil single "marmalade" nil nil nil])
  (move-text [cl-struct-package-desc move-text (20140307 844) "Move current line or region with M-up or M-down." nil single "melpa" nil ((:keywords "edit")) nil] [cl-struct-package-desc move-text (1 0) "Move current line or region with M-up or M-down." nil single "marmalade" nil nil nil])
  (multi [cl-struct-package-desc multi (20131013 844) "Clojure-style multi-methods for emacs lisp" ((emacs (24))) single "melpa" nil ((:url . "http://github.com/kurisuwhyte/emacs-multi") (:keywords "multimethod" "generic" "predicate" "dispatch")) nil] [cl-struct-package-desc multi (2 0 1) "Clojure-style multi-methods for emacs lisp" ((emacs (24))) single "melpa-stable" nil ((:url . "http://github.com/kurisuwhyte/emacs-multi") (:keywords "multimethod" "generic" "predicate" "dispatch")) nil] [cl-struct-package-desc multi (2 0 1) "Clojure-style multi-methods for emacs lisp" ((emacs (24))) single "marmalade" nil nil nil])
  (multi-eshell [cl-struct-package-desc multi-eshell (20120608 1135) "Create and manage multiple shells within Emacs" nil single "melpa" nil ((:url . "http://cims.nyu.edu/~stucchio")) nil] [cl-struct-package-desc multi-eshell (0 0 1) "makes it easier to use multiple shells within emacs" nil single "marmalade" nil nil nil])
  (multi-project [cl-struct-package-desc multi-project (20150314 744) "Easily work with multiple projects." nil single "melpa" nil ((:url . "https://bitbucket.org/ellisvelo/multi-project/overview") (:keywords "project" "management")) nil] [cl-struct-package-desc multi-project (0 0 17) "Easily work with multiple projects." nil single "marmalade" nil nil nil])
  (multi-term [cl-struct-package-desc multi-term (20150220 520) "Managing multiple terminal buffers in Emacs." nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/multi-term.el") (:keywords "term" "terminal" "multiple buffer")) nil] [cl-struct-package-desc multi-term (0 8 8) "Managing multiple terminal buffers in Emacs." nil single "marmalade" nil nil nil])
  (multi-web-mode [cl-struct-package-desc multi-web-mode (20130823 2054) "multiple major mode support for web editing" nil tar "melpa" nil ((:url . "https://github.com/fgallina/multi-web-mode") (:keywords "convenience" "languages" "wp")) nil] [cl-struct-package-desc multi-web-mode (0 2 1) "multiple major mode support for web editing" nil tar "melpa-stable" nil ((:keywords "convenience" "languages" "wp")) nil] [cl-struct-package-desc multi-web-mode (0 1) "multiple major mode support for web editing" nil single "marmalade" nil nil nil])
  (multiple-cursors [cl-struct-package-desc multiple-cursors (20150710 456) "Multiple cursors for Emacs." nil tar "melpa" nil nil nil] [cl-struct-package-desc multiple-cursors (1 3 0) "Multiple cursors for Emacs." nil tar "melpa-stable" nil nil nil] [cl-struct-package-desc multiple-cursors (1 3 0) "Multiple cursors for Emacs." nil tar "marmalade" nil nil nil])
  (mustache [cl-struct-package-desc mustache (20131117 1407) "a mustache templating library in emacs lisp" ((ht (0 9)) (s (1 3 0)) (dash (1 2 0))) tar "melpa" nil nil nil] [cl-struct-package-desc mustache (0 20) "a mustache templating library in emacs lisp" ((ht (0 9)) (s (1 3 0)) (dash (1 2 0))) tar "marmalade" nil nil nil])
  (mustache-mode [cl-struct-package-desc mustache-mode (20141024 732) "A major mode for editing Mustache files." nil single "melpa" nil nil nil] [cl-struct-package-desc mustache-mode (1 3) "A major mode for editing Mustache files." nil single "melpa-stable" nil nil nil] [cl-struct-package-desc mustache-mode (1 2) "A major mode for editing Mustache files." nil single "marmalade" nil nil nil])
  (mv-shell [cl-struct-package-desc mv-shell (1 2) "keep buffers in sync with filename throughout 'mv'commands in shell-mode." nil single "marmalade" nil nil nil])
  (mvn-help [cl-struct-package-desc mvn-help (0 0 1) "maven help tools" nil single "marmalade" nil nil nil])
  (mwe-log-commands [cl-struct-package-desc mwe-log-commands (20100703 541) "log keyboard commands to buffer" nil single "melpa" nil ((:keywords "help")) nil] [cl-struct-package-desc mwe-log-commands (20041106) "log keyboard commands to buffer" nil single "marmalade" nil nil nil])
  (my-packages [cl-struct-package-desc my-packages (0 1 0) "Package Initialization." nil single "marmalade" nil nil nil])
  (myterminal-controls [cl-struct-package-desc myterminal-controls (20150427 347) "Quick toggle controls at a key-stroke" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "http://ismail.teamfluxion.com") (:keywords "convenience" "shortcuts")) nil] [cl-struct-package-desc myterminal-controls (20150427 347) "Quick toggle controls at a key-stroke" ((emacs (24)) (cl-lib (0 5))) single "marmalade" nil nil nil])
  (n3-mode [cl-struct-package-desc n3-mode (20141027 1057) "mode for Notation 3" nil single "melpa" nil nil nil] [cl-struct-package-desc n3-mode (20071215) "mode for Notation 3" nil single "marmalade" nil nil nil])
  (namakemono [cl-struct-package-desc namakemono (0 0 1) "utility function set for namakemono" nil single "marmalade" nil nil nil])
  (nav-flash [cl-struct-package-desc nav-flash (20140508 1341) "Briefly highlight the current line" nil single "melpa" nil ((:url . "http://github.com/rolandwalker/nav-flash") (:keywords "extensions" "navigation" "interface")) nil] [cl-struct-package-desc nav-flash (1 1 0) "Briefly highlight the current line" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/nav-flash") (:keywords "extensions" "navigation" "interface")) nil] [cl-struct-package-desc nav-flash (1 1 0) "Briefly highlight the current line" nil single "marmalade" nil nil nil])
  (navigate [cl-struct-package-desc navigate (0 1 5) "Seamlessly navigate between Emacs and tmux" nil single "marmalade" nil nil nil])
  (nginx-mode [cl-struct-package-desc nginx-mode (20150824 1411) "major mode for editing nginx config files" nil single "melpa" nil ((:keywords "nginx")) nil] [cl-struct-package-desc nginx-mode (1 1 4) "major mode for editing nginx config files" nil single "melpa-stable" nil ((:keywords "nginx")) nil] [cl-struct-package-desc nginx-mode (1 1) "major mode for editing nginx config files" nil single "marmalade" nil nil nil])
  (niclein [cl-struct-package-desc niclein (0 0 5) "Nic's lein and clojure integration" ((shadchen (1 4)) (smartparens (1 5))) single "marmalade" nil nil nil])
  (nimrod-mode [cl-struct-package-desc nimrod-mode (0 1 5) "A major mode for the Nimrod programming language" ((auto-complete (1 4))) single "marmalade" nil nil nil])
  (no-easy-keys [cl-struct-package-desc no-easy-keys (1 0 2) "Learn the proper Emacs movement keys" nil single "marmalade" nil nil nil])
  (nodejs-repl [cl-struct-package-desc nodejs-repl (20130520 1635) "Run Node.js REPL" nil single "melpa" nil nil nil] [cl-struct-package-desc nodejs-repl (0 0 2 1) "Run Node.js REPL" nil single "marmalade" nil nil nil] [cl-struct-package-desc nodejs-repl (0 0 2) "Run Node.js REPL" nil single "melpa-stable" nil nil nil])
  (noflet [cl-struct-package-desc noflet (20141102 654) "locally override functions" nil single "melpa" nil ((:url . "https://github.com/nicferrier/emacs-noflet") (:keywords "lisp")) nil] [cl-struct-package-desc noflet (0 0 15) "locally override functions" nil single "marmalade" nil nil nil])
  (nose [cl-struct-package-desc nose (20140520 948) "Easy Python test running in Emacs" nil single "melpa" nil ((:keywords "nose" "python" "testing")) nil] [cl-struct-package-desc nose (0 1 1) "Easy Python test running in Emacs" nil single "melpa-stable" nil ((:keywords "nose" "python" "testing")) nil] [cl-struct-package-desc nose (0 1 1) "Easy Python test running in Emacs" nil single "marmalade" nil nil nil])
  (nose-mode [cl-struct-package-desc nose-mode (0 1) "Minor mode for running nose tests." ((nose (0 1 1))) tar "marmalade" nil nil nil])
  (notify [cl-struct-package-desc notify (2010 8 20) "notification front-end" nil single "marmalade" nil nil nil])
  (notmuch-labeler [cl-struct-package-desc notmuch-labeler (20131230 919) "Improve notmuch way of displaying labels" ((notmuch (0))) tar "melpa" nil ((:url . "https://github.com/DamienCassou/notmuch-labeler") (:keywords "emacs" "package" "elisp" "notmuch" "emails")) nil] [cl-struct-package-desc notmuch-labeler (0 1) "Improve notmuch way of displaying labels" ((notmuch (0))) tar "melpa-stable" nil ((:url . "https://github.com/DamienCassou/notmuch-labeler") (:keywords "emacs" "package" "elisp" "notmuch" "emails")) nil] [cl-struct-package-desc notmuch-labeler (0 1) "Improves notmuch way of displaying labels through fonts, pictures, and hyperlinks." nil tar "marmalade" nil nil nil])
  (nrepl-decompile [cl-struct-package-desc nrepl-decompile (0 0 1) "decompilation extension for nrepl.el" ((nrepl (0 1 7)) (javap-mode (9))) single "marmalade" nil nil nil])
  (nrepl-discover [cl-struct-package-desc nrepl-discover (0 0 1) "Client to load commands from nrepl server" nil single "marmalade" nil nil nil])
  (nrepl-ritz [cl-struct-package-desc nrepl-ritz (0 6 0) "nrepl extensions for ritz" ((nrepl (0 1 5))) single "marmalade" nil nil nil])
  (nsis-mode [cl-struct-package-desc nsis-mode (20150914 546) "NSIS-mode" nil tar "melpa" nil ((:url . "http://github.com/mlf176f2/nsis-mode") (:keywords "nsis")) nil] [cl-struct-package-desc nsis-mode (0 44) "NSIS-mode" nil tar "melpa-stable" nil ((:url . "http://github.com/mlf176f2/nsis-mode") (:keywords "nsis")) nil] [cl-struct-package-desc nsis-mode (0 44) "NSIS-mode" nil single "marmalade" nil nil nil])
  (nssh [cl-struct-package-desc nssh (0 9 9) "New SSH mode for Emacs" nil single "marmalade" nil nil nil])
  (nssh-n [cl-struct-package-desc nssh-n (0 9 8) "SSH mode for Emacs" nil single "marmalade" nil nil nil])
  (ntcmd [cl-struct-package-desc ntcmd (1 0) "major mode for editing cmd scripts" nil single "marmalade" nil nil nil])
  (nurumacs [cl-struct-package-desc nurumacs (3 5 4) "smooth-scrolling and minimap, like sublime editor" nil single "marmalade" nil nil nil])
  (nzenburn-theme [cl-struct-package-desc nzenburn-theme (20130513) "A low contrast color theme for Emacs." nil single "marmalade" nil nil nil])
  (oauth [cl-struct-package-desc oauth (20130127 1751) "Oauth library." nil tar "melpa" nil ((:keywords "comm")) nil] [cl-struct-package-desc oauth (1 0 3) "An Emacs oauth client. See https://github.com/psanford/emacs-oauth/" nil tar "marmalade" nil nil nil])
  (ob-sml [cl-struct-package-desc ob-sml (20130829 1143) "org-babel functions for template evaluation" ((sml-mode (6 4))) single "melpa" nil ((:url . "http://orgmode.org") (:keywords "literate programming" "reproducible research")) nil] [cl-struct-package-desc ob-sml (0 2) "org-babel functions for template evaluation" ((sml-mode (6 4))) single "melpa-stable" nil ((:url . "http://orgmode.org") (:keywords "literate programming" "reproducible research")) nil] [cl-struct-package-desc ob-sml (0 2) "org-babel functions for template evaluation" ((sml-mode (6 4))) single "marmalade" nil nil nil])
  (occur-default-current-word [cl-struct-package-desc occur-default-current-word (1 0) "Have M-x occur default to the word at point" nil single "marmalade" nil nil nil])
  (occur-x [cl-struct-package-desc occur-x (20130610 643) "Extra functionality for occur" nil single "melpa" nil ((:keywords "occur" "search" "convenience")) nil] [cl-struct-package-desc occur-x (0 1 1) "Extra functionality for occur" nil single "marmalade" nil nil nil])
  (octomacs [cl-struct-package-desc octomacs (0 0 1) "Octopress interface for Emacs" nil single "marmalade" nil nil nil])
  (oddmuse [cl-struct-package-desc oddmuse (20090222) "edit pages on an Oddmuse wiki" nil single "marmalade" nil nil nil])
  (offlineimap [cl-struct-package-desc offlineimap (20150916 458) "Run OfflineIMAP from Emacs" nil single "melpa" nil ((:url . "http://julien.danjou.info/offlineimap-el.html")) nil] [cl-struct-package-desc offlineimap (1) "Run OfflineIMAP from Emacs" nil single "melpa-stable" nil ((:url . "http://julien.danjou.info/offlineimap-el.html")) nil] [cl-struct-package-desc offlineimap (0 1) "Run OfflineIMAP from Emacs" nil single "marmalade" nil nil nil])
  (om-mode [cl-struct-package-desc om-mode (20140915 1410) "Insert Om component template with life cycle." nil single "melpa" nil ((:keywords "clojurescript")) nil] [cl-struct-package-desc om-mode (0 5 20140916) "Insert Om component template with life cycle." nil single "marmalade" nil nil nil])
  (openstack-cgit-browse-file [cl-struct-package-desc openstack-cgit-browse-file (20130819 227) "Browse the current file in OpenStack cgit" nil single "melpa" nil ((:url . "https://github.com/chmouel/openstack-cgit-browse-file") (:keywords "convenience" "vc" "git" "cgit" "gerrit" "openstack")) nil] [cl-struct-package-desc openstack-cgit-browse-file (0 2) "Browse the current file in OpenStack cgit" nil single "marmalade" nil nil nil])
  (openwith [cl-struct-package-desc openwith (20120531 1436) "Open files with external programs" nil single "melpa" nil ((:url . "https://bitbucket.org/jpkotta/openwith") (:keywords "files" "processes")) nil] [cl-struct-package-desc openwith (20120531) "Open files with external programs" nil single "marmalade" nil nil nil])
  (operate-on-number [cl-struct-package-desc operate-on-number (20150706 2323) "Operate on number at point with arithmetic functions" nil single "melpa" nil ((:url . "https://github.com/knu/operate-on-number.el") (:keywords "editing")) nil] [cl-struct-package-desc operate-on-number (1 1 0) "Operate on number at point with arithmetic functions" nil single "melpa-stable" nil ((:url . "https://github.com/knu/operate-on-number.el") (:keywords "editing")) nil] [cl-struct-package-desc operate-on-number (1 1 0) "Operate on number at point with arithmetic functions" nil single "marmalade" nil nil nil])
  (org-blog [cl-struct-package-desc org-blog (1 18 1 1) "create and publish a blog with org-mode" nil single "marmalade" nil nil nil])
  (org-cliplink [cl-struct-package-desc org-cliplink (20150921 2251) "insert org-mode links from the clipboard" nil tar "melpa" nil ((:url . "http://github.com/rexim/org-cliplink")) nil] [cl-struct-package-desc org-cliplink (0 2) "insert org-mode links by URL from the clipboard" nil single "marmalade" nil nil nil])
  (org-cua-dwim [cl-struct-package-desc org-cua-dwim (20120202 2134) "Org-mode and Cua mode compatibility layer" nil single "melpa" nil ((:keywords "org-mode" "cua-mode")) nil] [cl-struct-package-desc org-cua-dwim (0 5) "Org-mode and Cua mode compatibility layer" nil single "marmalade" nil nil nil])
  (org-dotemacs [cl-struct-package-desc org-dotemacs (20150118 1941) "Store your emacs config as an org file, and choose which bits to load." ((org (7 9 3)) (cl-lib (1 0))) single "melpa" nil ((:url . "https://github.com/vapniks/org-dotemacs") (:keywords "local")) nil] [cl-struct-package-desc org-dotemacs (0 3) "Store your emacs config as an org file, and choose which bits to load." ((org (7 9 3)) (cl-lib (1 0))) single "marmalade" nil nil nil])
  (org-ehtml [cl-struct-package-desc org-ehtml (20150506 1658) "Export Org-mode files as editable web pages" ((web-server (20140109 2200)) (emacs (24 3))) tar "melpa" nil nil nil] [cl-struct-package-desc org-ehtml (0 20131014) "Export Org-mode files as editable web pages" ((elnode (20130416 1626)) (org-plus-contrib (20131007))) tar "marmalade" nil nil nil])
  (org-email [cl-struct-package-desc org-email (3 0 1) "use org for an email database" ((shadchen (1 2)) (dash (2 9 0)) (noflet (0 0 12))) single "marmalade" nil nil nil])
  (org-gnome [cl-struct-package-desc org-gnome (20150614 757) "Orgmode integration with the GNOME desktop" ((alert (1 2)) (telepathy (0 1)) (gnome-calendar (0 1))) single "melpa" nil ((:keywords "org" "gnome")) nil] [cl-struct-package-desc org-gnome (0 3) "Orgmode integration with the GNOME desktop" ((alert (1 2)) (telepathy (0 1)) (gnome-calendar (0 1))) single "melpa-stable" nil ((:keywords "org" "gnome")) nil] [cl-struct-package-desc org-gnome (0 1) "Orgmode integration with the GNOME desktop" ((notify (2010 8 20)) (telepathy (0 1))) single "marmalade" nil nil nil])
  (org-journal [cl-struct-package-desc org-journal (20150910 749) "a simple org-mode based journaling mode" nil single "melpa" nil ((:url . "http://github.com/bastibe/org-journal")) nil] [cl-struct-package-desc org-journal (1 10 2) "a simple org-mode based journaling mode" nil single "melpa-stable" nil ((:url . "http://github.com/bastibe/org-journal")) nil] [cl-struct-package-desc org-journal (1 10 2) "a simple org-mode based journaling mode" nil single "marmalade" nil nil nil])
  (org-magit [cl-struct-package-desc org-magit (0 2 2) "basic support for magit links" ((magit (1 2 0)) (org (6 1))) single "marmalade" nil nil nil])
  (org-mime [cl-struct-package-desc org-mime (20120112) "org html export for text/html MIME emails" nil single "marmalade" nil nil nil])
  (org-outlook [cl-struct-package-desc org-outlook (20150914 547) "Outlook org" nil tar "melpa" nil ((:url . "https://github.com/mlf176f2/org-outlook.el") (:keywords "org-outlook")) nil] [cl-struct-package-desc org-outlook (0 11) "Outlook org" nil tar "melpa-stable" nil ((:url . "https://github.com/mlf176f2/org-outlook.el") (:keywords "org-outlook")) nil] [cl-struct-package-desc org-outlook (0 3) "Outlook org" nil single "marmalade" nil nil nil])
  (org-presie [cl-struct-package-desc org-presie (0 0 5) "simple presentation with an org file" ((framesize (0 0 1)) (eimp (1 4 0)) (org (7 8 9))) single "marmalade" nil nil nil])
  (org-protocol-jekyll [cl-struct-package-desc org-protocol-jekyll (20130810 1450) "Jekyll's handler for org-protocol" nil single "melpa" nil nil nil] [cl-struct-package-desc org-protocol-jekyll (0 1) "Jekyll's handler for org-protocol" nil single "melpa-stable" nil nil nil] [cl-struct-package-desc org-protocol-jekyll (0 1) "Jekyll's handler for org-protocol" nil single "marmalade" nil nil nil])
  (org-publish-agenda [cl-struct-package-desc org-publish-agenda (1 7) "Publish org agenda with links to other files" nil single "marmalade" nil nil nil])
  (org-readme [cl-struct-package-desc org-readme (20151112 2237) "Integrates Readme.org and Commentary/Change-logs." ((http-post-simple (1 0)) (yaoddmuse (0 1 1)) (header2 (21 0)) (lib-requires (21 0))) tar "melpa" nil ((:url . "https://github.com/mlf176f2/org-readme") (:keywords "header2" "readme.org" "emacswiki" "git")) nil] [cl-struct-package-desc org-readme (20130322 926) "Integrates Readme.org and Commentary/Change-logs." ((http-post-simple (1 0)) (yaoddmuse (0 1 1)) (header2 (21 0)) (lib-requires (21 0))) tar "melpa-stable" nil ((:url . "https://github.com/mlf176f2/org-readme") (:keywords "header2" "readme.org" "emacswiki" "git")) nil] [cl-struct-package-desc org-readme (20130322 926) "Integrates Readme.org and Commentary/Change-logs." ((http-post-simple (1 0)) (yaoddmuse (0 1 1)) (header2 (21 0)) (lib-requires (21 0))) single "marmalade" nil nil nil])
  (org-table-comment [cl-struct-package-desc org-table-comment (20120209 1051) "Org table comment modes." nil single "melpa" nil ((:url . "http://github.com/mlf176f2/org-table-comment.el") (:keywords "org-mode" "orgtbl")) nil] [cl-struct-package-desc org-table-comment (0 2 0) "Org table comment modes." nil single "melpa-stable" nil ((:url . "http://github.com/mlf176f2/org-table-comment.el") (:keywords "org-mode" "orgtbl")) nil] [cl-struct-package-desc org-table-comment (0 2) "Org table comment modes." nil single "marmalade" nil nil nil])
  (org-trello [cl-struct-package-desc org-trello (20150905 1124) "Minor mode to synchronize org-mode buffer and trello board" ((request-deferred (0 2 0)) (deferred (0 3 2)) (s (1 9 0)) (dash-functional (2 11 0)) (dash (2 11 0)) (emacs (24))) tar "melpa" nil nil nil] [cl-struct-package-desc org-trello (0 7 5) "Minor mode to synchronize org-mode buffer and trello board" ((request-deferred (0 2 0)) (deferred (0 3 2)) (s (1 9 0)) (dash-functional (2 11 0)) (dash (2 11 0)) (emacs (24))) tar "melpa-stable" nil nil nil] [cl-struct-package-desc org-trello (0 7 5) "Minor mode to synchronize org-mode buffer and trello board" ((request-deferred (0 2 0)) (deferred (0 3 2)) (s (1 9 0)) (dash-functional (2 11 0)) (dash (2 11 0)) (emacs (24))) tar "marmalade" nil nil nil])
  (org2blog [cl-struct-package-desc org2blog (20150920 1312) "Blog from Org mode to wordpress" ((org (8 1)) (xml-rpc (1 6 8)) (metaweblog (0 1))) tar "melpa" nil nil nil] [cl-struct-package-desc org2blog (0 9 2) "Blog from Org mode to wordpress" ((org (8 1)) (xml-rpc (1 6 8)) (metaweblog (0 1))) tar "melpa-stable" nil nil nil] [cl-struct-package-desc org2blog (0 5) "Blog from Org mode to wordpress" ((org (7 7)) (xml-rpc (1 6 8))) tar "marmalade" nil nil nil])
  (org2jekyll [cl-struct-package-desc org2jekyll (20150906 647) "Minor mode to publish org-mode post to jekyll without specific yaml" ((dash-functional (2 11 0)) (s (1 9 0)) (deferred (0 3 1))) tar "melpa" nil ((:url . "https://github.com/ardumont/org2jekyll") (:keywords "org-mode" "jekyll" "blog" "publish")) nil] [cl-struct-package-desc org2jekyll (0 1 8) "Minor mode to publish org-mode post to jekyll without specific yaml" ((dash-functional (2 11 0)) (s (1 9 0)) (deferred (0 3 1))) tar "melpa-stable" nil ((:url . "https://github.com/ardumont/org2jekyll") (:keywords "org-mode" "jekyll" "blog" "publish")) nil] [cl-struct-package-desc org2jekyll (0 1 8) "Minor mode to publish org-mode post to jekyll without specific yaml" ((dash-functional (2 11 0)) (s (1 9 0)) (deferred (0 3 1))) tar "marmalade" nil nil nil])
  (org2nikola [cl-struct-package-desc org2nikola (0 0 8) "export html and meta data used by static blog like nikola from org file" nil tar "marmalade" nil nil nil])
  (osx-browse [cl-struct-package-desc osx-browse (20140508 1341) "Web browsing helpers for OS X" ((string-utils (0 3 2)) (browse-url-dwim (0 6 6))) single "melpa" nil ((:url . "http://github.com/rolandwalker/osx-browse") (:keywords "hypermedia" "external")) nil] [cl-struct-package-desc osx-browse (0 8 8) "Web browsing helpers for OS X" ((string-utils (0 3 2)) (browse-url-dwim (0 6 6))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/osx-browse") (:keywords "hypermedia" "external")) nil] [cl-struct-package-desc osx-browse (0 8 8) "Web browsing helpers for OS X" ((string-utils (0 3 2)) (browse-url-dwim (0 6 6))) single "marmalade" nil nil nil])
  (osx-location [cl-struct-package-desc osx-location (20150613 217) "Watch and respond to changes in geographical location on OS X" nil tar "melpa" nil nil nil] [cl-struct-package-desc osx-location (0 4) "Watch and respond to changes in geographical location on OS X" nil tar "melpa-stable" nil nil nil] [cl-struct-package-desc osx-location (0 2) "Watch and respond to changes in geographical location on OS X" nil tar "marmalade" nil nil nil])
  (osx-pseudo-daemon [cl-struct-package-desc osx-pseudo-daemon (20131026 1730) "Daemon mode that plays nice with OSX." nil single "melpa" nil ((:url . "https://github.com/DarwinAwardWinner/osx-pseudo-daemon") (:keywords "convenience" "osx")) nil] [cl-struct-package-desc osx-pseudo-daemon (1 0) "Daemon mode that plays nice with OSX." nil single "marmalade" nil nil nil])
  (osx-trash [cl-struct-package-desc osx-trash (20150723 735) "System trash for OS X" ((emacs (24 1))) tar "melpa" nil ((:url . "https://github.com/lunaryorn/osx-trash.el") (:keywords "files" "convenience" "tools" "unix")) nil] [cl-struct-package-desc osx-trash (0 1 1) "System trash for OS X" ((emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/lunaryorn/osx-trash.el") (:keywords "files" "convenience" "tools" "unix")) nil] [cl-struct-package-desc osx-trash (0 1 1) "System trash for OS X" ((emacs (24 1))) tar "marmalade" nil nil nil])
  (otp [cl-struct-package-desc otp (1 0) "a one-time password creator" nil single "marmalade" nil nil nil])
  (otter-mode [cl-struct-package-desc otter-mode (20121202 903) "Major mode for source files of the Otter automated theorem prover" nil single "melpa" nil ((:url . "https://github.com/scvalex/script-fu/blob/master/otter-mode.el")) nil] [cl-struct-package-desc otter-mode (1 2) "Major mode for source files of the Otter automated theorem prover" nil single "marmalade" nil nil nil])
  (outlined-elisp-mode [cl-struct-package-desc outlined-elisp-mode (20131108 327) "outline-minor-mode settings for emacs lisp" nil single "melpa" nil ((:url . "http://hins11.yu-yake.com/")) nil] [cl-struct-package-desc outlined-elisp-mode (1 0 5) "outline-minor-mode settings for emacs lisp" nil single "marmalade" nil nil nil])
  (overseer [cl-struct-package-desc overseer (20150801 1002) "Ert-runner Integration Into Emacs" ((emacs (24)) (dash (2 10 0)) (pkg-info (0 4))) single "melpa" nil ((:url . "http://www.github.com/tonini/overseer.el")) nil] [cl-struct-package-desc overseer (0 3 0) "Ert-runner Integration Into Emacs" ((emacs (24)) (dash (2 10 0)) (pkg-info (0 4))) single "melpa-stable" nil ((:url . "http://www.github.com/tonini/overseer.el")) nil] [cl-struct-package-desc overseer (0 1 0) "Ert-runner Integration Into Emacs." ((emacs (24)) (dash (2 10 0)) (pkg-info (0 4))) single "marmalade" nil nil nil])
  (oz [cl-struct-package-desc oz (16513) "Major mode for editing Oz programs" nil tar "marmalade" nil nil nil])
  (p4 [cl-struct-package-desc p4 (20150721 1237) "Simple Perforce-Emacs Integration" nil single "melpa" nil ((:url . "https://github.com/gareth-rees/p4.el")) nil] [cl-struct-package-desc p4 (11 0) "Perforce-Emacs Integration Library" nil single "marmalade" nil nil nil])
  (package [cl-struct-package-desc package (1 0 1) "Simple package system for Emacs" ((tabulated-list (1 0))) single "marmalade" nil nil nil])
  (package-store [cl-struct-package-desc package-store (0 3) "a package cache" nil single "marmalade" nil nil nil])
  (page-break-lines [cl-struct-package-desc page-break-lines (20150226 817) "Display ugly ^L page breaks as tidy horizontal lines" nil single "melpa" nil ((:url . "https://github.com/purcell/page-break-lines") (:keywords "convenience" "faces")) nil] [cl-struct-package-desc page-break-lines (0 10) "Display ugly ^L page breaks as tidy horizontal lines" nil single "melpa-stable" nil ((:url . "https://github.com/purcell/page-break-lines") (:keywords "convenience" "faces")) nil] [cl-struct-package-desc page-break-lines (0 9) "Display ugly ^L page breaks as tidy horizontal lines" nil single "marmalade" nil nil nil])
  (pager [cl-struct-package-desc pager (20100330 1131) "windows-scroll commands" nil single "melpa" nil nil nil] [cl-struct-package-desc pager (2 0) "windows-scroll commands" nil single "marmalade" nil nil nil])
  (pager-default-keybindings [cl-struct-package-desc pager-default-keybindings (20130719 1357) "Add the default keybindings suggested for pager.el" ((pager (1 0))) single "melpa" nil ((:url . "http://github.com/nflath/pager-default-keybindings")) nil] [cl-struct-package-desc pager-default-keybindings (1 1) "Add the default keybindings suggested for pager.el" nil single "marmalade" nil nil nil])
  (palimpsest [cl-struct-package-desc palimpsest (20130731 821) "Various deletion strategies when editing" nil single "melpa" nil nil nil] [cl-struct-package-desc palimpsest (0 8) "Various deletion strategies when editing" nil single "marmalade" nil nil nil])
  (palimpsest-mode [cl-struct-package-desc palimpsest-mode (0 8) "Various deletion strategies when editing" nil single "marmalade" nil nil nil])
  (paredit [cl-struct-package-desc paredit (20150217 713) "minor mode for editing parentheses" nil single "melpa" nil ((:keywords "lisp")) nil] [cl-struct-package-desc paredit (24) "minor mode for editing parentheses" nil single "melpa-stable" nil ((:keywords "lisp")) nil] [cl-struct-package-desc paredit (22) "minor mode for editing parentheses" nil single "marmalade" nil nil nil])
  (paredit-everywhere [cl-struct-package-desc paredit-everywhere (20150821 2144) "Enable some paredit features in non-lisp buffers" ((paredit (22))) single "melpa" nil ((:keywords "languages" "convenience")) nil] [cl-struct-package-desc paredit-everywhere (0 4) "Enable some paredit features in non-lisp buffers" ((paredit (22))) single "melpa-stable" nil ((:keywords "languages" "convenience")) nil] [cl-struct-package-desc paredit-everywhere (0 3) "Enable some paredit features in non-lisp buffers" ((paredit (22))) single "marmalade" nil nil nil])
  (paredit-menu [cl-struct-package-desc paredit-menu (20130923 1254) "Adds a menu to paredit.el as memory aid" nil single "melpa" nil ((:keywords "paredit")) nil] [cl-struct-package-desc paredit-menu (1 0) "Adds a menu to paredit.el as memory aid" nil single "marmalade" nil nil nil])
  (parenface [cl-struct-package-desc parenface (20141125 828) "Provide a face for parens in lispy modes." nil tar "melpa" nil nil nil] [cl-struct-package-desc parenface (1 1) "Provide a face for parens in lisp modes." nil single "marmalade" nil nil nil] [cl-struct-package-desc parenface (1 0 3) "Provide a face for parens in lispy modes." nil tar "melpa-stable" nil nil nil])
  (parenface-plus [cl-struct-package-desc parenface-plus (1 1) "Provide a face for parens in lispy modes." nil tar "marmalade" nil nil nil])
  (parenface-reversion [cl-struct-package-desc parenface-reversion (1 2) "Provide a face for parens in lisp modes." nil single "marmalade" nil nil nil])
  (parenface2 [cl-struct-package-desc parenface2 (1 1) "Provide a face for parens in lisp modes." nil single "marmalade" nil nil nil])
  (parscope [cl-struct-package-desc parscope (0 1 0) "Minor mode for showing the current scope in Lisp-like languages." nil single "marmalade" nil nil nil])
  (paste-kde [cl-struct-package-desc paste-kde (0 6) "paste text to KDE's pastebin service" ((web (0 3 6))) single "marmalade" nil nil nil])
  (pastebin [cl-struct-package-desc pastebin (20101125 1155) "A simple interface to the www.pastebin.com webservice" nil single "melpa" nil nil nil] [cl-struct-package-desc pastebin (0 1) "A simple interface to the www.pastebin.com webservice" nil single "marmalade" nil nil nil])
  (pastels-on-dark-theme [cl-struct-package-desc pastels-on-dark-theme (20120304 1022) "Pastels on Dark theme for Emacs 24" nil single "melpa" nil ((:url . "http://gist.github.com/1906662") (:keywords "theme" "color")) nil] [cl-struct-package-desc pastels-on-dark-theme (0 3) "Pastels on Dark theme for Emacs 24" nil single "marmalade" nil nil nil])
  (pbcopy [cl-struct-package-desc pbcopy (20150224 2059) "Emacs Interface to pbcopy" nil single "melpa" nil ((:url . "https://github.com/jkp/pbcopy.el") (:keywords "mac" "osx" "pbcopy")) nil] [cl-struct-package-desc pbcopy (0 1 0) "OS X clipboard integration for Emacs" nil single "marmalade" nil nil nil])
  (pc-mode [cl-struct-package-desc pc-mode (0 1) "major mode for editing PC code," nil single "marmalade" nil nil nil])
  (pcache [cl-struct-package-desc pcache (20151109 639) "persistent caching for Emacs." ((eieio (1 3))) single "melpa" nil nil nil] [cl-struct-package-desc pcache (0 3 2) "persistent caching for Emacs." ((eieio (1 3))) single "melpa-stable" nil nil nil] [cl-struct-package-desc pcache (0 3 1) "persistent caching for Emacs" ((eieio (1 3))) single "marmalade" nil nil nil])
  (pcmpl-args [cl-struct-package-desc pcmpl-args (20120911 2224) "Enhanced shell command completion" nil single "melpa" nil ((:url . "https://github.com/JonWaltman/pcmpl-args.el") (:keywords "abbrev" "completion" "convenience" "processes" "terminals" "unix")) nil] [cl-struct-package-desc pcmpl-args (0 1 1) "Enhanced shell command completion" nil single "marmalade" nil nil nil])
  (pcre2el [cl-struct-package-desc pcre2el (20151006 2216) "parse, convert, and font-lock PCRE, Emacs and rx regexps" ((cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/joddie/pcre2el")) nil] [cl-struct-package-desc pcre2el (1 5) "parse, convert, and font-lock PCRE, Emacs and rx regexps" ((cl-lib (0 3))) single "marmalade" nil nil nil])
  (pcsv [cl-struct-package-desc pcsv (20150220 331) "Parser of csv" nil single "melpa" nil ((:url . "https://github.com/mhayashi1120/Emacs-pcsv/raw/master/pcsv.el") (:keywords "data")) nil] [cl-struct-package-desc pcsv (1 3 6) "Parser of csv" nil single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-pcsv/raw/master/pcsv.el") (:keywords "data")) nil] [cl-struct-package-desc pcsv (1 3 3) "Parser of csv" nil single "marmalade" nil nil nil])
  (pde [cl-struct-package-desc pde (0 2 16) "Perl Development Environment" nil tar "marmalade" nil nil nil])
  (peep-open [cl-struct-package-desc peep-open (0 0 2) "PeepOpen plugin for emacs." nil single "marmalade" nil nil nil])
  (peepopen [cl-struct-package-desc peepopen (0 1 0) "Graphical file chooser for Emacs on Mac OS X." nil single "marmalade" nil nil nil])
  (pep8 [cl-struct-package-desc pep8 (1 2) "run the python pep8 checker putting hits in a grep buffer" nil single "marmalade" nil nil nil])
  (perl-myvar [cl-struct-package-desc perl-myvar (1 23) "Declare lexicaly scoped vars as my()." nil single "marmalade" nil nil nil])
  (perlbrew [cl-struct-package-desc perlbrew (20130127 324) "A perlbrew wrapper for Emacs" nil single "melpa" nil ((:keywords "emacs" "perl")) nil] [cl-struct-package-desc perlbrew (0 1) "basic support for perlbrew environments" ((cl (0))) single "marmalade" nil nil nil])
  (perlcritic [cl-struct-package-desc perlcritic (1 10) "minor mode for Perl::Critic integration" nil single "marmalade" nil nil nil])
  (persistent-soft [cl-struct-package-desc persistent-soft (20150223 1053) "Persistent storage, returning nil on failure" ((pcache (0 3 1)) (list-utils (0 4 2))) single "melpa" nil ((:url . "http://github.com/rolandwalker/persistent-soft") (:keywords "data" "extensions")) nil] [cl-struct-package-desc persistent-soft (0 8 10) "Persistent storage, returning nil on failure" ((pcache (0 3 1)) (list-utils (0 4 2))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/persistent-soft") (:keywords "data" "extensions")) nil] [cl-struct-package-desc persistent-soft (0 8 8) "Persistent storage, returning nil on failure" ((pcache (0 2 3)) (list-utils (0 4 2))) single "marmalade" nil nil nil])
  (perspective [cl-struct-package-desc perspective (20151106 1317) "switch between named \"perspectives\" of the editor" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/nex3/perspective-el") (:keywords "workspace" "convenience" "frames")) nil] [cl-struct-package-desc perspective (1 12) "switch between named \"perspectives\" of the editor" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "http://github.com/nex3/perspective-el") (:keywords "workspace" "convenience" "frames")) nil] [cl-struct-package-desc perspective (1 12) "switch between named \"perspectives\" of the editor" ((cl-lib (0 5))) single "marmalade" nil nil nil])
  (pg [cl-struct-package-desc pg (20130731 1442) "Emacs Lisp interface to the PostgreSQL RDBMS" nil single "melpa" nil ((:keywords "data" "comm" "database" "postgresql")) nil] [cl-struct-package-desc pg (0 12) "Emacs Lisp interface to the PostgreSQL RDBMS" nil single "marmalade" nil nil nil])
  (phantomjs [cl-struct-package-desc phantomjs (0 0 11) "Control phantomjs from Emacs			" nil tar "marmalade" nil nil nil])
  (phi-search [cl-struct-package-desc phi-search (20150807 112) "another incremental search & replace, compatible with \"multiple-cursors\"" nil tar "melpa" nil ((:url . "http://hins11.yu-yake.com/")) nil] [cl-struct-package-desc phi-search (1 1 0) "inferior isearch compatible with \"multiple-cursors\"" nil single "marmalade" nil nil nil])
  (php-completion [cl-struct-package-desc php-completion (0 3) "complete everything PHP with Anything.el" nil single "marmalade" nil nil nil])
  (php-extras [cl-struct-package-desc php-extras (2 2 0 20140405) "Extra features for `php-mode'" ((php-mode (1 5 0))) tar "marmalade" nil nil nil])
  (php-mode [cl-struct-package-desc php-mode (20151002 2030) "Major mode for editing PHP code" nil tar "melpa" nil ((:url . "https://github.com/ejmr/php-mode")) nil] [cl-struct-package-desc php-mode (1 17 0) "Major mode for editing PHP code" nil tar "melpa-stable" nil ((:url . "https://github.com/ejmr/php-mode")) nil] [cl-struct-package-desc php-mode (1 5 0) "major mode for editing PHP code" nil single "marmalade" nil nil nil])
  (pickup [cl-struct-package-desc pickup (0 0 3) "pickup file." nil single "marmalade" nil nil nil])
  (picpocket [cl-struct-package-desc picpocket (16) "Image viewer" nil single "marmalade" nil nil nil])
  (pinboard [cl-struct-package-desc pinboard (0 0 1) "get stuff from pinboard" nil single "marmalade" nil nil nil])
  (pinboard-api [cl-struct-package-desc pinboard-api (20140324 448) "Rudimentary http://pinboard.in integration" nil single "melpa" nil ((:url . "https://github.com/danieroux/pinboard-api-el") (:keywords "pinboard" "www")) nil] [cl-struct-package-desc pinboard-api (0 1) "Rudimentary http://pinboard.in integration" nil single "marmalade" nil nil nil])
  (pivotal-tracker [cl-struct-package-desc pivotal-tracker (20150901 1221) "Interact with Pivotal Tracker through its API" nil single "melpa" nil ((:url . "http://github.com/jxa/pivotal-tracker")) nil] [cl-struct-package-desc pivotal-tracker (1 2 0) "Interact with Pivotal Tracker through its API" nil single "marmalade" nil nil nil])
  (pkg-info [cl-struct-package-desc pkg-info (20150517 443) "Information about packages" ((epl (0 8))) single "melpa" nil ((:url . "https://github.com/lunaryorn/pkg-info.el") (:keywords "convenience")) nil] [cl-struct-package-desc pkg-info (0 6) "Information about packages" ((epl (0 8))) single "melpa-stable" nil ((:url . "https://github.com/lunaryorn/pkg-info.el") (:keywords "convenience")) nil] [cl-struct-package-desc pkg-info (0 6) "Information about packages" ((epl (0 8))) single "marmalade" nil nil nil])
  (pkg-info-dummy-package [cl-struct-package-desc pkg-info-dummy-package (3 4 2 1) "pkg-info: Dummy package for unit tests" nil single "marmalade" nil nil nil])
  (po-elscreen [cl-struct-package-desc po-elscreen (1 4 6) "Screen for Emacsen(this is not original. original is http://www.morishima.net/~naoto/elscreen-en/?lang=en)" nil single "marmalade" nil nil nil])
  (pod-mode [cl-struct-package-desc pod-mode (20121117 2120) "Major mode for editing .pod-files." nil tar "marmalade" nil nil nil])
  (pointback [cl-struct-package-desc pointback (20100210 752) "Restore window points when returning to buffers" nil single "melpa" nil ((:keywords "convenience")) nil] [cl-struct-package-desc pointback (0 2) "Restore window points when returning to buffers" nil single "marmalade" nil nil nil])
  (pony-mode [cl-struct-package-desc pony-mode (20151028 302) "Minor mode for working with Django Projects" nil tar "melpa" nil nil nil] [cl-struct-package-desc pony-mode (0 2) "Minor mode for working with Django Projects" nil tar "marmalade" nil nil nil])
  (popup [cl-struct-package-desc popup (20150626 711) "Visual Popup User Interface" ((cl-lib (0 3))) single "melpa" nil ((:keywords "lisp")) nil] [cl-struct-package-desc popup (0 5 3) "Visual Popup User Interface" ((cl-lib (0 3))) single "melpa-stable" nil ((:keywords "lisp")) nil] [cl-struct-package-desc popup (0 5) "Visual Popup User Interface" nil single "marmalade" nil nil nil])
  (popwin [cl-struct-package-desc popwin (20150315 600) "Popup Window Manager." nil single "melpa" nil ((:keywords "convenience")) nil] [cl-struct-package-desc popwin (1 0 0) "Popup Window Manager." nil single "melpa-stable" nil ((:keywords "convenience")) nil] [cl-struct-package-desc popwin (0 4) "Popup Window Manager." nil single "marmalade" nil nil nil])
  (pos-tip [cl-struct-package-desc pos-tip (20150318 813) "Show tooltip at point" nil single "melpa" nil ((:keywords "tooltip")) nil] [cl-struct-package-desc pos-tip (0 4 6) "Show tooltip at point" nil single "melpa-stable" nil ((:keywords "tooltip")) nil] [cl-struct-package-desc pos-tip (0 4 5) "Show tooltip at point" nil single "marmalade" nil nil nil])
  (pov-mode [cl-struct-package-desc pov-mode (3 3) "Major mode for editing POV-Ray scene files." nil tar "marmalade" nil nil nil])
  (powershell [cl-struct-package-desc powershell (20150428 1421) "No description available." nil single "melpa" nil nil nil] [cl-struct-package-desc powershell (0 2 1) "run powershell as an inferior shell in emacs" nil single "marmalade" nil nil nil] [cl-struct-package-desc powershell (0 1) "No description available." nil single "melpa-stable" nil nil nil])
  (pp-c-l [cl-struct-package-desc pp-c-l (20150104 1639) "Display Control-l characters in a pretty way" nil single "melpa" nil ((:url . "http://www.emacswiki.org/pp-c-l.el") (:keywords "display" "convenience" "faces")) nil] [cl-struct-package-desc pp-c-l (1 0) "Display Control-l characters in a pretty way" nil single "marmalade" nil nil nil])
  (pretty-lambdada [cl-struct-package-desc pretty-lambdada (20150104 1641) "Show the word `lambda' as the Greek letter." nil single "melpa" nil ((:url . "http://www.emacswiki.org/pretty-lambdada.el") (:keywords "convenience" "display")) nil] [cl-struct-package-desc pretty-lambdada (22 0) "Show the word `lambda' as the Greek letter." nil single "marmalade" nil nil nil])
  (pretty-mode-plus [cl-struct-package-desc pretty-mode-plus (1 2) "Redisplay parts of the buffer as pretty symbols." nil tar "marmalade" nil nil nil])
  (proc-net [cl-struct-package-desc proc-net (20130321 1712) "network process tools" nil single "melpa" nil ((:url . "http://github.com/nicferrier/emacs-procnet") (:keywords "processes")) nil] [cl-struct-package-desc proc-net (0 0 1) "network process tools" nil single "marmalade" nil nil nil])
  (processing-mode [cl-struct-package-desc processing-mode (20150217 432) "Major mode for Processing 2.0" nil single "melpa" nil ((:url . "https://github.com/ptrv/processing2-emacs") (:keywords "languages" "snippets")) nil] [cl-struct-package-desc processing-mode (1 2 1) "Major mode for Processing 2.0" nil single "marmalade" nil nil nil] [cl-struct-package-desc processing-mode (1 0) "Major mode for Processing 2.0" ((yasnippet (0 8 0))) single "melpa-stable" nil ((:keywords "languages" "snippets")) nil])
  (processing-snippets [cl-struct-package-desc processing-snippets (20140426 728) "Snippets for processing-mode" ((yasnippet (0 8 0))) tar "melpa" nil nil nil] [cl-struct-package-desc processing-snippets (1 0 0) "Snippets for the Processing major mode" ((yasnippet (0 8 0))) tar "marmalade" nil nil nil])
  (project [cl-struct-package-desc project (1 0) "Keep track of the current project" nil single "marmalade" nil nil nil])
  (project-explorer [cl-struct-package-desc project-explorer (20150503 1714) "A project explorer sidebar" ((cl-lib (0 3)) (es-lib (0 3)) (es-windows (0 1)) (emacs (24))) single "melpa" nil ((:url . "https://github.com/sabof/project-explorer")) nil] [cl-struct-package-desc project-explorer (0 14 3) "A project explorer sidebar" ((cl-lib (0 3)) (es-lib (0 3)) (es-windows (0 1)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/sabof/project-explorer")) nil] [cl-struct-package-desc project-explorer (0 13) "A project explorer sidebar" ((cl-lib (0 3)) (es-lib (0 3)) (es-windows (0 1)) (emacs (24))) single "marmalade" nil nil nil])
  (projectile [cl-struct-package-desc projectile (20151111 2318) "Manage and navigate projects in Emacs easily" ((dash (2 11 0)) (pkg-info (0 4))) single "melpa" nil ((:url . "https://github.com/bbatsov/projectile") (:keywords "project" "convenience")) nil] [cl-struct-package-desc projectile (0 13 0) "Manage and navigate projects in Emacs easily" ((dash (2 11 0)) (pkg-info (0 4))) single "melpa-stable" nil ((:url . "https://github.com/bbatsov/projectile") (:keywords "project" "convenience")) nil] [cl-struct-package-desc projectile (0 10 0) "Manage and navigate projects in Emacs easily" ((s (1 6 0)) (dash (1 5 0)) (pkg-info (0 4))) single "marmalade" nil nil nil])
  (prolog [cl-struct-package-desc prolog (1 22) "major mode for editing and running Prolog (and Mercury) code" nil single "marmalade" nil nil nil])
  (protobuf-mode [cl-struct-package-desc protobuf-mode (20150521 2011) "major mode for editing protocol buffers." nil single "melpa" nil ((:keywords "google" "protobuf" "languages")) nil] [cl-struct-package-desc protobuf-mode (2 6 1) "major mode for editing protocol buffers." nil single "melpa-stable" nil ((:keywords "google" "protobuf" "languages")) nil] [cl-struct-package-desc protobuf-mode (0 3) "major mode for editing protocol buffers." nil single "marmalade" nil nil nil])
  (proxy-mode [cl-struct-package-desc proxy-mode (0 9) "Provides proxy minor mode." nil single "marmalade" nil nil nil])
  (ps-ccrypt [cl-struct-package-desc ps-ccrypt (1 10) "reading/writing/loading encrypted files" nil tar "marmalade" nil nil nil])
  (psci [cl-struct-package-desc psci (20150328 1201) "Major mode for purescript repl psci" ((purescript-mode (13 10)) (dash (2 9 0)) (s (1 9 0)) (f (0 17 1)) (deferred (0 3 2))) tar "melpa" nil ((:url . "https://github.com/ardumont/emacs-psci") (:keywords "purescript" "psci" "repl" "major" "mode")) nil] [cl-struct-package-desc psci (0 0 6) "Major mode for purescript repl psci" ((purescript-mode (13 10)) (dash (2 9 0)) (s (1 9 0)) (f (0 17 1)) (deferred (0 3 2))) tar "melpa-stable" nil ((:url . "https://github.com/ardumont/emacs-psci") (:keywords "purescript" "psci" "repl" "major" "mode")) nil] [cl-struct-package-desc psci (0 0 6) "Major mode for purescript repl psci" ((purescript-mode (13 10)) (dash (2 9 0)) (s (1 9 0)) (f (0 17 1)) (deferred (0 3 2))) single "marmalade" nil nil nil])
  (psgml [cl-struct-package-desc psgml (1 4 1) "Lennart Staflin's Psgml package, with Elisp syntax and sgml-validate fixed for Emacsen >=24." nil tar "marmalade" nil nil nil])
  (psvn [cl-struct-package-desc psvn (20151103 1042) "Subversion interface for emacs" nil single "melpa" nil nil nil] [cl-struct-package-desc psvn (1 1 1) "Subversion interface for emacs" nil single "marmalade" nil nil nil])
  (puppet-mode [cl-struct-package-desc puppet-mode (20150730 1208) "Major mode for Puppet manifests" ((emacs (24 1)) (pkg-info (0 4))) single "melpa" nil ((:url . "https://github.com/lunaryorn/puppet-mode") (:keywords "languages")) nil] [cl-struct-package-desc puppet-mode (0 3) "Major mode for Puppet manifests" ((emacs (24 1)) (cl-lib (0 5)) (pkg-info (0 4))) single "melpa-stable" nil ((:url . "https://github.com/lunaryorn/puppet-mode") (:keywords "languages")) nil] [cl-struct-package-desc puppet-mode (0 3) "Major mode for Puppet manifests" ((emacs (24 1)) (cl-lib (0 5)) (pkg-info (0 4))) single "marmalade" nil nil nil])
  (purple-haze-theme [cl-struct-package-desc purple-haze-theme (20141014 1929) "an overtly purple color theme for Emacs24." ((emacs (24 0))) single "melpa" nil ((:url . "https://github.com/jasonm23/emacs-purple-haze-theme")) nil] [cl-struct-package-desc purple-haze-theme (20130930 36) "an overtly purple color theme for Emacs24." ((emacs (24 0))) single "marmalade" nil nil nil])
  (py-import-check [cl-struct-package-desc py-import-check (20130802 411) "Finds the unused python imports using importchecker" nil single "melpa" nil ((:url . "https://github.com/psibi/emacs-py-import-check") (:keywords "python" "import" "check")) nil] [cl-struct-package-desc py-import-check (0 2) "Finds the unused python imports using importchecker" nil single "marmalade" nil nil nil])
  (pycomplete [cl-struct-package-desc pycomplete (1 0) "Complete symbols at point using Pymacs." nil single "marmalade" nil nil nil])
  (pyde [cl-struct-package-desc pyde (0 6) "Python Development Environment" ((pymacs (0 25)) (auto-complete (1 4)) (yasnippet (0 8)) (fuzzy (0 1)) (pyvirtualenv (1 0))) single "marmalade" nil nil nil])
  (pyflakes [cl-struct-package-desc pyflakes (1 0) "run the python pyflakes checker putting hits in a grep buffer" nil single "marmalade" nil nil nil])
  (pylint [cl-struct-package-desc pylint (20150123 1600) "minor mode for running `pylint'" nil single "melpa" nil ((:keywords "languages" "python")) nil] [cl-struct-package-desc pylint (1 0) "run the python pylint checker putting hits in a grep buffer" nil single "marmalade" nil nil nil])
  (pymacs [cl-struct-package-desc pymacs (0 25) "Interface between Emacs Lisp and Python" nil single "marmalade" nil nil nil])
  (pysmell [cl-struct-package-desc pysmell (0 7 2) "Complete python code using heuristic static analysis" nil single "marmalade" nil nil nil])
  (pytest [cl-struct-package-desc pytest (20151104 2125) "Easy Python test running in Emacs" ((s (1 9 0))) single "melpa" nil ((:url . "https://github.com/ionrock/pytest-el") (:keywords "pytest" "python" "testing")) nil] [cl-struct-package-desc pytest (0 2 1) "Easy Python test running in Emacs" nil single "marmalade" nil nil nil])
  (python [cl-struct-package-desc python (20120402) "Python's flying circus support for Emacs" nil single "marmalade" nil nil nil])
  (python-django [cl-struct-package-desc python-django (20150821 2104) "A Jazzy package for managing Django projects" nil single "melpa" nil ((:url . "https://github.com/fgallina/python-django.el") (:keywords "languages")) nil] [cl-struct-package-desc python-django (0 1) "A Jazzy package for managing Django projects" nil single "marmalade" nil nil nil])
  (python-mode [cl-struct-package-desc python-mode (20151028 132) "Python major mode" nil tar "melpa" nil nil nil] [cl-struct-package-desc python-mode (6 1 3) "An Emacs mode for editing Python code" nil tar "marmalade" nil nil nil])
  (python-pep8 [cl-struct-package-desc python-pep8 (1 1) "minor mode for running `pep8'" nil single "marmalade" nil nil nil])
  (python-pylint [cl-struct-package-desc python-pylint (1 1) "minor mode for running `pylint'" nil single "marmalade" nil nil nil])
  (pyvenv [cl-struct-package-desc pyvenv (20151105 1519) "Python virtual environment interface" nil single "melpa" nil ((:url . "http://github.com/jorgenschaefer/pyvenv") (:keywords "python" "virtualenv" "tools")) nil] [cl-struct-package-desc pyvenv (1 9) "Python virtual environment interface" nil single "melpa-stable" nil ((:url . "http://github.com/jorgenschaefer/pyvenv") (:keywords "python" "virtualenv" "tools")) nil] [cl-struct-package-desc pyvenv (1 7) "Python virtual environment interface" nil single "marmalade" nil nil nil])
  (pyvirtualenv [cl-struct-package-desc pyvirtualenv (1 1) "Python Pyvirtualenv support" nil single "marmalade" nil nil nil])
  (qsimpleq-theme [cl-struct-package-desc qsimpleq-theme (0 1 3) "Based on solarized color theme for Emacs." nil single "marmalade" nil nil nil])
  (quack [cl-struct-package-desc quack (20130126 1623) "No description available." nil single "melpa" nil nil nil] [cl-struct-package-desc quack (0 42) "enhanced support for editing and running Scheme code" nil single "marmalade" nil nil nil])
  (quickrun [cl-struct-package-desc quickrun (20151007 816) "Run commands quickly" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-quickrun")) nil] [cl-struct-package-desc quickrun (2 2 6) "Run commands quickly" ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-quickrun")) nil] [cl-struct-package-desc quickrun (1 8 4) "Run commands quickly" nil single "marmalade" nil nil nil])
  (r-autoyas [cl-struct-package-desc r-autoyas (20140101 710) "Provides automatically created yasnippets for R function argument lists." ((ess (0)) (yasnippet (0 8 0))) tar "melpa" nil ((:url . "https://github.com/mlf176f2/r-autoyas.el") (:keywords "r" "yasnippet")) nil] [cl-struct-package-desc r-autoyas (0 28) "Provides automatically created yasnippets for R function argument lists." nil tar "melpa-stable" nil ((:url . "https://github.com/mlf176f2/r-autoyas.el") (:keywords "r" "yasnippet")) nil] [cl-struct-package-desc r-autoyas (0 28) "Provides automatically created yasnippets for R function argument lists." nil single "marmalade" nil nil nil])
  (r5rs [cl-struct-package-desc r5rs (1 0) "Browse documentation from the R5RS Revised5 Report" nil single "marmalade" nil nil nil])
  (rainbow-delimiters [cl-struct-package-desc rainbow-delimiters (20150320 17) "Highlight brackets according to their depth" nil single "melpa" nil ((:url . "https://github.com/Fanael/rainbow-delimiters") (:keywords "faces" "convenience" "lisp" "tools")) nil] [cl-struct-package-desc rainbow-delimiters (2 1 1) "Highlight brackets according to their depth" nil single "melpa-stable" nil ((:url . "https://github.com/Fanael/rainbow-delimiters") (:keywords "faces" "convenience" "lisp" "tools")) nil] [cl-struct-package-desc rainbow-delimiters (1 3 21) "Highlight nested parens, brackets, braces a different color at each depth." nil single "marmalade" nil nil nil])
  (rbenv [cl-struct-package-desc rbenv (20141119 2349) "Emacs integration for rbenv" nil single "melpa" nil ((:url . "https://github.com/senny/rbenv.el") (:keywords "ruby" "rbenv")) nil] [cl-struct-package-desc rbenv (0 0 3) "Emacs integration for rbenv" nil single "melpa-stable" nil ((:url . "https://github.com/senny/rbenv.el") (:keywords "ruby" "rbenv")) nil] [cl-struct-package-desc rbenv (0 0 3) "Emacs integration for rbenv" nil single "marmalade" nil nil nil])
  (rcirc-color [cl-struct-package-desc rcirc-color (20140131 656) "color nicks" nil single "melpa" nil ((:keywords "comm")) nil] [cl-struct-package-desc rcirc-color (0 2) "color nicks" nil single "marmalade" nil nil nil])
  (rcirc-notify [cl-struct-package-desc rcirc-notify (20150219 1404) "libnotify popups" nil single "melpa" nil ((:keywords "lisp" "rcirc" "irc" "notify" "growl")) nil] [cl-struct-package-desc rcirc-notify (1 0 0) "libnotify popups" nil single "marmalade" nil nil nil])
  (rcirc-robots [cl-struct-package-desc rcirc-robots (0 0 7) "robots based on rcirc irc" ((kv (0 0 8)) (anaphora (0 0 5))) single "marmalade" nil nil nil])
  (rcirc-ssh [cl-struct-package-desc rcirc-ssh (0 0 7) "do irc over ssh sessions" ((kv (0 0 3))) single "marmalade" nil nil nil])
  (rcirc-ucomplete [cl-struct-package-desc rcirc-ucomplete (1 0 1) "Unambiguous non-cycling completion for rcirc" nil single "marmalade" nil nil nil])
  (real-auto-save [cl-struct-package-desc real-auto-save (20150701 815) "Automatically save your all your buffers/files at regular intervals." nil single "melpa" nil nil nil] [cl-struct-package-desc real-auto-save (0 4) "enable real auto save" nil single "melpa-stable" nil nil nil] [cl-struct-package-desc real-auto-save (0 3) "enable real auto save" nil single "marmalade" nil nil nil])
  (rect-mark [cl-struct-package-desc rect-mark (1 4) "Mark a rectangle of text with highlighting." nil single "marmalade" nil nil nil])
  (recursive-narrow [cl-struct-package-desc recursive-narrow (20140902 1027) "narrow-to-region that operates recursively" nil single "melpa" nil ((:url . "http://github.com/nflath/recursive-narrow")) nil] [cl-struct-package-desc recursive-narrow (20140811 1546) "narrow-to-region that operates recursively" nil single "marmalade" nil nil nil])
  (refheap [cl-struct-package-desc refheap (20140902 1402) "A library for pasting to https://refheap.com" ((json (1 2))) single "melpa" nil ((:url . "https://github.com/Raynes/refheap.el")) nil] [cl-struct-package-desc refheap (0 0 6) "A library for pasting to https://refheap.com" ((json (1 2))) single "marmalade" nil nil nil])
  (regex-tool [cl-struct-package-desc regex-tool (20131104 1434) "A regular expression evaluation tool for programmers" nil single "melpa" nil ((:url . "http://www.newartisans.com/") (:keywords "regex" "languages" "programming" "development")) nil] [cl-struct-package-desc regex-tool (1 2) "A regular expression evaluation tool for programmers" nil single "marmalade" nil nil nil])
  (region-bindings-mode [cl-struct-package-desc region-bindings-mode (20140407 1514) "Enable custom bindings when mark is active." nil single "melpa" nil ((:url . "https://github.com/fgallina/region-bindings-mode") (:keywords "convenience")) nil] [cl-struct-package-desc region-bindings-mode (0 1) "Enable custom bindings when mark is active." nil single "marmalade" nil nil nil])
  (region-list-edit [cl-struct-package-desc region-list-edit (20100530 808) "Add/delete a region into/from a region list, such as ((4 . 7) (11 . 15) (17 . 17) (20 . 25))." nil single "marmalade" nil nil nil])
  (relax [cl-struct-package-desc relax (20131029 1434) "For browsing and interacting with CouchDB" ((json (1 2))) single "melpa" nil ((:url . "http://github.com/technomancy/relax.el") (:keywords "database" "http")) nil] [cl-struct-package-desc relax (0 2) "For browsing and interacting with CouchDB" ((json (1 2))) single "melpa-stable" nil ((:url . "http://github.com/technomancy/relax.el") (:keywords "database" "http")) nil] [cl-struct-package-desc relax (0 2) "For browsing and interacting with CouchDB" ((json (1 2))) single "marmalade" nil nil nil])
  (remember-theme [cl-struct-package-desc remember-theme (20140122 1500) "Remembers the last theme in use and re-loads for the next session." nil single "marmalade" nil nil nil])
  (repository-root [cl-struct-package-desc repository-root (1 0 4) "deduce the repository root directory for a given file" nil single "marmalade" nil nil nil])
  (request [cl-struct-package-desc request (20140316 417) "Compatible layer for URL request in Emacs" nil single "melpa" nil nil nil] [cl-struct-package-desc request (0 2 0) "Compatible layer for URL request in Emacs" nil single "marmalade" nil nil nil] [cl-struct-package-desc request (0 1 0) "Compatible layer for URL request in Emacs" nil single "melpa-stable" nil nil nil])
  (request-deferred [cl-struct-package-desc request-deferred (20130526 1015) "Wrap request.el by deferred" ((deferred (0 3 1)) (request (0 2 0))) single "melpa" nil nil nil] [cl-struct-package-desc request-deferred (0 2 0) "Wrap request.el by deferred" ((deferred (0 3 1)) (request (0 2 0))) single "marmalade" nil nil nil] [cl-struct-package-desc request-deferred (0 1 0) "Wrap request.el by deferred" nil single "melpa-stable" nil nil nil])
  (requirejs-mode [cl-struct-package-desc requirejs-mode (20130215 1304) "Improved AMD module management" nil single "melpa" nil ((:keywords "javascript" "amd" "requirejs")) nil] [cl-struct-package-desc requirejs-mode (1 1) "Improved AMD module management" nil single "marmalade" nil nil nil])
  (revive [cl-struct-package-desc revive (20150417 1555) "Resume Emacs" nil single "melpa" nil nil nil] [cl-struct-package-desc revive (2 19) "Resume Emacs." nil single "marmalade" nil nil nil])
  (rinari [cl-struct-package-desc rinari (20150708 2340) "Rinari Is Not A Rails IDE" ((ruby-mode (1 0)) (inf-ruby (2 2 5)) (ruby-compilation (0 16)) (jump (2 0))) single "melpa" nil ((:url . "https://github.com/eschulte/rinari") (:keywords "ruby" "rails" "project" "convenience" "web")) nil] [cl-struct-package-desc rinari (2 11) "Rinari Is Not A Rails IDE" ((ruby-mode (1 0)) (inf-ruby (2 2 5)) (ruby-compilation (0 16)) (jump (2 0))) single "melpa-stable" nil ((:url . "https://github.com/eschulte/rinari") (:keywords "ruby" "rails" "project" "convenience" "web")) nil] [cl-struct-package-desc rinari (2 10) "Rinari Is Not A Rails IDE" ((ruby-mode (1 0)) (inf-ruby (2 2 1)) (ruby-compilation (0 8)) (jump (2 0))) single "marmalade" nil nil nil])
  (rings [cl-struct-package-desc rings (20140102 1536) "Buffer rings. Like tabs, but better." nil single "melpa" nil ((:url . "http://github.com/konr/rings") (:keywords "utilities" "productivity")) nil] [cl-struct-package-desc rings (1 0 1) "Buffer rings. Like tabs, but better." nil single "marmalade" nil nil nil])
  (robe [cl-struct-package-desc robe (20150927 2217) "Code navigation, documentation lookup and completion for Ruby" ((inf-ruby (2 3 0))) tar "melpa" nil ((:url . "https://github.com/dgutov/robe") (:keywords "ruby" "convenience" "rails")) nil] [cl-struct-package-desc robe (0 7 7) "Code navigation, documentation lookup and completion for Ruby" ((inf-ruby (2 3 0))) tar "marmalade" nil nil nil])
  (roy-mode [cl-struct-package-desc roy-mode (20121208 358) "Roy major mode" nil single "melpa" nil ((:url . "https://github.com/folone/roy-mode") (:keywords "extensions")) nil] [cl-struct-package-desc roy-mode (0 1 0) "Roy major mode" nil single "marmalade" nil nil nil])
  (rspec-mode [cl-struct-package-desc rspec-mode (20151003 315) "Enhance ruby-mode for RSpec" ((ruby-mode (1 0)) (cl-lib (0 4))) tar "melpa" nil ((:url . "http://github.com/pezra/rspec-mode") (:keywords "rspec" "ruby")) nil] [cl-struct-package-desc rspec-mode (1 11) "Enhance ruby-mode for RSpec" ((ruby-mode (1 0)) (cl-lib (0 4))) tar "melpa-stable" nil ((:url . "http://github.com/pezra/rspec-mode") (:keywords "rspec" "ruby")) nil] [cl-struct-package-desc rspec-mode (1 10) "Enhance ruby-mode for RSpec" nil tar "marmalade" nil nil nil])
  (rubocop [cl-struct-package-desc rubocop (20150630 1003) "An Emacs interface for RuboCop" ((dash (1 0 0)) (emacs (24))) single "melpa" nil ((:url . "https://github.com/bbatsov/rubocop-emacs") (:keywords "project" "convenience")) nil] [cl-struct-package-desc rubocop (0 3) "An Emacs interface for RuboCop" ((dash (1 0 0))) single "marmalade" nil nil nil])
  (ruby-block [cl-struct-package-desc ruby-block (20131210 1931) "highlight matching block" nil single "melpa" nil ((:keywords "languages" "faces" "ruby")) nil] [cl-struct-package-desc ruby-block (0 0 11) "highlight matching block" nil single "marmalade" nil nil nil])
  (ruby-compilation [cl-struct-package-desc ruby-compilation (20150708 2340) "run a ruby process in a compilation buffer" ((inf-ruby (2 2 1))) single "melpa" nil ((:url . "https://github.com/eschulte/rinari") (:keywords "test" "convenience")) nil] [cl-struct-package-desc ruby-compilation (2 11) "run a ruby process in a compilation buffer" ((inf-ruby (2 2 1))) single "melpa-stable" nil ((:url . "https://github.com/eschulte/rinari") (:keywords "test" "convenience")) nil] [cl-struct-package-desc ruby-compilation (2 10) "run a ruby process in a compilation buffer" ((inf-ruby (2 2 1))) single "marmalade" nil nil nil])
  (ruby-end [cl-struct-package-desc ruby-end (20141215 423) "Automatic insertion of end blocks for Ruby" nil single "melpa" nil ((:url . "http://github.com/rejeep/ruby-end") (:keywords "speed" "convenience" "ruby")) nil] [cl-struct-package-desc ruby-end (0 4 1) "Automatic insertion of end blocks for Ruby" nil single "melpa-stable" nil ((:url . "http://github.com/rejeep/ruby-end") (:keywords "speed" "convenience" "ruby")) nil] [cl-struct-package-desc ruby-end (0 3 1) "Automatic insertion of end blocks for Ruby" nil single "marmalade" nil nil nil])
  (ruby-hash-syntax [cl-struct-package-desc ruby-hash-syntax (20141010 839) "Toggle ruby hash syntax between classic and 1.9 styles" nil single "melpa" nil ((:url . "https://github.com/purcell/ruby-hash-syntax") (:keywords "languages")) nil] [cl-struct-package-desc ruby-hash-syntax (0 4) "Toggle ruby hash syntax between classic and 1.9 styles" nil single "melpa-stable" nil ((:url . "https://github.com/purcell/ruby-hash-syntax") (:keywords "languages")) nil] [cl-struct-package-desc ruby-hash-syntax (0 3) "Toggle ruby hash syntax between classic and 1.9 styles" nil single "marmalade" nil nil nil])
  (ruby-mode [cl-struct-package-desc ruby-mode (1 1) "ruby-mode package" nil tar "marmalade" nil nil nil])
  (ruby-test-mode [cl-struct-package-desc ruby-test-mode (20140727 204) "Minor mode for Behaviour and Test Driven" ((ruby-mode (1 0))) single "melpa" nil ((:keywords "ruby" "unit" "test" "rspec")) nil] [cl-struct-package-desc ruby-test-mode (1 7) "Minor mode for Behaviour and Test Driven" ((ruby-mode (1 0))) single "marmalade" nil nil nil] [cl-struct-package-desc ruby-test-mode (1 0) "Minor mode for Behaviour and Test Driven" nil single "melpa-stable" nil ((:keywords "ruby" "unit" "test" "rspec")) nil])
  (ruby-tools [cl-struct-package-desc ruby-tools (20140113 45) "Collection of handy functions for ruby-mode." nil tar "melpa" nil nil nil] [cl-struct-package-desc ruby-tools (0 1 2) "Collection of handy functions for ruby-mode." nil tar "melpa-stable" nil nil nil] [cl-struct-package-desc ruby-tools (0 1 0) "Collection of handy functions for ruby-mode" nil single "marmalade" nil nil nil])
  (rubyinterpol [cl-struct-package-desc rubyinterpol (0 1) "Ruby-like String Interpolation for format" nil single "marmalade" nil nil nil])
  (rust-mode [cl-struct-package-desc rust-mode (20151023 826) "A major emacs mode for editing Rust source code" nil single "melpa" nil ((:url . "https://github.com/rust-lang/rust-mode") (:keywords "languages")) nil] [cl-struct-package-desc rust-mode (0 1 0) "A major emacs mode for editing Rust source code" ((cm-mode (0 1 0))) single "marmalade" nil nil nil])
  (rvm [cl-struct-package-desc rvm (20150402 742) "Emacs integration for rvm" nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/RvmEl") (:keywords "ruby" "rvm")) nil] [cl-struct-package-desc rvm (1 4 0) "Emacs integration for rvm" nil single "melpa-stable" nil ((:url . "http://www.emacswiki.org/emacs/RvmEl") (:keywords "ruby" "rvm")) nil] [cl-struct-package-desc rvm (1 4 0) "Emacs integration for rvm" nil single "marmalade" nil nil nil])
  (rw-hunspell [cl-struct-package-desc rw-hunspell (0 2) "special functions for Hunspell in ispell.el" nil single "marmalade" nil nil nil])
  (rw-ispell [cl-struct-package-desc rw-ispell (0 1) "additional functions for ispell.el" nil single "marmalade" nil nil nil])
  (rw-language-and-country-codes [cl-struct-package-desc rw-language-and-country-codes (0 1) "Language & Country Codes" nil single "marmalade" nil nil nil])
  (s [cl-struct-package-desc s (20150924 406) "The long lost Emacs string manipulation library." nil single "melpa" nil ((:keywords "strings")) nil] [cl-struct-package-desc s (1 10 0) "The long lost Emacs string manipulation library." nil single "melpa-stable" nil ((:keywords "strings")) nil] [cl-struct-package-desc s (1 10 0) "The long lost Emacs string manipulation library." nil single "marmalade" nil nil nil])
  (s-buffer [cl-struct-package-desc s-buffer (20130605 1424) "s operations for buffers" ((s (1 6 0)) (noflet (0 0 3))) single "melpa" nil ((:url . "http://github.com/nicferrier/emacs-s-buffer") (:keywords "lisp")) nil] [cl-struct-package-desc s-buffer (0 0 4) "s operations for buffers" ((s (1 6 0)) (noflet (0 0 3))) single "marmalade" nil nil nil])
  (sackspace [cl-struct-package-desc sackspace (20130719 256) "A better backspace" nil single "melpa" nil ((:url . "http://github.com/cofi/sackspace.el") (:keywords "delete" "convenience")) nil] [cl-struct-package-desc sackspace (0 8 2) "A better backspace" nil single "melpa-stable" nil ((:url . "http://github.com/cofi/sackspace.el") (:keywords "delete" "convenience")) nil] [cl-struct-package-desc sackspace (0 8 2) "A better backspace" nil single "marmalade" nil nil nil])
  (sass-mode [cl-struct-package-desc sass-mode (20150508 2012) "Major mode for editing Sass files" ((haml-mode (3 0 15)) (cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/nex3/haml/tree/master") (:keywords "markup" "language" "css")) nil] [cl-struct-package-desc sass-mode (3 0 18) "Major mode for editing Sass files" ((haml-mode (3 0 15))) single "melpa-stable" nil ((:url . "http://github.com/nex3/haml/tree/master") (:keywords "markup" "language" "css")) nil] [cl-struct-package-desc sass-mode (3 0 16) "Major mode for editing Sass files" ((haml-mode (3 0 15))) single "marmalade" nil nil nil])
  (sauron [cl-struct-package-desc sauron (20150614 46) "Track (erc/org/dbus/...) events and react to them." nil tar "melpa" nil nil nil] [cl-struct-package-desc sauron (0 10) "Track (erc/org/dbus/...) events and react to them." nil tar "melpa-stable" nil nil nil] [cl-struct-package-desc sauron (0 8) "Track (erc/org/dbus/...) events and react to them." nil tar "marmalade" nil nil nil])
  (save-packages [cl-struct-package-desc save-packages (0 20121012) "save and restore installed packages" nil single "marmalade" nil nil nil])
  (save-visited-files [cl-struct-package-desc save-visited-files (20151021 1043) "save opened files across sessions" nil single "melpa" nil ((:url . "http://github.com/nflath/save-visited-files")) nil] [cl-struct-package-desc save-visited-files (1 2) "save opened files across sessions" nil single "marmalade" nil nil nil])
  (sawfish [cl-struct-package-desc sawfish (1 32) "Sawfish mode." nil single "marmalade" nil nil nil])
  (scala-mode [cl-struct-package-desc scala-mode (20141205 1251) "Major mode for editing Scala code." nil tar "melpa" nil ((:keywords "scala" "languages" "oop")) nil] [cl-struct-package-desc scala-mode (0 0 2) "Scala major mode" nil tar "marmalade" nil nil nil])
  (scheme-here [cl-struct-package-desc scheme-here (20141028 18) "cmuscheme extension for multiple inferior processes" nil single "melpa" nil ((:url . "https://github.com/kaihaosw/scheme-here") (:keywords "scheme")) nil] [cl-struct-package-desc scheme-here (12 8 2008) "cmuscheme extension for multiple inferior processes" nil single "marmalade" nil nil nil])
  (scpaste [cl-struct-package-desc scpaste (20110617 1156) "Paste to the web via scp." ((htmlfontify (0 21))) single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/SCPaste") (:keywords "convenience" "hypermedia")) nil] [cl-struct-package-desc scpaste (0 6 3) "Paste to the web via scp." ((htmlize (1 39))) single "marmalade" nil nil nil])
  (scratch [cl-struct-package-desc scratch (20120830 1028) "Mode-specific scratch buffers" nil tar "melpa" nil ((:keywords "editing")) nil] [cl-struct-package-desc scratch (20110708) "Mode-specific scratch buffers" nil single "marmalade" nil nil nil])
  (scratch-palette [cl-struct-package-desc scratch-palette (20150225 42) "make scratch buffer for each files" ((popwin (0 7 0 -3))) single "melpa" nil ((:url . "http://hins11.yu-yake.com/")) nil] [cl-struct-package-desc scratch-palette (1 0 1) "add scratch notes for each file" nil single "marmalade" nil nil nil])
  (scratch-persist [cl-struct-package-desc scratch-persist (1 1) "persist the scratch buffer across sessions" nil single "marmalade" nil nil nil])
  (scratch-pop [cl-struct-package-desc scratch-pop (20150820 139) "Generate, popup (& optionally backup) scratch buffer(s)." ((popwin (0 7 0 -3))) single "melpa" nil ((:url . "http://hins11.yu-yake.com/")) nil] [cl-struct-package-desc scratch-pop (1 0 0) "popup scratch" nil single "marmalade" nil nil nil])
  (screen-lines [cl-struct-package-desc screen-lines (0 55) "a minor mode for screen-line-based point motion" nil single "marmalade" nil nil nil])
  (scrolloff [cl-struct-package-desc scrolloff (1 0) "This mode ofers vim-like scrolloff function" nil single "marmalade" nil nil nil])
  (scss-mode [cl-struct-package-desc scss-mode (20150107 1400) "Major mode for editing SCSS files" nil single "melpa" nil ((:url . "https://github.com/antonj/scss-mode") (:keywords "scss" "css" "mode")) nil] [cl-struct-package-desc scss-mode (0 5 0) "Major mode for editing SCSS files" nil single "melpa-stable" nil ((:url . "https://github.com/antonj/scss-mode") (:keywords "scss" "css" "mode")) nil] [cl-struct-package-desc scss-mode (0 5 0) "Major mode for editing SCSS files" nil single "marmalade" nil nil nil])
  (sea-before-storm-theme [cl-struct-package-desc sea-before-storm-theme (0 4 20141114) "Sea Before Storm color theme for Emacs 24" nil single "marmalade" nil nil nil])
  (seclusion-mode [cl-struct-package-desc seclusion-mode (20121118 1553) "Edit in seclusion. A Dark Room mode." nil single "melpa" nil ((:url . "http://github.com/dleslie/seclusion-mode")) nil] [cl-struct-package-desc seclusion-mode (1 1 1) "Edit in seclusion. A Dark Room mode." nil single "marmalade" nil nil nil])
  (sedated [cl-struct-package-desc sedated (1 0) "A few extremely simple sed functions for familiar text manipulation" nil single "marmalade" nil nil nil])
  (seethru [cl-struct-package-desc seethru (20150218 1029) "Easily change Emacs' transparency" ((shadchen (1 4))) single "melpa" nil ((:url . "http://github.com/benaiah/seethru") (:keywords "lisp" "tools" "alpha" "transparency")) nil] [cl-struct-package-desc seethru (0 3) "Easily change Emacs' transparency" ((shadchen (1 4))) single "marmalade" nil nil nil])
  (sensitive [cl-struct-package-desc sensitive (20131015 635) "A dead simple way to load sensitive information" ((emacs (24)) (sequences (0 1 0))) single "melpa" nil ((:keywords "convenience")) nil] [cl-struct-package-desc sensitive (1 0 1) "A dead simple way to load sensitive information" ((emacs (24)) (sequences (0 1 0))) single "marmalade" nil nil nil])
  (sentence-highlight [cl-struct-package-desc sentence-highlight (20121026 750) "highlight the current sentence" nil single "melpa" nil ((:keywords "plain text" "writing" "highlight" "editing" "focus")) nil] [cl-struct-package-desc sentence-highlight (0 1) "highlight the current sentence" nil single "marmalade" nil nil nil])
  (sequence [cl-struct-package-desc sequence (0 0 1) "makes sequences of numbers" nil single "marmalade" nil nil nil])
  (sequences [cl-struct-package-desc sequences (20130908 1122) "Ports of some Clojure sequence functions." ((emacs (24))) single "melpa" nil ((:keywords "convenience")) nil] [cl-struct-package-desc sequences (0 1 0) "Ports of some Clojure sequence functions." ((emacs (24))) single "marmalade" nil nil nil])
  (session [cl-struct-package-desc session (20120510 1700) "use variables, registers and buffer places across sessions" nil single "melpa" nil ((:url . "http://emacs-session.sourceforge.net/") (:keywords "session" "session management" "desktop" "data" "tools")) nil] [cl-struct-package-desc session (2 3 1) "use variables, registers and buffer places across sessions" nil single "melpa-stable" nil ((:url . "http://emacs-session.sourceforge.net/") (:keywords "session" "session management" "desktop" "data" "tools")) nil] [cl-struct-package-desc session (2 2 1) "use variables, registers and buffer places across sessions" nil single "marmalade" nil nil nil])
  (session-manager [cl-struct-package-desc session-manager (0 5) "Support for the Gnome Session Manager" nil single "marmalade" nil nil nil])
  (setup-cygwin [cl-struct-package-desc setup-cygwin (21 0) "Set up Emacs for using Cygwin" nil single "marmalade" nil nil nil])
  (shackle [cl-struct-package-desc shackle (20150902 2333) "Enforce rules for popups" ((cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/wasamasa/shackle") (:keywords "convenience")) nil] [cl-struct-package-desc shackle (0 7 0) "Enforce rules for popups" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/wasamasa/shackle") (:keywords "convenience")) nil] [cl-struct-package-desc shackle (0 7 0) "Enforce rules for popups" ((cl-lib (0 5))) single "marmalade" nil nil nil])
  (shadchen [cl-struct-package-desc shadchen (20141102 1039) "pattern matching for elisp" nil single "melpa" nil nil nil] [cl-struct-package-desc shadchen (1 4) "pattern matching for elisp" nil single "marmalade" nil nil nil])
  (shell-here [cl-struct-package-desc shell-here (20150728 1004) "Open a shell relative to the working directory" nil single "melpa" nil ((:keywords "unix" "tools" "processes")) nil] [cl-struct-package-desc shell-here (1 3) "Open a shell relative to the working directory" nil single "marmalade" nil nil nil])
  (shell-pop [cl-struct-package-desc shell-pop (20151013 626) "helps you to use shell easily on Emacs. Only one key action to work." ((emacs (24))) single "melpa" nil ((:url . "http://github.com/kyagi/shell-pop-el") (:keywords "shell" "terminal" "tools")) nil] [cl-struct-package-desc shell-pop (0 62) "helps you to use shell easily on Emacs. Only one key action to work." ((emacs (24))) single "melpa-stable" nil ((:url . "http://github.com/kyagi/shell-pop-el") (:keywords "shell" "terminal" "tools")) nil] [cl-struct-package-desc shell-pop (0 3) "helps you to use shell easily on Emacs. Only one key action to work." nil single "marmalade" nil nil nil])
  (shell-switcher [cl-struct-package-desc shell-switcher (20151011 615) "Provide fast switching between shell buffers." nil tar "melpa" nil nil nil] [cl-struct-package-desc shell-switcher (1 0 1) "Provide fast switching between shell buffers." nil tar "melpa-stable" nil nil nil] [cl-struct-package-desc shell-switcher (0 1 5 1) "Easily switch between shell buffers, like with alt+tab." nil tar "marmalade" nil nil nil])
  (shoes-off [cl-struct-package-desc shoes-off (0 1 8) "irc bouncer" ((kv (0 0 5)) (anaphora (0 0 4))) single "marmalade" nil nil nil])
  (shorten [cl-struct-package-desc shorten (1 6) "component-wise string shortener" nil single "marmalade" nil nil nil])
  (show-css [cl-struct-package-desc show-css (20140816 1008) "Show the css of the html attribute the cursor is on" ((dom (1 0 1))) tar "melpa" nil ((:url . "https://github.com/smmcg/showcss-mode") (:keywords "hypermedia")) nil] [cl-struct-package-desc show-css (1 1) "Show the css of the html attribute the cursor is on" nil single "marmalade" nil nil nil])
  (show-marks [cl-struct-package-desc show-marks (20130805 749) "Navigate and visualize the mark-ring" ((fm (1 0))) single "melpa" nil ((:url . "https://github.com/vapniks/mark") (:keywords "convenience")) nil] [cl-struct-package-desc show-marks (0 4) "Navigate and visualize the mark-ring" ((fm (1 0))) single "marmalade" nil nil nil])
  (simp [cl-struct-package-desc simp (20150427 932) "Simple project definition, chiefly for file finding, and grepping" nil tar "melpa" nil ((:url . "https://github.com/re5et/simp") (:keywords "project" "grep" "find")) nil] [cl-struct-package-desc simp (0 2 0) "Simple project definition, chiefly for project file finding and grepping." nil tar "marmalade" nil nil nil])
  (simple-httpd [cl-struct-package-desc simple-httpd (20150430 1755) "pure elisp HTTP server" ((cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/skeeto/emacs-http-server")) nil] [cl-struct-package-desc simple-httpd (1 4 6) "pure elisp HTTP server" ((cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/skeeto/emacs-http-server")) nil] [cl-struct-package-desc simple-httpd (1 4 6) "pure elisp HTTP server" ((cl-lib (0 3))) single "marmalade" nil nil nil])
  (simple-mode-line [cl-struct-package-desc simple-mode-line (0 3) "Simplified Mode Line for Emacs 24" nil single "marmalade" nil nil nil])
  (simpleclip [cl-struct-package-desc simpleclip (20150804 1010) "Simplified access to the system clipboard" nil single "melpa" nil ((:url . "http://github.com/rolandwalker/simpleclip") (:keywords "convenience")) nil] [cl-struct-package-desc simpleclip (1 0 0) "Simplified access to the system clipboard" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/simpleclip") (:keywords "convenience")) nil] [cl-struct-package-desc simpleclip (1 0 0) "Simplified access to the system clipboard" nil single "marmalade" nil nil nil])
  (simplezen [cl-struct-package-desc simplezen (20130421 300) "A simple subset of zencoding-mode for Emacs." ((s (1 4 0)) (dash (1 1 0))) single "melpa" nil nil nil] [cl-struct-package-desc simplezen (0 1 1) "A simple subset of zencoding-mode for Emacs." nil single "melpa-stable" nil nil nil] [cl-struct-package-desc simplezen (0 1 1) "A simple subset of zencoding-mode for Emacs." nil single "marmalade" nil nil nil])
  (skewer-less [cl-struct-package-desc skewer-less (20131015 622) "Skewer support for live LESS stylesheet updates" ((skewer-mode (1 5 3))) single "melpa" nil ((:keywords "languages" "tools")) nil] [cl-struct-package-desc skewer-less (0 2) "Skewer support for live LESS stylesheet updates" ((skewer-mode (1 5 3))) single "melpa-stable" nil ((:keywords "languages" "tools")) nil] [cl-struct-package-desc skewer-less (0 2) "Skewer support for live LESS stylesheet updates" ((skewer-mode (1 5 3))) single "marmalade" nil nil nil])
  (skewer-mode [cl-struct-package-desc skewer-mode (20150914 1304) "live browser JavaScript, CSS, and HTML interaction" ((simple-httpd (1 4 0)) (js2-mode (20090723)) (emacs (24))) tar "melpa" nil nil nil] [cl-struct-package-desc skewer-mode (1 6 2) "live browser JavaScript, CSS, and HTML interaction" ((simple-httpd (1 4 0)) (js2-mode (20090723)) (emacs (24))) tar "melpa-stable" nil nil nil] [cl-struct-package-desc skewer-mode (1 6 2) "live browser JavaScript, CSS, and HTML interaction" ((simple-httpd (1 4 0)) (js2-mode (20090723)) (emacs (24))) tar "marmalade" nil nil nil])
  (skinny [cl-struct-package-desc skinny (0 0 6) "a blog engine with elnode" ((elnode (0 9 9 6 1)) (creole (0 8 17))) single "marmalade" nil nil nil])
  (slamhound [cl-struct-package-desc slamhound (20140506 1618) "Rip Clojure namespaces apart and rebuild them." nil single "melpa" nil ((:url . "https://github.com/technomancy/slamhound") (:keywords "tools" "lisp")) nil] [cl-struct-package-desc slamhound (2 0 0) "Rip Clojure namespaces apart and rebuild them." nil single "marmalade" nil nil nil] [cl-struct-package-desc slamhound (1 5 4) "Rip Clojure namespaces apart and rebuild them." nil single "melpa-stable" nil ((:url . "https://github.com/technomancy/slamhound") (:keywords "tools" "lisp")) nil])
  (slim-mode [cl-struct-package-desc slim-mode (20140611 950) "Major mode for editing Slim files" nil single "melpa" nil ((:url . "http://github.com/slim-template/emacs-slim") (:keywords "markup" "language")) nil] [cl-struct-package-desc slim-mode (1 1) "Major mode for editing Slim files" nil single "melpa-stable" nil ((:url . "http://github.com/minad/emacs-slim") (:keywords "markup" "language")) nil] [cl-struct-package-desc slim-mode (1 1) "Major mode for editing Slim files" nil single "marmalade" nil nil nil])
  (slime [cl-struct-package-desc slime (20151110 1649) "Superior Lisp Interaction Mode for Emacs" ((cl-lib (0 5))) tar "melpa" nil ((:url . "https://github.com/slime/slime") (:keywords "languages" "lisp" "slime")) nil] [cl-struct-package-desc slime (20100404 1) "Superior Lisp Interaction Mode for Emacs" nil single "marmalade" nil nil nil] [cl-struct-package-desc slime (2 15) "Superior Lisp Interaction Mode for Emacs" ((cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/slime/slime") (:keywords "languages" "lisp" "slime")) nil])
  (slime-clj [cl-struct-package-desc slime-clj (0 1 6) "slime extensions for swank-clj" nil single "marmalade" nil nil nil])
  (slime-fuzzy [cl-struct-package-desc slime-fuzzy (20100404) "Fuzzy symbol completion for Slime" ((slime (20100404))) single "marmalade" nil nil nil])
  (slime-js [cl-struct-package-desc slime-js (0 0 1) "Slime extension for swank-js." ((slime-repl (20100404)) (slime (20100404))) single "marmalade" nil nil nil])
  (slime-repl [cl-struct-package-desc slime-repl (20100404) "Read-Eval-Print Loop written in Emacs Lisp" ((slime (20100404))) single "marmalade" nil nil nil])
  (slime-ritz [cl-struct-package-desc slime-ritz (20130218 1537) "slime extensions for ritz" nil single "melpa" nil ((:url . "https://github.com/pallet/ritz") (:keywords "languages" "lisp" "slime")) nil] [cl-struct-package-desc slime-ritz (0 6 0) "slime extensions for ritz" nil single "melpa-stable" nil ((:url . "https://github.com/pallet/ritz") (:keywords "languages" "lisp" "slime")) nil] [cl-struct-package-desc slime-ritz (0 6 0) "slime extensions for ritz" nil single "marmalade" nil nil nil])
  (slime-scratch [cl-struct-package-desc slime-scratch (1 0 0) "Imitate Emacs' *scratch* buffer" ((slime (20100404))) single "marmalade" nil nil nil])
  (slough [cl-struct-package-desc slough (0 1) "package for slough - this is for a secret TW thing" ((nrepl (0 1 7)) (smartparens (1 4 3))) single "marmalade" nil nil nil])
  (smart-forward [cl-struct-package-desc smart-forward (20140430 13) "Semantic navigation" ((expand-region (0 8 0))) single "melpa" nil ((:keywords "navigation")) nil] [cl-struct-package-desc smart-forward (1 0 0) "Semantic navigatioin" ((expand-region (0 8 0))) single "marmalade" nil nil nil])
  (smart-operator [cl-struct-package-desc smart-operator (20051013 1056) "Beautify the operators in codes" nil single "melpa" nil nil nil] [cl-struct-package-desc smart-operator (2 0 20110812) "Insert operators with surrounding spaces smartly" nil single "marmalade" nil nil nil])
  (smart-tab [cl-struct-package-desc smart-tab (20150703 917) "Intelligent tab completion and indentation." nil single "melpa" nil ((:url . "http://github.com/genehack/smart-tab/tree/master") (:keywords "extensions")) nil] [cl-struct-package-desc smart-tab (0 3) "Intelligent tab completion and indentation." nil single "marmalade" nil nil nil])
  (smart-whitespace-comment-fixup [cl-struct-package-desc smart-whitespace-comment-fixup (1 1) "Enables advice around yanking/killing lines that auto-indents and formats properly" nil single "marmalade" nil nil nil])
  (smart-window [cl-struct-package-desc smart-window (20130214 1142) "vim-like window controlling plugin" nil single "melpa" nil ((:url . "https://github.com/dryman/smart-window.el") (:keywords "window")) nil] [cl-struct-package-desc smart-window (0 6) "vim-like window controlling plugin" nil single "marmalade" nil nil nil])
  (smarter-compile [cl-struct-package-desc smarter-compile (2012 4 9) "a smarter wrapper for `compile'" nil single "marmalade" nil nil nil])
  (smartparens [cl-struct-package-desc smartparens (20151113 949) "Automatic insertion, wrapping and paredit-like navigation with user defined pairs." ((cl-lib (0 3)) (dash (2 10 0))) tar "melpa" nil nil nil] [cl-struct-package-desc smartparens (1 6 3) "Automatic insertion, wrapping and paredit-like navigation with user defined pairs." ((cl-lib (0 3)) (dash (2 6 0))) tar "melpa-stable" nil nil nil] [cl-struct-package-desc smartparens (1 4) "Automatic insertion, wrapping and paredit-like navigation with user defined pairs." ((dash (1 1 0))) tar "marmalade" nil nil nil])
  (smartrep [cl-struct-package-desc smartrep (20150508 1930) "Support sequential operation which omitted prefix keys." nil single "melpa" nil ((:url . "https://github.com/myuhe/smartrep.el") (:keywords "convenience")) nil] [cl-struct-package-desc smartrep (1 0 0) "Support sequential operation which omitted prefix keys." nil single "melpa-stable" nil ((:url . "https://github.com/myuhe/smartrep.el") (:keywords "convenience")) nil] [cl-struct-package-desc smartrep (0 0 3) "Support sequential operation which omitted prefix keys." nil single "marmalade" nil nil nil])
  (smex [cl-struct-package-desc smex (20150822 1146) "M-x interface with Ido-style fuzzy matching." ((emacs (24))) single "melpa" nil ((:url . "http://github.com/nonsequitur/smex/") (:keywords "convenience" "usability")) nil] [cl-struct-package-desc smex (3 0) "M-x interface with Ido-style fuzzy matching." nil single "melpa-stable" nil ((:url . "http://github.com/nonsequitur/smex/") (:keywords "convenience" "usability")) nil] [cl-struct-package-desc smex (3 0) "M-x interface with Ido-style fuzzy matching." nil single "marmalade" nil nil nil])
  (sml-modeline [cl-struct-package-desc sml-modeline (20120110 1240) "Show position in a scrollbar like way in mode-line" nil single "melpa" nil ((:url . "http://bazaar.launchpad.net/~nxhtml/nxhtml/main/annotate/head%3A/util/sml-modeline.el")) nil] [cl-struct-package-desc sml-modeline (0 5) "Show position in a scrollbar like way in mode-line" nil single "marmalade" nil nil nil])
  (smooth-scroll [cl-struct-package-desc smooth-scroll (20130321 2114) "Minor mode for smooth scrolling and in-place scrolling." nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/smooth-scroll.el") (:keywords "convenience" "emulations" "frames")) nil] [cl-struct-package-desc smooth-scroll (1 2) "Minor mode for smooth scrolling and in-place scrolling." nil single "marmalade" nil nil nil])
  (smooth-scrolling [cl-struct-package-desc smooth-scrolling (20131219 2039) "Make emacs scroll smoothly" nil single "melpa" nil ((:url . "http://github.com/aspiers/smooth-scrolling/") (:keywords "convenience")) nil] [cl-struct-package-desc smooth-scrolling (1 0 4) "Make emacs scroll smoothly" nil single "melpa-stable" nil ((:url . "http://github.com/aspiers/smooth-scrolling/") (:keywords "convenience")) nil] [cl-struct-package-desc smooth-scrolling (1 0 1) "Make emacs scroll smoothly" nil single "marmalade" nil nil nil])
  (smtpmail-multi [cl-struct-package-desc smtpmail-multi (20130921 2042) "Use different smtp servers for sending mail" nil single "melpa" nil ((:url . "https://github.com/vapniks/smtpmail-multi") (:keywords "comm")) nil] [cl-struct-package-desc smtpmail-multi (0 6) "Use different smtp servers for sending mail" nil single "marmalade" nil nil nil])
  (snakehump [cl-struct-package-desc snakehump (0 1 1) "Convert between compound word conventions" nil tar "marmalade" nil nil nil])
  (solarized-theme [cl-struct-package-desc solarized-theme (20151029 1029) "The Solarized color theme, ported to Emacs." ((cl-lib (0 5)) (dash (2 6 0))) tar "melpa" nil nil nil] [cl-struct-package-desc solarized-theme (1 2 2) "The Solarized color theme, ported to Emacs." ((dash (2 6 0))) tar "melpa-stable" nil nil nil] [cl-struct-package-desc solarized-theme (1 0 0) "The Solarized color theme, ported to Emacs." nil tar "marmalade" nil nil nil])
  (soothe-theme [cl-struct-package-desc soothe-theme (20141027 741) "a dark colorful theme for Emacs24." ((emacs (24 1))) single "melpa" nil ((:url . "https://github.com/jasonm23/emacs-soothe-theme")) nil] [cl-struct-package-desc soothe-theme (0 3 16) "a dark colorful theme for Emacs24." ((emacs (24 1))) single "marmalade" nil nil nil])
  (sourcetalk [cl-struct-package-desc sourcetalk (20140823 739) "SourceTalk (http://sourcetalk.net) plugin for Emacs" ((request (0 2 0))) single "melpa" nil ((:url . "https://github.com/malroc/sourcetalk_emacs") (:keywords "sourcetalk" "code" "discussion")) nil] [cl-struct-package-desc sourcetalk (1 2 0) "SourceTalk (http://sourcetalk.net) plugin for Emacs" ((request (0 2 0))) single "melpa-stable" nil ((:url . "https://github.com/malroc/sourcetalk_emacs") (:keywords "sourcetalk" "code" "discussion")) nil] [cl-struct-package-desc sourcetalk (1 2 0) "SourceTalk (http://sourcetalk.net) plugin for Emacs" ((request (0 2 0))) single "marmalade" nil nil nil])
  (sparkline [cl-struct-package-desc sparkline (20150101 519) "Make sparkline images from a list of numbers" ((cl-lib (0 3))) single "melpa" nil ((:keywords "extensions")) nil] [cl-struct-package-desc sparkline (1 0 2) "Make sparkline images from a list of numbers" ((cl-lib (0 3))) single "melpa-stable" nil ((:keywords "extensions")) nil] [cl-struct-package-desc sparkline (1 0 2) "Make sparkline images from a list of numbers" ((cl-lib (0 3))) single "marmalade" nil nil nil])
  (sparql-mode [cl-struct-package-desc sparql-mode (20151104 914) "Edit and interactively evaluate SPARQL queries." ((cl-lib (0 5))) tar "melpa" nil ((:url . "https://github.com/ljos/sparql-mode")) nil] [cl-struct-package-desc sparql-mode (0 11 2) "Edit and interactively evaluate SPARQL queries." ((cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/ljos/sparql-mode")) nil] [cl-struct-package-desc sparql-mode (0 8 4) "Edit and interactively evaluate SPARQL queries." nil tar "marmalade" nil nil nil])
  (speck [cl-struct-package-desc speck (20140901 1135) "minor mode for spell checking" nil single "melpa" nil ((:keywords "spell" "checking")) nil] [cl-struct-package-desc speck (2010 5 25) "minor mode for spell checking" nil single "marmalade" nil nil nil])
  (spotify [cl-struct-package-desc spotify (20150108 803) "Control the spotify application from emacs" nil single "melpa" nil ((:url . "https://github.com/remvee/spotify-el") (:keywords "convenience")) nil] [cl-struct-package-desc spotify (0 3 2) "Control the spotify application from emacs" nil single "melpa-stable" nil ((:url . "https://github.com/remvee/spotify-el") (:keywords "convenience")) nil] [cl-struct-package-desc spotify (0 3) "Control the spotify application from emacs" nil single "marmalade" nil nil nil])
  (sprintly-mode [cl-struct-package-desc sprintly-mode (20121005 2234) "Major mode for dealing with sprint.ly" ((furl (0 0 2))) single "melpa" nil ((:url . "https://github.com/sprintly/sprintly-mode")) nil] [cl-struct-package-desc sprintly-mode (0 0 4) "Major mode for dealing with sprint.ly" ((furl (0 0 2))) single "melpa-stable" nil ((:url . "https://github.com/sprintly/sprintly-mode")) nil] [cl-struct-package-desc sprintly-mode (0 0 4) "Major mode for dealing with sprint.ly" ((furl (0 0 2))) single "marmalade" nil nil nil])
  (sql-indent [cl-struct-package-desc sql-indent (20150424 1716) "indentation of SQL statements" nil single "melpa" nil ((:url . "https://github.com/bsvingen/sql-indent") (:keywords "languages")) nil] [cl-struct-package-desc sql-indent (1 10) "indentation of SQL statements" nil single "marmalade" nil nil nil])
  (sr-speedbar [cl-struct-package-desc sr-speedbar (20150804 951) "Same frame speedbar" nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/sr-speedbar.el") (:keywords "speedbar" "sr-speedbar.el")) nil] [cl-struct-package-desc sr-speedbar (0 1 8) "Same frame speedbar" nil single "marmalade" nil nil nil])
  (ssh [cl-struct-package-desc ssh (20120904 1342) "Support for remote logins using ssh." nil single "melpa" nil ((:keywords "unix" "comm")) nil] [cl-struct-package-desc ssh (1 2) "Support for remote logins using ssh." nil single "marmalade" nil nil nil])
  (ssh-file-modes [cl-struct-package-desc ssh-file-modes (1 20150626) "major modes for ssh authorized_keys and known_hosts files" nil single "marmalade" nil nil nil])
  (starter-kit [cl-struct-package-desc starter-kit (20130904 1547) "Saner defaults and goodies." ((paredit (22)) (idle-highlight-mode (1 1 1)) (find-file-in-project (3 0)) (smex (1 1 2)) (ido-ubiquitous (0 3)) (magit (0 8 1))) tar "melpa" nil nil nil] [cl-struct-package-desc starter-kit (2 0 3) "Saner defaults and goodies." ((paredit (22)) (idle-highlight-mode (1 1 1)) (find-file-in-project (3 0)) (smex (1 1 1)) (ido-ubiquitous (0 3)) (magit (0 8 1))) tar "melpa-stable" nil nil nil] [cl-struct-package-desc starter-kit (2 0 3) "Saner defaults and goodies." ((paredit (22)) (idle-highlight-mode (1 1 1)) (find-file-in-project (3 0)) (smex (1 1 1)) (ido-ubiquitous (0 3)) (magit (0 8 1))) tar "marmalade" nil nil nil])
  (starter-kit-bindings [cl-struct-package-desc starter-kit-bindings (20120101 1955) "Saner defaults and goodies: bindings" ((starter-kit (2 0 2))) single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience")) nil] [cl-struct-package-desc starter-kit-bindings (2 0 3) "Saner defaults and goodies: bindings" ((starter-kit (2 0 2))) single "melpa-stable" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience")) nil] [cl-struct-package-desc starter-kit-bindings (2 0 2) "Saner defaults and goodies: bindings" ((starter-kit (2 0 2))) single "marmalade" nil nil nil])
  (starter-kit-eshell [cl-struct-package-desc starter-kit-eshell (20121001 1714) "Saner defaults and goodies: eshell tweaks" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience")) nil] [cl-struct-package-desc starter-kit-eshell (2 0 3) "Saner defaults and goodies: eshell tweaks" nil single "melpa-stable" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience")) nil] [cl-struct-package-desc starter-kit-eshell (2 0 3) "Saner defaults and goodies: eshell tweaks" nil single "marmalade" nil nil nil])
  (starter-kit-js [cl-struct-package-desc starter-kit-js (20111009 2054) "Saner defaults and goodies for Javascript" ((starter-kit (2 0 1))) single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience")) nil] [cl-struct-package-desc starter-kit-js (2 0 3) "Saner defaults and goodies for Javascript" ((starter-kit (2 0 1))) single "melpa-stable" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience")) nil] [cl-struct-package-desc starter-kit-js (2 0 1) "Saner defaults and goodies for Javascript" ((starter-kit (2 0 1))) single "marmalade" nil nil nil])
  (starter-kit-lisp [cl-struct-package-desc starter-kit-lisp (20120504 1225) "Saner defaults and goodies for lisp languages" ((starter-kit (2 0 2)) (elisp-slime-nav (0 1))) single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience")) nil] [cl-struct-package-desc starter-kit-lisp (2 0 3) "Saner defaults and goodies for lisp languages" ((starter-kit (2 0 2)) (elisp-slime-nav (0 1))) single "melpa-stable" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience")) nil] [cl-struct-package-desc starter-kit-lisp (2 0 3) "Saner defaults and goodies for lisp languages" ((starter-kit (2 0 2)) (elisp-slime-nav (0 1))) single "marmalade" nil nil nil])
  (starter-kit-ruby [cl-struct-package-desc starter-kit-ruby (20120202 1132) "Saner defaults and goodies for Ruby" ((inf-ruby (2 2 3)) (starter-kit (2 0 1))) single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience")) nil] [cl-struct-package-desc starter-kit-ruby (2 0 3) "Saner defaults and goodies for Ruby" ((inf-ruby (2 2 1)) (starter-kit (2 0 1))) single "melpa-stable" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience")) nil] [cl-struct-package-desc starter-kit-ruby (2 0 3) "Saner defaults and goodies for Ruby" ((inf-ruby (2 2 3)) (starter-kit (2 0 1))) single "marmalade" nil nil nil])
  (steady-theme [cl-struct-package-desc steady-theme (0 1 0) "A steady theme for Emacs" nil single "marmalade" nil nil nil])
  (string-edit [cl-struct-package-desc string-edit (20151105 304) "Avoid escape nightmares by editing string in separate buffer" ((dash (1 2 0))) single "melpa" nil nil nil] [cl-struct-package-desc string-edit (0 1 0) "Avoid escape nightmares by editing string in separate buffer" ((dash (1 2 0))) single "melpa-stable" nil nil nil] [cl-struct-package-desc string-edit (0 1 0) "Avoid escape nightmares by editing string in separate buffer" ((dash (1 2 0))) single "marmalade" nil nil nil])
  (string-utils [cl-struct-package-desc string-utils (20140508 1341) "String-manipulation utilities" ((list-utils (0 4 2))) single "melpa" nil ((:url . "http://github.com/rolandwalker/string-utils") (:keywords "extensions")) nil] [cl-struct-package-desc string-utils (0 3 2) "String-manipulation utilities" ((list-utils (0 4 2))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/string-utils") (:keywords "extensions")) nil] [cl-struct-package-desc string-utils (0 3 2) "String-manipulation utilities" ((list-utils (0 4 2))) single "marmalade" nil nil nil])
  (stripe-buffer [cl-struct-package-desc stripe-buffer (20141208 708) "Use a different background for even and odd lines" ((cl-lib (1 0))) single "melpa" nil ((:url . "https://github.com/sabof/stripe-buffer")) nil] [cl-struct-package-desc stripe-buffer (0 2 5) "Use a different background for even and odd lines" ((cl-lib (1 0))) single "melpa-stable" nil ((:url . "https://github.com/sabof/stripe-buffer")) nil] [cl-struct-package-desc stripe-buffer (0 2 2) "Use a different background for even and odd lines" ((cl-lib (1 0))) single "marmalade" nil nil nil])
  (stylus-mode [cl-struct-package-desc stylus-mode (20150313 812) "Major mode for editing .jade files" ((sws-mode (0))) single "melpa" nil ((:url . "https://github.com/brianc/jade-mode")) nil] [cl-struct-package-desc stylus-mode (1 0 0) "Major mode for editing .jade files" ((sws-mode (0))) single "melpa-stable" nil ((:url . "https://github.com/brianc/jade-mode")) nil] [cl-struct-package-desc stylus-mode (0 1) "Major mode for editing stylus templates." nil single "marmalade" nil nil nil])
  (subatomic-theme [cl-struct-package-desc subatomic-theme (20150704 809) "Low contrast bluish color theme" nil single "melpa" nil ((:url . "https://github.com/cryon/subatomic") (:keywords "color-theme" "blue" "low contrast")) nil] [cl-struct-package-desc subatomic-theme (1 6 0) "Low contrast bluish color theme" nil single "marmalade" nil nil nil])
  (sublime [cl-struct-package-desc sublime (0 0 7) "REQUIRES EMACS 24 - Sublime Text 2 Emulation for Emacs" ((coffee-mode (0 3 0)) (find-file-in-project (3 0)) (haml-mode (3 0 14)) (ido-ubiquitous (1 0)) (less-css-mode (0 6)) (magit (1 1 1)) (markdown-mode (1 8 1)) (monokai-theme (0 0 6)) (paredit (22)) (sass-mode (3 0 14)) (smex (1 1 2)) (yaml-mode (0 0 7)) (yasnippet (0 6 1))) tar "marmalade" nil nil nil])
  (subshell-proc [cl-struct-package-desc subshell-proc (20130122 1322) "Functions for working with comints" nil single "melpa" nil ((:url . "https://github.com/andrewmains12/subshell-proc")) nil] [cl-struct-package-desc subshell-proc (1 0 0) "Functions for working with comints" nil single "marmalade" nil nil nil] [cl-struct-package-desc subshell-proc (0 1) "Functions for working with comints" nil single "melpa-stable" nil ((:url . "https://github.com/andrewmains12/subshell-proc")) nil])
  (sudden-death [cl-struct-package-desc sudden-death (20140829 538) "Totsuzen-no-Shi" nil single "melpa" nil ((:url . "https://github.com/yewton/sudden-death.el")) nil] [cl-struct-package-desc sudden-death (0 2) "Totsuzen-no-Shi" nil single "melpa-stable" nil ((:url . "https://github.com/yewton/sudden-death.el")) nil] [cl-struct-package-desc sudden-death (0 1) "Totsuzen-no-Shi" nil single "marmalade" nil nil nil])
  (sudo-edit [cl-struct-package-desc sudo-edit (0 0 1) "Utilities for opening files with sudo" nil single "marmalade" nil nil nil])
  (sumatra-forward [cl-struct-package-desc sumatra-forward (2008 10 8) "Provides Sumatra Forward search" nil single "marmalade" nil nil nil])
  (suomalainen-kalenteri [cl-struct-package-desc suomalainen-kalenteri (20140614 2350) "Finnish national and Christian holidays for calendar" nil tar "melpa" nil nil nil] [cl-struct-package-desc suomalainen-kalenteri (2014 6 15) "Finnish national and Christian holidays for calendar" nil tar "melpa-stable" nil nil nil] [cl-struct-package-desc suomalainen-kalenteri (2013 4 18) "Finnish national and Christian holidays for calendar" nil tar "marmalade" nil nil nil])
  (supergenpass [cl-struct-package-desc supergenpass (20130328 2248) "SuperGenPass for Emacs" nil single "melpa" nil ((:keywords "supergenpass")) nil] [cl-struct-package-desc supergenpass (0 1) "SuperGenPass for Emacs" nil single "marmalade" nil nil nil])
  (surround [cl-struct-package-desc surround (0 1) "emulate surround.vim from Vim" nil single "marmalade" nil nil nil])
  (swank-cdt [cl-struct-package-desc swank-cdt (1 0 1) "swank-cdt helper functions" nil single "marmalade" nil nil nil])
  (swarmhacker [cl-struct-package-desc swarmhacker (0 0 1) "simple swarm chat" nil single "marmalade" nil nil nil])
  (switch-window [cl-struct-package-desc switch-window (20150114 215) "A *visual* way to choose a window to switch to" nil single "melpa" nil ((:url . "http://tapoueh.org/emacs/switch-window.html") (:keywords "window" "navigation")) nil] [cl-struct-package-desc switch-window (0 9) "A *visual* way to choose a window to switch to" nil single "marmalade" nil nil nil])
  (sws-mode [cl-struct-package-desc sws-mode (20150317 1245) "(S)ignificant (W)hite(S)pace mode" nil single "melpa" nil ((:url . "https://github.com/brianc/jade-mode")) nil] [cl-struct-package-desc sws-mode (1 0 0) "(S)ignificant (W)hite(S)pace mode" nil single "melpa-stable" nil ((:url . "https://github.com/brianc/jade-mode")) nil] [cl-struct-package-desc sws-mode (0 1) "SWS mode" nil single "marmalade" nil nil nil])
  (symbols-mode [cl-struct-package-desc symbols-mode (0 3) "List symbols of object files" nil single "marmalade" nil nil nil])
  (synonyms [cl-struct-package-desc synonyms (20150919 2238) "Look up synonyms for a word or phrase in a thesaurus." nil single "melpa" nil ((:url . "http://www.emacswiki.org/synonyms.el") (:keywords "text" "dictionary" "thesaurus" "spelling" "apropos" "help")) nil] [cl-struct-package-desc synonyms (1 0) "Look up synonyms for a word or phrase in a thesaurus." nil single "marmalade" nil nil nil])
  (synosaurus [cl-struct-package-desc synosaurus (20150203 239) "An extensible thesaurus supporting lookup and substitution." ((cl-lib (0 5))) tar "melpa" nil ((:url . "https://github.com/rootzlevel/synosaurus")) nil] [cl-struct-package-desc synosaurus (0 1 0) "An extensible thesaurus supporting lookup and substitution." ((cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/rootzlevel/synosaurus")) nil] [cl-struct-package-desc synosaurus (0 1 0) "An extensible thesaurus supporting lookup and substitution." ((cl-lib (0 5))) tar "marmalade" nil nil nil])
  (syntactic-sugar [cl-struct-package-desc syntactic-sugar (20140508 1341) "Effect-free forms such as if/then/else" nil single "melpa" nil ((:url . "http://github.com/rolandwalker/syntactic-sugar") (:keywords "extensions")) nil] [cl-struct-package-desc syntactic-sugar (0 9 4) "Effect-free forms such as if/then/else" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/syntactic-sugar") (:keywords "extensions")) nil] [cl-struct-package-desc syntactic-sugar (0 9 4) "Effect-free forms such as if/then/else" nil single "marmalade" nil nil nil])
  (syslog-mode [cl-struct-package-desc syslog-mode (20140217 1618) "Major-mode for viewing log files" ((hide-lines (20130623))) single "melpa" nil ((:url . "https://github.com/vapniks/syslog-mode") (:keywords "unix")) nil] [cl-struct-package-desc syslog-mode (2 2) "Major-mode for viewing log files" ((hide-lines (20130623))) single "marmalade" nil nil nil])
  (systemtap-mode [cl-struct-package-desc systemtap-mode (20121209 1510) "A mode for SystemTap" nil single "melpa" nil ((:url . "https://github.com/ruediger/systemtap-mode") (:keywords "tools" "languages")) nil] [cl-struct-package-desc systemtap-mode (0 2) "A mode for SystemTap" nil single "marmalade" nil nil nil])
  (tabbar-ruler [cl-struct-package-desc tabbar-ruler (20150914 1751) "Pretty tabbar, autohide, use both tabbar/ruler" ((tabbar (2 0 1))) tar "melpa" nil ((:url . "http://github.com/mlf176f2/tabbar-ruler.el") (:keywords "tabbar" "ruler mode" "menu" "tool bar.")) nil] [cl-struct-package-desc tabbar-ruler (0 45) "Pretty tabbar, autohide, use both tabbar/ruler" ((tabbar (2 0 1))) tar "melpa-stable" nil ((:url . "http://github.com/mlf176f2/tabbar-ruler.el") (:keywords "tabbar" "ruler mode" "menu" "tool bar.")) nil] [cl-struct-package-desc tabbar-ruler (0 40) "Pretty tabbar, autohide, use both tabbar/ruler" ((tabbar (2 0 1))) single "marmalade" nil nil nil])
  (tabkey2 [cl-struct-package-desc tabkey2 (1 40) "Use second tab key pressed for what you want" nil single "marmalade" nil nil nil])
  (tabulated-list [cl-struct-package-desc tabulated-list (20120406 1351) "generic major mode for tabulated lists." nil single "melpa" nil ((:keywords "extensions" "lisp")) nil] [cl-struct-package-desc tabulated-list (0) "generic major mode for tabulated lists." nil single "melpa-stable" nil ((:keywords "extensions" "lisp")) nil] [cl-struct-package-desc tabulated-list (0) "generic major mode for tabulated lists." nil single "marmalade" nil nil nil])
  (tagedit [cl-struct-package-desc tagedit (20150727 224) "Some paredit-like features for html-mode" ((s (1 3 1)) (dash (1 0 3))) single "melpa" nil ((:keywords "convenience")) nil] [cl-struct-package-desc tagedit (1 4 0) "Some paredit-like features for html-mode" ((s (1 3 1)) (dash (1 0 3))) single "melpa-stable" nil ((:keywords "convenience")) nil] [cl-struct-package-desc tagedit (1 4 0) "Some paredit-like features for html-mode" ((s (1 3 1)) (dash (1 0 3))) single "marmalade" nil nil nil])
  (tango-2 [cl-struct-package-desc tango-2 (1 0 0) "Tango 2 color theme for GNU Emacs 24" nil single "marmalade" nil nil nil])
  (tango-2-theme [cl-struct-package-desc tango-2-theme (20120312 1325) "Tango 2 color theme for GNU Emacs 24" nil single "melpa" nil nil nil] [cl-struct-package-desc tango-2-theme (1 0 0) "Tango 2 color theme for GNU Emacs 24" nil single "marmalade" nil nil nil])
  (tbemail [cl-struct-package-desc tbemail (0 2) "Provide syntax highlighting for email editing via" nil single "marmalade" nil nil nil])
  (tdd [cl-struct-package-desc tdd (1 0) "recompile on save and indicate success in the mode line" nil single "marmalade" nil nil nil])
  (tdd-status-mode-line [cl-struct-package-desc tdd-status-mode-line (20131123 916) "TDD status on the mode-line" nil single "melpa" nil ((:url . "https://github.com/algernon/tdd-status-mode-line") (:keywords "faces" "tdd")) nil] [cl-struct-package-desc tdd-status-mode-line (0 1 2) "TDD status on the mode-line" nil single "marmalade" nil nil nil])
  (telepathy [cl-struct-package-desc telepathy (20131209 458) "Access Telepathy from Emacs" nil single "melpa" nil ((:keywords "telepathy" "tools")) nil] [cl-struct-package-desc telepathy (1 0) "Access Telepathy from Emacs" nil single "melpa-stable" nil ((:keywords "telepathy" "tools")) nil] [cl-struct-package-desc telepathy (0 1) "Access Telepathy from Emacs" nil single "marmalade" nil nil nil])
  (template [cl-struct-package-desc template (0 1 0) "create project templates in Emacs easily" ((request (20140316 417))) single "marmalade" nil nil nil])
  (test-case-mode [cl-struct-package-desc test-case-mode (20130525 734) "unit test front-end" ((fringe-helper (0 1 1))) single "melpa" nil ((:url . "http://nschum.de/src/emacs/test-case-mode/") (:keywords "tools")) nil] [cl-struct-package-desc test-case-mode (1 0) "unit test front-end" ((fringe-helper (0 1 1))) single "melpa-stable" nil ((:url . "http://nschum.de/src/emacs/test-case-mode/") (:keywords "tools")) nil] [cl-struct-package-desc test-case-mode (0 1 9) "unit test front-end" nil single "marmalade" nil nil nil])
  (tex-smart-umlauts [cl-struct-package-desc tex-smart-umlauts (20151103 750) "Smart umlaut conversion for TeX." nil single "melpa" nil ((:url . "http://hub.darcs.net/lyro/tex-smart-umlauts") (:keywords "tex" "wp")) nil] [cl-struct-package-desc tex-smart-umlauts (1 2 0) "Smart umlaut conversion for TeX." nil single "marmalade" nil nil nil])
  (text-language [cl-struct-package-desc text-language (0 20121008) "tracking, setting, guessing language of text" nil single "marmalade" nil nil nil])
  (textmate [cl-struct-package-desc textmate (20110816 1446) "TextMate minor mode for Emacs" nil single "melpa" nil ((:keywords "textmate" "osx" "mac")) nil] [cl-struct-package-desc textmate (5) "TextMate minor mode for Emacs" nil single "marmalade" nil nil nil] [cl-struct-package-desc textmate (1) "No description available." nil single "melpa-stable" nil nil nil])
  (textmate-to-yas [cl-struct-package-desc textmate-to-yas (20150914 546) "Import Textmate macros into yasnippet syntax" nil tar "melpa" nil ((:url . "https://github.com/mlf176f2/textmate-to-yas.el/") (:keywords "yasnippet" "textmate")) nil] [cl-struct-package-desc textmate-to-yas (0 21) "Import Textmate macros into yasnippet syntax" nil tar "melpa-stable" nil ((:url . "https://github.com/mlf176f2/textmate-to-yas.el/") (:keywords "yasnippet" "textmate")) nil] [cl-struct-package-desc textmate-to-yas (0 21) "Import Textmate macros into yasnippet syntax" nil single "marmalade" nil nil nil])
  (theme-changer [cl-struct-package-desc theme-changer (20130725 1919) "Sunrise/Sunset Theme Changer for Emacs" nil single "melpa" nil ((:url . "https://github.com/hadronzoo/theme-changer") (:keywords "color-theme" "deftheme" "solar" "sunrise" "sunset")) nil] [cl-struct-package-desc theme-changer (2 1 0) "Sunrise/Sunset Theme Changer for Emacs" nil single "melpa-stable" nil ((:url . "https://github.com/hadronzoo/theme-changer") (:keywords "color-theme" "deftheme" "solar" "sunrise" "sunset")) nil] [cl-struct-package-desc theme-changer (2 1 0) "Sunrise/Sunset Theme Changer for Emacs" nil single "marmalade" nil nil nil])
  (theme-looper [cl-struct-package-desc theme-looper (20150723 1104) "Loop thru the available color-themes" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://ismail.teamfluxion.com") (:keywords "convenience" "color-themes")) nil] [cl-struct-package-desc theme-looper (20150723 1104) "Loop thru the available color-themes" ((cl-lib (0 5))) single "marmalade" nil nil nil])
  (thesaurus [cl-struct-package-desc thesaurus (20121125 1137) "replace a word with a synonym looked up in a web service." nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/thesaurus.el") (:keywords "thesaurus" "synonym")) nil] [cl-struct-package-desc thesaurus (2012 4 7) "replace a word with a synonym looked up in a web service." nil single "marmalade" nil nil nil])
  (thread-dump [cl-struct-package-desc thread-dump (20130323 1025) "Java thread dump viewer" nil single "melpa" nil ((:url . "http://github.com/nd/thread-dump.el")) nil] [cl-struct-package-desc thread-dump (1 0) "java thread dump viewer" nil single "marmalade" nil nil nil])
  (thumb-through [cl-struct-package-desc thumb-through (20120118 2134) "Plain text reader of HTML documents" nil single "melpa" nil ((:keywords "html")) nil] [cl-struct-package-desc thumb-through (0 3) "Plain text reader of HTML documents" nil single "marmalade" nil nil nil])
  (tidy [cl-struct-package-desc tidy (20111222 956) "Interface to the HTML Tidy program" nil single "melpa" nil ((:url . "http://www.emacswiki.org/elisp/tidy.el") (:keywords "languages")) nil] [cl-struct-package-desc tidy (2 12) "Interface to the HTML Tidy program" nil single "marmalade" nil nil nil])
  (timestamper [cl-struct-package-desc timestamper (0 1 0) "A minor mode for easy timelogging" nil single "marmalade" nil nil nil])
  (tintin-mode [cl-struct-package-desc tintin-mode (1 0 0) "Mayor mode for editing tintin++ scripts" nil single "marmalade" nil nil nil])
  (todotxt [cl-struct-package-desc todotxt (20150513 1929) "A major mode for editing todo.txt files" nil single "melpa" nil ((:url . "https://github.com/rpdillon/todotxt.el") (:keywords "todo.txt" "todotxt" "todotxt.el")) nil] [cl-struct-package-desc todotxt (0 2 3) "A major mode for editing todo.txt files" nil single "marmalade" nil nil nil])
  (toggle-test [cl-struct-package-desc toggle-test (20140722 2237) "Toggle between source and test files in various programming languages" nil single "melpa" nil ((:url . "https://github.com/rags/toggle-test") (:keywords "tdd" "test" "toggle" "productivity")) nil] [cl-struct-package-desc toggle-test (1 0 2) "Toggle between source and test files in various programming languages" nil single "marmalade" nil nil nil])
  (toml-mode [cl-struct-package-desc toml-mode (20150818 120) "Mojor mode for editing TOML files" nil single "melpa" nil ((:url . "https://github.com/dryman/toml-mode.el") (:keywords "data" "toml")) nil] [cl-struct-package-desc toml-mode (0 1 3) "Mojor mode for editing TOML files" nil single "marmalade" nil nil nil])
  (tommyh-theme [cl-struct-package-desc tommyh-theme (20131004 1630) "A bright, bold-colored theme for emacs" nil single "melpa" nil nil nil] [cl-struct-package-desc tommyh-theme (1 2) "A bright, bold-colored theme for emacs." nil single "marmalade" nil nil nil])
  (tox [cl-struct-package-desc tox (20141004 1403) "Launch current python test with tox" nil single "melpa" nil ((:url . "https://github.com/chmouel/tox.el") (:keywords "convenience" "tox" "python" "tests")) nil] [cl-struct-package-desc tox (20130819 1127) "Launch current python test with tox." nil single "marmalade" nil nil nil] [cl-struct-package-desc tox (0 3) "Launch current python test with tox" nil single "melpa-stable" nil ((:url . "https://github.com/chmouel/tox.el") (:keywords "convenience" "tox" "python" "tests")) nil])
  (toxi-theme [cl-struct-package-desc toxi-theme (20130418 1239) "A dark color theme by toxi" ((emacs (24))) single "melpa" nil ((:url . "http://hg.postspectacular.com/toxi-theme/")) nil] [cl-struct-package-desc toxi-theme (0 1 0) "REQUIRES EMACS 24" nil single "marmalade" nil nil nil])
  (tracking [cl-struct-package-desc tracking (20150724 1403) "Buffer modification tracking" nil tar "melpa" nil ((:url . "https://github.com/jorgenschaefer/circe/wiki/Tracking")) nil] [cl-struct-package-desc tracking (2 0) "Buffer modification tracking" nil tar "melpa-stable" nil ((:url . "https://github.com/jorgenschaefer/circe/wiki/Tracking")) nil] [cl-struct-package-desc tracking (1 6) "Buffer modification tracking" ((shorten (0 3))) single "marmalade" nil nil nil])
  (transmission [cl-struct-package-desc transmission (20151113 1105) "Interface to a Transmission session" ((emacs (24 4)) (let-alist (1 0 3))) single "melpa" nil ((:keywords "comm" "tools")) nil] [cl-struct-package-desc transmission (0 6) "Interface to a Transmission session" ((emacs (24 4)) (let-alist (1 0 3))) single "melpa-stable" nil ((:keywords "comm" "tools")) nil] [cl-struct-package-desc transmission (0 6) "Interface to a Transmission session" ((emacs (24 4)) (let-alist (1 0 3))) single "marmalade" nil nil nil])
  (tron-theme [cl-struct-package-desc tron-theme (12) "A theme loosely based on Tron: Legacy colors" nil single "marmalade" nil nil nil])
  (troncle [cl-struct-package-desc troncle (0 1 2) "Emacs convenience functions for tracing clojure code" ((cider (0 5 0))) single "marmalade" nil nil nil])
  (tronesque-theme [cl-struct-package-desc tronesque-theme (20150125 241) "Color Theme based on Tron universe." nil single "melpa" nil ((:url . "https://github.com/aurelienbottazini/tronesque")) nil] [cl-struct-package-desc tronesque-theme (1 5) "Color Theme based on Tron universe." nil single "marmalade" nil nil nil])
  (truthy [cl-struct-package-desc truthy (20140508 1341) "Test the content of a value" ((list-utils (0 4 2))) single "melpa" nil ((:url . "http://github.com/rolandwalker/truthy") (:keywords "extensions")) nil] [cl-struct-package-desc truthy (0 2 8) "Test the content of a value" ((list-utils (0 4 2))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/truthy") (:keywords "extensions")) nil] [cl-struct-package-desc truthy (0 2 8) "Test the content of a value" ((list-utils (0 4 2))) single "marmalade" nil nil nil])
  (try [cl-struct-package-desc try (20150608 211) "Try out Emacs packages." ((emacs (24))) single "melpa" nil ((:url . "http://github.com/larstvei/try") (:keywords "packages")) nil] [cl-struct-package-desc try (0 0 1) "Try out Emacs packages." ((emacs (24))) single "marmalade" nil nil nil])
  (tsql [cl-struct-package-desc tsql (1 0) "customizes sql.el for T-SQL" nil single "marmalade" nil nil nil])
  (tt-mode [cl-struct-package-desc tt-mode (20130804 410) "Emacs major mode for editing Template Toolkit files." nil single "melpa" nil nil nil] [cl-struct-package-desc tt-mode (20121117 2045) "Emacs major mode for editing Template Toolkit files." nil tar "marmalade" nil nil nil])
  (ttl-mode [cl-struct-package-desc ttl-mode (0 1) "mode for Turtle(RDF)" nil single "marmalade" nil nil nil])
  (ttrss [cl-struct-package-desc ttrss (20130409 1049) "Tiny Tiny RSS elisp bindings" ((emacs (23 1))) single "melpa" nil ((:url . "https://github.com/pedros/ttrss.el") (:keywords "news" "local")) nil] [cl-struct-package-desc ttrss (1 7 5) "Tiny Tiny RSS elisp bindings" ((emacs (23 1))) single "melpa-stable" nil ((:url . "https://github.com/pedros/ttrss.el") (:keywords "news" "local")) nil] [cl-struct-package-desc ttrss (1 7 5) "Tiny Tiny RSS elisp bindings" ((emacs (23 1))) single "marmalade" nil nil nil])
  (tuareg [cl-struct-package-desc tuareg (20151108 1834) "OCaml mode for Emacs." ((caml (3 12 0 1))) tar "melpa" nil ((:url . "https://github.com/ocaml/tuareg") (:keywords "ocaml" "languages")) nil] [cl-struct-package-desc tuareg (2 0 9) "OCaml mode for Emacs." ((caml (3 12 0 1))) tar "melpa-stable" nil ((:url . "https://github.com/ocaml/tuareg") (:keywords "ocaml" "languages")) nil] [cl-struct-package-desc tuareg (2 0 8) "OCaml mode for Emacs" ((caml (3 12 0 1))) tar "marmalade" nil nil nil])
  (tumble [cl-struct-package-desc tumble (20130327 1007) "an Tumblr mode for Emacs" ((http-post-simple (0))) single "melpa" nil ((:keywords "tumblr")) nil] [cl-struct-package-desc tumble (1 5) "an Tumblr mode for Emacs" nil single "melpa-stable" nil ((:keywords "tumblr")) nil] [cl-struct-package-desc tumble (1 5) "an Tumblr mode for Emacs" nil single "marmalade" nil nil nil])
  (tumblesocks [cl-struct-package-desc tumblesocks (20140215 1247) "An Emacs tumblr client." ((htmlize (1 39)) (oauth (1 0 3)) (markdown-mode (1 8 1))) tar "melpa" nil nil nil] [cl-struct-package-desc tumblesocks (0 0 7) "An Emacs tumblr client." ((htmlize (1 39)) (oauth (1 0 3)) (markdown-mode (1 8 1))) tar "marmalade" nil nil nil])
  (tup-mode [cl-struct-package-desc tup-mode (20140410 914) "Major mode for editing files for Tup" nil single "melpa" nil ((:url . "https://github.com/ejmr/tup-mode")) nil] [cl-struct-package-desc tup-mode (1 3 1) "Major mode for editing files for Tup" nil single "melpa-stable" nil ((:url . "https://github.com/ejmr/tup-mode")) nil] [cl-struct-package-desc tup-mode (1 2) "Major mode for editing files for Tup" nil single "marmalade" nil nil nil])
  (twilight-theme [cl-struct-package-desc twilight-theme (20120412 603) "Twilight theme for GNU Emacs 24 (deftheme)" nil single "melpa" nil nil nil] [cl-struct-package-desc twilight-theme (1 0 0) "Twilight theme for GNU Emacs 24 (deftheme)" nil single "marmalade" nil nil nil])
  (twittering-mode [cl-struct-package-desc twittering-mode (20150906 1003) "Major mode for Twitter" nil single "melpa" nil ((:url . "http://twmode.sf.net/") (:keywords "twitter" "web")) nil] [cl-struct-package-desc twittering-mode (3 0 1) "Major mode for Twitter" nil single "marmalade" nil nil nil] [cl-struct-package-desc twittering-mode (3 0 0) "Major mode for Twitter" nil single "melpa-stable" nil ((:url . "http://twmode.sf.net/") (:keywords "twitter" "web")) nil])
  (typescript [cl-struct-package-desc typescript (0 1 1) "Major mode for editing typescript" nil single "marmalade" nil nil nil])
  (typing [cl-struct-package-desc typing (20121026 1418) "The Typing Of Emacs" nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/TypingOfEmacs") (:keywords "games")) nil] [cl-struct-package-desc typing (1 1 4) "A game for fast typers, inspired by The Typing Of The Dead." nil single "marmalade" nil nil nil])
  (typing-practice [cl-struct-package-desc typing-practice (0 1) "Typing practice" nil single "marmalade" nil nil nil])
  (typo [cl-struct-package-desc typo (20150910 643) "Minor mode for typographic editing" nil single "melpa" nil ((:url . "https://github.com/jorgenschaefer/typoel") (:keywords "convenience" "wp")) nil] [cl-struct-package-desc typo (1 1) "Minor mode for typographic editing" nil single "melpa-stable" nil ((:url . "https://github.com/jorgenschaefer/typoel") (:keywords "convenience" "wp")) nil] [cl-struct-package-desc typo (1 1) "Minor mode for typographic editing" nil single "marmalade" nil nil nil])
  (typopunct [cl-struct-package-desc typopunct (1 0) "Automatic typographical punctuation marks" nil single "marmalade" nil nil nil])
  (uci-mode [cl-struct-package-desc uci-mode (1 0 0) "Major mode for UCI configuration files" nil single "marmalade" nil nil nil])
  (ucs-utils [cl-struct-package-desc ucs-utils (20150826 714) "Utilities for Unicode characters" ((persistent-soft (0 8 8)) (pcache (0 2 3)) (list-utils (0 4 2))) tar "melpa" nil ((:url . "http://github.com/rolandwalker/ucs-utils") (:keywords "i18n" "extensions")) nil] [cl-struct-package-desc ucs-utils (0 8 4) "Utilities for Unicode characters" ((persistent-soft (0 8 8)) (pcache (0 2 3)) (list-utils (0 4 2))) tar "melpa-stable" nil ((:url . "http://github.com/rolandwalker/ucs-utils") (:keywords "i18n" "extensions")) nil] [cl-struct-package-desc ucs-utils (0 7 10) "Utilities for Unicode characters" ((persistent-soft (0 8 8)) (pcache (0 2 3)) (list-utils (0 4 2))) single "marmalade" nil nil nil])
  (ujelly-theme [cl-struct-package-desc ujelly-theme (20150807 2136) "Ujelly theme for GNU Emacs 24 (deftheme)" nil single "melpa" nil ((:url . "http://github.com/marktran/color-theme-ujelly")) nil] [cl-struct-package-desc ujelly-theme (1 0 35) "Ujelly theme for GNU Emacs 24 (deftheme)" nil single "marmalade" nil nil nil])
  (unbound [cl-struct-package-desc unbound (20140307 128) "Find convenient unbound keystrokes" nil single "melpa" nil ((:keywords "keyboard")) nil] [cl-struct-package-desc unbound (0 1) "find convenient unbound keystrokes" nil single "marmalade" nil nil nil])
  (unfill [cl-struct-package-desc unfill (20131103 213) "The inverse of fill-paragraph and fill-region" nil single "melpa" nil ((:keywords "utilities")) nil] [cl-struct-package-desc unfill (0 1) "The inverse of fill-paragraph and fill-region" nil single "melpa-stable" nil ((:keywords "utilities")) nil] [cl-struct-package-desc unfill (0 1) "The inverse of fill-paragraph and fill-region" nil single "marmalade" nil nil nil])
  (unicode-enbox [cl-struct-package-desc unicode-enbox (20140508 1341) "Surround a string with box-drawing characters" ((string-utils (0 3 2)) (ucs-utils (0 7 6)) (list-utils (0 4 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa" nil ((:url . "http://github.com/rolandwalker/unicode-enbox") (:keywords "extensions" "interface")) nil] [cl-struct-package-desc unicode-enbox (0 1 4) "Surround a string with box-drawing characters" ((string-utils (0 3 2)) (ucs-utils (0 7 6)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/unicode-enbox") (:keywords "extensions" "interface")) nil] [cl-struct-package-desc unicode-enbox (0 1 4) "Surround a string with box-drawing characters" ((string-utils (0 3 2)) (ucs-utils (0 7 6)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "marmalade" nil nil nil])
  (unicode-fonts [cl-struct-package-desc unicode-fonts (20150826 1532) "Configure Unicode fonts" ((font-utils (0 7 8)) (ucs-utils (0 8 2)) (list-utils (0 4 2)) (persistent-soft (0 8 10)) (pcache (0 3 1))) single "melpa" nil ((:url . "http://github.com/rolandwalker/unicode-fonts") (:keywords "i18n" "faces" "frames" "wp" "interface")) nil] [cl-struct-package-desc unicode-fonts (0 4 8) "Configure Unicode fonts" ((font-utils (0 7 8)) (ucs-utils (0 8 2)) (list-utils (0 4 2)) (persistent-soft (0 8 10)) (pcache (0 3 1))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/unicode-fonts") (:keywords "i18n" "faces" "frames" "wp" "interface")) nil] [cl-struct-package-desc unicode-fonts (0 3 8) "Configure Unicode fonts" ((font-utils (0 7 0)) (ucs-utils (0 7 6)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "marmalade" nil nil nil])
  (unicode-progress-reporter [cl-struct-package-desc unicode-progress-reporter (20140508 1341) "Progress-reporter with fancy characters" ((emacs (24 1 0)) (ucs-utils (0 7 6)) (list-utils (0 4 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa" nil ((:url . "http://github.com/rolandwalker/unicode-progress-reporter") (:keywords "interface")) nil] [cl-struct-package-desc unicode-progress-reporter (0 5 4) "Progress-reporter with fancy characters" ((emacs (24 1 0)) (ucs-utils (0 7 6)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/unicode-progress-reporter") (:keywords "interface")) nil] [cl-struct-package-desc unicode-progress-reporter (0 5 4) "Progress-reporter with fancy characters" ((emacs (24 1 0)) (ucs-utils (0 7 6)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "marmalade" nil nil nil])
  (unicode-whitespace [cl-struct-package-desc unicode-whitespace (20140508 1341) "teach whitespace-mode about fancy characters" ((ucs-utils (0 7 6)) (list-utils (0 4 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa" nil ((:url . "http://github.com/rolandwalker/unicode-whitespace") (:keywords "faces" "wp" "interface")) nil] [cl-struct-package-desc unicode-whitespace (0 2 4) "teach whitespace-mode about fancy characters" ((ucs-utils (0 7 6)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/unicode-whitespace") (:keywords "faces" "wp" "interface")) nil] [cl-struct-package-desc unicode-whitespace (0 2 4) "teach whitespace-mode about fancy characters" ((ucs-utils (0 7 6)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "marmalade" nil nil nil])
  (uuid [cl-struct-package-desc uuid (20120910 151) "UUID's for EmacsLisp" nil single "melpa" nil ((:keywords "lisp")) nil] [cl-struct-package-desc uuid (0 0 3) "UUID's for EmacsLisp" nil single "marmalade" nil nil nil])
  (uzumaki [cl-struct-package-desc uzumaki (20150119 1706) "A simple buffer cycler" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/geyslan/uzumaki") (:keywords "buffer" "convenience")) nil] [cl-struct-package-desc uzumaki (0 1) "A simple buffer cycler" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "http://github.com/geyslan/uzumaki") (:keywords "buffer" "convenience")) nil] [cl-struct-package-desc uzumaki (0 1) "A simple buffer cycler" ((cl-lib (0 5))) single "marmalade" nil nil nil])
  (vala-mode [cl-struct-package-desc vala-mode (20150324 1525) "Vala mode derived mode" nil single "melpa" nil ((:keywords "vala" "languages" "oop")) nil] [cl-struct-package-desc vala-mode (0 1) "Vala mode derived mode" nil single "marmalade" nil nil nil])
  (vc-darcs [cl-struct-package-desc vc-darcs (20141122 1326) "a VC backend for darcs" nil single "melpa" nil ((:keywords "vc")) nil] [cl-struct-package-desc vc-darcs (1 12) "a VC backend for darcs" nil single "marmalade" nil nil nil])
  (vc-tfs [cl-struct-package-desc vc-tfs (0 1 3) "Support for TFS version control system" nil single "marmalade" nil nil nil])
  (vcard [cl-struct-package-desc vcard (0 1) "vcard parsing and display routines" nil single "marmalade" nil nil nil])
  (vector-utils [cl-struct-package-desc vector-utils (20140508 1341) "Vector-manipulation utility functions" nil single "melpa" nil ((:url . "http://github.com/rolandwalker/vector-utils") (:keywords "extensions")) nil] [cl-struct-package-desc vector-utils (0 1 2) "Vector-manipulation utility functions" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/vector-utils") (:keywords "extensions")) nil] [cl-struct-package-desc vector-utils (0 1 2) "Vector-manipulation utility functions" nil single "marmalade" nil nil nil])
  (vertica [cl-struct-package-desc vertica (20131217 711) "Vertica SQL mode extension" ((sql (3 0))) single "melpa" nil ((:keywords "sql" "vertica")) nil] [cl-struct-package-desc vertica (0 1 0) "Vertica SQL mode extension" ((sql (3 0))) single "marmalade" nil nil nil])
  (vimgolf [cl-struct-package-desc vimgolf (20140814 1448) "VimGolf interface for the One True Editor" nil single "melpa" nil ((:keywords "games" "vimgolf" "vim")) nil] [cl-struct-package-desc vimgolf (0 10 0) "VimGolf interface for the One True Editor" nil single "melpa-stable" nil ((:keywords "games" "vimgolf" "vim")) nil] [cl-struct-package-desc vimgolf (0 9 2) "VimGolf interface for the One True Editor" nil single "marmalade" nil nil nil])
  (vimpulse [cl-struct-package-desc vimpulse (0 5) "emulates Vim's most useful features" nil single "marmalade" nil nil nil])
  (viper-in-more-modes [cl-struct-package-desc viper-in-more-modes (0 1 3) "vi-like keybindings for various Emacs modes" nil single "marmalade" nil nil nil])
  (virtualenv [cl-struct-package-desc virtualenv (20140220 1501) "Virtualenv for Python" nil single "melpa" nil ((:keywords "python" "virtualenv")) nil] [cl-struct-package-desc virtualenv (1 2) "Virtualenv for Python" nil single "marmalade" nil nil nil])
  (visible-color-code [cl-struct-package-desc visible-color-code (0 0 1) "color code strings in current buffer, this elisp show you one as real color." nil single "marmalade" nil nil nil])
  (vline [cl-struct-package-desc vline (20120108 445) "show vertical line (column highlighting) mode." nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/vline.el") (:keywords "faces" "editing" "emulating")) nil] [cl-struct-package-desc vline (1 10) "show vertical line (column highlighting) mode." nil single "marmalade" nil nil nil])
  (volatile-highlights [cl-struct-package-desc volatile-highlights (20141004 2240) "Minor mode for visual feedback on some operations." nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/volatile-highlights.el") (:keywords "emulations" "convenience" "wp")) nil] [cl-struct-package-desc volatile-highlights (1 10) "Minor mode for visual feedback on some operations." nil single "marmalade" nil nil nil])
  (w32-browser [cl-struct-package-desc w32-browser (20150104 1705) "Run Windows application associated with a file." nil single "melpa" nil ((:url . "http://www.emacswiki.org/w32-browser.el") (:keywords "mouse" "dired" "w32" "explorer")) nil] [cl-struct-package-desc w32-browser (21 0) "Run Windows application associated with a file." nil single "marmalade" nil nil nil])
  (wacspace [cl-struct-package-desc wacspace (20140826 2232) "The WACky WorkSPACE manager for emACS" ((dash (1 2 0)) (cl-lib (0 2))) tar "melpa" nil nil nil] [cl-struct-package-desc wacspace (0 4 2) "The WACky WorkSPACE manager for emACS" ((dash (1 2 0)) (cl-lib (0 2))) tar "melpa-stable" nil nil nil] [cl-struct-package-desc wacspace (0 4 2) "The WACky WorkSPACE manager for emACS" ((dash (1 2 0)) (cl-lib (0 2))) tar "marmalade" nil nil nil])
  (waher-theme [cl-struct-package-desc waher-theme (20141115 430) "Emacs 24 theme based on waher for st2 by dduckster" ((emacs (24 1))) single "melpa" nil ((:url . "https://github.com/jasonm23/emacs-waher-theme")) nil] [cl-struct-package-desc waher-theme (20130917 7) "Emacs 24 theme based on waher for st2 by dduckster" ((emacs (24 1))) single "marmalade" nil nil nil])
  (watch-buffer [cl-struct-package-desc watch-buffer (20120331 1344) "run a shell command when saving a buffer" nil single "melpa" nil ((:url . "https://github.com/mjsteger/watch-buffer") (:keywords "automation" "convenience")) nil] [cl-struct-package-desc watch-buffer (1 0 1) "run a shell command when saving a buffer" nil single "marmalade" nil nil nil])
  (wc-mode [cl-struct-package-desc wc-mode (20150116 2102) "show wc-like information in status bar" nil single "melpa" nil ((:url . "http://www.dr-qubit.org/emacs.php") (:keywords "length" "characters" "words" "lines" "mode line")) nil] [cl-struct-package-desc wc-mode (1 3) "Running word count with goals (minor mode)" nil single "marmalade" nil nil nil])
  (weather [cl-struct-package-desc weather (2012 3 27 2) "Get weather reports via worldweatheronline.com" nil single "marmalade" nil nil nil])
  (weather-metno [cl-struct-package-desc weather-metno (20150831 1807) "Weather data from met.no in Emacs" ((emacs (24)) (cl-lib (0 3))) tar "melpa" nil nil nil] [cl-struct-package-desc weather-metno (20140909) "Weather data from met.no in Emacs" ((emacs (24)) (cl-lib (0 3))) tar "marmalade" nil nil nil] [cl-struct-package-desc weather-metno (0 1 0) "Weather data from met.no in Emacs" ((emacs (24)) (cl-lib (0 3))) tar "melpa-stable" nil nil nil])
  (web [cl-struct-package-desc web (20141231 1201) "useful HTTP client" ((dash (2 9 0)) (s (1 5 0))) single "melpa" nil ((:url . "http://github.com/nicferrier/emacs-web") (:keywords "lisp" "http" "hypermedia")) nil] [cl-struct-package-desc web (0 5 2) "useful HTTP client" ((dash (2 9 0)) (s (1 5 0))) single "marmalade" nil nil nil])
  (web-mode [cl-struct-package-desc web-mode (20151110 2301) "major mode for editing web templates" nil single "melpa" nil ((:url . "http://web-mode.org") (:keywords "languages")) nil] [cl-struct-package-desc web-mode (13) "major mode for editing web templates" nil single "melpa-stable" nil ((:url . "http://web-mode.org") (:keywords "languages")) nil] [cl-struct-package-desc web-mode (8 0 4) "major mode for editing html templates" nil single "marmalade" nil nil nil])
  (wedge-ws [cl-struct-package-desc wedge-ws (20140714 1449) "Wedge whitespace between columns in text" nil single "melpa" nil ((:keywords "formatting" "indentation")) nil] [cl-struct-package-desc wedge-ws (0 1 2) "Wedge whitespace between columns in text" nil tar "marmalade" nil nil nil])
  (weechat [cl-struct-package-desc weechat (20150703 247) "Chat via WeeChat's relay protocol in Emacs" ((s (1 3 1)) (cl-lib (0 2)) (emacs (24)) (tracking (1 2))) tar "melpa" nil nil nil] [cl-struct-package-desc weechat (0 2 2) "Chat via WeeChat's relay protocol in Emacs" ((s (1 3 1)) (cl-lib (0 2)) (emacs (24)) (tracking (1 2))) tar "melpa-stable" nil nil nil] [cl-struct-package-desc weechat (0 2 2) "Chat via WeeChat's relay protocol in Emacs" ((s (1 3 1)) (cl-lib (0 2)) (emacs (24)) (tracking (1 2))) tar "marmalade" nil nil nil])
  (wget [cl-struct-package-desc wget (1 94) "Emacs-wget is an interface program of GNU wget on Emacs." nil tar "marmalade" nil nil nil])
  (wgrep [cl-struct-package-desc wgrep (20141016 1656) "Writable grep buffer and apply the changes to files" nil single "melpa" nil ((:url . "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep.el") (:keywords "grep" "edit" "extensions")) nil] [cl-struct-package-desc wgrep (2 1 3) "Writable grep buffer and apply the changes to files" nil single "marmalade" nil nil nil])
  (wgrep-ack [cl-struct-package-desc wgrep-ack (20141012 311) "Writable ack-and-a-half buffer and apply the changes to files" ((wgrep (2 1 1))) single "melpa" nil ((:url . "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep-ack.el") (:keywords "grep" "edit" "extensions")) nil] [cl-struct-package-desc wgrep-ack (0 1 1) "Writable ack-and-a-half buffer and apply the changes to files" ((wgrep (2 1 1))) single "marmalade" nil nil nil])
  (wgrep-helm [cl-struct-package-desc wgrep-helm (20140528 1427) "Writable helm-grep-mode buffer and apply the changes to files" ((wgrep (2 1 1))) single "melpa" nil ((:url . "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep-helm.el") (:keywords "grep" "edit" "extensions")) nil] [cl-struct-package-desc wgrep-helm (0 1 0) "Writable helm-grep-mode buffer and apply the changes to files" ((wgrep (2 1 1))) single "marmalade" nil nil nil])
  (whitespace-cleanup-mode [cl-struct-package-desc whitespace-cleanup-mode (20150603 447) "Intelligently call whitespace-cleanup on save" nil single "melpa" nil ((:url . "https://github.com/purcell/whitespace-cleanup-mode") (:keywords "convenience")) nil] [cl-struct-package-desc whitespace-cleanup-mode (0 10) "Intelligently call whitespace-cleanup on save" nil single "melpa-stable" nil ((:url . "https://github.com/purcell/whitespace-cleanup-mode") (:keywords "convenience")) nil] [cl-struct-package-desc whitespace-cleanup-mode (0 8) "Intelligently call whitespace-cleanup on save" nil single "marmalade" nil nil nil])
  (wiki-nav [cl-struct-package-desc wiki-nav (20150223 554) "Simple file navigation using [[WikiStrings]]" ((button-lock (1 0 2)) (nav-flash (1 0 0))) single "melpa" nil ((:url . "http://github.com/rolandwalker/button-lock") (:keywords "mouse" "button" "hypermedia" "navigation")) nil] [cl-struct-package-desc wiki-nav (1 0 2) "Simple file navigation using [[WikiStrings]]" ((button-lock (1 0 2)) (nav-flash (1 0 0))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/button-lock") (:keywords "mouse" "button" "hypermedia" "navigation")) nil] [cl-struct-package-desc wiki-nav (1 0 2) "Simple file navigation using [[WikiStrings]]" ((button-lock (1 0 2)) (nav-flash (1 0 0))) single "marmalade" nil nil nil])
  (wikidoc [cl-struct-package-desc wikidoc (0 9) "use elisp doc strings to make other documentation" ((s\.el (1 9 0))) single "marmalade" nil nil nil])
  (win-switch [cl-struct-package-desc win-switch (20150208 1911) "fast, dynamic bindings for window-switching/resizing" nil single "melpa" nil ((:url . "http://www.stat.cmu.edu/~genovese/emacs/win-switch/") (:keywords "window" "switch" "key bindings" "ergonomic" "efficient")) nil] [cl-struct-package-desc win-switch (1 1) "fast, dynamic bindings for window-switching/resizing" nil single "melpa-stable" nil ((:url . "http://www.stat.cmu.edu/~genovese/emacs/win-switch/") (:keywords "window" "switch" "key bindings" "ergonomic" "efficient")) nil] [cl-struct-package-desc win-switch (1 0 8) "fast, dynamic bindings for window-switching/resizing" nil single "marmalade" nil nil nil])
  (window-end-visible [cl-struct-package-desc window-end-visible (20140508 1341) "Find the last visible point in a window" nil single "melpa" nil ((:url . "http://github.com/rolandwalker/window-end-visible") (:keywords "extensions")) nil] [cl-struct-package-desc window-end-visible (0 1 0) "Find the last visible point in a window" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/window-end-visible") (:keywords "extensions")) nil] [cl-struct-package-desc window-end-visible (0 1 0) "Find the last visible point in a window" nil single "marmalade" nil nil nil])
  (window-margin [cl-struct-package-desc window-margin (0 1) "automatic margins for visual-line-mode wrapping" nil single "marmalade" nil nil nil])
  (window-number [cl-struct-package-desc window-number (20140123 1902) "Select windows by numbers." nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/window-number.el")) nil] [cl-struct-package-desc window-number (1 0 3) "Select windows by numbers." nil single "marmalade" nil nil nil])
  (winner-mode-enable [cl-struct-package-desc winner-mode-enable (0 0 5) "Enables winner mode if its available" nil tar "marmalade" nil nil nil])
  (winpoint [cl-struct-package-desc winpoint (20131023 1013) "Remember buffer positions per-window, not per buffer" nil single "melpa" nil ((:url . "https://github.com/jorgenschaefer/winpoint") (:keywords "convenience")) nil] [cl-struct-package-desc winpoint (1 4) "Remember buffer positions per-window, not per buffer" nil single "marmalade" nil nil nil])
  (winpoint-ignore-dired [cl-struct-package-desc winpoint-ignore-dired (1 1) "Have winpoint ignore dired-mode buffers" ((winpoint (1 0))) single "marmalade" nil nil nil])
  (wisp [cl-struct-package-desc wisp (0 1 4) "Tools for wisp: the Whitespace-to-Lisp preprocessor" nil single "marmalade" nil nil nil])
  (wisp-mode [cl-struct-package-desc wisp-mode (20150623 1034) "Tools for wisp: the Whitespace-to-Lisp preprocessor" nil single "melpa" nil ((:keywords "languages" "lisp")) nil] [cl-struct-package-desc wisp-mode (0 9 0) "Tools for wisp: the Whitespace-to-Lisp preprocessor" nil single "melpa-stable" nil ((:keywords "languages" "lisp")) nil] [cl-struct-package-desc wisp-mode (0 2 1) "Tools for wisp: the Whitespace-to-Lisp preprocessor" nil single "marmalade" nil nil nil])
  (with-editor [cl-struct-package-desc with-editor (20151111 418) "Use the Emacsclient as $EDITOR" ((emacs (24 4)) (async (20150909 2257)) (dash (20151021 113))) tar "melpa" nil ((:url . "https://github.com/magit/magit") (:keywords "tools")) nil] [cl-struct-package-desc with-editor (2 3 1) "Use the Emacsclient as $EDITOR" ((emacs (24 4)) (async (1 5)) (dash (2 12 1))) tar "melpa-stable" nil ((:url . "https://github.com/magit/magit") (:keywords "tools")) nil] [cl-struct-package-desc with-editor (2 3 1) "Use the Emacsclient as $EDITOR" ((emacs (24 4)) (async (1 5)) (dash (2 12 1))) tar "marmalade" nil nil nil])
  (with-namespace [cl-struct-package-desc with-namespace (20130407 1122) "interoperable elisp namespaces" ((dash (1 1 0)) (loop (1 1))) single "melpa" nil ((:keywords "namespaces")) nil] [cl-struct-package-desc with-namespace (1 1) "Poor-man's namespaces for elisp" nil single "marmalade" nil nil nil])
  (wonderland [cl-struct-package-desc wonderland (20130912 1819) "declarative configuration for Emacsen" ((dash (2 0 0)) (dash-functional (1 0 0)) (multi (2 0 0)) (emacs (24))) single "melpa" nil ((:url . "http://github.com/kurisuwhyte/emacs-wonderland") (:keywords "configuration" "profile" "wonderland")) nil] [cl-struct-package-desc wonderland (0 1 1) "declarative configuration for Emacsen" ((dash (2 0 0)) (dash-functional (1 0 0)) (multi (2 0 0)) (emacs (24))) single "melpa-stable" nil ((:url . "http://github.com/kurisuwhyte/emacs-wonderland") (:keywords "configuration" "profile" "wonderland")) nil] [cl-struct-package-desc wonderland (0 1 1) "declarative configuration for Emacsen" ((dash (2 0 0)) (dash-functional (1 0 0)) (multi (2 0 0)) (emacs (24))) single "marmalade" nil nil nil])
  (workgroups [cl-struct-package-desc workgroups (20110726 941) "workgroups for windows (for Emacs)" nil single "melpa" nil ((:keywords "session" "management" "window-configuration" "persistence")) nil] [cl-struct-package-desc workgroups (0 2 0) "workgroups for windows (for Emacs)" nil single "marmalade" nil nil nil])
  (workspaces [cl-struct-package-desc workspaces (0 1) "Workspaces for Emacsen" nil single "marmalade" nil nil nil])
  (world-time-mode [cl-struct-package-desc world-time-mode (20140627 107) "show whole days of world-time diffs" nil single "melpa" nil ((:keywords "tools" "calendar")) nil] [cl-struct-package-desc world-time-mode (0 0 6) "show whole days of world-time diffs" nil single "marmalade" nil nil nil])
  (wrap-region [cl-struct-package-desc wrap-region (20140116 2320) "Wrap text with punctation or tag" ((dash (1 0 3))) single "melpa" nil ((:url . "http://github.com/rejeep/wrap-region") (:keywords "speed" "convenience")) nil] [cl-struct-package-desc wrap-region (0 7 3) "Wrap text with punctation or tag" ((dash (1 0 3))) single "melpa-stable" nil ((:url . "http://github.com/rejeep/wrap-region") (:keywords "speed" "convenience")) nil] [cl-struct-package-desc wrap-region (0 7 1) "Wrap text with punctation or tag" nil single "marmalade" nil nil nil])
  (writegood-mode [cl-struct-package-desc writegood-mode (20150325 1115) "Polish up poor writing on the fly" nil single "melpa" nil ((:url . "http://github.com/bnbeckwith/writegood-mode") (:keywords "writing" "weasel-words" "grammar")) nil] [cl-struct-package-desc writegood-mode (20130406 2316) "Polish up poor writing on the fly" nil single "marmalade" nil nil nil] [cl-struct-package-desc writegood-mode (2 0 2) "Polish up poor writing on the fly" nil single "melpa-stable" nil ((:url . "http://github.com/bnbeckwith/writegood-mode") (:keywords "writing" "weasel-words" "grammar")) nil])
  (ws-trim [cl-struct-package-desc ws-trim (1 4) "Tools and minor mode to trim whitespace on text lines" nil single "marmalade" nil nil nil])
  (wsd-mode [cl-struct-package-desc wsd-mode (20150913 1030) "Emacs major-mode for www.websequencediagrams.com" nil tar "melpa" nil ((:url . "https://github.com/josteink/wsd-mode") (:keywords "wsd" "diagrams" "design" "process" "modelling" "uml")) nil] [cl-struct-package-desc wsd-mode (0 4 1) "Emacs major-mode for www.websequencediagrams.com" nil tar "marmalade" nil nil nil] [cl-struct-package-desc wsd-mode (0 4 0) "Emacs major-mode for www.websequencediagrams.com" nil tar "melpa-stable" nil ((:url . "https://github.com/josteink/wsd-mode") (:keywords "wsd" "diagrams" "design" "process" "modelling" "uml")) nil])
  (wxwidgets-help [cl-struct-package-desc wxwidgets-help (0 0 3) "Look up wxWidgets API by using local html manual." nil tar "marmalade" nil nil nil])
  (xbm-life [cl-struct-package-desc xbm-life (20151012 1241) "A XBM version of Conway's Game of Life" nil single "melpa" nil ((:url . "https://github.com/wasamasa/xbm-life") (:keywords "games")) nil] [cl-struct-package-desc xbm-life (0 1 1) "A XBM version of Conway's Game of Life" nil single "melpa-stable" nil ((:url . "https://github.com/wasamasa/xbm-life") (:keywords "games")) nil] [cl-struct-package-desc xbm-life (0 1 1) "A XBM version of Conway's Game of Life" nil single "marmalade" nil nil nil])
  (xkcd [cl-struct-package-desc xkcd (20151016 2153) "View xkcd from Emacs" ((json (1 3))) single "melpa" nil ((:url . "https://github.com/vibhavp/emacs-xkcd") (:keywords "xkcd" "webcomic")) nil] [cl-struct-package-desc xkcd (1 0) "View xkcd from Emacs" ((json (1 3))) single "marmalade" nil nil nil])
  (xlicense [cl-struct-package-desc xlicense (1 1) "Insert pre-defined license text" nil tar "marmalade" nil nil nil])
  (xml-gen [cl-struct-package-desc xml-gen (0 4) "A DSL for generating XML." nil single "marmalade" nil nil nil])
  (xml-rpc [cl-struct-package-desc xml-rpc (20150902 1827) "An elisp implementation of clientside XML-RPC" nil single "melpa" nil ((:url . "http://github.com/hexmode/xml-rpc-el") (:keywords "xml" "rpc" "network")) nil] [cl-struct-package-desc xml-rpc (1 6 8) "An elisp implementation of clientside XML-RPC" nil single "marmalade" nil nil nil])
  (xmlgen [cl-struct-package-desc xmlgen (20130219 219) "A DSL for generating XML." nil single "melpa" nil nil nil] [cl-struct-package-desc xmlgen (0 4) "A DSL for generating XML." nil single "marmalade" nil nil nil])
  (yagist [cl-struct-package-desc yagist (20150425 551) "Yet Another Emacs integration for gist.github.com" ((cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/mhayashi1120/yagist.el") (:keywords "tools")) nil] [cl-struct-package-desc yagist (0 8 12) "Yet Another Emacs integration for gist.github.com" ((cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/yagist.el") (:keywords "tools")) nil] [cl-struct-package-desc yagist (0 8 6) "Yet Another Emacs integration for gist.github.com" ((json (1 2 0))) single "marmalade" nil nil nil])
  (yaml-mode [cl-struct-package-desc yaml-mode (20150816 2235) "Major mode for editing YAML files" nil single "melpa" nil ((:keywords "data" "yaml")) nil] [cl-struct-package-desc yaml-mode (0 0 12) "Major mode for editing YAML files" nil single "melpa-stable" nil ((:keywords "data" "yaml")) nil] [cl-struct-package-desc yaml-mode (0 0 9) "Major mode for editing YAML files" nil single "marmalade" nil nil nil])
  (yaoddmuse [cl-struct-package-desc yaoddmuse (20150712 421) "Major mode for EmacsWiki and other Oddmuse wikis" nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/yaoddmuse.el") (:keywords "yaoddmuse" "oddmuse")) nil] [cl-struct-package-desc yaoddmuse (0 1 1) "Yet another oddmuse for Emacs" nil single "marmalade" nil nil nil])
  (yari [cl-struct-package-desc yari (20150804 2247) "Yet Another RI interface for Emacs" nil single "melpa" nil ((:keywords "tools")) nil] [cl-struct-package-desc yari (0 7) "Yet Another RI interface for Emacs" nil single "marmalade" nil nil nil])
  (yas-jit [cl-struct-package-desc yas-jit (0 8 3) "Loads Yasnippets on demand (makes start up faster)" nil single "marmalade" nil nil nil])
  (yascroll [cl-struct-package-desc yascroll (20150315 605) "Yet Another Scroll Bar Mode" ((cl-lib (0 3))) single "melpa" nil ((:keywords "convenience")) nil] [cl-struct-package-desc yascroll (0 2 0) "Yet Another Scroll Bar Mode" nil single "marmalade" nil nil nil] [cl-struct-package-desc yascroll (0 1) "Yet Another Scroll Bar Mode" nil single "melpa-stable" nil ((:keywords "convenience")) nil])
  (yasnippet-bundle [cl-struct-package-desc yasnippet-bundle (0 6 1) "Yet another snippet extension (Auto compiled bundle)" nil single "marmalade" nil nil nil])
  (yesql-ghosts [cl-struct-package-desc yesql-ghosts (20150220 437) "Display ghostly yesql defqueries inline" ((s (1 9 0)) (dash (2 10 0)) (cider (0 8 0))) single "melpa" nil nil nil] [cl-struct-package-desc yesql-ghosts (0 1 0) "Display ghostly yesql defqueries inline" ((s (1 9 0)) (dash (2 10 0)) (cider (0 8 0))) single "melpa-stable" nil nil nil] [cl-struct-package-desc yesql-ghosts (0 1 0) "Display ghostly yesql defqueries inline" ((s (1 9 0)) (dash (2 10 0)) (cider (0 8 0))) single "marmalade" nil nil nil])
  (yoshi-theme [cl-struct-package-desc yoshi-theme (6 0 0) "Theme named after my cat" nil single "marmalade" nil nil nil])
  (zeal-at-point [cl-struct-package-desc zeal-at-point (20151103 1907) "Search the word at point with Zeal" nil single "melpa" nil ((:url . "https://github.com/jinzhu/zeal-at-point")) nil] [cl-struct-package-desc zeal-at-point (0 0 3) "Search the word at point with Zeal" nil single "marmalade" nil nil nil])
  (zeitgeist [cl-struct-package-desc zeitgeist (20131228 1009) "No description available." nil single "melpa" nil nil nil] [cl-struct-package-desc zeitgeist (0 1) "integrates Emacs with Zeitgeist." nil single "marmalade" nil nil nil])
  (zen-and-art-theme [cl-struct-package-desc zen-and-art-theme (20120622 737) "zen and art color theme for GNU Emacs 24" nil single "melpa" nil nil nil] [cl-struct-package-desc zen-and-art-theme (1 0 1) "zen and art color theme for GNU Emacs 24" nil single "marmalade" nil nil nil])
  (zen-mode [cl-struct-package-desc zen-mode (20120627) "remove/restore Emacs distractions quickly" nil tar "marmalade" nil nil nil])
  (zenburn [cl-struct-package-desc zenburn (0 1) "A low contrast colour theme for Emacs" nil single "marmalade" nil nil nil])
  (zenburn-theme [cl-struct-package-desc zenburn-theme (20151101 1158) "A low contrast color theme for Emacs." nil single "melpa" nil ((:url . "http://github.com/bbatsov/zenburn-emacs")) nil] [cl-struct-package-desc zenburn-theme (2 2) "A low contrast color theme for Emacs." nil single "melpa-stable" nil ((:url . "http://github.com/bbatsov/zenburn-emacs")) nil] [cl-struct-package-desc zenburn-theme (2 1) "A low contrast color theme for Emacs." nil single "marmalade" nil nil nil])
  (zencoding-mode [cl-struct-package-desc zencoding-mode (20140213 22) "Unfold CSS-selector-like expressions to markup" nil single "melpa" nil ((:url . "https://github.com/rooney/zencoding") (:keywords "convenience")) nil] [cl-struct-package-desc zencoding-mode (0 5 1) "Unfold CSS-selector-like expressions to markup" nil single "marmalade" nil nil nil])
  (zjl-hl [cl-struct-package-desc zjl-hl (20121028 1901) "Highlight variable and function call and others in c/emacs, make life easy." ((highlight (21 0)) (region-list-edit (20100530 808))) single "marmalade" nil nil nil])
  (znc [cl-struct-package-desc znc (20140722 1421) "ZNC + ERC" ((cl-lib (0 2)) (erc (5 3))) single "melpa" nil ((:url . "https://github.com/sshirokov/ZNC.el")) nil] [cl-struct-package-desc znc (0 0 2) "ZNC + ERC" ((cl (2 2)) (erc (5 3))) single "marmalade" nil nil nil])
  (zone-matrix [cl-struct-package-desc zone-matrix (0 0 1) "Matrix themed Zone mode" nil tar "marmalade" nil nil nil])
  (zone-nyan [cl-struct-package-desc zone-nyan (20151113 1302) "Zone out with nyan cat" ((esxml (0 3 1))) single "melpa" nil ((:url . "https://github.com/wasamasa/zone-nyan") (:keywords "zone")) nil] [cl-struct-package-desc zone-nyan (0 2 0) "Zone out with nyan cat" ((esxml (0 3 1))) single "melpa-stable" nil ((:url . "https://github.com/wasamasa/zone-nyan") (:keywords "zone")) nil] [cl-struct-package-desc zone-nyan (0 2 0) "Zone out with nyan cat" ((esxml (0 3 1))) single "marmalade" nil nil nil])
  (ztree [cl-struct-package-desc ztree (20150702 1013) "Text mode directory tree" nil tar "melpa" nil ((:keywords "files" "tools") (:url . "https://github.com/fourier/ztree")) nil] [cl-struct-package-desc ztree (1 0 2) "Text mode directory tree" nil tar "gnu" nil ((:keywords "files" "tools") (:url . "https://github.com/fourier/ztree")) nil])
  (yasnippet [cl-struct-package-desc yasnippet (20151108 1505) "Yet another snippet extension for Emacs." nil tar "melpa" nil ((:url . "http://github.com/capitaomorte/yasnippet") (:keywords "convenience" "emulation")) nil] [cl-struct-package-desc yasnippet (0 9 0 1) "Yet another snippet extension for Emacs." nil tar "melpa-stable" nil ((:url . "http://github.com/capitaomorte/yasnippet") (:keywords "convenience" "emulation")) nil] [cl-struct-package-desc yasnippet (0 8 0) "Yet another snippet extension for Emacs." nil tar "gnu" nil ((:keywords "convenience" "emulation") (:url . "http://github.com/capitaomorte/yasnippet")) nil] [cl-struct-package-desc yasnippet (0 6 1) "Yasnippet template engine" nil tar "marmalade" nil nil nil])
  (xpm [cl-struct-package-desc xpm (1 0 3) "edit XPM images" nil tar "gnu" nil ((:keywords "multimedia" "xpm") (:url . "http://www.gnuvola.org/software/xpm/")) nil])
  (xelb [cl-struct-package-desc xelb (0 4) "X protocol Emacs Lisp Binding" ((emacs (24 4)) (cl-generic (0 2))) tar "gnu" nil ((:keywords "unix") (:url . "https://github.com/ch11ng/xelb")) nil])
  (xclip [cl-struct-package-desc xclip (1 3) "use xclip to copy&paste" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/xclip.html") (:keywords "convenience" "tools")) nil])
  (wpuzzle [cl-struct-package-desc wpuzzle (1 1) "find as many word in a given time" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/wpuzzle.html") (:keywords)) nil])
  (wisi [cl-struct-package-desc wisi (1 1 1) "Utilities for implementing an indentation/navigation engine using a generalized LALR parser" ((cl-lib (0 4)) (emacs (24 2))) tar "gnu" nil ((:keywords "parser" "indentation" "navigation") (:url . "http://stephe-leake.org/emacs/ada-mode/emacs-ada-mode.html")) nil])
  (windresize [cl-struct-package-desc windresize (0 1) "Resize windows interactively" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/windresize.html") (:keywords "window")) nil])
  (websocket [cl-struct-package-desc websocket (20150719 1048) "Emacs WebSocket client and server" nil single "melpa" nil ((:keywords "communication" "websocket" "server")) nil] [cl-struct-package-desc websocket (1 5) "Emacs WebSocket client and server" nil tar "gnu" nil ((:keywords "communication" "websocket" "server") (:url . "http://elpa.gnu.org/packages/websocket.html")) nil] [cl-struct-package-desc websocket (1 0) "Emacs WebSocket client and server" nil single "marmalade" nil nil nil])
  (web-server [cl-struct-package-desc web-server (20140905 1706) "Emacs Web Server" ((emacs (24 3))) tar "melpa" nil ((:url . "https://github.com/eschulte/emacs-web-server") (:keywords "http" "server" "network")) nil] [cl-struct-package-desc web-server (0 1 1) "Emacs Web Server" ((emacs (24 3))) tar "gnu" nil ((:keywords "http" "server" "network") (:url . "https://github.com/eschulte/emacs-web-server")) nil])
  (wconf [cl-struct-package-desc wconf (0 2 0) "Minimal window layout manager" ((emacs (24 4))) single "gnu" nil ((:url . "https://github.com/ilohmar/wconf") (:keywords "windows" "frames" "layout")) nil])
  (wcheck-mode [cl-struct-package-desc wcheck-mode (20151015 1342) "General interface for text checkers" nil tar "melpa" nil nil nil] [cl-struct-package-desc wcheck-mode (2015 10 15) "General interface for text checkers" nil tar "melpa-stable" nil nil nil] [cl-struct-package-desc wcheck-mode (2014 6 21) "General interface for text checkers" nil tar "marmalade" nil nil nil] [cl-struct-package-desc wcheck-mode (2014 6 21) "General interface for text checkers" nil single "gnu" nil ((:url . "https://github.com/tlikonen/wcheck-mode") (:keywords "text" "spell" "check" "languages" "ispell")) nil])
  (w3 [cl-struct-package-desc w3 (4 0 49) "Fully customizable, largely undocumented web browser for Emacs" nil tar "gnu" nil ((:keywords "faces" "help" "comm" "news" "mail" "processes" "mouse" "hypermedia") (:url . "http://elpa.gnu.org/packages/w3.html")) nil])
  (vlf [cl-struct-package-desc vlf (20150101 718) "View Large Files" nil tar "melpa" nil ((:url . "https://github.com/m00natic/vlfi") (:keywords "large files" "utilities")) nil] [cl-struct-package-desc vlf (1 7) "View Large Files" nil tar "melpa-stable" nil ((:url . "https://github.com/m00natic/vlfi") (:keywords "large files" "utilities")) nil] [cl-struct-package-desc vlf (1 7) "View Large Files" nil tar "gnu" nil ((:keywords "large files" "utilities") (:url . "https://github.com/m00natic/vlfi")) nil])
  (uni-confusables [cl-struct-package-desc uni-confusables (0 1) "Unicode confusables table" nil tar "gnu" nil ((:url . "http://elpa.gnu.org/packages/uni-confusables.html")) nil])
  (undo-tree [cl-struct-package-desc undo-tree (20140509 522) "Treat undo history as a tree" nil single "melpa" nil ((:url . "http://www.dr-qubit.org/emacs.php") (:keywords "convenience" "files" "undo" "redo" "history" "tree")) nil] [cl-struct-package-desc undo-tree (0 6 5) "Treat undo history as a tree" nil single "gnu" nil ((:url . "http://www.dr-qubit.org/emacs.php") (:keywords "convenience" "files" "undo" "redo" "history" "tree")) nil] [cl-struct-package-desc undo-tree (0 3 1) "Treat undo history as a tree" nil single "marmalade" nil nil nil])
  (trie [cl-struct-package-desc trie (0 2 6) "Trie data structure" ((tNFA (0 1 1)) (heap (0 3))) single "gnu" nil ((:url . "http://www.dr-qubit.org/emacs.php") (:keywords "extensions" "matching" "data structures trie" "ternary search tree" "tree" "completion" "regexp")) nil])
  (tiny [cl-struct-package-desc tiny (20150324 1058) "Quickly generate linear ranges in Emacs" nil single "melpa" nil ((:url . "https://github.com/abo-abo/tiny") (:keywords "convenience")) nil] [cl-struct-package-desc tiny (0 1) "Quickly generate linear ranges in Emacs" nil tar "gnu" nil ((:keywords "convenience") (:url . "https://github.com/abo-abo/tiny")) nil])
  (timerfunctions [cl-struct-package-desc timerfunctions (1 4 2) "Enhanced versions of some timer.el functions" ((cl-lib (0 5))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/timerfunctions.html") (:keywords)) nil])
  (test-simple [cl-struct-package-desc test-simple (20151110 1943) "Simple Unit Test Framework for Emacs Lisp" nil single "melpa" nil ((:url . "http://github.com/rocky/emacs-test-simple") (:keywords "unit-test")) nil] [cl-struct-package-desc test-simple (1 1) "Simple Unit Test Framework for Emacs Lisp" ((cl-lib (0))) single "gnu" nil ((:url . "http://github.com/rocky/emacs-test-simple") (:keywords "unit-test")) nil] [cl-struct-package-desc test-simple (1 0) "Simple Unit Test Framework for Emacs Lisp" nil single "melpa-stable" nil ((:url . "http://github.com/rocky/emacs-test-simple") (:keywords "unit-test")) nil])
  (temp-buffer-browse [cl-struct-package-desc temp-buffer-browse (1 4) "temp buffer browse mode" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/temp-buffer-browse.html") (:keywords "convenience")) nil])
  (tNFA [cl-struct-package-desc tNFA (0 1 1) "Tagged non-deterministic finite-state automata" ((queue (0 1))) single "gnu" nil ((:url . "http://www.dr-qubit.org/emacs.php") (:keywords "extensions" "matching" "data structures tnfa" "nfa" "dfa" "finite state automata" "automata" "regexp")) nil])
  (swiper [cl-struct-package-desc swiper (20151113 758) "Isearch with an overview. Oh, man!" ((emacs (24 1))) tar "melpa" nil ((:url . "https://github.com/abo-abo/swiper") (:keywords "matching")) nil] [cl-struct-package-desc swiper (0 6 0) "Isearch with an overview. Oh, man!" ((emacs (24 1))) tar "melpa-stable" nil ((:url . "https://github.com/abo-abo/swiper") (:keywords "matching")) nil] [cl-struct-package-desc swiper (0 5 1) "Isearch with an overview. Oh, man!" ((emacs (24 1))) tar "gnu" nil ((:keywords "matching") (:url . "https://github.com/abo-abo/swiper")) nil])
  (svg-clock [cl-struct-package-desc svg-clock (0 5) "Analog clock using Scalable Vector Graphics" ((svg (0 1)) (emacs (25 0))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/svg-clock.html") (:keywords "demo" "svg" "clock")) nil])
  (svg [cl-struct-package-desc svg (0 1) "svg image creation functions" ((emacs (25))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/svg.html") (:keywords "image")) nil])
  (stream [cl-struct-package-desc stream (2 1 0) "Implementation of streams" ((emacs (25))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/stream.html") (:keywords "stream" "laziness" "sequences")) nil])
  (spinner [cl-struct-package-desc spinner (1 4) "Add spinners and progress-bars to the mode-line for ongoing operations" nil single "gnu" nil ((:url . "https://github.com/Malabarba/spinner.el") (:keywords "processes" "mode-line")) nil])
  (sotlisp [cl-struct-package-desc sotlisp (20151105 734) "Write lisp at the speed of thought." ((emacs (24 1))) single "melpa" nil ((:url . "https://github.com/Malabarba/speed-of-thought-lisp") (:keywords "convenience" "lisp")) nil] [cl-struct-package-desc sotlisp (1 4 1) "Write lisp at the speed of thought." ((emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/Malabarba/speed-of-thought-lisp") (:keywords "convenience" "lisp")) nil] [cl-struct-package-desc sotlisp (1 4 1) "Write lisp at the speed of thought." ((emacs (24 1))) single "gnu" nil ((:url . "https://github.com/Malabarba/speed-of-thought-lisp") (:keywords "convenience" "lisp")) nil])
  (sokoban [cl-struct-package-desc sokoban (1 23) "Play the Sokoban game in emacs" nil single "marmalade" nil nil nil] [cl-struct-package-desc sokoban (1 4) "Implementation of Sokoban for Emacs." nil tar "gnu" nil ((:keywords "games") (:url . "http://elpa.gnu.org/packages/sokoban.html")) nil])
  (sml-mode [cl-struct-package-desc sml-mode (6 7) "Major mode for editing (Standard) ML" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/sml-mode.html") (:keywords "sml")) nil])
  (sisu-mode [cl-struct-package-desc sisu-mode (3 0 3) "Major mode for SiSU markup text" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/sisu-mode.html") (:keywords "text" "processes" "tools")) nil])
  (shen-mode [cl-struct-package-desc shen-mode (0 1) "A major mode for editing shen source code" nil tar "gnu" nil ((:keywords "languages" "shen") (:url . "http://elpa.gnu.org/packages/shen-mode.html")) nil])
  (seq [cl-struct-package-desc seq (20151028 759) "Sequence manipulation functions" nil single "melpa" nil ((:keywords "sequences")) nil] [cl-struct-package-desc seq (1 11) "Sequence manipulation functions" nil single "melpa-stable" nil ((:keywords "sequences")) nil] [cl-struct-package-desc seq (1 11) "Sequence manipulation functions" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/seq.html") (:keywords "sequences")) nil])
  (scroll-restore [cl-struct-package-desc scroll-restore (1 0) "restore original position after scrolling" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/scroll-restore.html") (:keywords "scrolling")) nil])
  (rudel [cl-struct-package-desc rudel (0 3) "A collaborative editing framework for Emacs" ((eieio (1 4))) tar "marmalade" nil nil nil] [cl-struct-package-desc rudel (0 3) "A collaborative editing framework for Emacs" nil tar "gnu" nil ((:keywords "rudel" "collaboration") (:url . "http://rudel.sourceforge.net/")) nil])
  (rich-minority [cl-struct-package-desc rich-minority (20151014 438) "Clean-up and Beautify the list of minor-modes." ((cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/Malabarba/rich-minority") (:keywords "mode-line" "faces")) nil] [cl-struct-package-desc rich-minority (1 0) "Clean-up and Beautify the list of minor-modes." ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "http://github.com/Malabarba/rich-minority") (:keywords "mode-line" "faces")) nil] [cl-struct-package-desc rich-minority (1 0) "Clean-up and Beautify the list of minor-modes." ((cl-lib (0 5))) single "gnu" nil ((:url . "https://github.com/Malabarba/rich-minority") (:keywords "mode-line" "faces")) nil])
  (register-list [cl-struct-package-desc register-list (0 1) "Interactively list/edit registers" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/register-list.html") (:keywords "register")) nil])
  (rainbow-mode [cl-struct-package-desc rainbow-mode (0 12) "Colorize color names in buffers" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/rainbow-mode.html") (:keywords "faces")) nil])
  (queue [cl-struct-package-desc queue (0 1 1) "Queue data structure" nil single "gnu" nil ((:url . "http://www.dr-qubit.org/emacs.php") (:keywords "extensions" "data structures" "queue")) nil])
  (quarter-plane [cl-struct-package-desc quarter-plane (0 1) "Minor mode for quarter-plane style editing" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/quarter-plane.html") (:keywords "convenience" "wp")) nil])
  (poker [cl-struct-package-desc poker (0 1) "Texas hold'em poker" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/poker.html") (:keywords "games")) nil])
  (pinentry [cl-struct-package-desc pinentry (0 1) "GnuPG Pinentry server implementation" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/pinentry.html") (:keywords "gnupg")) nil])
  (pabbrev [cl-struct-package-desc pabbrev (20150806 445) "Predictive abbreviation expansion" nil single "melpa" nil nil nil] [cl-struct-package-desc pabbrev (4 2 1) "Predictive abbreviation expansion" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/pabbrev.html") (:keywords)) nil] [cl-struct-package-desc pabbrev (4 2) "Predictive abbreviation expansion" nil single "marmalade" nil nil nil] [cl-struct-package-desc pabbrev (4 1) "Predictive abbreviation expansion" nil single "melpa-stable" nil nil nil])
  (other-frame-window [cl-struct-package-desc other-frame-window (1 0 1) "Minor mode to enable global prefix keys for other frame/window buffer placement" ((emacs (24 4))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/other-frame-window.html") (:keywords "frame" "window")) nil])
  (osc [cl-struct-package-desc osc (0 1) "Open Sound Control protocol library" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/osc.html") (:keywords "comm" "processes" "multimedia")) nil])
  (org [cl-struct-package-desc org (20151109) "Outline-based notes management and organizer" nil tar "gnu" nil nil nil])
  (on-screen [cl-struct-package-desc on-screen (20151108 2108) "guide your eyes while scrolling" ((cl-lib (0))) single "melpa" nil ((:url . "https://github.com/michael-heerdegen/on-screen.el") (:keywords "convenience")) nil] [cl-struct-package-desc on-screen (1 3 2) "guide your eyes while scrolling" ((cl-lib (0))) single "gnu" nil ((:url . "https://github.com/michael-heerdegen/on-screen.el") (:keywords "convenience")) nil])
  (omn-mode [cl-struct-package-desc omn-mode (1 2) "Support for OWL Manchester Notation" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/omn-mode.html") (:keywords)) nil])
  (oauth2 [cl-struct-package-desc oauth2 (0 10) "OAuth 2.0 Authorization Protocol" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/oauth2.html") (:keywords "comm")) nil])
  (num3-mode [cl-struct-package-desc num3-mode (1 2) "highlight groups of digits in long numbers" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/num3-mode.html") (:keywords "faces" "minor-mode")) nil])
  (notes-mode [cl-struct-package-desc notes-mode (1 30) "Indexing system for on-line note-taking" nil tar "gnu" nil ((:url . "http://elpa.gnu.org/packages/notes-mode.html")) nil])
  (nlinum [cl-struct-package-desc nlinum (1 6) "Show line numbers in the margin" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/nlinum.html") (:keywords "convenience")) nil])
  (nhexl-mode [cl-struct-package-desc nhexl-mode (0 1) "Minor mode to edit files via hex-dump format" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/nhexl-mode.html") (:keywords "data")) nil])
  (names [cl-struct-package-desc names (20151014 443) "Namespaces for emacs-lisp. Avoid name clobbering without hiding symbols." ((emacs (24 1)) (cl-lib (0 5))) tar "melpa" nil ((:url . "https://github.com/Bruce-Connor/names") (:keywords "extensions" "lisp")) nil] [cl-struct-package-desc names (20150723 0) "Namespaces for emacs-lisp. Avoid name clobbering without hiding symbols." ((emacs (24 1)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "http://github.com/Bruce-Connor/names") (:keywords "extensions" "lisp")) nil] [cl-struct-package-desc names (20150723 0) "Namespaces for emacs-lisp. Avoid name clobbering without hiding symbols." ((emacs (24 1)) (cl-lib (0 5))) tar "gnu" nil ((:keywords "extensions" "lisp") (:url . "https://github.com/Bruce-Connor/names")) nil])
  (nameless [cl-struct-package-desc nameless (20151014 439) "Hide package namespace in your emacs-lisp code" ((emacs (24 4))) single "melpa" nil ((:url . "https://github.com/Malabarba/nameless") (:keywords "convenience" "lisp")) nil] [cl-struct-package-desc nameless (0 5 1) "Hide package namespace in your emacs-lisp code" ((emacs (24 4))) single "gnu" nil ((:url . "https://github.com/Malabarba/nameless") (:keywords "convenience" "lisp")) nil])
  (muse [cl-struct-package-desc muse (3 20) "Authoring and publishing tool for Emacs" nil tar "gnu" nil ((:keywords "hypermedia") (:url . "http://mwolson.org/projects/EmacsMuse.html")) nil])
  (minimap [cl-struct-package-desc minimap (20150108 1615) "Minimap sidebar for Emacs" nil single "melpa" nil ((:keywords "minimap")) nil] [cl-struct-package-desc minimap (1 2) "Sidebar showing a \"mini-map\" of a buffer" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/minimap.html") (:keywords)) nil] [cl-struct-package-desc minimap (1 0) "Sidebar showing a \"mini-map\" of a buffer" nil single "marmalade" nil nil nil])
  (minibuffer-line [cl-struct-package-desc minibuffer-line (0 1) "Display status info in the minibuffer window" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/minibuffer-line.html") (:keywords)) nil])
  (midi-kbd [cl-struct-package-desc midi-kbd (0 2) "Create keyboard events from Midi input" ((emacs (25))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/midi-kbd.html") (:keywords "convenience" "hardware" "multimedia")) nil])
  (metar [cl-struct-package-desc metar (0 1) "Retrieve and decode METAR weather information" ((cl-lib (0 5))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/metar.html") (:keywords "comm")) nil])
  (memory-usage [cl-struct-package-desc memory-usage (0 2) "Analyze the memory usage of Emacs in various ways" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/memory-usage.html") (:keywords "maint")) nil])
  (math-symbol-lists [cl-struct-package-desc math-symbol-lists (20150830 1633) "Lists of Unicode math symbols and latex commands" nil single "melpa" nil ((:url . "https://github.com/vspinu/math-symbol-lists") (:keywords "unicode" "symbols" "mathematics")) nil] [cl-struct-package-desc math-symbol-lists (1 0) "Lists of Unicode math symbols and latex commands" nil single "gnu" nil ((:url . "https://github.com/vspinu/math-symbol-lists") (:keywords "unicode" "symbols" "mathematics")) nil])
  (markchars [cl-struct-package-desc markchars (0 2 0) "Mark chars fitting certain characteristics" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/markchars.html") (:keywords)) nil])
  (loc-changes [cl-struct-package-desc loc-changes (20150302 848) "keep track of positions even after buffer changes" nil single "melpa" nil ((:url . "http://github.com/rocky/emacs-loc-changes")) nil] [cl-struct-package-desc loc-changes (1 2) "keep track of positions even after buffer changes" nil single "gnu" nil ((:url . "http://github.com/rocky/emacs-loc-changes") (:keywords)) nil] [cl-struct-package-desc loc-changes (1 1) "Helps users and programs keep track of positions even after buffer changes." nil single "melpa-stable" nil ((:url . "http://github.com/rocky/emacs-loc-changes")) nil])
  (load-relative [cl-struct-package-desc load-relative (20150224 1722) "relative file load (within a multi-file Emacs package)" nil single "melpa" nil ((:url . "http://github.com/rocky/emacs-load-relative") (:keywords "internal")) nil] [cl-struct-package-desc load-relative (1 2) "relative file load (within a multi-file Emacs package)" nil single "gnu" nil ((:url . "http://github.com/rocky/emacs-load-relative") (:keywords "internal")) nil] [cl-struct-package-desc load-relative (1 0) "relative file load (within a multi-file Emacs package)" nil tar "melpa-stable" nil ((:url . "http://github.com/rocky/emacs-load-relative") (:keywords "internal")) nil])
  (load-dir [cl-struct-package-desc load-dir (0 0 3) "Load all Emacs Lisp files in a given directory" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/load-dir.html") (:keywords "lisp" "files" "convenience")) nil])
  (lmc [cl-struct-package-desc lmc (1 3) "Little Man Computer in Elisp" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/lmc.html") (:keywords)) nil])
  (lex [cl-struct-package-desc lex (1 1) "Lexical analyser construction" nil tar "gnu" nil ((:url . "http://elpa.gnu.org/packages/lex.html")) nil])
  (let-alist [cl-struct-package-desc let-alist (1 0 4) "Easily let-bind values of an assoc-list by their names" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/let-alist.html") (:keywords "extensions" "lisp")) nil])
  (landmark [cl-struct-package-desc landmark (1 0) "Neural-network robot that learns landmarks" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/landmark.html") (:keywords "games" "neural network" "adaptive search" "chemotaxis")) nil])
  (jumpc [cl-struct-package-desc jumpc (3 0) "jump to previous insertion points" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/jumpc.html") (:keywords)) nil])
  (js2-mode [cl-struct-package-desc js2-mode (20151108 1846) "Improved JavaScript editing mode" ((emacs (24 1)) (cl-lib (0 5))) tar "melpa" nil ((:url . "https://github.com/mooz/js2-mode/") (:keywords "languages" "javascript")) nil] [cl-struct-package-desc js2-mode (20150909) "Improved JavaScript editing mode" ((emacs (24 1)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/mooz/js2-mode/") (:keywords "languages" "javascript")) nil] [cl-struct-package-desc js2-mode (20150909) "Improved JavaScript editing mode" ((emacs (24 1)) (cl-lib (0 5))) tar "gnu" nil ((:keywords "languages" "javascript") (:url . "https://github.com/mooz/js2-mode/")) nil])
  (jgraph-mode [cl-struct-package-desc jgraph-mode (1 1) "Major mode for Jgraph files" ((cl-lib (0 5))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/jgraph-mode.html") (:keywords "tex" "wp")) nil])
  (javaimp [cl-struct-package-desc javaimp (0 6) "Add and reorder Java import statements in Maven projects" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/javaimp.html") (:keywords "java" "maven" "programming")) nil])
  (iterators [cl-struct-package-desc iterators (0 1) "Functions for working with iterators" ((emacs (25))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/iterators.html") (:keywords "extensions" "elisp")) nil])
  (ioccur [cl-struct-package-desc ioccur (20130821 2248) "Incremental occur" nil single "melpa" nil ((:url . "https://github.com/thierryvolpiatto/ioccur")) nil] [cl-struct-package-desc ioccur (2 4) "Incremental occur" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/ioccur.html") (:keywords)) nil])
  (hydra [cl-struct-package-desc hydra (20151030 1203) "Make bindings that stick around." ((cl-lib (0 5))) tar "melpa" nil ((:url . "https://github.com/abo-abo/hydra") (:keywords "bindings")) nil] [cl-struct-package-desc hydra (0 13 3) "Make bindings that stick around." ((cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/abo-abo/hydra") (:keywords "bindings")) nil] [cl-struct-package-desc hydra (0 13 3) "Make bindings that stick around." ((cl-lib (0 5))) tar "gnu" nil ((:keywords "bindings") (:url . "https://github.com/abo-abo/hydra")) nil])
  (heap [cl-struct-package-desc heap (0 3) "Heap (a.k.a. priority queue) data structure" nil single "gnu" nil ((:url . "http://www.dr-qubit.org/emacs.php") (:keywords "extensions" "data structures" "heap" "priority queue")) nil])
  (gnugo [cl-struct-package-desc gnugo (3 0 0) "play GNU Go in a buffer" ((ascii-art-to-unicode (1 5)) (xpm (1 0 1)) (cl-lib (0 5))) tar "gnu" nil ((:keywords "games" "processes") (:url . "http://www.gnuvola.org/software/gnugo/")) nil] [cl-struct-package-desc gnugo (2 2 12) "Play a game of Go against gnugo" nil single "marmalade" nil nil nil])
  (gnorb [cl-struct-package-desc gnorb (1 1 1) "Glue code between Gnus, Org, and BBDB" ((cl-lib (0 5))) tar "gnu" nil ((:keywords "mail" "org" "gnus" "bbdb" "todo" "task") (:url . "https://github.com/girzel/gnorb")) nil])
  (ggtags [cl-struct-package-desc ggtags (20151103 2145) "emacs frontend to GNU Global source code tagging system" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/leoliu/ggtags") (:keywords "tools" "convenience")) nil] [cl-struct-package-desc ggtags (0 8 10) "emacs frontend to GNU Global source code tagging system" ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/leoliu/ggtags") (:keywords "tools" "convenience")) nil] [cl-struct-package-desc ggtags (0 8 10) "emacs frontend to GNU Global source code tagging system" ((emacs (24)) (cl-lib (0 5))) single "gnu" nil ((:url . "https://github.com/leoliu/ggtags") (:keywords "tools" "convenience")) nil])
  (fsm [cl-struct-package-desc fsm (0 2) "state machine library" ((emacs (24 1)) (cl-lib (0 5))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/fsm.html") (:keywords "extensions")) nil])
  (flylisp [cl-struct-package-desc flylisp (0 2) "Color unbalanced parentheses and parentheses inconsistent with indentation" ((emacs (24 1)) (cl-lib (0 4))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/flylisp.html") (:keywords)) nil])
  (f90-interface-browser [cl-struct-package-desc f90-interface-browser (1 1) "Parse and browse f90 interfaces" nil single "gnu" nil ((:url . "http://github.com/wence-/f90-iface/") (:keywords)) nil])
  (exwm [cl-struct-package-desc exwm (0 1) "Emacs X Window Manager" ((xelb (0 3))) tar "gnu" nil ((:keywords "unix") (:url . "https://github.com/ch11ng/exwm")) nil])
  (ergoemacs-mode [cl-struct-package-desc ergoemacs-mode (20151109 622) "Emacs mode based on common modern interface and ergonomics." ((emacs (24 1)) (undo-tree (0 6 5))) tar "melpa" nil ((:url . "https://github.com/ergoemacs/ergoemacs-mode") (:keywords "convenience")) nil] [cl-struct-package-desc ergoemacs-mode (5 14 7 3 1) "Emacs mode based on common modern interface and ergonomics." ((emacs (24 1)) (undo-tree (0 6 5))) tar "melpa-stable" nil ((:url . "https://github.com/ergoemacs/ergoemacs-mode") (:keywords "convenience")) nil] [cl-struct-package-desc ergoemacs-mode (5 14 7 3) "Emacs mode based on common modern interface and ergonomics." ((emacs (24 1)) (undo-tree (0 6 5))) tar "gnu" nil ((:keywords "convenience") (:url . "https://github.com/ergoemacs/ergoemacs-mode")) nil])
  (epoch-view [cl-struct-package-desc epoch-view (0 0 1) "Minor mode to visualize epoch timestamps" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/epoch-view.html") (:keywords "data" "timestamp" "epoch" "unix")) nil])
  (enwc [cl-struct-package-desc enwc (1 0) "The Emacs Network Client" nil tar "gnu" nil ((:keywords "enwc" "network" "wicd" "manager" "nm") (:url . "http://elpa.gnu.org/packages/enwc.html")) nil])
  (electric-spacing [cl-struct-package-desc electric-spacing (20150822 1038) "Insert operators with surrounding spaces smartly" nil single "melpa" nil nil nil] [cl-struct-package-desc electric-spacing (5 0) "Insert operators with surrounding spaces smartly" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/electric-spacing.html") (:keywords)) nil])
  (eldoc-eval [cl-struct-package-desc eldoc-eval (20150512 506) "Enable eldoc support when minibuffer is in use." nil single "melpa" nil nil nil] [cl-struct-package-desc eldoc-eval (1 1) "Enable eldoc support when minibuffer is in use." nil single "melpa-stable" nil nil nil] [cl-struct-package-desc eldoc-eval (0 1) "Enable eldoc support when minibuffer is in use." nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/eldoc-eval.html") (:keywords)) nil])
  (el-search [cl-struct-package-desc el-search (0 1) "Expression based incremental search for emacs-lisp-mode" ((emacs (25))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/el-search.html") (:keywords "lisp")) nil])
  (ediprolog [cl-struct-package-desc ediprolog (1 1) "Emacs Does Interactive Prolog" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/ediprolog.html") (:keywords "languages" "processes")) nil])
  (easy-kill [cl-struct-package-desc easy-kill (20151030 2229) "kill & mark things easily" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/leoliu/easy-kill") (:keywords "killing" "convenience")) nil] [cl-struct-package-desc easy-kill (0 9 3) "kill & mark things easily" ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/leoliu/easy-kill") (:keywords "killing" "convenience")) nil] [cl-struct-package-desc easy-kill (0 9 3) "kill & mark things easily" ((emacs (24)) (cl-lib (0 5))) tar "gnu" nil ((:keywords "killing" "convenience") (:url . "https://github.com/leoliu/easy-kill")) nil])
  (dts-mode [cl-struct-package-desc dts-mode (20150403 1604) "Major mode for Devicetree source code" nil single "melpa" nil ((:keywords "languages")) nil] [cl-struct-package-desc dts-mode (0 1 0) "Major mode for Device Tree source files" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/dts-mode.html") (:keywords "languages")) nil])
  (docbook [cl-struct-package-desc docbook (0 1) "Info-like viewer for DocBook" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/docbook.html") (:keywords "docs" "help")) nil])
  (djvu [cl-struct-package-desc djvu (0 5) "Edit and view Djvu files via djvused" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/djvu.html") (:keywords "files" "wp")) nil])
  (dismal [cl-struct-package-desc dismal (1 5) "Dis Mode Ain't Lotus: Spreadsheet program Emacs" ((cl-lib (0))) tar "gnu" nil ((:url . "http://elpa.gnu.org/packages/dismal.html")) nil])
  (diff-hl [cl-struct-package-desc diff-hl (20151030 1940) "Highlight uncommitted changes" ((cl-lib (0 2))) tar "melpa" nil ((:url . "https://github.com/dgutov/diff-hl") (:keywords "vc" "diff")) nil] [cl-struct-package-desc diff-hl (1 8 1) "Highlight uncommitted changes" ((cl-lib (0 2))) tar "gnu" nil ((:keywords "vc" "diff") (:url . "https://github.com/dgutov/diff-hl")) nil])
  (dict-tree [cl-struct-package-desc dict-tree (0 12 8) "Dictionary data structure" ((trie (0 2 5)) (tNFA (0 1 1)) (heap (0 3))) single "gnu" nil ((:url . "http://www.dr-qubit.org/emacs.php") (:keywords "extensions" "matching" "data structures trie" "tree" "dictionary" "completion" "regexp")) nil])
  (debbugs [cl-struct-package-desc debbugs (0 7) "SOAP library to access debbugs servers" nil tar "gnu" nil ((:keywords "comm" "hypermedia") (:url . "http://elpa.gnu.org/packages/debbugs.html")) nil])
  (dbus-codegen [cl-struct-package-desc dbus-codegen (0 1) "Lisp code generation for D-Bus." ((cl-lib (0 5))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/dbus-codegen.html") (:keywords "comm" "dbus" "convenience")) nil])
  (dash [cl-struct-package-desc dash (20151021 113) "A modern list library for Emacs" nil single "melpa" nil ((:keywords "lists")) nil] [cl-struct-package-desc dash (2 12 1) "A modern list library for Emacs" nil single "melpa-stable" nil ((:keywords "lists")) nil] [cl-struct-package-desc dash (2 12 0) "A modern list library for Emacs" nil tar "gnu" nil ((:keywords "lists") (:url . "http://elpa.gnu.org/packages/dash.html")) nil] [cl-struct-package-desc dash (2 11 0) "A modern list library for Emacs" nil single "marmalade" nil nil nil])
  (darkroom [cl-struct-package-desc darkroom (0 1) "Remove visual distractions and focus on writing" ((cl-lib (0 5))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/darkroom.html") (:keywords "convenience" "emulations")) nil])
  (csv-mode [cl-struct-package-desc csv-mode (1 5) "Major mode for editing comma/char separated values" nil single "gnu" nil ((:url . "http://centaur.maths.qmul.ac.uk/Emacs/") (:keywords "convenience")) nil])
  (crisp [cl-struct-package-desc crisp (1 3 4) "CRiSP/Brief Emacs emulator" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/crisp.html") (:keywords "emulations" "brief" "crisp")) nil])
  (context-coloring [cl-struct-package-desc context-coloring (7 2 0) "Highlight by scope" ((emacs (24 3)) (js2-mode (20150713))) single "gnu" nil ((:url . "https://github.com/jacksonrayhamilton/context-coloring") (:keywords "convenience" "faces" "tools")) nil])
  (company-statistics [cl-struct-package-desc company-statistics (0 2 1) "Sort candidates using completion history" ((emacs (24 3)) (company (0 8 5))) tar "gnu" nil ((:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/company-mode/company-statistics")) nil])
  (company-math [cl-struct-package-desc company-math (20150830 1637) "Completion backends for unicode math symbols and latex tags" ((company (0 8 0)) (math-symbol-lists (1 0))) single "melpa" nil ((:url . "https://github.com/vspinu/company-math") (:keywords "unicode" "symbols" "completion")) nil] [cl-struct-package-desc company-math (1 0 1) "Completion backends for unicode math symbols and latex tags" ((company (0 8 0)) (math-symbol-lists (1 0))) single "gnu" nil ((:url . "https://github.com/vspinu/company-math") (:keywords "unicode" "symbols" "completion")) nil])
  (company [cl-struct-package-desc company (20151103 230) "Modular text completion framework" ((emacs (24 1)) (cl-lib (0 5))) tar "melpa" nil ((:url . "http://company-mode.github.io/") (:keywords "abbrev" "convenience" "matching")) nil] [cl-struct-package-desc company (0 8 12) "Modular text completion framework" ((emacs (24 1)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "http://company-mode.github.io/") (:keywords "abbrev" "convenience" "matching")) nil] [cl-struct-package-desc company (0 8 12) "Modular text completion framework" ((emacs (24 1)) (cl-lib (0 5))) tar "gnu" nil ((:keywords "abbrev" "convenience" "matching") (:url . "http://company-mode.github.io/")) nil])
  (coffee-mode [cl-struct-package-desc coffee-mode (20151019 2009) "Major mode to edit CoffeeScript files in Emacs" ((emacs (24 1)) (cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/defunkt/coffee-mode") (:keywords "coffeescript" "major" "mode")) nil] [cl-struct-package-desc coffee-mode (0 6 1) "Major mode to edit CoffeeScript files in Emacs" ((emacs (24 1)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "http://github.com/defunkt/coffee-mode") (:keywords "coffeescript" "major" "mode")) nil] [cl-struct-package-desc coffee-mode (0 4 1 1) "Major mode for CoffeeScript files" nil single "gnu" nil ((:url . "http://github.com/defunkt/coffee-mode") (:keywords "coffeescript" "major" "mode")) nil] [cl-struct-package-desc coffee-mode (0 3 0) "Major mode to edit CoffeeScript files in Emacs" nil single "marmalade" nil nil nil])
  (cl-lib [cl-struct-package-desc cl-lib (0 5) "Properly prefixed CL functions and macros" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/cl-lib.html") (:keywords)) nil])
  (cl-generic [cl-struct-package-desc cl-generic (0 2) "Forward cl-generic compatibility for Emacs<25" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/cl-generic.html") (:keywords)) nil])
  (chess [cl-struct-package-desc chess (2 0 4) "Play chess in GNU Emacs" ((cl-lib (0 5))) tar "gnu" nil ((:keywords "games") (:url . "http://elpa.gnu.org/packages/chess.html")) nil])
  (caps-lock [cl-struct-package-desc caps-lock (1 0) "Caps-lock as a minor mode" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/caps-lock.html") (:keywords)) nil])
  (bug-hunter [cl-struct-package-desc bug-hunter (1 0) "Hunt down errors in elisp files" ((seq (1 3)) (cl-lib (0 5))) single "gnu" nil ((:url . "http://github.com/Malabarba/elisp-bug-hunter") (:keywords "lisp")) nil])
  (beacon [cl-struct-package-desc beacon (20151111 826) "Highlight the cursor whenever the window scrolls" ((seq (1 11))) single "melpa" nil ((:url . "https://github.com/Malabarba/beacon") (:keywords "convenience")) nil] [cl-struct-package-desc beacon (0 5 1) "Highlight the cursor whenever the window scrolls" ((seq (1 11))) single "gnu" nil ((:url . "https://github.com/Malabarba/beacon") (:keywords "convenience")) nil])
  (avy [cl-struct-package-desc avy (20151111 450) "set-based completion" ((emacs (24 1)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/abo-abo/avy") (:keywords "point" "location")) nil] [cl-struct-package-desc avy (0 3 0) "set-based completion" ((emacs (24 1)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/abo-abo/avy") (:keywords "point" "location")) nil] [cl-struct-package-desc avy (0 3 0) "set-based completion" ((emacs (24 1)) (cl-lib (0 5))) tar "gnu" nil ((:keywords "point" "location") (:url . "https://github.com/abo-abo/avy")) nil])
  (auto-overlays [cl-struct-package-desc auto-overlays (0 10 9) "Automatic regexp-delimited overlays" nil tar "gnu" nil ((:keywords "extensions") (:url . "http://www.dr-qubit.org/emacs.php")) nil])
  (aumix-mode [cl-struct-package-desc aumix-mode (7) "run the aumix program in a buffer" nil single "user42" nil ((:url . "http://user42.tuxfamily.org/aumix-mode/index.html")) nil] [cl-struct-package-desc aumix-mode (7) "run the aumix program in a buffer" nil single "gnu" nil ((:url . "http://user42.tuxfamily.org/aumix-mode/index.html") (:keywords "multimedia" "mixer" "aumix")) nil])
  (auctex [cl-struct-package-desc auctex (11 88 9) "Integrated environment for *TeX*" nil tar "gnu" nil ((:url . "http://www.gnu.org/software/auctex/")) nil])
  (ascii-art-to-unicode [cl-struct-package-desc ascii-art-to-unicode (1 9) "a small artist adjunct" nil single "gnu" nil ((:url . "http://www.gnuvola.org/software/aa2u/") (:keywords "ascii" "unicode" "box-drawing")) nil])
  (all [cl-struct-package-desc all (1 0) "Edit all lines matching a given regexp" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/all.html") (:keywords "matching")) nil])
  (ahungry-theme [cl-struct-package-desc ahungry-theme (20151014 1938) "Ahungry color theme for Emacs.  Make sure to (load-theme 'ahungry)." ((emacs (24))) single "melpa" nil ((:url . "https://github.com/ahungry/color-theme-ahungry") (:keywords "ahungry" "palette" "color" "theme" "emacs" "color-theme" "deftheme")) nil] [cl-struct-package-desc ahungry-theme (1 0 12) "Ahungry color theme for Emacs.  Make sure to (load-theme 'ahungry)." ((emacs (24))) tar "gnu" nil ((:keywords "ahungry" "palette" "color" "theme" "emacs" "color-theme" "deftheme") (:url . "https://github.com/ahungry/color-theme-ahungry")) nil])
  (aggressive-indent [cl-struct-package-desc aggressive-indent (20151025 743) "Minor mode to aggressively keep your code always indented" ((emacs (24 1)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/Malabarba/aggressive-indent-mode") (:keywords "indent" "lisp" "maint" "tools")) nil] [cl-struct-package-desc aggressive-indent (1 4 1) "Minor mode to aggressively keep your code always indented" ((emacs (24 1)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/Malabarba/aggressive-indent-mode") (:keywords "indent" "lisp" "maint" "tools")) nil] [cl-struct-package-desc aggressive-indent (1 4) "Minor mode to aggressively keep your code always indented" ((emacs (24 1)) (cl-lib (0 5))) single "gnu" nil ((:url . "http://github.com/Malabarba/aggressive-indent-mode") (:keywords "indent" "lisp" "maint" "tools")) nil])
  (adjust-parens [cl-struct-package-desc adjust-parens (3 0) "Indent and dedent Lisp code, automatically adjust close parens" nil tar "gnu" nil ((:url . "http://elpa.gnu.org/packages/adjust-parens.html")) nil])
  (adaptive-wrap [cl-struct-package-desc adaptive-wrap (0 5) "Smart line-wrapping with wrap-prefix" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/adaptive-wrap.html") (:keywords)) nil])
  (ada-ref-man [cl-struct-package-desc ada-ref-man (2012 0) "Ada Reference Manual 2012" nil tar "gnu" nil ((:keywords "languages" "ada") (:url . "http://stephe-leake.org/ada/arm.html")) nil])
  (ada-mode [cl-struct-package-desc ada-mode (5 1 8) "major-mode for editing Ada sources" ((wisi (1 1 1)) (cl-lib (0 4)) (emacs (24 2))) tar "gnu" nil ((:keywords "languages" "ada") (:url . "http://stephe-leake.org/emacs/ada-mode/emacs-ada-mode.html")) nil])
  (ack [cl-struct-package-desc ack (1 5) "interface to ack-like tools" nil tar "gnu" nil ((:keywords "tools" "processes" "convenience") (:url . "https://github.com/leoliu/ack-el")) nil])
  (ace-window [cl-struct-package-desc ace-window (20150803 837) "Quickly switch windows." ((avy (0 2 0))) single "melpa" nil ((:url . "https://github.com/abo-abo/ace-window") (:keywords "window" "location")) nil] [cl-struct-package-desc ace-window (0 9 0) "Quickly switch windows." ((avy (0 2 0))) single "melpa-stable" nil ((:url . "https://github.com/abo-abo/ace-window") (:keywords "window" "location")) nil] [cl-struct-package-desc ace-window (0 9 0) "Quickly switch windows." ((avy (0 2 0))) single "gnu" nil ((:url . "https://github.com/abo-abo/ace-window") (:keywords "window" "location")) nil])
 )
