'(
  (ac-R [cl-struct-package-desc ac-R (0 2) "Autocompletion routines for R" nil single "marmalade" nil nil nil])
  (ac-cider [cl-struct-package-desc ac-cider (0 2 0) "Clojure auto-complete sources using CIDER" ((cider (0 8 0)) (auto-complete (1 4)) (cl-lib (0 3))) single "marmalade" nil nil nil])
  (ac-cider-compliment [cl-struct-package-desc ac-cider-compliment (0 1 0) "auto-complete sources for Clojure using" ((cider (0 5 0)) (auto-complete (1 4))) single "marmalade" nil nil nil])
  (ac-geiser [cl-struct-package-desc ac-geiser (0 1) "Auto-complete backend for geiser" ((geiser (0 5)) (auto-complete (1 4))) tar "marmalade" nil nil nil])
  (ac-inf-ruby [cl-struct-package-desc ac-inf-ruby (0 4) "Enable auto-complete in inf-ruby sessions" ((inf-ruby (2 3 2)) (auto-complete (1 4))) single "marmalade" nil nil nil])
  (ac-python [cl-struct-package-desc ac-python (20110519) "Simple Python Completion Source for Auto-Complete" ((auto-complete (1 4))) single "marmalade" nil nil nil])
  (alchemist [cl-struct-package-desc alchemist (0 13 0) "Elixir tooling integration into emacs" ((emacs (24))) tar "marmalade" nil nil nil])
  (ample-zen-theme [cl-struct-package-desc ample-zen-theme (0 3) "AmpleZen Theme for Emacs 24" nil single "marmalade" nil nil nil])
  (ansible-doc [cl-struct-package-desc ansible-doc (0 3) "Ansible documentation Minor Mode" ((emacs (24 1))) single "marmalade" nil nil nil])
  (anzu [cl-struct-package-desc anzu (0 22) "Show number of matches in mode-line while searching" nil single "marmalade" nil nil nil])
  (aok [cl-struct-package-desc aok (0 1) "various useful ways to do `multi-occur'" nil single "marmalade" nil nil nil])
  (ariadne [cl-struct-package-desc ariadne (0 1) "Ariadne plugin for Emacs" ((bert (0 1))) single "marmalade" nil nil nil])
  (auto-complete-etags [cl-struct-package-desc auto-complete-etags (0 2) "Auto-complete etags" ((auto-complete (1 3))) single "marmalade" nil nil nil])
  (auto-complete-octave [cl-struct-package-desc auto-complete-octave (0 1) "Auto-complete for Octave" nil single "marmalade" nil nil nil])
  (auto-complete-verilog [cl-struct-package-desc auto-complete-verilog (0 0) "Verukig" nil single "marmalade" nil nil nil])
  (bbdb2erc [cl-struct-package-desc bbdb2erc (0 1 0) "make bbdb show if pal is online with ERC, click i to chat" nil single "marmalade" nil nil nil])
  (bert [cl-struct-package-desc bert (0 1) "BERT serialization library for Emacs" nil single "marmalade" nil nil nil])
  (bubbleberry-theme [cl-struct-package-desc bubbleberry-theme (0 1 2) "A theme based on LightTable for Emacs24" ((emacs (24 1))) single "marmalade" nil nil nil])
  (buffer-file-utils [cl-struct-package-desc buffer-file-utils (1 0) "utilities operating on a buffer and the associated file" nil single "marmalade" nil nil nil])
  (cedit [cl-struct-package-desc cedit (0 0 0) "paredit-like commands for c-like languages" nil single "marmalade" nil nil nil])
  (checkbox [cl-struct-package-desc checkbox (0 2 1) "Quick manipulation of textual checkboxes" ((emacs (24)) (cl-lib (0 5))) single "marmalade" nil nil nil])
  (cider [cl-struct-package-desc cider (0 8 2) "Clojure Integrated Development Environment and REPL" ((clojure-mode (3 0 0)) (cl-lib (0 5)) (dash (2 4 1)) (pkg-info (0 4)) (emacs (24)) (queue (0 1 1))) tar "marmalade" nil nil nil])
  (cl-lib-highlight [cl-struct-package-desc cl-lib-highlight (1 0 0) "full cl-lib font-lock highlighting" ((cl-lib (0 3))) single "marmalade" nil nil nil])
  (clojure-env [cl-struct-package-desc clojure-env (0 0 4) "manage clojure environments with Emacs" nil single "marmalade" nil nil nil])
  (clojure-mode-extra-font-locking [cl-struct-package-desc clojure-mode-extra-font-locking (3 0 0) "Extra font-locking for Clojure mode" ((clojure-mode (3 0))) single "marmalade" nil nil nil])
  (clojure-project [cl-struct-package-desc clojure-project (1 0) "Extends project-mode for Clojure projects" ((project-mode (1 0))) single "marmalade" nil nil nil])
  (cmuclojure [cl-struct-package-desc cmuclojure (0 2) "Clojure process in a buffer" nil single "marmalade" nil nil nil])
  (cobra-mode [cl-struct-package-desc cobra-mode (1 0 1) "Major mode for .NET-based Cobra language" nil single "marmalade" nil nil nil])
  (color-theme-tangotango [cl-struct-package-desc color-theme-tangotango (0 0 2) "Tango Palette color theme for Emacs." ((color-theme (6 6 1))) single "marmalade" nil nil nil])
  (color-theme-zenburn [cl-struct-package-desc color-theme-zenburn (0 3) "A low contrast color theme for Emacs." ((color-theme (6 6 1))) single "marmalade" nil nil nil])
  (comint-better-defaults [cl-struct-package-desc comint-better-defaults (1 0) "better defaults for comint-derived modes" nil single "marmalade" nil nil nil])
  (creds [cl-struct-package-desc creds (0 0 6 1) "A parser credentials file library (not limited to credentials entries)" ((s (1 9 0)) (dash (2 5 0))) tar "marmalade" nil nil nil])
  (ctags [cl-struct-package-desc ctags (1 1 1) "Exuberant Ctags utilities for Emacs" nil single "marmalade" nil nil nil])
  (cubicle-mode [cl-struct-package-desc cubicle-mode (0 1) "Cubicle major mode for emacs" nil single "marmalade" nil nil nil])
  (curl-for-url [cl-struct-package-desc curl-for-url (0 0 2) "use url-retrieve with curl doing the work" ((noflet (0 0 15))) single "marmalade" nil nil nil])
  (dash-functional [cl-struct-package-desc dash-functional (1 2 0) "Collection of useful combinators for Emacs Lisp" ((dash (2 0 0)) (emacs (24))) single "marmalade" nil nil nil])
  (demo-multifile [cl-struct-package-desc demo-multifile (0 0 2) "a demo multifile package." nil tar "marmalade" nil nil nil])
  (dired-nav-enhance [cl-struct-package-desc dired-nav-enhance (1 0) "Enhanced navigation for dired buffers" nil single "marmalade" nil nil nil])
  (dirtrack-buffer-name-track-mode [cl-struct-package-desc dirtrack-buffer-name-track-mode (1 0 0) "minor mode to cause shell buffers to reflect the working directory" nil single "marmalade" nil nil nil])
  (discord [cl-struct-package-desc discord (0 5) "Discordian dates for calendar" nil single "marmalade" nil nil nil])
  (downplay-mode [cl-struct-package-desc downplay-mode (0 1) "focus attention on a region of the buffer" nil single "marmalade" nil nil nil])
  (dummy-package [cl-struct-package-desc dummy-package (0 0 25) "a fake package for the marmalade test suite" ((timeclock (2 6 1))) single "marmalade" nil nil nil])
  (eh-common [cl-struct-package-desc eh-common (0 0 1) "Tumashu's  emacs functions" nil single "marmalade" nil nil nil])
  (el-init [cl-struct-package-desc el-init (20130416) "Loader for configuration files" nil tar "marmalade" nil nil nil])
  (eldoro [cl-struct-package-desc eldoro (0 1 0) "A pomodoro timer/tracker that works with org-mode." nil tar "marmalade" nil nil nil])
  (electric-case [cl-struct-package-desc electric-case (2 2 1) "insert camelCase, snake_case words without \"Shift\"ing" nil single "marmalade" nil nil nil])
  (elfeed [cl-struct-package-desc elfeed (1 1 2) "an Emacs Atom/RSS feed reader" ((emacs (24 1))) tar "marmalade" nil nil nil])
  (elfeed-web [cl-struct-package-desc elfeed-web (1 1 0) "web interface to Elfeed" ((simple-httpd (1 4 3)) (elfeed (1 0 1)) (emacs (24 1))) tar "marmalade" nil nil nil])
  (elisp-indexer [cl-struct-package-desc elisp-indexer (0 0 9) "indexing utils for emacslisp" nil single "marmalade" nil nil nil])
  (elpa-mirror [cl-struct-package-desc elpa-mirror (1 1 2) "ELPA mirror from locally installed packages is easy" nil tar "marmalade" nil nil nil])
  (elscreen [cl-struct-package-desc elscreen (1 4 6) "Screen for Emacsen" nil single "marmalade" nil nil nil])
  (emacs-cl [cl-struct-package-desc emacs-cl (0 5) "Emacs Common Lisp" nil tar "marmalade" nil nil nil])
  (emacs-xkcd [cl-struct-package-desc emacs-xkcd (1 0) "View xkcd from Emacs" ((json (1 4))) single "marmalade" nil nil nil])
  (env-var-import [cl-struct-package-desc env-var-import (2 1) "Import shell environment variables in GUI Emacs" nil single "marmalade" nil nil nil])
  (epl [cl-struct-package-desc epl (0 7) "Emacs Package Library" ((cl-lib (0 3))) single "marmalade" nil nil nil])
  (eprime-mode [cl-struct-package-desc eprime-mode (1 1 2) "An E-prime checking mode for Emacs" nil single "marmalade" nil nil nil])
  (erc-nick-notify [cl-struct-package-desc erc-nick-notify (0 2 1) "Notify popup for ERC" nil single "marmalade" nil nil nil])
  (ertx [cl-struct-package-desc ertx (0 0 2) "Extra useful testing functions for EmacsLisp." nil single "marmalade" nil nil nil])
  (es-windows [cl-struct-package-desc es-windows (0 2) "Window-management utilities" ((cl-lib (0 3)) (emacs (24))) single "marmalade" nil nil nil])
  (eshell-fringe-status [cl-struct-package-desc eshell-fringe-status (1 0 0) "Show last status in fringe" nil single "marmalade" nil nil nil])
  (ess-R-object-popup [cl-struct-package-desc ess-R-object-popup (0 0 6) "popup description of R object" nil single "marmalade" nil nil nil])
  (evil-escape [cl-struct-package-desc evil-escape (2 11) "Escape from anything with a customizable key sequence" ((emacs (24)) (evil (1 0 9))) single "marmalade" nil nil nil])
  (evil-indent-textobject [cl-struct-package-desc evil-indent-textobject (0 2) "evil textobjects based on indentation" ((evil (0))) single "marmalade" nil nil nil])
  (evil-matchit [cl-struct-package-desc evil-matchit (1 3 0) "Vim matchit ported into Emacs (requires EVIL)" nil tar "marmalade" nil nil nil])
  (exercism [cl-struct-package-desc exercism (0 0 1) "An Emacs mode for submitting current file to exercism.io" nil single "marmalade" nil nil nil])
  (eyebrowse [cl-struct-package-desc eyebrowse (0 3 2) "Easy window config switching" ((dash (2 7 0))) single "marmalade" nil nil nil])
  (f [cl-struct-package-desc f (0 11 0) "Modern API for working with files and directories" ((s (1 7 0)) (dash (2 2 0))) single "marmalade" nil nil nil])
  (fancy-battery [cl-struct-package-desc fancy-battery (0 2) "Fancy battery display" ((emacs (24 1))) single "marmalade" nil nil nil])
  (file-format [cl-struct-package-desc file-format (0 0 4) "templates with files as the source" ((s (1 5 0))) single "marmalade" nil nil nil])
  (finalize [cl-struct-package-desc finalize (1 0 0) "finalizers for Emacs Lisp" ((emacs (24 1)) (cl-lib (0 3)) (eieio (1 4))) tar "marmalade" nil nil nil])
  (fiplr [cl-struct-package-desc fiplr (0 1 3) "Fuzzy finder for files in a project." nil single "marmalade" nil nil nil])
  (fit-frame [cl-struct-package-desc fit-frame (0) "Resize a frame.  In particular, fit a frame to its buffers." nil single "marmalade" nil nil nil])
  (fixme-mode [cl-struct-package-desc fixme-mode (1 0 2) "fixme minor mode to highlight warning words" nil single "marmalade" nil nil nil])
  (flatland-theme [cl-struct-package-desc flatland-theme (0 1 2) "A simple theme for Emacs." nil single "marmalade" nil nil nil])
  (flycheck-cask [cl-struct-package-desc flycheck-cask (0 2 1) "Cask support in Flycheck" ((emacs (24 1)) (flycheck (0 14)) (dash (2 4 0))) single "marmalade" nil nil nil])
  (flycheck-haskell [cl-struct-package-desc flycheck-haskell (0 4) "Flycheck: Cabal projects and sandboxes" ((flycheck (0 16)) (haskell-mode (13 7)) (dash (2 4 0)) (f (0 11 0))) tar "marmalade" nil nil nil])
  (flycheck-hdevtools [cl-struct-package-desc flycheck-hdevtools (0 2) "A flycheck checker for Haskell using hdevtools" ((flycheck (0 15))) single "marmalade" nil nil nil])
  (flycheck-ledger [cl-struct-package-desc flycheck-ledger (0 2) "Flycheck integration for ledger files" ((flycheck (0 15))) single "marmalade" nil nil nil])
  (flycheck-ocaml [cl-struct-package-desc flycheck-ocaml (0 2) "Flycheck: OCaml support" ((emacs (24 1)) (flycheck (0 22 -3 1)) (merlin (2 0)) (let-alist (1 0 3))) single "marmalade" nil nil nil])
  (flycheck-tcl [cl-struct-package-desc flycheck-tcl (0 4) "A flycheck checker for Tcl using ActiveState's tclchecker" ((flycheck (0 17))) single "marmalade" nil nil nil])
  (flymake-puppet [cl-struct-package-desc flymake-puppet (1 0 0) "An Emacs flymake handler for syntax-checking puppet using puppet-lint" ((flymake-easy (0 9))) single "marmalade" nil nil nil])
  (flymake-racket [cl-struct-package-desc flymake-racket (0 40) "A flymake handler for scheme-mode files" ((flymake-easy (0 1))) single "marmalade" nil nil nil])
  (fooddice [cl-struct-package-desc fooddice (0 1) "Help me I am hungry and dont know what to eat!" nil single "marmalade" nil nil nil])
  (form-feed [cl-struct-package-desc form-feed (0 1 5) "Display ^L glyphs as horizontal lines" nil single "marmalade" nil nil nil])
  (fpaste [cl-struct-package-desc fpaste (0 1 3) "Send text to http://fpaste.org" nil single "marmalade" nil nil nil])
  (garoon [cl-struct-package-desc garoon (0 0 1) "A Garoon client." nil single "marmalade" nil nil nil])
  (gecf [cl-struct-package-desc gecf (0 1 0) "G\366ktu's Emacs configuration framework." nil single "marmalade" nil nil nil])
  (gerrit-download [cl-struct-package-desc gerrit-download (0 2) "Show gerrit reviews in a diff buffer." ((magit (20130828 1540))) single "marmalade" nil nil nil])
  (git-draft [cl-struct-package-desc git-draft (0 0 2) "draft git commit messages" ((dash (2 9 0))) single "marmalade" nil nil nil])
  (gitattributes-whitespace [cl-struct-package-desc gitattributes-whitespace (1 20141128) "configure whitespace settings from gitattributes" nil single "marmalade" nil nil nil])
  (gnus-summary-ext [cl-struct-package-desc gnus-summary-ext (0 1) "Extra limit and process mark commands for the gnus summary buffer" ((macro-utils (1 0))) single "marmalade" nil nil nil])
  (god-mode [cl-struct-package-desc god-mode (2 12 0) "God-like command entering minor mode" nil single "marmalade" nil nil nil])
  (gotham-theme [cl-struct-package-desc gotham-theme (1 0) "A very dark Emacs color theme." nil single "marmalade" nil nil nil])
  (goto-chg [cl-struct-package-desc goto-chg (1 6) "goto last change" nil single "marmalade" nil nil nil])
  (gratuitous-dark-theme [cl-struct-package-desc gratuitous-dark-theme (1 3) "A theme originally by 'cofi' from #emacs, Freenode. It is a combination of Monokai and several other themes. The modeline has been modelled after AwesomeWM because it looks cool." nil single "marmalade" nil nil nil])
  (guile-scheme [cl-struct-package-desc guile-scheme (0 1) "Guile Scheme editing mode" nil single "marmalade" nil nil nil])
  (gvpr-mode [cl-struct-package-desc gvpr-mode (0 1 0) "A major mode offering basic syntax coloring for gvpr scripts." nil single "marmalade" nil nil nil])
  (helm-dash [cl-struct-package-desc helm-dash (1 1) "Helm extension to search dash docsets" ((helm (0 0 0))) single "marmalade" nil nil nil])
  (helm-delicious [cl-struct-package-desc helm-delicious (1 3) "helm extensions for delicious bookmarks" nil single "marmalade" nil nil nil])
  (helm-helm-commands [cl-struct-package-desc helm-helm-commands (0 2) "List all helm commands with helm" ((helm (1 5 4))) single "marmalade" nil nil nil])
  (heroku-theme [cl-struct-package-desc heroku-theme (1 1 0) "Heroku color theme" nil single "marmalade" nil nil nil])
  (highlight-current-line [cl-struct-package-desc highlight-current-line (0 57) "highlight line where the cursor is." nil single "marmalade" nil nil nil])
  (highlight-sexp [cl-struct-package-desc highlight-sexp (1 0) "highlight current zone according to its context" nil single "marmalade" nil nil nil])
  (hl-spotlight [cl-struct-package-desc hl-spotlight (0) "Extension of hl-line.el to spotlight current few lines." nil single "marmalade" nil nil nil])
  (how-many-lines-in-project [cl-struct-package-desc how-many-lines-in-project (0 3) "Calculate how many lines are there in your project." ((find-file-in-project (3 3))) single "marmalade" nil nil nil])
  (iasm-mode [cl-struct-package-desc iasm-mode (0 1) "interactive assembly major mode." nil single "marmalade" nil nil nil])
  (ical-pull [cl-struct-package-desc ical-pull (0 0 3) "pull ical feeds into org-agenda" ((shadchen (1 2)) (dash (2 9 0)) (s (1 9 0)) (noflet (0 0 14)) (web (0 5 1))) single "marmalade" nil nil nil])
  (ido-select-window [cl-struct-package-desc ido-select-window (0 1 0) "Select a window using ido and buffer names." nil tar "marmalade" nil nil nil])
  (ido-vertical-mode [cl-struct-package-desc ido-vertical-mode (0 1 1) "Makes ido-mode display vertically." nil single "marmalade" nil nil nil])
  (immutant-server [cl-struct-package-desc immutant-server (1 0 1) "Run your Immutant server in Emacs" nil single "marmalade" nil nil nil])
  (inf-clojure [cl-struct-package-desc inf-clojure (1 0 0) "an inferior-clojure mode" ((emacs (24 1)) (clojure-mode (4 0))) single "marmalade" nil nil nil])
  (initchart [cl-struct-package-desc initchart (0 1 1) "Emacs' init process performance visualization" ((cl-lib (0 3))) single "marmalade" nil nil nil])
  (insert-shebang [cl-struct-package-desc insert-shebang (0 9 3) "Insert shebang line automatically." nil single "marmalade" nil nil nil])
  (ir-black-theme [cl-struct-package-desc ir-black-theme (1 0) "Port of ir-black theme" nil single "marmalade" nil nil nil])
  (iregister [cl-struct-package-desc iregister (0 5 0) "Interactive register commands for Emacs." nil tar "marmalade" nil nil nil])
  (isearch-switch [cl-struct-package-desc isearch-switch (1 0) "switch the manner you are isearching in." nil single "marmalade" nil nil nil])
  (isgd [cl-struct-package-desc isgd (20130927) "Shorten URLs using the isgd.com shortener service" nil single "marmalade" nil nil nil])
  (ix [cl-struct-package-desc ix (0 7) "Emacs client for http://ix.io pastebin" ((grapnel (0 5 3))) single "marmalade" nil nil nil])
  (jam-mode [cl-struct-package-desc jam-mode (0 3) "Font-lock support for Jam files" nil single "marmalade" nil nil nil])
  (jasmin [cl-struct-package-desc jasmin (1 2) "major editing mode for Jasmin Java bytecode assembler files" nil single "marmalade" nil nil nil])
  (java-file-create [cl-struct-package-desc java-file-create (1 0) "automatically insert contents of empty java files" nil single "marmalade" nil nil nil])
  (jcuken-fix [cl-struct-package-desc jcuken-fix (1 0) "Map Modifier-CyrillicLetter to the underlying Modifier-LatinLetter." nil single "marmalade" nil nil nil])
  (journal [cl-struct-package-desc journal (1 2 1) "a simple org-mode based journaling mode" nil single "marmalade" nil nil nil])
  (json-snatcher [cl-struct-package-desc json-snatcher (1 0) "Grabs the path to JSON values in a JSON file." nil single "marmalade" nil nil nil])
  (jujube-theme [cl-struct-package-desc jujube-theme (0 1) "Pastel theme loosely based on jellybeans" nil single "marmalade" nil nil nil])
  (jump-dls [cl-struct-package-desc jump-dls (0 6) "Jump to definition of symbol using various methods." nil single "marmalade" nil nil nil])
  (karma [cl-struct-package-desc karma (0 1 0) "Karma Test Runner Emacs Integration" nil single "marmalade" nil nil nil])
  (lang-refactor [cl-struct-package-desc lang-refactor (0 1 1) "Simple refactorings, primarily for Perl" nil single "marmalade" nil nil nil])
  (latest-clojure-libraries [cl-struct-package-desc latest-clojure-libraries (0 5) "Clojure dependency resolver" nil single "marmalade" nil nil nil])
  (latex-pretty-symbols [cl-struct-package-desc latex-pretty-symbols (1 0) "Display many latex symbols as their unicode counterparts" nil single "marmalade" nil nil nil])
  (latex-preview-pane [cl-struct-package-desc latex-preview-pane (20140205) "Makes LaTeX editing less painful by providing a updatable preview pane" nil tar "marmalade" nil nil nil])
  (layout-restore [cl-struct-package-desc layout-restore (0 4) "keep window configuration as layout and restore it simply." nil single "marmalade" nil nil nil])
  (lentic [cl-struct-package-desc lentic (0 7) "One buffer as a view of another" ((emacs (24 4)) (m-buffer (0 8)) (dash (2 5 0)) (f (0 17 2))) tar "marmalade" nil nil nil])
  (linear-undo [cl-struct-package-desc linear-undo (5 2) "Intuitive undo/redo." nil single "marmalade" nil nil nil])
  (linky-client [cl-struct-package-desc linky-client (0 0 2) "a client for linky.elnode.org" nil single "marmalade" nil nil nil])
  (list-register [cl-struct-package-desc list-register (2 2) "List register" nil single "marmalade" nil nil nil])
  (livecoder [cl-struct-package-desc livecoder (0 0 2) "tools for live coders" nil single "marmalade" nil nil nil])
  (livid-mode [cl-struct-package-desc livid-mode (0 1 0) "Live browser eval of JavaScript every time a buffer changes" ((skewer-mode (1 5 3)) (s (1 8 0))) single "marmalade" nil nil nil])
  (lxc [cl-struct-package-desc lxc (0 0 2) "lxc integration with Emacs" nil single "marmalade" nil nil nil])
  (lyskom [cl-struct-package-desc lyskom (20131008) "LysKOM elisp client." nil single "marmalade" nil nil nil])
  (m-buffer [cl-struct-package-desc m-buffer (0 8) "Buffer Manipulation Functions" ((emacs (24 3)) (dash (2 5 0))) tar "marmalade" nil nil nil])
  (magit-find-file [cl-struct-package-desc magit-find-file (1 0 4) "completing-read over all files in Git" ((magit (1 2 0))) single "marmalade" nil nil nil])
  (magit-tramp [cl-struct-package-desc magit-tramp (0 1 0) "git method for TRAMP" ((magit (1 2 0))) single "marmalade" nil nil nil])
  (mainline [cl-struct-package-desc mainline (1 1 0) "modeline replacement forked from an early version of powerline.el" nil single "marmalade" nil nil nil])
  (mark [cl-struct-package-desc mark (0 3) "Navigate and visualize the mark-ring" ((fm (1 0))) single "marmalade" nil nil nil])
  (markdown-toc [cl-struct-package-desc markdown-toc (0 0 7) "A simple TOC generator for markdown file" ((markdown-mode (2 0)) (dash (2 5 0)) (s (1 7 0))) single "marmalade" nil nil nil])
  (marmalade-client [cl-struct-package-desc marmalade-client (0 0 12) "client for marmalade API from emacs" ((web (0 5 2)) (kv (0 0 19)) (gh (0 8 0))) single "marmalade" nil nil nil])
  (marmalade-demo [cl-struct-package-desc marmalade-demo (0 0 5) "a demonstration elpa package" nil single "marmalade" nil nil nil])
  (marmalade-upload [cl-struct-package-desc marmalade-upload (0 0 5) "upload client for marmalade from emacs" ((web (0 4 2)) (kv (0 0 19))) single "marmalade" nil nil nil])
  (marshal [cl-struct-package-desc marshal (0 4 0) "eieio extension for automatic (un)marshalling" ((eieio (1 4)) (json (1 4))) single "marmalade" nil nil nil])
  (master-mode [cl-struct-package-desc master-mode (0 1) "Become an Emacs master" nil single "marmalade" nil nil nil])
  (math-at-point [cl-struct-package-desc math-at-point (0 0 1) "Utilities for modifying numbers at point" nil single "marmalade" nil nil nil])
  (mbe [cl-struct-package-desc mbe (0 1) "Macros by Example" ((emacs (24)) (cl-lib (0 5))) single "marmalade" nil nil nil])
  (mc-jump [cl-struct-package-desc mc-jump (1 0 0) "like \"jump-char\", but \"multiple-cursors\" friendly" nil single "marmalade" nil nil nil])
  (memoize [cl-struct-package-desc memoize (1 0 1) "Memoization functions" nil single "marmalade" nil nil nil])
  (message-templ [cl-struct-package-desc message-templ (0 1 20141026) "Templates for message-mode." nil single "marmalade" nil nil nil])
  (minitest [cl-struct-package-desc minitest (0 5) "An Emacs mode for ruby minitest files" ((dash (1 0 0))) single "marmalade" nil nil nil])
  (monky [cl-struct-package-desc monky (0 1) "control Hg from Emacs." nil single "marmalade" nil nil nil])
  (monroe [cl-struct-package-desc monroe (0 2 0) "Yet another client for nREPL" nil single "marmalade" nil nil nil])
  (move-line [cl-struct-package-desc move-line (0 0 1) "utilities for moving lines in file" nil single "marmalade" nil nil nil])
  (multi [cl-struct-package-desc multi (2 0 1) "Clojure-style multi-methods for emacs lisp" ((emacs (24))) single "marmalade" nil nil nil])
  (mv-shell [cl-struct-package-desc mv-shell (1 2) "keep buffers in sync with filename throughout 'mv'commands in shell-mode." nil single "marmalade" nil nil nil])
  (mvn-help [cl-struct-package-desc mvn-help (0 0 1) "maven help tools" nil single "marmalade" nil nil nil])
  (navigate [cl-struct-package-desc navigate (0 1 5) "Seamlessly navigate between Emacs and tmux" nil single "marmalade" nil nil nil])
  (niclein [cl-struct-package-desc niclein (0 0 5) "Nic's lein and clojure integration" ((shadchen (1 4)) (smartparens (1 5))) single "marmalade" nil nil nil])
  (nose-mode [cl-struct-package-desc nose-mode (0 1) "Minor mode for running nose tests." ((nose (0 1 1))) tar "marmalade" nil nil nil])
  (nrepl-discover [cl-struct-package-desc nrepl-discover (0 0 1) "Client to load commands from nrepl server" nil single "marmalade" nil nil nil])
  (nssh-n [cl-struct-package-desc nssh-n (0 9 8) "SSH mode for Emacs" nil single "marmalade" nil nil nil])
  (om-mode [cl-struct-package-desc om-mode (0 5 20140916) "Insert Om component template with life cycle." nil single "marmalade" nil nil nil])
  (openstack-cgit-browse-file [cl-struct-package-desc openstack-cgit-browse-file (0 2) "Browse the current file in OpenStack cgit" nil single "marmalade" nil nil nil])
  (operate-on-number [cl-struct-package-desc operate-on-number (1 1 0) "Operate on number at point with arithmetic functions" nil single "marmalade" nil nil nil])
  (org-cliplink [cl-struct-package-desc org-cliplink (0 2) "insert org-mode links by URL from the clipboard" nil single "marmalade" nil nil nil])
  (org-gnome [cl-struct-package-desc org-gnome (0 1) "Orgmode integration with the GNOME desktop" ((notify (2010 8 20)) (telepathy (0 1))) single "marmalade" nil nil nil])
  (org-publish-agenda [cl-struct-package-desc org-publish-agenda (1 7) "Publish org agenda with links to other files" nil single "marmalade" nil nil nil])
  (org2jekyll [cl-struct-package-desc org2jekyll (0 1 4) "Minor mode to publish org-mode post to jekyll without specific yaml" ((dash (2 10 0)) (dash-functional (1 2 0)) (s (1 9 0)) (deferred (0 3 1))) single "marmalade" nil nil nil])
  (org2nikola [cl-struct-package-desc org2nikola (0 0 8) "export html and meta data used by static blog like nikola from org file" nil tar "marmalade" nil nil nil])
  (osx-pseudo-daemon [cl-struct-package-desc osx-pseudo-daemon (1 0) "Daemon mode that plays nice with OSX." nil single "marmalade" nil nil nil])
  (outlined-elisp-mode [cl-struct-package-desc outlined-elisp-mode (1 0 5) "outline-minor-mode settings for emacs lisp" nil single "marmalade" nil nil nil])
  (overseer [cl-struct-package-desc overseer (0 1 0) "Ert-runner Integration Into Emacs." ((emacs (24)) (dash (2 10 0)) (pkg-info (0 4))) single "marmalade" nil nil nil])
  (palimpsest [cl-struct-package-desc palimpsest (0 8) "Various deletion strategies when editing" nil single "marmalade" nil nil nil])
  (palimpsest-mode [cl-struct-package-desc palimpsest-mode (0 8) "Various deletion strategies when editing" nil single "marmalade" nil nil nil])
  (parenface2 [cl-struct-package-desc parenface2 (1 1) "Provide a face for parens in lisp modes." nil single "marmalade" nil nil nil])
  (pbcopy [cl-struct-package-desc pbcopy (0 1 0) "OS X clipboard integration for Emacs" nil single "marmalade" nil nil nil])
  (phi-search [cl-struct-package-desc phi-search (1 1 0) "inferior isearch compatible with \"multiple-cursors\"" nil single "marmalade" nil nil nil])
  (php-completion [cl-struct-package-desc php-completion (0 3) "complete everything PHP with Anything.el" nil single "marmalade" nil nil nil])
  (pickup [cl-struct-package-desc pickup (0 0 3) "pickup file." nil single "marmalade" nil nil nil])
  (picpocket [cl-struct-package-desc picpocket (8) "Image viewer" nil single "marmalade" nil nil nil])
  (pinboard-api [cl-struct-package-desc pinboard-api (0 1) "Rudimentary http://pinboard.in integration" nil single "marmalade" nil nil nil])
  (pkg-info [cl-struct-package-desc pkg-info (0 5) "Information about packages" ((dash (1 6 0)) (epl (0 4))) single "marmalade" nil nil nil])
  (pkg-info-dummy-package [cl-struct-package-desc pkg-info-dummy-package (3 4 2 1) "pkg-info: Dummy package for unit tests" nil single "marmalade" nil nil nil])
  (project-explorer [cl-struct-package-desc project-explorer (0 13) "A project explorer sidebar" ((cl-lib (0 3)) (es-lib (0 3)) (es-windows (0 1)) (emacs (24))) single "marmalade" nil nil nil])
  (proxy-mode [cl-struct-package-desc proxy-mode (0 9) "Provides proxy minor mode." nil single "marmalade" nil nil nil])
  (ps-ccrypt [cl-struct-package-desc ps-ccrypt (1 10) "reading/writing/loading encrypted files" nil tar "marmalade" nil nil nil])
  (psci [cl-struct-package-desc psci (0 0 6) "Major mode for purescript repl psci" ((purescript-mode (13 10)) (dash (2 9 0)) (s (1 9 0)) (f (0 17 1)) (deferred (0 3 2))) single "marmalade" nil nil nil])
  (py-import-check [cl-struct-package-desc py-import-check (0 2) "Finds the unused python imports using importchecker" nil single "marmalade" nil nil nil])
  (pycomplete [cl-struct-package-desc pycomplete (1 0) "Complete symbols at point using Pymacs." nil single "marmalade" nil nil nil])
  (python-django [cl-struct-package-desc python-django (0 1) "A Jazzy package for managing Django projects" nil single "marmalade" nil nil nil])
  (pyvenv [cl-struct-package-desc pyvenv (1 4) "Python virtual environment interface" nil single "marmalade" nil nil nil])
  (relax [cl-struct-package-desc relax (0 2) "For browsing and interacting with CouchDB" ((json (1 2))) single "marmalade" nil nil nil])
  (revive [cl-struct-package-desc revive (2 19) "Resume Emacs." nil single "marmalade" nil nil nil])
  (scratch-palette [cl-struct-package-desc scratch-palette (1 0 1) "add scratch notes for each file" nil single "marmalade" nil nil nil])
  (scratch-pop [cl-struct-package-desc scratch-pop (1 0 0) "popup scratch" nil single "marmalade" nil nil nil])
  (sedated [cl-struct-package-desc sedated (1 0) "A few extremely simple sed functions for familiar text manipulation" nil single "marmalade" nil nil nil])
  (seethru [cl-struct-package-desc seethru (0 3) "Easily change Emacs' transparency" ((shadchen (1 4))) single "marmalade" nil nil nil])
  (sensitive [cl-struct-package-desc sensitive (1 0 1) "A dead simple way to load sensitive information" ((emacs (24)) (sequences (0 1 0))) single "marmalade" nil nil nil])
  (sequences [cl-struct-package-desc sequences (0 1 0) "Ports of some Clojure sequence functions." ((emacs (24))) single "marmalade" nil nil nil])
  (setup-cygwin [cl-struct-package-desc setup-cygwin (21 0) "Set up Emacs for using Cygwin" nil single "marmalade" nil nil nil])
  (shackle [cl-struct-package-desc shackle (0 2 1) "Enforce rules for popups" ((cl-lib (0 5))) single "marmalade" nil nil nil])
  (shell-pop [cl-struct-package-desc shell-pop (0 3) "helps you to use shell easily on Emacs. Only one key action to work." nil single "marmalade" nil nil nil])
  (simple-httpd [cl-struct-package-desc simple-httpd (1 4 5) "pure elisp HTTP server" ((cl-lib (0 3))) single "marmalade" nil nil nil])
  (skewer-less [cl-struct-package-desc skewer-less (0 2) "Skewer support for live LESS stylesheet updates" ((skewer-mode (1 5 3))) single "marmalade" nil nil nil])
  (skewer-mode [cl-struct-package-desc skewer-mode (1 6 0) "live browser JavaScript, CSS, and HTML interaction" ((simple-httpd (1 4 0)) (js2-mode (20090723)) (emacs (24))) tar "marmalade" nil nil nil])
  (slime-scratch [cl-struct-package-desc slime-scratch (1 0 0) "Imitate Emacs' *scratch* buffer" ((slime (20100404))) single "marmalade" nil nil nil])
  (smart-whitespace-comment-fixup [cl-struct-package-desc smart-whitespace-comment-fixup (1 1) "Enables advice around yanking/killing lines that auto-indents and formats properly" nil single "marmalade" nil nil nil])
  (smtpmail-multi [cl-struct-package-desc smtpmail-multi (0 6) "Use different smtp servers for sending mail" nil single "marmalade" nil nil nil])
  (snakehump [cl-struct-package-desc snakehump (0 1 1) "Convert between compound word conventions" nil tar "marmalade" nil nil nil])
  (sparkline [cl-struct-package-desc sparkline (1 0 2) "Make sparkline images from a list of numbers" ((cl-lib (0 3))) single "marmalade" nil nil nil])
  (steady-theme [cl-struct-package-desc steady-theme (0 1 0) "A steady theme for Emacs" nil single "marmalade" nil nil nil])
  (subatomic-theme [cl-struct-package-desc subatomic-theme (1 6 0) "Low contrast bluish color theme" nil single "marmalade" nil nil nil])
  (sudo-edit [cl-struct-package-desc sudo-edit (0 0 1) "Utilities for opening files with sudo" nil single "marmalade" nil nil nil])
  (synosaurus [cl-struct-package-desc synosaurus (0 1 0) "An extensible thesaurus supporting lookup and substitution." ((cl-lib (0 5))) tar "marmalade" nil nil nil])
  (tango-2 [cl-struct-package-desc tango-2 (1 0 0) "Tango 2 color theme for GNU Emacs 24" nil single "marmalade" nil nil nil])
  (tbemail [cl-struct-package-desc tbemail (0 2) "Provide syntax highlighting for email editing via" nil single "marmalade" nil nil nil])
  (tdd [cl-struct-package-desc tdd (1 0) "recompile on save and indicate success in the mode line" nil single "marmalade" nil nil nil])
  (tdd-status-mode-line [cl-struct-package-desc tdd-status-mode-line (0 1 2) "TDD status on the mode-line" nil single "marmalade" nil nil nil])
  (telepathy [cl-struct-package-desc telepathy (0 1) "Access Telepathy from Emacs" nil single "marmalade" nil nil nil])
  (template [cl-struct-package-desc template (0 1 0) "create project templates in Emacs easily" ((request (20140316 417))) single "marmalade" nil nil nil])
  (timestamper [cl-struct-package-desc timestamper (0 1 0) "A minor mode for easy timelogging" nil single "marmalade" nil nil nil])
  (toggle-test [cl-struct-package-desc toggle-test (1 0 2) "Toggle between source and test files in various programming languages" nil single "marmalade" nil nil nil])
  (tommyh-theme [cl-struct-package-desc tommyh-theme (1 2) "A bright, bold-colored theme for emacs." nil single "marmalade" nil nil nil])
  (tox [cl-struct-package-desc tox (20130819 1127) "Launch current python test with tox." nil single "marmalade" nil nil nil])
  (troncle [cl-struct-package-desc troncle (0 1 2) "Emacs convenience functions for tracing clojure code" ((cider (0 5 0))) single "marmalade" nil nil nil])
  (tronesque-theme [cl-struct-package-desc tronesque-theme (1 5) "Color Theme based on Tron universe." nil single "marmalade" nil nil nil])
  (try [cl-struct-package-desc try (0 0 1) "Try out Emacs packages." ((emacs (24))) single "marmalade" nil nil nil])
  (tsql [cl-struct-package-desc tsql (1 0) "customizes sql.el for T-SQL" nil single "marmalade" nil nil nil])
  (typescript [cl-struct-package-desc typescript (0 1 1) "Major mode for editing typescript" nil single "marmalade" nil nil nil])
  (uzumaki [cl-struct-package-desc uzumaki (0 1) "A simple buffer cycler" ((cl-lib (0 5))) single "marmalade" nil nil nil])
  (vc-tfs [cl-struct-package-desc vc-tfs (0 1 3) "Support for TFS version control system" nil single "marmalade" nil nil nil])
  (vimpulse [cl-struct-package-desc vimpulse (0 5) "emulates Vim's most useful features" nil single "marmalade" nil nil nil])
  (viper-in-more-modes [cl-struct-package-desc viper-in-more-modes (0 1 3) "vi-like keybindings for various Emacs modes" nil single "marmalade" nil nil nil])
  (waher-theme [cl-struct-package-desc waher-theme (20130917 7) "Emacs 24 theme based on waher for st2 by dduckster" ((emacs (24 1))) single "marmalade" nil nil nil])
  (wedge-ws [cl-struct-package-desc wedge-ws (0 1 2) "Wedge whitespace between columns in text" nil tar "marmalade" nil nil nil])
  (whitespace-cleanup-mode [cl-struct-package-desc whitespace-cleanup-mode (0 8) "Intelligently call whitespace-cleanup on save" nil single "marmalade" nil nil nil])
  (window-margin [cl-struct-package-desc window-margin (0 1) "automatic margins for visual-line-mode wrapping" nil single "marmalade" nil nil nil])
  (winner-mode-enable [cl-struct-package-desc winner-mode-enable (0 0 5) "Enables winner mode if its available" nil tar "marmalade" nil nil nil])
  (winpoint-ignore-dired [cl-struct-package-desc winpoint-ignore-dired (1 1) "Have winpoint ignore dired-mode buffers" ((winpoint (1 0))) single "marmalade" nil nil nil])
  (wisp [cl-struct-package-desc wisp (0 1 4) "Tools for wisp: the Whitespace-to-Lisp preprocessor" nil single "marmalade" nil nil nil])
  (wisp-mode [cl-struct-package-desc wisp-mode (0 2) "Tools for wisp: the Whitespace-to-Lisp preprocessor" nil single "marmalade" nil nil nil])
  (wonderland [cl-struct-package-desc wonderland (0 1 1) "declarative configuration for Emacsen" ((dash (2 0 0)) (dash-functional (1 0 0)) (multi (2 0 0)) (emacs (24))) single "marmalade" nil nil nil])
  (wsd-mode [cl-struct-package-desc wsd-mode (0 3 0) "Emacs major-mode for www.websequencediagrams.com" nil tar "marmalade" nil nil nil])
  (xbm-life [cl-struct-package-desc xbm-life (0 1) "A XBM version of Conway's Game of Life" nil single "marmalade" nil nil nil])
  (xkcd [cl-struct-package-desc xkcd (1 0) "View xkcd from Emacs" ((json (1 3))) single "marmalade" nil nil nil])
  (yesql-ghosts [cl-struct-package-desc yesql-ghosts (0 1 0) "Display ghostly yesql defqueries inline" ((s (1 9 0)) (dash (2 10 0)) (cider (0 8 0))) single "marmalade" nil nil nil])
  (yoshi-theme [cl-struct-package-desc yoshi-theme (5 12 0) "Theme named after my cat" nil single "marmalade" nil nil nil])
  (zeal-at-point [cl-struct-package-desc zeal-at-point (0 0 3) "Search the word at point with Zeal" nil single "marmalade" nil nil nil])
  (zenburn [cl-struct-package-desc zenburn (0 1) "A low contrast colour theme for Emacs" nil single "marmalade" nil nil nil])
  (zone-matrix [cl-struct-package-desc zone-matrix (0 0 1) "Matrix themed Zone mode" nil tar "marmalade" nil nil nil])
 )
