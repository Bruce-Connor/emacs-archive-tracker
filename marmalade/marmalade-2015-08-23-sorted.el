'(
  (abl-mode [cl-struct-package-desc abl-mode (0 9 0) "Python TDD minor mode" nil single "marmalade" nil nil nil])
  (ac-R [cl-struct-package-desc ac-R (0 2) "Autocompletion routines for R" nil single "marmalade" nil nil nil])
  (ac-cider [cl-struct-package-desc ac-cider (0 2 0) "Clojure auto-complete sources using CIDER" ((cider (0 8 0)) (auto-complete (1 4)) (cl-lib (0 3))) single "marmalade" nil nil nil])
  (ac-geiser [cl-struct-package-desc ac-geiser (0 1) "Auto-complete backend for geiser" ((geiser (0 5)) (auto-complete (1 4))) tar "marmalade" nil nil nil])
  (ac-inf-ruby [cl-struct-package-desc ac-inf-ruby (0 4) "Enable auto-complete in inf-ruby sessions" ((inf-ruby (2 3 2)) (auto-complete (1 4))) single "marmalade" nil nil nil])
  (ac-ja [cl-struct-package-desc ac-ja (0 0 1) "auto-complete-mode source for Japanese" nil single "marmalade" nil nil nil])
  (ac-nrepl [cl-struct-package-desc ac-nrepl (0 21) "auto-complete sources for Clojure using nrepl completions" ((cider (0 1)) (auto-complete (1 4))) single "marmalade" nil nil nil])
  (ac-python [cl-struct-package-desc ac-python (20110519) "Simple Python Completion Source for Auto-Complete" ((auto-complete (1 4))) single "marmalade" nil nil nil])
  (ac-slime [cl-struct-package-desc ac-slime (0 5) "An auto-complete source using slime completions" nil single "marmalade" nil nil nil])
  (ace-jump-mode [cl-struct-package-desc ace-jump-mode (2 0 0 0) "a quick cursor location minor mode for emacs" nil single "marmalade" nil nil nil])
  (ack-and-a-half [cl-struct-package-desc ack-and-a-half (1 2 0) "Yet another front-end for ack" nil single "marmalade" nil nil nil])
  (adoc-mode [cl-struct-package-desc adoc-mode (0 6 2) "a major-mode for editing AsciiDoc files in Emacs" ((markup-faces (1 0 0))) single "marmalade" nil nil nil])
  (ag [cl-struct-package-desc ag (0 42) "A front-end for ag ('the silver searcher'), the C ack replacement." nil single "marmalade" nil nil nil])
  (ahg [cl-struct-package-desc ahg (0 99) "Alberto's Emacs interface for Mercurial (Hg)" nil single "marmalade" nil nil nil])
  (alchemist [cl-struct-package-desc alchemist (1 4 0) "Elixir tooling integration into Emacs" ((elixir-mode (2 2 5)) (dash (2 11 0)) (emacs (24 4)) (company (0 8 0)) (pkg-info (0 4))) tar "marmalade" nil nil nil])
  (align-cljlet [cl-struct-package-desc align-cljlet (0 3) "Space align various Clojure forms" ((clojure-mode (1 11 5))) single "marmalade" nil nil nil])
  (alpha [cl-struct-package-desc alpha (1 0) "increase frame transparency" nil single "marmalade" nil nil nil])
  (ample-theme [cl-struct-package-desc ample-theme (0 12) "Calm Dark Theme for Emacs" ((color-theme (6 5 5))) single "marmalade" nil nil nil])
  (ample-zen-theme [cl-struct-package-desc ample-zen-theme (0 3) "AmpleZen Theme for Emacs 24" nil single "marmalade" nil nil nil])
  (anaphora [cl-struct-package-desc anaphora (1 0 0) "anaphoric macros providing implicit temp variables" nil single "marmalade" nil nil nil])
  (android-mode [cl-struct-package-desc android-mode (0 4 0) "Minor mode for Android application development" nil single "marmalade" nil nil nil])
  (angular-snippets [cl-struct-package-desc angular-snippets (0 2 3) "Yasnippets for AngularJS" ((s (1 4 0)) (dash (1 2 0))) tar "marmalade" nil nil nil])
  (annotate [cl-struct-package-desc annotate (0 2 3) "annotate files without changing them" nil single "marmalade" nil nil nil])
  (ansible-doc [cl-struct-package-desc ansible-doc (0 3) "Ansible documentation Minor Mode" ((emacs (24 1))) single "marmalade" nil nil nil])
  (anzu [cl-struct-package-desc anzu (0 22) "Show number of matches in mode-line while searching" nil single "marmalade" nil nil nil])
  (aok [cl-struct-package-desc aok (0 1) "various useful ways to do `multi-occur'" nil single "marmalade" nil nil nil])
  (apache-mode [cl-struct-package-desc apache-mode (2 0) "major mode for editing Apache configuration files" nil single "marmalade" nil nil nil])
  (applescript-mode [cl-struct-package-desc applescript-mode (1 1) "major mode for editing AppleScript source" nil single "marmalade" nil nil nil])
  (apt-utils [cl-struct-package-desc apt-utils (1 212) "Emacs interface to APT (Debian package management)" nil single "marmalade" nil nil nil])
  (apt-utils-ido [cl-struct-package-desc apt-utils-ido (0 2) "Ido commands for apt-utils" ((apt-utils (1 212))) single "marmalade" nil nil nil])
  (ariadne [cl-struct-package-desc ariadne (0 1) "Ariadne plugin for Emacs" ((bert (0 1))) single "marmalade" nil nil nil])
  (ascii [cl-struct-package-desc ascii (3 1) "ASCII code display." nil single "marmalade" nil nil nil])
  (assemblage-theme [cl-struct-package-desc assemblage-theme (20130715 621) "a dark theme for Emacs 24" nil single "marmalade" nil nil nil])
  (async [cl-struct-package-desc async (1 4) "Asynchronous processing in Emacs" nil tar "marmalade" nil nil nil])
  (auto-complete [cl-struct-package-desc auto-complete (1 4) "Auto Completion for GNU Emacs" ((popup (0 5))) tar "marmalade" nil nil nil])
  (auto-complete-etags [cl-struct-package-desc auto-complete-etags (0 2) "Auto-complete etags" ((auto-complete (1 3))) single "marmalade" nil nil nil])
  (auto-complete-octave [cl-struct-package-desc auto-complete-octave (0 1) "Auto-complete for Octave" nil single "marmalade" nil nil nil])
  (auto-complete-verilog [cl-struct-package-desc auto-complete-verilog (0 0) "Verukig" nil single "marmalade" nil nil nil])
  (auto-highlight-symbol [cl-struct-package-desc auto-highlight-symbol (1 55) "Automatic highlighting current symbol minor mode" nil single "marmalade" nil nil nil])
  (auto-indent-mode [cl-struct-package-desc auto-indent-mode (0 126) "Auto indent Minor mode" nil single "marmalade" nil nil nil])
  (autopair [cl-struct-package-desc autopair (0 3) "Automagically pair braces and quotes like TextMate" nil single "marmalade" nil nil nil])
  (awk-it [cl-struct-package-desc awk-it (0 77) "Run AWK interactively on region!" nil single "marmalade" nil nil nil])
  (babcore [cl-struct-package-desc babcore (0 0 5) "Core Emacs configuration. This should be the minimum in every emacs config." nil single "marmalade" nil nil nil])
  (back-button [cl-struct-package-desc back-button (0 6 6) "Visual navigation through mark rings" ((nav-flash (1 0 0)) (smartrep (0 0 3)) (ucs-utils (0 7 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "marmalade" nil nil nil])
  (backtrace-mode [cl-struct-package-desc backtrace-mode (0 0 10) "A better way to browse /var/log/messages files" nil single "marmalade" nil nil nil])
  (bang [cl-struct-package-desc bang (0 1 0) "A modern list library for Emacs" nil single "marmalade" nil nil nil])
  (bar-cursor [cl-struct-package-desc bar-cursor (1 1) "package used to switch block cursor to a bar" nil single "marmalade" nil nil nil])
  (batch-mode [cl-struct-package-desc batch-mode (1 0) "major mode for editing ESRI batch scrips" nil single "marmalade" nil nil nil])
  (bbcode-mode [cl-struct-package-desc bbcode-mode (1 1 0) "Major mode for writing BBCode markup" nil single "marmalade" nil nil nil])
  (bbdb-ext [cl-struct-package-desc bbdb-ext (0 1) "Extra commands for BBDB" ((bbdb (2 36))) single "marmalade" nil nil nil])
  (bbdb2erc [cl-struct-package-desc bbdb2erc (0 1 0) "make bbdb show if pal is online with ERC, click i to chat" nil single "marmalade" nil nil nil])
  (bert [cl-struct-package-desc bert (0 1) "BERT serialization library for Emacs" nil single "marmalade" nil nil nil])
  (better-defaults [cl-struct-package-desc better-defaults (0 1 2) "Fixing weird quirks and poor defaults" nil single "marmalade" nil nil nil])
  (bigint [cl-struct-package-desc bigint (1 0 0) "A simple bigint package for emacs" nil single "marmalade" nil nil nil])
  (bitlbee [cl-struct-package-desc bitlbee (1 0) "Help get Bitlbee (http://www.bitlbee.org) up and running" nil single "marmalade" nil nil nil])
  (bitly [cl-struct-package-desc bitly (1 0) "Shorten URLs using the bitly.com shortener service" nil single "marmalade" nil nil nil])
  (bm [cl-struct-package-desc bm (1 53) "Visible bookmarks in buffer." nil single "marmalade" nil nil nil])
  (boxquote [cl-struct-package-desc boxquote (1 23) "Quote text with a semi-box." nil single "marmalade" nil nil nil])
  (browse-kill-ring [cl-struct-package-desc browse-kill-ring (2 0 0) "interactively insert items from kill-ring" nil single "marmalade" nil nil nil])
  (browse-url-dwim [cl-struct-package-desc browse-url-dwim (0 6 6) "Context-sensitive external browse URL or Internet search" ((string-utils (0 3 2))) single "marmalade" nil nil nil])
  (bs-ext [cl-struct-package-desc bs-ext (0 2) "Extensions to emacs buffer-selection library (bs.el)" nil single "marmalade" nil nil nil])
  (bubbleberry-theme [cl-struct-package-desc bubbleberry-theme (0 1 2) "A theme based on LightTable for Emacs24" ((emacs (24 1))) single "marmalade" nil nil nil])
  (buffer-file-utils [cl-struct-package-desc buffer-file-utils (1 0) "utilities operating on a buffer and the associated file" nil single "marmalade" nil nil nil])
  (buffer-move [cl-struct-package-desc buffer-move (0 6 1) "" nil single "marmalade" nil nil nil])
  (buffer-stack [cl-struct-package-desc buffer-stack (1 5) "Enhanced intelligent switch-to-other-buffer replacement." nil single "marmalade" nil nil nil])
  (buffer-utils [cl-struct-package-desc buffer-utils (0 1 0) "Buffer-manipulation utility functions" nil single "marmalade" nil nil nil])
  (bufshow [cl-struct-package-desc bufshow (0 1 0) "A simple presentation tool for Emacs." nil tar "marmalade" nil nil nil])
  (bug-reference-github [cl-struct-package-desc bug-reference-github (0 2 0) "Automatically set `bug-reference-url-format' in Github repositories." nil single "marmalade" nil nil nil])
  (butler [cl-struct-package-desc butler (0 2 0) "Emacs client for Jenkins" ((deferred (3 1)) (json (1 2))) tar "marmalade" nil nil nil])
  (buttercup [cl-struct-package-desc buttercup (1 1) "Behavior-Driven Emacs Lisp Testing" nil tar "marmalade" nil nil nil])
  (button-lock [cl-struct-package-desc button-lock (1 0 2) "Clickable text defined by regular expression" nil single "marmalade" nil nil nil])
  (c-eldoc [cl-struct-package-desc c-eldoc (0 7) "helpful description of the arguments to C functions" nil single "marmalade" nil nil nil])
  (cache [cl-struct-package-desc cache (0 1) "implementation of a hash table whose key-value pairs expire" nil single "marmalade" nil nil nil])
  (cacoo [cl-struct-package-desc cacoo (2 1 2) "Minor mode for Cacoo : http://cacoo.com" ((concurrent (0 3 1))) tar "marmalade" nil nil nil])
  (calfw-gcal [cl-struct-package-desc calfw-gcal (0 0 3) "edit Google calendar for calfw.el." nil single "marmalade" nil nil nil])
  (caml [cl-struct-package-desc caml (3 12 0 1) "OCaml code editing commands for Emacs" nil tar "marmalade" nil nil nil])
  (cdlatex [cl-struct-package-desc cdlatex (4 0) "Fast input methods for LaTeX environments and math" nil single "marmalade" nil nil nil])
  (cedit [cl-struct-package-desc cedit (0 0 0) "paredit-like commands for c-like languages" nil single "marmalade" nil nil nil])
  (celery [cl-struct-package-desc celery (0 0 3) "a minor mode to draw stats from celery and more?" ((emacs (24)) (dash-functional (2 11 0)) (s (1 9 0)) (deferred (0 3 2))) single "marmalade" nil nil nil])
  (center-text [cl-struct-package-desc center-text (0 8) "Center the text in a fixed-width column" nil single "marmalade" nil nil nil])
  (centered-cursor-mode [cl-struct-package-desc centered-cursor-mode (0 5 1) "cursor stays vertically centered" nil single "marmalade" nil nil nil])
  (charmap [cl-struct-package-desc charmap (0 0 1) "Unicode table for Emacs" nil single "marmalade" nil nil nil])
  (checkbox [cl-struct-package-desc checkbox (0 2 1) "Quick manipulation of textual checkboxes" ((emacs (24)) (cl-lib (0 5))) single "marmalade" nil nil nil])
  (chicken-scheme [cl-struct-package-desc chicken-scheme (1 3 0) "Scheme-mode extensions for Chicken Scheme" nil single "marmalade" nil nil nil])
  (chm-view [cl-struct-package-desc chm-view (0 2 2) "View CHM file." nil single "marmalade" nil nil nil])
  (cider [cl-struct-package-desc cider (0 8 2) "Clojure Integrated Development Environment and REPL" ((clojure-mode (3 0 0)) (cl-lib (0 5)) (dash (2 4 1)) (pkg-info (0 4)) (emacs (24)) (queue (0 1 1))) tar "marmalade" nil nil nil])
  (circe [cl-struct-package-desc circe (1 6) "Client for IRC in Emacs" ((lui (1 6)) (lcs (1 1))) tar "marmalade" nil nil nil])
  (citrus-mode [cl-struct-package-desc citrus-mode (0 0 2) "Major mode for editing Citrus files" nil single "marmalade" nil nil nil])
  (cl-format [cl-struct-package-desc cl-format (1 1) "CL format routine." nil tar "marmalade" nil nil nil])
  (cl-lib-highlight [cl-struct-package-desc cl-lib-highlight (1 0 0) "full cl-lib font-lock highlighting" ((cl-lib (0 3))) single "marmalade" nil nil nil])
  (clips-mode [cl-struct-package-desc clips-mode (0 7) "Major mode for editing CLIPS code and REPL" nil tar "marmalade" nil nil nil])
  (clj-mode [cl-struct-package-desc clj-mode (0 9) "basic Major mode (clj) for Clojure code" nil single "marmalade" nil nil nil])
  (clj-refactor [cl-struct-package-desc clj-refactor (1 1 0) "A collection of clojure refactoring functions" ((emacs (24 3)) (s (1 8 0)) (dash (2 4 0)) (yasnippet (0 6 1)) (paredit (24)) (multiple-cursors (1 2 2)) (cider (0 9 1)) (edn (1 1 1))) single "marmalade" nil nil nil])
  (cljdoc [cl-struct-package-desc cljdoc (0 1 0) "eldoc mode for clojure" nil single "marmalade" nil nil nil])
  (cljsbuild-mode [cl-struct-package-desc cljsbuild-mode (0 2 0) "A minor mode for the ClojureScript 'lein cljsbuild' command" nil single "marmalade" nil nil nil])
  (clojure-env [cl-struct-package-desc clojure-env (0 0 4) "manage clojure environments with Emacs" nil single "marmalade" nil nil nil])
  (clojure-here [cl-struct-package-desc clojure-here (0 11) "Clojure process in a buffer" nil single "marmalade" nil nil nil])
  (clojure-mode [cl-struct-package-desc clojure-mode (4 0 1) "Major mode for Clojure code" ((emacs (24 1))) single "marmalade" nil nil nil])
  (clojure-mode-extra-font-locking [cl-struct-package-desc clojure-mode-extra-font-locking (3 0 0) "Extra font-locking for Clojure mode" ((clojure-mode (3 0))) single "marmalade" nil nil nil])
  (clojure-project [cl-struct-package-desc clojure-project (1 0) "Extends project-mode for Clojure projects" ((project-mode (1 0))) single "marmalade" nil nil nil])
  (clojure-project-mode [cl-struct-package-desc clojure-project-mode (1 0) "Extends project-mode for Clojure projects" ((project-mode (1 0))) single "marmalade" nil nil nil])
  (clojurescript-mode [cl-struct-package-desc clojurescript-mode (0 5) "Major mode for ClojureScript code" nil single "marmalade" nil nil nil])
  (closure-lint-mode [cl-struct-package-desc closure-lint-mode (0 1) "minor mode for the Closure Linter" nil single "marmalade" nil nil nil])
  (closure-template-html-mode [cl-struct-package-desc closure-template-html-mode (0 1) "highlighting for google closure templates" nil single "marmalade" nil nil nil])
  (cloud-to-butt-erc [cl-struct-package-desc cloud-to-butt-erc (1 0 0) "Replace 'the cloud' with 'my butt'" nil single "marmalade" nil nil nil])
  (clues-theme [cl-struct-package-desc clues-theme (20130908 801) "an Emacs 24 theme which may well be fully awesome..." ((emacs (24 0))) single "marmalade" nil nil nil])
  (cm-mode [cl-struct-package-desc cm-mode (0 1 0) "Wrapper for CodeMirror-style Emacs modes" nil single "marmalade" nil nil nil])
  (cmake-mode [cl-struct-package-desc cmake-mode (20110824) "Major mode for editing CMake sources." nil single "marmalade" nil nil nil])
  (cmake-project [cl-struct-package-desc cmake-project (0 7) "Integrates CMake build process with Emacs" nil single "marmalade" nil nil nil])
  (cmuclojure [cl-struct-package-desc cmuclojure (0 2) "Clojure process in a buffer" nil single "marmalade" nil nil nil])
  (cobra-mode [cl-struct-package-desc cobra-mode (1 0 1) "Major mode for .NET-based Cobra language" nil single "marmalade" nil nil nil])
  (code-headers [cl-struct-package-desc code-headers (0 7) "Navigate code with headers embedded in comments.  -*- mode: Emacs-Lisp; lexical-binding: t; -*" nil single "marmalade" nil nil nil])
  (coffee-mode [cl-struct-package-desc coffee-mode (0 3 0) "Major mode to edit CoffeeScript files in Emacs" nil single "marmalade" nil nil nil])
  (col-highlight [cl-struct-package-desc col-highlight (22 0) "Highlight the current column." ((vline (1 10))) single "marmalade" nil nil nil])
  (color-file-completion [cl-struct-package-desc color-file-completion (1 0 1) "add colors to file completion" nil single "marmalade" nil nil nil])
  (color-theme [cl-struct-package-desc color-theme (6 6 1) "install color themes" nil single "marmalade" nil nil nil])
  (color-theme-actress [cl-struct-package-desc color-theme-actress (0 2 2) "A dark color theme for GNU Emacs." ((color-theme (6 6 1))) single "marmalade" nil nil nil])
  (color-theme-buffer-local [cl-struct-package-desc color-theme-buffer-local (0 0 2) "Install color-themes by buffer." nil single "marmalade" nil nil nil])
  (color-theme-cobalt [cl-struct-package-desc color-theme-cobalt (0 0 2) "Cobalt Color Theme for Emacs" ((color-theme (6 6 1))) single "marmalade" nil nil nil])
  (color-theme-complexity [cl-struct-package-desc color-theme-complexity (0 1 1) "A black and green color theme for Emacs." ((color-theme (6 6 0))) single "marmalade" nil nil nil])
  (color-theme-dg [cl-struct-package-desc color-theme-dg (0 1 0) "A black and green color theme for Emacs." ((color-theme (6 6 0))) single "marmalade" nil nil nil])
  (color-theme-dpaste [cl-struct-package-desc color-theme-dpaste (0 0 1) "Dpaste color theme for GNU Emacs." ((color-theme (6 6 1))) single "marmalade" nil nil nil])
  (color-theme-eclipse [cl-struct-package-desc color-theme-eclipse (0 0 2) "Eclipse color theme for GNU Emacs." ((color-theme (6 6 1))) single "marmalade" nil nil nil])
  (color-theme-emacs-revert-theme [cl-struct-package-desc color-theme-emacs-revert-theme (0 1) "Color-theme revert to emacs colors" nil single "marmalade" nil nil nil])
  (color-theme-github [cl-struct-package-desc color-theme-github (0 0 3) "Github color theme for GNU Emacs." ((color-theme (6 6 1))) single "marmalade" nil nil nil])
  (color-theme-gruber-darker [cl-struct-package-desc color-theme-gruber-darker (1) "Gruber Darker color theme for Emacs by Jason Blevins" ((color-theme (6 6 1))) single "marmalade" nil nil nil])
  (color-theme-heroku [cl-struct-package-desc color-theme-heroku (1 0 0) "Heroku color theme" nil single "marmalade" nil nil nil])
  (color-theme-ir-black [cl-struct-package-desc color-theme-ir-black (1 0 1) "pastel color theme" ((color-theme (6 6 1))) single "marmalade" nil nil nil])
  (color-theme-library [cl-struct-package-desc color-theme-library (0 0 10) "The real color theme functions" ((color-theme (6 6 1))) single "marmalade" nil nil nil])
  (color-theme-molokai [cl-struct-package-desc color-theme-molokai (0 1) "Molokai color theme by Lloyd" nil single "marmalade" nil nil nil])
  (color-theme-monokai [cl-struct-package-desc color-theme-monokai (0 0 5) "Monokai Color Theme for Emacs." ((color-theme (6 5 5))) single "marmalade" nil nil nil])
  (color-theme-railscasts [cl-struct-package-desc color-theme-railscasts (0 0 2) "Railscasts color theme for GNU Emacs." ((color-theme (6 6 1))) single "marmalade" nil nil nil])
  (color-theme-sanityinc-solarized [cl-struct-package-desc color-theme-sanityinc-solarized (2 25) "A version of Ethan Schoonover's Solarized themes" nil tar "marmalade" nil nil nil])
  (color-theme-sanityinc-tomorrow [cl-struct-package-desc color-theme-sanityinc-tomorrow (1 10) "A version of Chris Kempson's various Tomorrow themes" nil tar "marmalade" nil nil nil])
  (color-theme-solarized [cl-struct-package-desc color-theme-solarized (20120301) "Solarized themes for Emacs" nil tar "marmalade" nil nil nil])
  (color-theme-tango [cl-struct-package-desc color-theme-tango (0 0 2) "Tango palette color theme for GNU Emacs." ((color-theme (6 6 1))) single "marmalade" nil nil nil])
  (color-theme-tangotango [cl-struct-package-desc color-theme-tangotango (0 0 2) "Tango Palette color theme for Emacs." ((color-theme (6 6 1))) single "marmalade" nil nil nil])
  (color-theme-twilight [cl-struct-package-desc color-theme-twilight (0 1) "Twilight Colour Theme for Emacs." nil single "marmalade" nil nil nil])
  (color-theme-vim-insert-mode [cl-struct-package-desc color-theme-vim-insert-mode (0 1) "Color theme VIM insert mode" nil single "marmalade" nil nil nil])
  (color-theme-wombat [cl-struct-package-desc color-theme-wombat (0 0 1) "The wombat color theme for Emacs." ((color-theme (6 6 1))) single "marmalade" nil nil nil])
  (color-theme-x [cl-struct-package-desc color-theme-x (1 3) "convert color themes to X11 resource settings" nil single "marmalade" nil nil nil])
  (color-theme-zenburn [cl-struct-package-desc color-theme-zenburn (0 3) "A low contrast color theme for Emacs." ((color-theme (6 6 1))) single "marmalade" nil nil nil])
  (colour-region [cl-struct-package-desc colour-region (0 4) "Toggle regions of the buffer with different text snippets" nil single "marmalade" nil nil nil])
  (combinators [cl-struct-package-desc combinators (0 0 1) "" nil single "marmalade" nil nil nil])
  (comint-better-defaults [cl-struct-package-desc comint-better-defaults (1 0) "better defaults for comint-derived modes" nil single "marmalade" nil nil nil])
  (command-frequency [cl-struct-package-desc command-frequency (1 1) "Track command frequencies" nil single "marmalade" nil nil nil])
  (command-stats [cl-struct-package-desc command-stats (0 1) "Track frequency of commands executed in emacs" nil single "marmalade" nil nil nil])
  (command-t [cl-struct-package-desc command-t (0 0 1) "Finds file in project using fuzzy search." ((find-file-in-project (3 2)) (popwin (0 4))) single "marmalade" nil nil nil])
  (company-cmake [cl-struct-package-desc company-cmake (0 1) "company-mode completion back-end for CMake" ((company (0 6 8))) single "marmalade" nil nil nil])
  (company-inf-ruby [cl-struct-package-desc company-inf-ruby (0 2) "company-mode completion back-end for inf-ruby" ((company (0 6 10)) (inf-ruby (2 2 7))) single "marmalade" nil nil nil])
  (concurrent [cl-struct-package-desc concurrent (0 3 1) "Concurrent utility functions for emacs lisp" ((deferred (0 3 1))) single "marmalade" nil nil nil])
  (config-block [cl-struct-package-desc config-block (0 0 1) "config-block is utility for individual settings (e.g. .emacs)." nil single "marmalade" nil nil nil])
  (confluence [cl-struct-package-desc confluence (1 6) "Confluence major mode" ((xml-rpc (1 6 7))) tar "marmalade" nil nil nil])
  (control-lock [cl-struct-package-desc control-lock (1 1 2) "Like caps-lock, but for your control key.  Give your pinky a rest!" nil single "marmalade" nil nil nil])
  (cppcheck [cl-struct-package-desc cppcheck (1 0) "run cppcheck putting hits in a grep buffer" nil single "marmalade" nil nil nil])
  (cpputils-cmake [cl-struct-package-desc cpputils-cmake (0 4 8) "Easy real time C++ syntax check and intellisense if you use CMake" nil tar "marmalade" nil nil nil])
  (creds [cl-struct-package-desc creds (0 0 6 1) "A parser credentials file library (not limited to credentials entries)" ((s (1 9 0)) (dash (2 5 0))) tar "marmalade" nil nil nil])
  (creole [cl-struct-package-desc creole (1 0 6) "A parser for the Creole Wiki language" ((noflet (0 0 3)) (kv (0 0 17))) single "marmalade" nil nil nil])
  (creole-mode [cl-struct-package-desc creole-mode (0 0 5) "a markup mode for creole" nil single "marmalade" nil nil nil])
  (crontab-mode [cl-struct-package-desc crontab-mode (1 2) "Mode for editing crontab files" nil single "marmalade" nil nil nil])
  (crosshairs [cl-struct-package-desc crosshairs (22 0) "Highlight the current line and column." nil single "marmalade" nil nil nil])
  (cryptol-mode [cl-struct-package-desc cryptol-mode (0 1 0) "Cryptol major mode for Emacs" nil single "marmalade" nil nil nil])
  (csharp-mode [cl-struct-package-desc csharp-mode (0 8 10) "C# mode derived mode" nil tar "marmalade" nil nil nil])
  (ctable [cl-struct-package-desc ctable (0 1 1) "Table component for Emacs Lisp" nil single "marmalade" nil nil nil])
  (ctags [cl-struct-package-desc ctags (1 1 1) "Exuberant Ctags utilities for Emacs" nil single "marmalade" nil nil nil])
  (ctags-update [cl-struct-package-desc ctags-update (0 1 2) "auto update TAGS in parent directory using exuberant-ctags" nil single "marmalade" nil nil nil])
  (ctypes [cl-struct-package-desc ctypes (1 2) "Enhanced Font lock support for custom defined types." nil single "marmalade" nil nil nil])
  (cubicle-mode [cl-struct-package-desc cubicle-mode (0 1) "Cubicle major mode for emacs" nil single "marmalade" nil nil nil])
  (cups [cl-struct-package-desc cups (0 1) "CUPS features for Emacs" nil single "marmalade" nil nil nil])
  (curl-for-url [cl-struct-package-desc curl-for-url (0 0 2) "use url-retrieve with curl doing the work" ((noflet (0 0 15))) single "marmalade" nil nil nil])
  (current-story [cl-struct-package-desc current-story (0 1 0) "Track and insert current Pivotal Tracker" nil single "marmalade" nil nil nil])
  (cursor-chg [cl-struct-package-desc cursor-chg (20 1) "Change cursor dynamically, depending on the context." nil single "marmalade" nil nil nil])
  (cycbuf [cl-struct-package-desc cycbuf (0 5 0) "Cycle buffers code by Martin Pohlack, inspired by" nil single "marmalade" nil nil nil])
  (cygwin-mount [cl-struct-package-desc cygwin-mount (2001) "Teach EMACS about cygwin styles and mount points." nil single "marmalade" nil nil nil])
  (d-mode [cl-struct-package-desc d-mode (2 0 4) "D Programming Language mode for (X)Emacs" nil tar "marmalade" nil nil nil])
  (dart-mode [cl-struct-package-desc dart-mode (0 14) "Major mode for editing Dart files" ((cl-lib (0 5)) (dash (2 10 0)) (flycheck (0 23))) single "marmalade" nil nil nil])
  (dash [cl-struct-package-desc dash (2 11 0) "A modern list library for Emacs" nil single "marmalade" nil nil nil])
  (dash-functional [cl-struct-package-desc dash-functional (1 2 0) "Collection of useful combinators for Emacs Lisp" ((dash (2 0 0)) (emacs (24))) single "marmalade" nil nil nil])
  (db [cl-struct-package-desc db (0 0 7) "A database for EmacsLisp" ((kv (0 0 19))) single "marmalade" nil nil nil])
  (db-pg [cl-struct-package-desc db-pg (0 0 3) "A PostgreSQL adapter for emacs-db" ((pg (0 12)) (db (0 0 6))) single "marmalade" nil nil nil])
  (debian-changelog-mode [cl-struct-package-desc debian-changelog-mode (1 96) "major mode for Debian changelog files." nil single "marmalade" nil nil nil])
  (dedicated [cl-struct-package-desc dedicated (1 0 0) "A very simple minor mode for dedicated buffers" nil single "marmalade" nil nil nil])
  (deep-thought-theme [cl-struct-package-desc deep-thought-theme (0 1 1) "Emacs 24 theme with the Answer to The Ultimate Question" nil single "marmalade" nil nil nil])
  (deferred [cl-struct-package-desc deferred (0 3 1) "Simple asynchronous functions for emacs lisp" nil single "marmalade" nil nil nil])
  (deft [cl-struct-package-desc deft (0 3) "quickly browse, filter, and edit plain text notes" nil single "marmalade" nil nil nil])
  (demo-multifile [cl-struct-package-desc demo-multifile (0 0 2) "a demo multifile package." nil tar "marmalade" nil nil nil])
  (descbinds-anything [cl-struct-package-desc descbinds-anything (1 5) "Yet Another `describe-bindings' with `anything'." ((anything (1 287))) single "marmalade" nil nil nil])
  (desktop [cl-struct-package-desc desktop (0 1) "save partial status of Emacs when killed" nil single "marmalade" nil nil nil])
  (desktop-registry [cl-struct-package-desc desktop-registry (1 2 0) "Keep a central registry of desktop files" nil single "marmalade" nil nil nil])
  (diatheke [cl-struct-package-desc diatheke (1 0) "A minor mode using the diatheke command-line Bible tool" nil single "marmalade" nil nil nil])
  (diminish [cl-struct-package-desc diminish (0 44) "Diminished modes are minor modes with no modeline display" nil single "marmalade" nil nil nil])
  (dircmp [cl-struct-package-desc dircmp (1) "Compare and sync directories." nil single "marmalade" nil nil nil])
  (dired-details [cl-struct-package-desc dired-details (1 3 1) "make file details hide-able in dired" nil single "marmalade" nil nil nil])
  (dired-dups [cl-struct-package-desc dired-dups (0 3) "Find duplicate files and display them in a dired buffer" nil single "marmalade" nil nil nil])
  (dired-efap [cl-struct-package-desc dired-efap (0 8) "Edit Filename At Point in a dired buffer" nil single "marmalade" nil nil nil])
  (dired-nav-enhance [cl-struct-package-desc dired-nav-enhance (1 0) "Enhanced navigation for dired buffers" nil single "marmalade" nil nil nil])
  (dired-single [cl-struct-package-desc dired-single (1 7) "reuse the current dired buffer to visit another directory" nil single "marmalade" nil nil nil])
  (dirtrack-buffer-name-track-mode [cl-struct-package-desc dirtrack-buffer-name-track-mode (1 0 0) "minor mode to cause shell buffers to reflect the working directory" nil single "marmalade" nil nil nil])
  (discord [cl-struct-package-desc discord (0 5) "Discordian dates for calendar" nil single "marmalade" nil nil nil])
  (dispass [cl-struct-package-desc dispass (1 1 2) "Emacs wrapper for DisPass" nil single "marmalade" nil nil nil])
  (dix [cl-struct-package-desc dix (0 1 0) "minor mode for editing Apertium XML dictionary files" nil single "marmalade" nil nil nil])
  (dizzee [cl-struct-package-desc dizzee (0 1 1) "A more pleasant way to manage your project's subprocesses in Emacs." nil tar "marmalade" nil nil nil])
  (django-theme [cl-struct-package-desc django-theme (1 3 0) "Custom face theme for Emacs" nil single "marmalade" nil nil nil])
  (dna-mode [cl-struct-package-desc dna-mode (1 44) "a major mode for editing dna sequences" nil single "marmalade" nil nil nil])
  (doctags [cl-struct-package-desc doctags (0 1) "Generation of tags documentation in Doxygen syntax" nil single "marmalade" nil nil nil])
  (dot-mode [cl-struct-package-desc dot-mode (1 12) "minor mode to repeat typing or commands" nil single "marmalade" nil nil nil])
  (dotassoc [cl-struct-package-desc dotassoc (0 0 1) "dot access embedded alists" nil single "marmalade" nil nil nil])
  (downplay-mode [cl-struct-package-desc downplay-mode (0 1) "focus attention on a region of the buffer" nil single "marmalade" nil nil nil])
  (dpaste [cl-struct-package-desc dpaste (0 2) "Emacs integration for dpaste.com" nil single "marmalade" nil nil nil])
  (drag-stuff [cl-struct-package-desc drag-stuff (0 0 4) "Drag stuff (lines, words, region, etc...) around" nil single "marmalade" nil nil nil])
  (dropbox [cl-struct-package-desc dropbox (0 9 1) "Emacs backend for dropbox" ((json (1 2)) (oauth (1 0 3))) single "marmalade" nil nil nil])
  (drupal-mode [cl-struct-package-desc drupal-mode (0 6 1) "Advanced minor mode for Drupal development" ((php-mode (1 5 0))) tar "marmalade" nil nil nil])
  (drupal-spell [cl-struct-package-desc drupal-spell (0 2 2) "Aspell extra dictionary for Drupal" nil tar "marmalade" nil nil nil])
  (dsvn [cl-struct-package-desc dsvn (922257) "Subversion interface" nil single "marmalade" nil nil nil])
  (dtrt-indent [cl-struct-package-desc dtrt-indent (0 2 0) "Adapt to foreign indentation offsets" nil single "marmalade" nil nil nil])
  (dummy-package [cl-struct-package-desc dummy-package (0 0 25) "a fake package for the marmalade test suite" ((timeclock (2 6 1))) single "marmalade" nil nil nil])
  (durendal [cl-struct-package-desc durendal (0 2) "A bucket of tricks for Clojure and Slime." ((clojure-mode (1 7)) (slime (20100404)) (paredit (22))) single "marmalade" nil nil nil])
  (dynamic-fonts [cl-struct-package-desc dynamic-fonts (0 6 4) "Set faces based on available fonts" ((font-utils (0 7 0)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "marmalade" nil nil nil])
  (ecb [cl-struct-package-desc ecb (2 40) "Emacs Code Browser" nil tar "marmalade" nil nil nil])
  (ecb-snapshot [cl-struct-package-desc ecb-snapshot (20120830) "Emacs Code Browser CVS snapshot" nil tar "marmalade" nil nil nil])
  (edbi [cl-struct-package-desc edbi (0 1 1) "Emacs Database Interface" ((concurrent (0 3 1)) (ctable (0 1 1)) (epc (0 1 1))) tar "marmalade" nil nil nil])
  (edebug-x [cl-struct-package-desc edebug-x (1 2) "Extensions for Edebug" ((dash (1 1 0))) single "marmalade" nil nil nil])
  (edit-list [cl-struct-package-desc edit-list (0 4) "edit a single list" nil single "marmalade" nil nil nil])
  (editorconfig [cl-struct-package-desc editorconfig (0 4) "EditorConfig Emacs extension" nil single "marmalade" nil nil nil])
  (egison-mode [cl-struct-package-desc egison-mode (0 1 4) "Egison editing mode" nil single "marmalade" nil nil nil])
  (eh-basic [cl-struct-package-desc eh-basic (0 0 2) "tuamshu's emacs basic configure" ((starter-kit (2 0 2)) (browse-kill-ring (1 3 1))) tar "marmalade" nil nil nil])
  (eh-common [cl-struct-package-desc eh-common (0 0 1) "Tumashu's  emacs functions" nil single "marmalade" nil nil nil])
  (eh-functions [cl-struct-package-desc eh-functions (0 0 1) "tuamshu's emacs functions" ((starter-kit (2 0 2))) tar "marmalade" nil nil nil])
  (eh-gnus [cl-struct-package-desc eh-gnus (0 0 6) "tuamshu's gnus configure" nil tar "marmalade" nil nil nil])
  (eh-keybindings [cl-struct-package-desc eh-keybindings (0 0 1) "tuamshu's emacs keybindings" ((eh-functions (0 0 1)) (starter-kit-bindings (2 0 2))) tar "marmalade" nil nil nil])
  (eieio [cl-struct-package-desc eieio (1 4) "Enhanced Implementation of Emacs Interpreted Objects" nil single "marmalade" nil nil nil])
  (eimp [cl-struct-package-desc eimp (1 4 0) "Emacs Image Manipulation Package" nil single "marmalade" nil nil nil])
  (el-autoyas [cl-struct-package-desc el-autoyas (0 20) "Automatically create Emacs-Lisp Yasnippets" nil single "marmalade" nil nil nil])
  (el-init [cl-struct-package-desc el-init (20130416) "Loader for configuration files" nil tar "marmalade" nil nil nil])
  (el-spec [cl-struct-package-desc el-spec (0 2) "ruby's rspec like syntax test frame work" nil single "marmalade" nil nil nil])
  (el-swank-fuzzy [cl-struct-package-desc el-swank-fuzzy (0 1) "fuzzy symbol completion." nil single "marmalade" nil nil nil])
  (el-x [cl-struct-package-desc el-x (0 3 0) "Emacs-lisp extensions." ((cl-lib (0 2))) tar "marmalade" nil nil nil])
  (eldoro [cl-struct-package-desc eldoro (0 1 0) "A pomodoro timer/tracker that works with org-mode." nil tar "marmalade" nil nil nil])
  (electric-case [cl-struct-package-desc electric-case (2 2 1) "insert camelCase, snake_case words without \"Shift\"ing" nil single "marmalade" nil nil nil])
  (elein [cl-struct-package-desc elein (0 2 2) "running leiningen commands from emacs" nil single "marmalade" nil nil nil])
  (elfeed [cl-struct-package-desc elfeed (1 1 2) "an Emacs Atom/RSS feed reader" ((emacs (24 1))) tar "marmalade" nil nil nil])
  (elfeed-web [cl-struct-package-desc elfeed-web (1 1 0) "web interface to Elfeed" ((simple-httpd (1 4 3)) (elfeed (1 0 1)) (emacs (24 1))) tar "marmalade" nil nil nil])
  (elisp-cache [cl-struct-package-desc elisp-cache (1 15) "Faster emacs startup through byte-compiling." nil single "marmalade" nil nil nil])
  (elisp-depend [cl-struct-package-desc elisp-depend (1 0 2) "Parse depend libraries of elisp file." nil single "marmalade" nil nil nil])
  (elisp-indexer [cl-struct-package-desc elisp-indexer (0 0 9) "indexing utils for emacslisp" nil single "marmalade" nil nil nil])
  (elisp-slime-nav [cl-struct-package-desc elisp-slime-nav (0 7) "Make M-. and M-, work in elisp like they do in slime" ((cl-lib (0 2))) single "marmalade" nil nil nil])
  (elixir-mix [cl-struct-package-desc elixir-mix (1 0 0) "Emacs integration for Elixir's mix" nil single "marmalade" nil nil nil])
  (elixir-mode [cl-struct-package-desc elixir-mode (1 0 0) "Major mode for editing Elixir files" nil single "marmalade" nil nil nil])
  (elnode [cl-struct-package-desc elnode (0 9 9 8 8) "The Emacs webserver." ((web (0 4 3)) (dash (2 9 0)) (noflet (0 0 14)) (s (1 5 0)) (creole (1 0 6)) (fakir (0 1 9)) (db (0 0 6)) (kv (0 0 19))) tar "marmalade" nil nil nil])
  (elpa-audit [cl-struct-package-desc elpa-audit (0 4) "Handy functions for inspecting and comparing package archives" nil single "marmalade" nil nil nil])
  (elpa-mirror [cl-struct-package-desc elpa-mirror (1 1 2) "ELPA mirror from locally installed packages is easy" nil tar "marmalade" nil nil nil])
  (elpakit [cl-struct-package-desc elpakit (2 0 4) "The ELPA package maintainer's friend" ((dash (2 9 0)) (shadchen (1 2)) (noflet (0 0 14)) (s (1 9 0))) tar "marmalade" nil nil nil])
  (elpy [cl-struct-package-desc elpy (1 8 0) "Emacs Python Development Environment" ((company (0 8 2)) (find-file-in-project (3 3)) (highlight-indentation (0 5 0)) (pyvenv (1 3)) (yasnippet (0 8 0))) tar "marmalade" nil nil nil])
  (elscreen [cl-struct-package-desc elscreen (1 4 6) "Screen for Emacsen" nil single "marmalade" nil nil nil])
  (emacs-cl [cl-struct-package-desc emacs-cl (0 5) "Emacs Common Lisp" nil tar "marmalade" nil nil nil])
  (emacs-droid [cl-struct-package-desc emacs-droid (0 0 0) "Android application development tools for Emacs" nil single "marmalade" nil nil nil])
  (emacs-xkcd [cl-struct-package-desc emacs-xkcd (1 0) "View xkcd from Emacs" ((json (1 4))) single "marmalade" nil nil nil])
  (emacsd-tile [cl-struct-package-desc emacsd-tile (0 1) "tiling windows for emacs" nil single "marmalade" nil nil nil])
  (emamux [cl-struct-package-desc emamux (0 1) "Interact with tmux" nil single "marmalade" nil nil nil])
  (emmet-mode [cl-struct-package-desc emmet-mode (1 0 10) "Unofficial Emmet's support for emacs" nil single "marmalade" nil nil nil])
  (emms-mark-ext [cl-struct-package-desc emms-mark-ext (0 3) "Extra functions for emms-mark-mode and emms-tag-edit-mode" ((emms (3 0))) single "marmalade" nil nil nil])
  (emstar [cl-struct-package-desc emstar (1 4) "Casual game, like a brainy Pac-Man" nil tar "marmalade" nil nil nil])
  (enclose [cl-struct-package-desc enclose (0 0 2) "Enclose cursor within punctuation pairs" nil single "marmalade" nil nil nil])
  (env-var-import [cl-struct-package-desc env-var-import (2 1) "Import shell environment variables in GUI Emacs" nil single "marmalade" nil nil nil])
  (epc [cl-struct-package-desc epc (0 1 1) "A RPC stack for the Emacs Lisp" ((concurrent (0 3 1)) (ctable (0 1 1))) single "marmalade" nil nil nil])
  (epl [cl-struct-package-desc epl (0 8) "Emacs Package Library" ((cl-lib (0 3))) single "marmalade" nil nil nil])
  (eprime-mode [cl-struct-package-desc eprime-mode (1 1 2) "An E-prime checking mode for Emacs" nil single "marmalade" nil nil nil])
  (erc-hl-nicks [cl-struct-package-desc erc-hl-nicks (1 3 1) "ERC nick highlighter that ignores uniquifying chars when colorizing" nil single "marmalade" nil nil nil])
  (erc-nick-notify [cl-struct-package-desc erc-nick-notify (0 2 1) "Notify popup for ERC" nil single "marmalade" nil nil nil])
  (ercn [cl-struct-package-desc ercn (1 0 2) "Flexible ERC notifications" nil single "marmalade" nil nil nil])
  (eredis [cl-struct-package-desc eredis (0 5 0) "eredis, a Redis client in emacs lisp" nil single "marmalade" nil nil nil])
  (erefactor [cl-struct-package-desc erefactor (0 6 10) "Emacs-Lisp refactoring utilities" nil single "marmalade" nil nil nil])
  (erlang [cl-struct-package-desc erlang (2 4 1) "Major modes for editing and running Erlang" nil single "marmalade" nil nil nil])
  (ert [cl-struct-package-desc ert (0) "Emacs Lisp Regression Testing" nil single "marmalade" nil nil nil])
  (ert-x [cl-struct-package-desc ert-x (0) "Staging area for experimental extensions to ERT" ((ert (0))) single "marmalade" nil nil nil])
  (ertx [cl-struct-package-desc ertx (0 0 2) "Extra useful testing functions for EmacsLisp." nil single "marmalade" nil nil nil])
  (es-windows [cl-struct-package-desc es-windows (0 2) "Window-management utilities" ((cl-lib (0 3)) (emacs (24))) single "marmalade" nil nil nil])
  (eshell-fringe-status [cl-struct-package-desc eshell-fringe-status (1 0 0) "Show last status in fringe" nil single "marmalade" nil nil nil])
  (eshell-manual [cl-struct-package-desc eshell-manual (20141024) "An manual for Eshell." nil tar "marmalade" nil nil nil])
  (esk [cl-struct-package-desc esk (0 1) "Emacs Search Kit - An easy way to find files and/or strings in a project" nil tar "marmalade" nil nil nil])
  (ess [cl-struct-package-desc ess (5 14) "Edit and interact with statistical programs like R, S-Plus, SAS, Stata and JAGS" nil tar "marmalade" nil nil nil])
  (ess-R-object-popup [cl-struct-package-desc ess-R-object-popup (0 0 6) "popup description of R object" nil single "marmalade" nil nil nil])
  (ess-smart-underscore [cl-struct-package-desc ess-smart-underscore (0 79) "Ess Smart Underscore" nil single "marmalade" nil nil nil])
  (esxml [cl-struct-package-desc esxml (0 3 0) "Handle HTML with lists." ((db (0 0 1))) tar "marmalade" nil nil nil])
  (etags-select [cl-struct-package-desc etags-select (1 13) "Select from multiple tags" nil single "marmalade" nil nil nil])
  (etags-table [cl-struct-package-desc etags-table (1 1) "Set tags table(s) based on current file" nil single "marmalade" nil nil nil])
  (evernote-mode [cl-struct-package-desc evernote-mode (0 41) "Evernote client for Emacs" nil tar "marmalade" nil nil nil])
  (everything [cl-struct-package-desc everything (0 1 5) "Bridge to MS Windows desktop-search engine Everything" nil single "marmalade" nil nil nil])
  (evil [cl-struct-package-desc evil (1 0 8) "Extensible Vi layer for Emacs." ((undo-tree (0 6 3)) (goto-last-change (1 2))) tar "marmalade" nil nil nil])
  (evil-escape [cl-struct-package-desc evil-escape (2 11) "Escape from anything with a customizable key sequence" ((emacs (24)) (evil (1 0 9))) single "marmalade" nil nil nil])
  (evil-indent-textobject [cl-struct-package-desc evil-indent-textobject (0 2) "evil textobjects based on indentation" ((evil (0))) single "marmalade" nil nil nil])
  (evil-leader [cl-struct-package-desc evil-leader (0 4 3) "let there be <leader>" ((evil (0))) single "marmalade" nil nil nil])
  (evil-matchit [cl-struct-package-desc evil-matchit (1 3 0) "Vim matchit ported into Emacs (requires EVIL)" nil tar "marmalade" nil nil nil])
  (evil-nerd-commenter [cl-struct-package-desc evil-nerd-commenter (1 3 1) "Comment/uncomment lines efficiently. Like Nerd Commenter in Vim" nil tar "marmalade" nil nil nil])
  (evil-numbers [cl-struct-package-desc evil-numbers (0 4) "increment/decrement numbers like in vim" nil single "marmalade" nil nil nil])
  (evil-paredit [cl-struct-package-desc evil-paredit (0 0 1) "Paredit support for evil keybindings" ((evil (0 0 0)) (paredit (1))) single "marmalade" nil nil nil])
  (exec-path-from-shell [cl-struct-package-desc exec-path-from-shell (1 7) "Get environment variables such as $PATH from the shell" nil single "marmalade" nil nil nil])
  (exercism [cl-struct-package-desc exercism (0 0 1) "An Emacs mode for submitting current file to exercism.io" nil single "marmalade" nil nil nil])
  (expand-region [cl-struct-package-desc expand-region (0 10 0) "Increase selected region by semantic units." nil tar "marmalade" nil nil nil])
  (expectations-mode [cl-struct-package-desc expectations-mode (0 0 5) "Minor mode for expectations tests" ((cider (0 7 0))) single "marmalade" nil nil nil])
  (express [cl-struct-package-desc express (0 6 0) "Alternatives to `message'" ((string-utils (0 3 2))) single "marmalade" nil nil nil])
  (extend-dnd [cl-struct-package-desc extend-dnd (0 5) "R drag and Drop" nil single "marmalade" nil nil nil])
  (eyebrowse [cl-struct-package-desc eyebrowse (0 6 6) "Easy window config switching" ((dash (2 7 0)) (emacs (24 3 1))) single "marmalade" nil nil nil])
  (f [cl-struct-package-desc f (0 11 0) "Modern API for working with files and directories" ((s (1 7 0)) (dash (2 2 0))) single "marmalade" nil nil nil])
  (fakir [cl-struct-package-desc fakir (0 1 9) "fakeing bits of Emacs" ((noflet (0 0 8)) (dash (1 3 2)) (kv (0 0 19))) single "marmalade" nil nil nil])
  (fancy-battery [cl-struct-package-desc fancy-battery (0 2) "Fancy battery display" ((emacs (24 1))) single "marmalade" nil nil nil])
  (fancy-mode [cl-struct-package-desc fancy-mode (0 1) "Major mode for programming with the Fancy language." nil single "marmalade" nil nil nil])
  (fastnav [cl-struct-package-desc fastnav (1 0 7) "Fast navigation and editing routines." nil single "marmalade" nil nil nil])
  (feature-mode [cl-struct-package-desc feature-mode (0 4) "Major mode for editing Gherkin (i.e. Cucumber) user stories" nil tar "marmalade" nil nil nil])
  (fic-ext-mode [cl-struct-package-desc fic-ext-mode (0 1) "Show FIXME/TODO/BUG(...) in special face only in comments and strings" nil single "marmalade" nil nil nil])
  (file-format [cl-struct-package-desc file-format (0 0 4) "templates with files as the source" ((s (1 5 0))) single "marmalade" nil nil nil])
  (fill-column-indicator [cl-struct-package-desc fill-column-indicator (1 86) "Graphically indicate the fill column" nil single "marmalade" nil nil nil])
  (finalize [cl-struct-package-desc finalize (1 0 0) "finalizers for Emacs Lisp" ((emacs (24 1)) (cl-lib (0 3)) (eieio (1 4))) tar "marmalade" nil nil nil])
  (find-file-in-git-repo [cl-struct-package-desc find-file-in-git-repo (0 1 2) "Utility to find files in a git repo" nil single "marmalade" nil nil nil])
  (find-file-in-project [cl-struct-package-desc find-file-in-project (3 3) "Find files in a project quickly." nil single "marmalade" nil nil nil])
  (find-file-in-repository [cl-struct-package-desc find-file-in-repository (1 3) "Quickly find files in a git, mercurial or other repository" nil single "marmalade" nil nil nil])
  (find-things-fast [cl-struct-package-desc find-things-fast (20111123) "An emacs mode to find things fast and move around in a project quickly" nil tar "marmalade" nil nil nil])
  (findr [cl-struct-package-desc findr (0 7) "Breadth-first file-finding facility for (X)Emacs" nil single "marmalade" nil nil nil])
  (fiplr [cl-struct-package-desc fiplr (0 1 3) "Fuzzy finder for files in a project." nil single "marmalade" nil nil nil])
  (firestarter [cl-struct-package-desc firestarter (0 2 2) "Execute (shell) commands on save" nil single "marmalade" nil nil nil])
  (fit-frame [cl-struct-package-desc fit-frame (0) "Resize a frame.  In particular, fit a frame to its buffers." nil single "marmalade" nil nil nil])
  (fixme-mode [cl-struct-package-desc fixme-mode (1 0 2) "fixme minor mode to highlight warning words" nil single "marmalade" nil nil nil])
  (fixmee [cl-struct-package-desc fixmee (0 8 6) "Quickly navigate to FIXME notices in code" ((button-lock (1 0 2)) (nav-flash (1 0 0)) (back-button (0 6 0)) (smartrep (0 0 3)) (string-utils (0 3 2)) (tabulated-list (0))) single "marmalade" nil nil nil])
  (flatland-theme [cl-struct-package-desc flatland-theme (0 1 2) "A simple theme for Emacs." nil single "marmalade" nil nil nil])
  (flex-autopair [cl-struct-package-desc flex-autopair (0 3) "Automatically insert pair braces and quotes, insertion conditions & actions are highly customizable." nil single "marmalade" nil nil nil])
  (flx [cl-struct-package-desc flx (0 1) "fuzzy matching with good sorting" nil single "marmalade" nil nil nil])
  (flx-ido [cl-struct-package-desc flx-ido (0 2) "flx integration for ido" ((flx (0 1))) single "marmalade" nil nil nil])
  (flycheck [cl-struct-package-desc flycheck (0 23) "Modern on-the-fly syntax checking for GNU Emacs" ((emacs (24 1)) (cl-lib (0 3)) (let-alist (1 0 1)) (pkg-info (0 4)) (dash (2 4 0))) tar "marmalade" nil nil nil])
  (flycheck-cask [cl-struct-package-desc flycheck-cask (0 2 1) "Cask support in Flycheck" ((emacs (24 1)) (flycheck (0 14)) (dash (2 4 0))) single "marmalade" nil nil nil])
  (flycheck-color-mode-line [cl-struct-package-desc flycheck-color-mode-line (0 3) "Change mode line color with Flycheck status" ((flycheck (0 15)) (dash (1 2)) (emacs (24 1))) single "marmalade" nil nil nil])
  (flycheck-gdc [cl-struct-package-desc flycheck-gdc (0 3) "Provides support for use of GDC as a Flycheck checker for Dlang." ((d-mode (20150317 117)) (flycheck (20150317 2246))) tar "marmalade" nil nil nil])
  (flycheck-gdc-dub [cl-struct-package-desc flycheck-gdc-dub (0 1) "Provides support for retrieving include paths from dub build descriptions.." ((d-mode (20150317 117)) (flycheck (20150317 2246))) tar "marmalade" nil nil nil])
  (flycheck-haskell [cl-struct-package-desc flycheck-haskell (0 7) "Flycheck: Cabal projects and sandboxes" ((flycheck (0 22)) (haskell-mode (13 7)) (dash (2 4 0)) (let-alist (1 0 1))) tar "marmalade" nil nil nil])
  (flycheck-hdevtools [cl-struct-package-desc flycheck-hdevtools (0 2) "A flycheck checker for Haskell using hdevtools" ((flycheck (0 15))) single "marmalade" nil nil nil])
  (flycheck-ledger [cl-struct-package-desc flycheck-ledger (0 2) "Flycheck integration for ledger files" ((flycheck (0 15))) single "marmalade" nil nil nil])
  (flycheck-ocaml [cl-struct-package-desc flycheck-ocaml (0 2) "Flycheck: OCaml support" ((emacs (24 1)) (flycheck (0 22 -3 1)) (merlin (2 0)) (let-alist (1 0 3))) single "marmalade" nil nil nil])
  (flycheck-tcl [cl-struct-package-desc flycheck-tcl (0 4) "A flycheck checker for Tcl using ActiveState's tclchecker" ((flycheck (0 17))) single "marmalade" nil nil nil])
  (flycheck-vala [cl-struct-package-desc flycheck-vala (0 1) "Provides support for use of valac as a Flycheck checker for Vala." ((vala-mode (20150324 1525)) (flycheck (20150317 2246))) tar "marmalade" nil nil nil])
  (flymake [cl-struct-package-desc flymake (0 4 16) "a universal on-the-fly syntax checker" nil single "marmalade" nil nil nil])
  (flymake-checkers [cl-struct-package-desc flymake-checkers (0 5) "Transition package to Flycheck" nil single "marmalade" nil nil nil])
  (flymake-coffee [cl-struct-package-desc flymake-coffee (0 12) "A flymake handler for coffee script" ((flymake-easy (0 1))) single "marmalade" nil nil nil])
  (flymake-css [cl-struct-package-desc flymake-css (0 3) "Flymake support for css using csslint" ((flymake-easy (0 1))) single "marmalade" nil nil nil])
  (flymake-csslint [cl-struct-package-desc flymake-csslint (1 1 0) "making flymake work with CSSLint" ((flymake (0 3))) tar "marmalade" nil nil nil])
  (flymake-cursor [cl-struct-package-desc flymake-cursor (1 0 2) "Show flymake messages in the minibuffer after delay" ((flymake (0 3))) tar "marmalade" nil nil nil])
  (flymake-d [cl-struct-package-desc flymake-d (0 1) "A flymake handler for d-mode files" nil single "marmalade" nil nil nil])
  (flymake-easy [cl-struct-package-desc flymake-easy (0 9) "Helpers for easily building flymake checkers" nil single "marmalade" nil nil nil])
  (flymake-elixir [cl-struct-package-desc flymake-elixir (0 5) "A flymake handler for elixir-mode .ex files." nil single "marmalade" nil nil nil])
  (flymake-gdc [cl-struct-package-desc flymake-gdc (0 1) "A flymake handler for d-mode files using the GDC compiler" nil tar "marmalade" nil nil nil])
  (flymake-go [cl-struct-package-desc flymake-go (2013 3 14) "A flymake handler for go-mode files" ((flymake (0 4 13))) single "marmalade" nil nil nil])
  (flymake-haml [cl-struct-package-desc flymake-haml (0 7) "A flymake handler for haml files" ((flymake-easy (0 1))) single "marmalade" nil nil nil])
  (flymake-haskell-multi [cl-struct-package-desc flymake-haskell-multi (0 3) "Syntax-check haskell-mode using both ghc and hlint" ((flymake-easy (0 1))) single "marmalade" nil nil nil])
  (flymake-hlint [cl-struct-package-desc flymake-hlint (0 2) "A flymake handler for haskell-mode files using hlint" ((flymake-easy (0 1))) single "marmalade" nil nil nil])
  (flymake-jshint [cl-struct-package-desc flymake-jshint (1 0) "making flymake work with JSHint" nil single "marmalade" nil nil nil])
  (flymake-jslint [cl-struct-package-desc flymake-jslint (0 10) "A flymake handler for javascript using jslint" ((flymake-easy (0 1))) single "marmalade" nil nil nil])
  (flymake-json [cl-struct-package-desc flymake-json (0 1) "A flymake handler for json using jsonlint" ((flymake-easy (0 1))) single "marmalade" nil nil nil])
  (flymake-less [cl-struct-package-desc flymake-less (0 3) "Flymake handler for LESS stylesheets (lesscss.org)" ((less-css-mode (0 15))) single "marmalade" nil nil nil])
  (flymake-lua [cl-struct-package-desc flymake-lua (1 0) "Flymake for Lua" nil single "marmalade" nil nil nil])
  (flymake-perlcritic [cl-struct-package-desc flymake-perlcritic (1 0 3) "Flymake handler for Perl to invoke Perl::Critic" ((flymake (0 3))) tar "marmalade" nil nil nil])
  (flymake-php [cl-struct-package-desc flymake-php (0 5) "A flymake handler for php-mode files" ((flymake-easy (0 1))) single "marmalade" nil nil nil])
  (flymake-phpcs [cl-struct-package-desc flymake-phpcs (1 0 5) "Flymake handler for PHP to invoke PHP-CodeSniffer" ((flymake (0 3))) tar "marmalade" nil nil nil])
  (flymake-puppet [cl-struct-package-desc flymake-puppet (1 0 0) "An Emacs flymake handler for syntax-checking puppet using puppet-lint" ((flymake-easy (0 9))) single "marmalade" nil nil nil])
  (flymake-python-pyflakes [cl-struct-package-desc flymake-python-pyflakes (0 9) "A flymake handler for python-mode files using pyflakes (or flake8)" ((flymake-easy (0 8))) single "marmalade" nil nil nil])
  (flymake-racket [cl-struct-package-desc flymake-racket (0 40) "A flymake handler for scheme-mode files" ((flymake-easy (0 1))) single "marmalade" nil nil nil])
  (flymake-ruby [cl-struct-package-desc flymake-ruby (0 8) "A flymake handler for ruby-mode files" ((flymake-easy (0 1))) single "marmalade" nil nil nil])
  (flymake-sass [cl-struct-package-desc flymake-sass (0 6) "Flymake handler for sass files" ((flymake-easy (0 1))) single "marmalade" nil nil nil])
  (flymake-shell [cl-struct-package-desc flymake-shell (0 8) "A flymake syntax-checker for shell scripts" ((flymake-easy (0 1))) single "marmalade" nil nil nil])
  (flyspell-lazy [cl-struct-package-desc flyspell-lazy (0 6 6) "Improve flyspell responsiveness using idle timers" nil single "marmalade" nil nil nil])
  (fm [cl-struct-package-desc fm (20130612 1) "follow mode for compilation/output buffers" nil single "marmalade" nil nil nil])
  (fold-dwim [cl-struct-package-desc fold-dwim (1 2) "Unified user interface for Emacs folding modes" nil single "marmalade" nil nil nil])
  (fold-dwim-org [cl-struct-package-desc fold-dwim-org (0 5) "Fold DWIM bound to org key-strokes." ((fold-dwim (1 2))) single "marmalade" nil nil nil])
  (fold-this [cl-struct-package-desc fold-this (0 3 0) "Just fold this region please" nil single "marmalade" nil nil nil])
  (font-utils [cl-struct-package-desc font-utils (0 7 0) "Utility functions for working with fonts" ((persistent-soft (0 8 8)) (pcache (0 2 3))) single "marmalade" nil nil nil])
  (fooddice [cl-struct-package-desc fooddice (0 1) "Help me I am hungry and dont know what to eat!" nil single "marmalade" nil nil nil])
  (form-feed [cl-struct-package-desc form-feed (0 1 9) "Display ^L glyphs as horizontal lines" nil single "marmalade" nil nil nil])
  (fpaste [cl-struct-package-desc fpaste (0 1 3) "Send text to http://fpaste.org" nil single "marmalade" nil nil nil])
  (frame-restore [cl-struct-package-desc frame-restore (0 5) "Restore Emacs frame" ((emacs (24 1))) single "marmalade" nil nil nil])
  (frame-tag [cl-struct-package-desc frame-tag (0 1 0) "Minor mode that assigns a unique number to each frame for easy switching" nil single "marmalade" nil nil nil])
  (framesize [cl-struct-package-desc framesize (0 0 5) "change the size of frames in Emacs" ((key-chord (0 5 20080915))) single "marmalade" nil nil nil])
  (fringe-helper [cl-struct-package-desc fringe-helper (1 0 1) "helper functions for fringe bitmaps" nil single "marmalade" nil nil nil])
  (fsvn [cl-struct-package-desc fsvn (0 9 13) "Another frontend of subversion." nil tar "marmalade" nil nil nil])
  (full-ack [cl-struct-package-desc full-ack (0 2 3) "a front-end for ack" nil single "marmalade" nil nil nil])
  (fullscreen-mode [cl-struct-package-desc fullscreen-mode (0 0 1) "fullscreen window support for Emacs" nil single "marmalade" nil nil nil])
  (furl [cl-struct-package-desc furl (0 0 3) "Friendly URL retrieval" nil single "marmalade" nil nil nil])
  (fuzzy [cl-struct-package-desc fuzzy (0 1) "Fuzzy Matching" nil single "marmalade" nil nil nil])
  (fuzzy-format [cl-struct-package-desc fuzzy-format (0 1 1) "select indent-tabs-mode and format code automatically." nil single "marmalade" nil nil nil])
  (fuzzy-match [cl-struct-package-desc fuzzy-match (1 4) "fuzzy matching" nil single "marmalade" nil nil nil])
  (gandalf-theme [cl-struct-package-desc gandalf-theme (0 1) "Gandalf color theme" nil single "marmalade" nil nil nil])
  (garoon [cl-struct-package-desc garoon (0 0 1) "A Garoon client." nil single "marmalade" nil nil nil])
  (gather [cl-struct-package-desc gather (1 0 4) "Gather string in buffer." nil single "marmalade" nil nil nil])
  (gccsense [cl-struct-package-desc gccsense (0 2) "GCCSense client for Emacs" nil single "marmalade" nil nil nil])
  (geben [cl-struct-package-desc geben (0 26) "A remote debugging environment for Emacs." nil tar "marmalade" nil nil nil])
  (gecf [cl-struct-package-desc gecf (0 1 0) "G\366ktu's Emacs configuration framework." nil single "marmalade" nil nil nil])
  (geiser [cl-struct-package-desc geiser (0 6) "GNU Emacs and Scheme talk to each other" nil tar "marmalade" nil nil nil])
  (generate-autoloads [cl-struct-package-desc generate-autoloads (0 0 10) "A package to help you lazy-load everything" nil single "marmalade" nil nil nil])
  (gerrit-download [cl-struct-package-desc gerrit-download (0 2) "Show gerrit reviews in a diff buffer." ((magit (20130828 1540))) single "marmalade" nil nil nil])
  (gh [cl-struct-package-desc gh (0 9 2) "A GitHub library for Emacs" ((eieio (1 4)) (pcache (0 3 0)) (logito (0 1))) tar "marmalade" nil nil nil])
  (ghc [cl-struct-package-desc ghc (1 10 2) "Happy Haskell programming on Emacs" ((haskell-mode (2 8 0))) tar "marmalade" nil nil nil])
  (ghci-completion [cl-struct-package-desc ghci-completion (0 1 3) "Completion for GHCi commands in inferior-haskell buffers" nil single "marmalade" nil nil nil])
  (gimme [cl-struct-package-desc gimme (2 1) "The XMMS2 interface we all love! Check out http://gimmeplayer.org for more info." nil tar "marmalade" nil nil nil])
  (gist [cl-struct-package-desc gist (1 2 1) "Emacs integration for gist.github.com" ((eieio (1 4)) (gh (0 8 1)) (tabulated-list (0))) single "marmalade" nil nil nil])
  (git-auto-commit-mode [cl-struct-package-desc git-auto-commit-mode (4 4 0) "Emacs Minor mode to automatically commit and push" nil single "marmalade" nil nil nil])
  (git-commit [cl-struct-package-desc git-commit (2 2 0) "Edit Git commit messages" ((emacs (24 4)) (dash (2 11 0)) (with-editor (2 2 0))) single "marmalade" nil nil nil])
  (git-draft [cl-struct-package-desc git-draft (0 0 2) "draft git commit messages" ((dash (2 9 0))) single "marmalade" nil nil nil])
  (git-gutter [cl-struct-package-desc git-gutter (0 78) "Port of Sublime Text plugin GitGutter" ((cl-lib (0 5)) (emacs (24))) single "marmalade" nil nil nil])
  (git-gutter-fringe [cl-struct-package-desc git-gutter-fringe (0 12) "Fringe version of git-gutter.el" ((git-gutter (0 42)) (fringe-helper (0 1 1))) single "marmalade" nil nil nil])
  (gitattributes-mode [cl-struct-package-desc gitattributes-mode (1 2 0) "Major mode for editing .gitattributes files" nil single "marmalade" nil nil nil])
  (gitattributes-whitespace [cl-struct-package-desc gitattributes-whitespace (1 20141128) "configure whitespace settings from gitattributes" nil single "marmalade" nil nil nil])
  (gitconfig [cl-struct-package-desc gitconfig (1 0 0) "Emacs lisp interface to work with git-config variables" nil single "marmalade" nil nil nil])
  (gitconfig-mode [cl-struct-package-desc gitconfig-mode (1 2 0) "Major mode for editing .gitconfig files" nil single "marmalade" nil nil nil])
  (github-browse-file [cl-struct-package-desc github-browse-file (0 4 0) "View the file you're editing on GitHub" ((cl-lib (0 5))) single "marmalade" nil nil nil])
  (github-theme [cl-struct-package-desc github-theme (0 0 3) "Github color theme for GNU Emacs 24" nil single "marmalade" nil nil nil])
  (gitignore-mode [cl-struct-package-desc gitignore-mode (1 2 0) "Major mode for editing .gitignore files" nil single "marmalade" nil nil nil])
  (gitty [cl-struct-package-desc gitty (1 0) "vc-mode extension for fast git interaction" nil single "marmalade" nil nil nil])
  (gnomenm [cl-struct-package-desc gnomenm (0 0 3) "Emacs interface to Gnome nmcli command" nil single "marmalade" nil nil nil])
  (gnugo [cl-struct-package-desc gnugo (2 2 12) "Play a game of Go against gnugo" nil single "marmalade" nil nil nil])
  (gnuplot [cl-struct-package-desc gnuplot (0 6 0) "drive gnuplot from within emacs" nil single "marmalade" nil nil nil])
  (gnus-summary-ext [cl-struct-package-desc gnus-summary-ext (0 1) "Extra limit and process mark commands for the gnus summary buffer" ((macro-utils (1 0))) single "marmalade" nil nil nil])
  (gnusnotes [cl-struct-package-desc gnusnotes (0 91) "Adding per-message notes in gnus summary buffer" nil single "marmalade" nil nil nil])
  (go-mode [cl-struct-package-desc go-mode (20131222) "Major mode for the Go programming language" nil single "marmalade" nil nil nil])
  (go-play [cl-struct-package-desc go-play (0 0 1) "Paste to play.golang.org" nil single "marmalade" nil nil nil])
  (god-mode [cl-struct-package-desc god-mode (2 12 0) "God-like command entering minor mode" nil single "marmalade" nil nil nil])
  (google-translate [cl-struct-package-desc google-translate (0 10 4) "Emacs interface to Google Translate." nil tar "marmalade" nil nil nil])
  (gopher [cl-struct-package-desc gopher (0 0 2) "easily access and navigate Gopher servers" nil single "marmalade" nil nil nil])
  (gotham-theme [cl-struct-package-desc gotham-theme (1 1 2) "A very dark Emacs color theme." nil single "marmalade" nil nil nil])
  (goto-chg [cl-struct-package-desc goto-chg (1 6) "goto last change" nil single "marmalade" nil nil nil])
  (goto-last-change [cl-struct-package-desc goto-last-change (1 2) "Move point through buffer-undo-list positions" nil single "marmalade" nil nil nil])
  (gplusify [cl-struct-package-desc gplusify (1 0) "Add Google Plus markup to a piece of code" nil single "marmalade" nil nil nil])
  (grails-mode [cl-struct-package-desc grails-mode (0 1) "minor-mode that adds some Grails project management to a grails project" nil single "marmalade" nil nil nil])
  (graphviz-dot-mode [cl-struct-package-desc graphviz-dot-mode (0 3 7) "Mode for the dot-language used by graphviz (att)." nil single "marmalade" nil nil nil])
  (grapnel [cl-struct-package-desc grapnel (0 5 3) "HTTP request lib with flexible callback dispatch" nil single "marmalade" nil nil nil])
  (gratuitous-dark-theme [cl-struct-package-desc gratuitous-dark-theme (1 3) "A theme originally by 'cofi' from #emacs, Freenode. It is a combination of Monokai and several other themes. The modeline has been modelled after AwesomeWM because it looks cool." nil single "marmalade" nil nil nil])
  (grep-a-lot [cl-struct-package-desc grep-a-lot (1 0 7) "manages multiple search results buffers for grep.el" nil single "marmalade" nil nil nil])
  (grep-o-matic [cl-struct-package-desc grep-o-matic (1 0 6) "auto grep word under cursor" nil single "marmalade" nil nil nil])
  (grin [cl-struct-package-desc grin (1 0) "run grin and grind (python replacements for grep and find) putting hits in a grep buffer" nil single "marmalade" nil nil nil])
  (grizzl [cl-struct-package-desc grizzl (0 1 1) "Fuzzy Search Library & Completing Read" ((cl-lib (0 1))) tar "marmalade" nil nil nil])
  (groovy-mode [cl-struct-package-desc groovy-mode (201203310931) "Groovy mode derived mode" nil single "marmalade" nil nil nil])
  (grr [cl-struct-package-desc grr (1 0 0) "Simple Growl notifications for Emacs and Mac OS X" nil single "marmalade" nil nil nil])
  (gruber-darker-theme [cl-struct-package-desc gruber-darker-theme (0 6) "Gruber Darker color theme for Emacs 24." nil single "marmalade" nil nil nil])
  (gtags [cl-struct-package-desc gtags (3 3) "gtags facility for Emacs" nil single "marmalade" nil nil nil])
  (guess-offset [cl-struct-package-desc guess-offset (0 1 1) "Automatically determine c-basic-offset" nil single "marmalade" nil nil nil])
  (guile-scheme [cl-struct-package-desc guile-scheme (0 1) "Guile Scheme editing mode" nil single "marmalade" nil nil nil])
  (guru-mode [cl-struct-package-desc guru-mode (0 2) "Become an Emacs guru" nil single "marmalade" nil nil nil])
  (gvpr-mode [cl-struct-package-desc gvpr-mode (0 1 0) "A major mode offering basic syntax coloring for gvpr scripts." nil single "marmalade" nil nil nil])
  (hackernews [cl-struct-package-desc hackernews (0 2 1) "Access the hackernews aggregator from Emacs" ((json (1 2))) tar "marmalade" nil nil nil])
  (haml-mode [cl-struct-package-desc haml-mode (3 1 8) "Major mode for editing Haml files" ((ruby-mode (1 0))) single "marmalade" nil nil nil])
  (handlebars-mode [cl-struct-package-desc handlebars-mode (1 3) "A major mode for editing Handlebars files." nil single "marmalade" nil nil nil])
  (handlebars-sgml-mode [cl-struct-package-desc handlebars-sgml-mode (0 1 0) "Add Handlebars contextual indenting support to sgml-mode" nil single "marmalade" nil nil nil])
  (hardcore-mode [cl-struct-package-desc hardcore-mode (1 0 0) "Disable arrow keys + optionally backspace and return" nil single "marmalade" nil nil nil])
  (hardhat [cl-struct-package-desc hardhat (0 4 4) "Protect against clobbering user-writable files" ((ignoramus (0 7 0))) single "marmalade" nil nil nil])
  (haskell-mode [cl-struct-package-desc haskell-mode (13 7) "A Haskell editing mode" nil tar "marmalade" nil nil nil])
  (haste [cl-struct-package-desc haste (1) "Emacs client for hastebin (http://hastebin.com/about.md)" ((json (1 2))) single "marmalade" nil nil nil])
  (haxe-mode [cl-struct-package-desc haxe-mode (0 3 1) "An Emacs major mode for haXe" nil single "marmalade" nil nil nil])
  (header2 [cl-struct-package-desc header2 (21 0) "Support for creation and update of file headers." nil single "marmalade" nil nil nil])
  (helm-ag [cl-struct-package-desc helm-ag (0 4) "the silver search with helm interface" ((helm (1 0))) single "marmalade" nil nil nil])
  (helm-dash [cl-struct-package-desc helm-dash (1 1) "Helm extension to search dash docsets" ((helm (0 0 0))) single "marmalade" nil nil nil])
  (helm-delicious [cl-struct-package-desc helm-delicious (1 3) "helm extensions for delicious bookmarks" nil single "marmalade" nil nil nil])
  (helm-gtags [cl-struct-package-desc helm-gtags (0 9 2) "GNU GLOBAL helm interface" ((helm (1 0))) single "marmalade" nil nil nil])
  (helm-helm-commands [cl-struct-package-desc helm-helm-commands (0 2) "List all helm commands with helm" ((helm (1 5 4))) single "marmalade" nil nil nil])
  (helm-projectile [cl-struct-package-desc helm-projectile (0 10 0) "Helm integration for Projectile" ((helm (1 4 0)) (projectile (0 10 0))) single "marmalade" nil nil nil])
  (heroku [cl-struct-package-desc heroku (1 1 0) "Interface to Heroku apps." nil single "marmalade" nil nil nil])
  (heroku-theme [cl-struct-package-desc heroku-theme (1 1 0) "Heroku color theme" nil single "marmalade" nil nil nil])
  (hexrgb [cl-struct-package-desc hexrgb (21 0) "Functions to manipulate colors, including RGB hex strings." nil single "marmalade" nil nil nil])
  (hide-comnt [cl-struct-package-desc hide-comnt (40) "Hide/show comments in code." nil tar "marmalade" nil nil nil])
  (hide-lines [cl-struct-package-desc hide-lines (20130623 1701) "Commands for hiding lines based on a regexp" nil single "marmalade" nil nil nil])
  (hideshowvis [cl-struct-package-desc hideshowvis (0 5) "Add markers to the fringe for regions foldable by hideshow.el" nil single "marmalade" nil nil nil])
  (highlight [cl-struct-package-desc highlight (21 0) "Highlighting commands." nil single "marmalade" nil nil nil])
  (highlight-current-line [cl-struct-package-desc highlight-current-line (0 57) "highlight line where the cursor is." nil single "marmalade" nil nil nil])
  (highlight-escape-sequences [cl-struct-package-desc highlight-escape-sequences (0 1) "Highlight escape sequences" nil single "marmalade" nil nil nil])
  (highlight-indentation [cl-struct-package-desc highlight-indentation (0 5 0) "Function for highlighting indentation" nil single "marmalade" nil nil nil])
  (highlight-parentheses [cl-struct-package-desc highlight-parentheses (1 0 1) "highlight surrounding parentheses" nil single "marmalade" nil nil nil])
  (highlight-sexp [cl-struct-package-desc highlight-sexp (1 0) "highlight current zone according to its context" nil single "marmalade" nil nil nil])
  (highlight-symbol [cl-struct-package-desc highlight-symbol (1 1) "automatic and manual symbol highlighting" nil single "marmalade" nil nil nil])
  (highline [cl-struct-package-desc highline (7 2 2) "minor mode to highlight current line in buffer" nil single "marmalade" nil nil nil])
  (hippie-expand-haskell [cl-struct-package-desc hippie-expand-haskell (0 0 1) "Hippie expand try function using ghc's completion function." nil single "marmalade" nil nil nil])
  (hippie-expand-slime [cl-struct-package-desc hippie-expand-slime (0 1) "Hook slime's completion into hippie-expand" nil single "marmalade" nil nil nil])
  (hippie-namespace [cl-struct-package-desc hippie-namespace (0 5 8) "Special treatment for namespace prefixes in hippie-expand" nil single "marmalade" nil nil nil])
  (hive [cl-struct-package-desc hive (0 1 1) "Hive SQL mode extension" ((sql (3 0))) single "marmalade" nil nil nil])
  (hjkl-mode [cl-struct-package-desc hjkl-mode (0 1) "import some vim's key bindings" ((key-chord (0 5))) tar "marmalade" nil nil nil])
  (hl-sentence [cl-struct-package-desc hl-sentence (2) "highlight a sentence based on customizable face" nil single "marmalade" nil nil nil])
  (hl-sexp [cl-struct-package-desc hl-sexp (1 0 0) "highlight the current sexp" nil single "marmalade" nil nil nil])
  (hl-spotlight [cl-struct-package-desc hl-spotlight (0) "Extension of hl-line.el to spotlight current few lines." nil single "marmalade" nil nil nil])
  (hlinum [cl-struct-package-desc hlinum (1 0) "Extension for linum.el to highlight current line number" nil single "marmalade" nil nil nil])
  (hook-utils [cl-struct-package-desc hook-utils (1 0) "Add a few utility functions for manipulating hooks" nil single "marmalade" nil nil nil])
  (how-many-lines-in-project [cl-struct-package-desc how-many-lines-in-project (0 3) "Calculate how many lines are there in your project." ((find-file-in-project (3 3))) single "marmalade" nil nil nil])
  (ht [cl-struct-package-desc ht (1 5) "The missing hash table library for Emacs" nil single "marmalade" nil nil nil])
  (html-script-src [cl-struct-package-desc html-script-src (0 0 2) "Insert <script src=\"..\"> for popular JavaScript libraries" nil single "marmalade" nil nil nil])
  (htmlfontify [cl-struct-package-desc htmlfontify (0 21) "htmlise a buffer/source tree with optional hyperlinks" nil single "marmalade" nil nil nil])
  (htmlize [cl-struct-package-desc htmlize (1 39) "Convert buffer text and decorations to HTML." nil single "marmalade" nil nil nil])
  (http-twiddle [cl-struct-package-desc http-twiddle (1 0) "send & twiddle & resend HTTP requests" nil single "marmalade" nil nil nil])
  (httpcode [cl-struct-package-desc httpcode (0 1) "explains the meaning of an HTTP status code" nil single "marmalade" nil nil nil])
  (httpd [cl-struct-package-desc httpd (1 0 1) "HTTP/1.0 web server for emacs" nil single "marmalade" nil nil nil])
  (hungry-delete [cl-struct-package-desc hungry-delete (1 1 2) "hungry delete minor mode" nil single "marmalade" nil nil nil])
  (huskie [cl-struct-package-desc huskie (0 0 2) "chainsaw powered logging" ((anaphora (0 0 6))) single "marmalade" nil nil nil])
  (iasm-mode [cl-struct-package-desc iasm-mode (0 1) "interactive assembly major mode." nil single "marmalade" nil nil nil])
  (ibuffer-vc [cl-struct-package-desc ibuffer-vc (0 7) "Group ibuffer's list by VC project, or show VC status" ((cl-lib (0 2))) single "marmalade" nil nil nil])
  (ical-pull [cl-struct-package-desc ical-pull (0 0 3) "pull ical feeds into org-agenda" ((shadchen (1 2)) (dash (2 9 0)) (s (1 9 0)) (noflet (0 0 14)) (web (0 5 1))) single "marmalade" nil nil nil])
  (idle-highlight [cl-struct-package-desc idle-highlight (1 0) "highlight the word the point is on" nil single "marmalade" nil nil nil])
  (idle-highlight-mode [cl-struct-package-desc idle-highlight-mode (1 1 2) "highlight the word the point is on" nil single "marmalade" nil nil nil])
  (idle-require [cl-struct-package-desc idle-require (1 0) "load elisp libraries while Emacs is idle" nil single "marmalade" nil nil nil])
  (ido-better-flex [cl-struct-package-desc ido-better-flex (0 2) "A better flex (fuzzy) algorithm for Ido." nil single "marmalade" nil nil nil])
  (ido-gnus [cl-struct-package-desc ido-gnus (0 4) "Access gnus groups or servers using ido" ((gnus (5 13))) single "marmalade" nil nil nil])
  (ido-load-library [cl-struct-package-desc ido-load-library (0 2 0) "Load-library alternative using ido-completing-read" ((persistent-soft (0 8 8)) (pcache (0 2 3))) single "marmalade" nil nil nil])
  (ido-select-window [cl-struct-package-desc ido-select-window (0 1 0) "Select a window using ido and buffer names." nil tar "marmalade" nil nil nil])
  (ido-ubiquitous [cl-struct-package-desc ido-ubiquitous (2 10) "Use ido (nearly) everywhere." ((emacs (24 1))) single "marmalade" nil nil nil])
  (ido-vertical-mode [cl-struct-package-desc ido-vertical-mode (0 1 1) "Makes ido-mode display vertically." nil single "marmalade" nil nil nil])
  (ido-yes-or-no [cl-struct-package-desc ido-yes-or-no (1 1) "Use Ido to answer yes-or-no questions" ((ido (0))) single "marmalade" nil nil nil])
  (idomenu [cl-struct-package-desc idomenu (0 1) "imenu tag selection with ido" nil single "marmalade" nil nil nil])
  (iedit [cl-struct-package-desc iedit (0 97) "Edit multiple regions in the same way simultaneously." nil tar "marmalade" nil nil nil])
  (ignoramus [cl-struct-package-desc ignoramus (0 7 2) "Ignore backups, build files, et al." nil single "marmalade" nil nil nil])
  (igrep [cl-struct-package-desc igrep (2 113) "An improved interface to `grep` and `find`" nil single "marmalade" nil nil nil])
  (imgur [cl-struct-package-desc imgur (0 1) "imgur client for Emacs" ((anything (1 287))) single "marmalade" nil nil nil])
  (immutant-server [cl-struct-package-desc immutant-server (1 0 1) "Run your Immutant server in Emacs" nil single "marmalade" nil nil nil])
  (inf-clojure [cl-struct-package-desc inf-clojure (1 0 0) "an inferior-clojure mode" ((emacs (24 1)) (clojure-mode (4 0))) single "marmalade" nil nil nil])
  (inf-groovy [cl-struct-package-desc inf-groovy (2 0) "minor-mode that adds some Grails project management to a grails project" nil single "marmalade" nil nil nil])
  (inf-ruby [cl-struct-package-desc inf-ruby (2 3 2) "Run a Ruby process in a buffer" nil single "marmalade" nil nil nil])
  (inform-mode [cl-struct-package-desc inform-mode (1 6 2) "Major mode for Inform 6 interactive fiction code" nil single "marmalade" nil nil nil])
  (initchart [cl-struct-package-desc initchart (0 1 1) "Emacs' init process performance visualization" ((cl-lib (0 3))) single "marmalade" nil nil nil])
  (inline-crypt [cl-struct-package-desc inline-crypt (0 1 4) "Simple inline encryption via openssl" nil tar "marmalade" nil nil nil])
  (insert-shebang [cl-struct-package-desc insert-shebang (0 9 3) "Insert shebang line automatically." nil single "marmalade" nil nil nil])
  (ipython [cl-struct-package-desc ipython (2927) "Adds support for IPython to python-mode.el" nil single "marmalade" nil nil nil])
  (ir-black-theme [cl-struct-package-desc ir-black-theme (1 0) "Port of ir-black theme" nil single "marmalade" nil nil nil])
  (iregister [cl-struct-package-desc iregister (0 5 0) "Interactive register commands for Emacs." nil tar "marmalade" nil nil nil])
  (irfc [cl-struct-package-desc irfc (0 5 6) "Interface for IETF RFC document." nil single "marmalade" nil nil nil])
  (isea [cl-struct-package-desc isea (0 0 2) "interactive server eval at mode, a comint for a daemonized emacs" ((elpakit (0 0 18))) single "marmalade" nil nil nil])
  (isearch-switch [cl-struct-package-desc isearch-switch (1 0) "switch the manner you are isearching in." nil single "marmalade" nil nil nil])
  (isgd [cl-struct-package-desc isgd (20130927) "Shorten URLs using the isgd.com shortener service" nil single "marmalade" nil nil nil])
  (issue-tracker [cl-struct-package-desc issue-tracker (0 0 1) "Poor man's issue tracker" nil tar "marmalade" nil nil nil])
  (ix [cl-struct-package-desc ix (0 7) "Emacs client for http://ix.io pastebin" ((grapnel (0 5 3))) single "marmalade" nil nil nil])
  (iy-go-to-char [cl-struct-package-desc iy-go-to-char (1 0) "Go to next CHAR which is similar to \"f\" in vim" nil single "marmalade" nil nil nil])
  (j-mode [cl-struct-package-desc j-mode (0 3) "Major mode for editing J programs" nil single "marmalade" nil nil nil])
  (jabber [cl-struct-package-desc jabber (0 8 90) "A Jabber client for Emacs." nil tar "marmalade" nil nil nil])
  (jade-mode [cl-struct-package-desc jade-mode (0 1) "Major mode for editing jade templates." nil single "marmalade" nil nil nil])
  (jam-mode [cl-struct-package-desc jam-mode (0 3) "Font-lock support for Jam files" nil single "marmalade" nil nil nil])
  (jammer [cl-struct-package-desc jammer (0 0 3) "Punish yourself for using Emacs inefficiently" nil single "marmalade" nil nil nil])
  (jasmin [cl-struct-package-desc jasmin (1 2) "major editing mode for Jasmin Java bytecode assembler files" nil single "marmalade" nil nil nil])
  (jaunte [cl-struct-package-desc jaunte (0 0 0) "Emacs Hit a Hint" nil single "marmalade" nil nil nil])
  (java-file-create [cl-struct-package-desc java-file-create (1 0) "automatically insert contents of empty java files" nil single "marmalade" nil nil nil])
  (javap [cl-struct-package-desc javap (8) "Javap major mode" nil single "marmalade" nil nil nil])
  (javap-mode [cl-struct-package-desc javap-mode (9) "Javap major mode" nil single "marmalade" nil nil nil])
  (javarun [cl-struct-package-desc javarun (0 1 1) "Minor mode for quick development of Java programs" nil single "marmalade" nil nil nil])
  (jb-misc-macros [cl-struct-package-desc jb-misc-macros (0 4) "Miscellaneous macros" ((macro-utils (1 0))) single "marmalade" nil nil nil])
  (jcuken-fix [cl-struct-package-desc jcuken-fix (1 0) "Map Modifier-CyrillicLetter to the underlying Modifier-LatinLetter." nil single "marmalade" nil nil nil])
  (jedi [cl-struct-package-desc jedi (0 1 2) "Python auto-completion for Emacs" ((epc (0 1 0)) (auto-complete (1 4))) tar "marmalade" nil nil nil])
  (jenkins-watch [cl-struct-package-desc jenkins-watch (1 2) "Watch continuous integration build status" nil single "marmalade" nil nil nil])
  (jinja2-mode [cl-struct-package-desc jinja2-mode (0 1) "A major mode for jinja2" nil single "marmalade" nil nil nil])
  (jira [cl-struct-package-desc jira (0 3 3) "Connect to JIRA issue tracking software" nil single "marmalade" nil nil nil])
  (journal [cl-struct-package-desc journal (1 2 1) "a simple org-mode based journaling mode" nil single "marmalade" nil nil nil])
  (js-comint [cl-struct-package-desc js-comint (0 0 1) "Run javascript in an inferior process window." nil single "marmalade" nil nil nil])
  (json [cl-struct-package-desc json (1 2) "JavaScript Object Notation parser / generator" nil single "marmalade" nil nil nil])
  (json-mode [cl-struct-package-desc json-mode (1 2 0) "Major mode for editing JSON files" nil single "marmalade" nil nil nil])
  (json-snatcher [cl-struct-package-desc json-snatcher (1 0) "Grabs the path to JSON values in a JSON file." nil single "marmalade" nil nil nil])
  (jujube-theme [cl-struct-package-desc jujube-theme (0 1) "Pastel theme loosely based on jellybeans" nil single "marmalade" nil nil nil])
  (jump [cl-struct-package-desc jump (2 3) "build functions which contextually jump between files" ((findr (0 7)) (inflections (1 1))) single "marmalade" nil nil nil])
  (jump-char [cl-struct-package-desc jump-char (0 1) "navigation by char" nil single "marmalade" nil nil nil])
  (jump-dls [cl-struct-package-desc jump-dls (0 6) "Jump to definition of symbol using various methods." nil single "marmalade" nil nil nil])
  (kanban [cl-struct-package-desc kanban (0 1 4) "Parse org-todo headlines to use org-tables as Kanban tables" nil single "marmalade" nil nil nil])
  (karma [cl-struct-package-desc karma (0 1 0) "Karma Test Runner Emacs Integration" nil single "marmalade" nil nil nil])
  (key-choices [cl-struct-package-desc key-choices (0 201) "Key Choices -- Also Viper has different colors in different modes" ((color-theme-vim-insert-mode (0 1)) (color-theme-emacs-revert-theme (0 1))) single "marmalade" nil nil nil])
  (key-chord [cl-struct-package-desc key-chord (0 5 20080915) "map pairs of simultaneously pressed keys to commands" nil single "marmalade" nil nil nil])
  (key-combo [cl-struct-package-desc key-combo (1 5 1) "map key sequence to commands" nil single "marmalade" nil nil nil])
  (keyfreq [cl-struct-package-desc keyfreq (0 0 3) "track command frequencies" ((json (1 2))) single "marmalade" nil nil nil])
  (keywiz [cl-struct-package-desc keywiz (1 4) "Emacs key sequence quiz" nil single "marmalade" nil nil nil])
  (kmacro-decision [cl-struct-package-desc kmacro-decision (1 5) "Add conditional branching to keyboard macros" ((el-x (1 0)) (jb-misc-macros (0 2))) single "marmalade" nil nil nil])
  (kpm-list [cl-struct-package-desc kpm-list (1 0) "An emacs buffer list that tries to intelligently group together buffers." nil single "marmalade" nil nil nil])
  (kv [cl-struct-package-desc kv (0 0 19) "key/value data structure functions" nil single "marmalade" nil nil nil])
  (kwin [cl-struct-package-desc kwin (0 1) "communcate with the KWin window manager" nil single "marmalade" nil nil nil])
  (lacarte [cl-struct-package-desc lacarte (22 0) "Execute menu items as commands, with completion." nil single "marmalade" nil nil nil])
  (lang-refactor [cl-struct-package-desc lang-refactor (0 1 1) "Simple refactorings, primarily for Perl" nil single "marmalade" nil nil nil])
  (langtool [cl-struct-package-desc langtool (1 2 1) "Grammar check utility using LanguageTool" nil single "marmalade" nil nil nil])
  (late-night-theme [cl-struct-package-desc late-night-theme (0 0) "Late Night theme for Emacs 24" nil single "marmalade" nil nil nil])
  (latest-clojars [cl-struct-package-desc latest-clojars (0 3) "Clojure dependency resolver" nil single "marmalade" nil nil nil])
  (latest-clojure-libraries [cl-struct-package-desc latest-clojure-libraries (0 5) "Clojure dependency resolver" nil single "marmalade" nil nil nil])
  (latex-pretty-symbols [cl-struct-package-desc latex-pretty-symbols (1 0) "Display many latex symbols as their unicode counterparts" nil single "marmalade" nil nil nil])
  (latex-preview-pane [cl-struct-package-desc latex-preview-pane (20140205) "Makes LaTeX editing less painful by providing a updatable preview pane" nil tar "marmalade" nil nil nil])
  (layout-restore [cl-struct-package-desc layout-restore (0 4) "keep window configuration as layout and restore it simply." nil single "marmalade" nil nil nil])
  (lcs [cl-struct-package-desc lcs (1 6) "find out the longest common sequence" nil single "marmalade" nil nil nil])
  (legalese [cl-struct-package-desc legalese (20120706) "Add legalese to your program files" nil single "marmalade" nil nil nil])
  (lentic [cl-struct-package-desc lentic (0 7) "One buffer as a view of another" ((emacs (24 4)) (m-buffer (0 8)) (dash (2 5 0)) (f (0 17 2))) tar "marmalade" nil nil nil])
  (less-css-mode [cl-struct-package-desc less-css-mode (0 18) "Major mode for editing LESS CSS files (lesscss.org)" nil single "marmalade" nil nil nil])
  (let-recur [cl-struct-package-desc let-recur (0 0 5) "Simplified implementation of recur" nil single "marmalade" nil nil nil])
  (levenshtein [cl-struct-package-desc levenshtein (1 0) "Edit distance between two strings." nil single "marmalade" nil nil nil])
  (lexbind-mode [cl-struct-package-desc lexbind-mode (0 9) "Puts the value of lexical-binding in the mode line" nil single "marmalade" nil nil nil])
  (lib-requires [cl-struct-package-desc lib-requires (21 0) "Commands to list Emacs Lisp library dependencies." nil single "marmalade" nil nil nil])
  (linear-undo [cl-struct-package-desc linear-undo (5 2) "Intuitive undo/redo." nil single "marmalade" nil nil nil])
  (lineno [cl-struct-package-desc lineno (0 1) "Alternate mode to display line numbers." nil single "marmalade" nil nil nil])
  (linky-client [cl-struct-package-desc linky-client (0 0 2) "a client for linky.elnode.org" nil single "marmalade" nil nil nil])
  (linum-off [cl-struct-package-desc linum-off (0 1) "Provides an interface for turning line-numbering off" nil single "marmalade" nil nil nil])
  (lisp-editing [cl-struct-package-desc lisp-editing (0 0 5) "lisp editing tools" nil single "marmalade" nil nil nil])
  (lisp-infection [cl-struct-package-desc lisp-infection (0 0 10) "Commands to *enhance* S-exp editing" nil single "marmalade" nil nil nil])
  (lispyscript-mode [cl-struct-package-desc lispyscript-mode (0 3 1) "Major mode for LispyScript code." nil single "marmalade" nil nil nil])
  (list-register [cl-struct-package-desc list-register (2 2) "List register" nil single "marmalade" nil nil nil])
  (list-utils [cl-struct-package-desc list-utils (0 4 2) "List-manipulation utility functions" nil single "marmalade" nil nil nil])
  (livecoder [cl-struct-package-desc livecoder (0 0 2) "tools for live coders" nil single "marmalade" nil nil nil])
  (livescript-mode [cl-struct-package-desc livescript-mode (0 0 1) "Major mode for LiveScript files in Emacs" nil single "marmalade" nil nil nil])
  (livid-mode [cl-struct-package-desc livid-mode (0 1 0) "Live browser eval of JavaScript every time a buffer changes" ((skewer-mode (1 5 3)) (s (1 8 0))) single "marmalade" nil nil nil])
  (load-theme-buffer-local [cl-struct-package-desc load-theme-buffer-local (0 0 2) "Install emacs24 color themes by buffer." nil single "marmalade" nil nil nil])
  (logito [cl-struct-package-desc logito (0 1) "logging library for Emacs" ((eieio (1 3))) single "marmalade" nil nil nil])
  (lolcode-mode [cl-struct-package-desc lolcode-mode (0 2) "Major mode for editing LOLCODE" nil single "marmalade" nil nil nil])
  (look-dired [cl-struct-package-desc look-dired (0 1) "Extensions to look-mode for dired buffers" ((look-mode (1 0))) single "marmalade" nil nil nil])
  (look-mode [cl-struct-package-desc look-mode (1 0) "quick file viewer for image and text file browsing" nil single "marmalade" nil nil nil])
  (loop [cl-struct-package-desc loop (1 1) "friendly imperative loop structures" nil single "marmalade" nil nil nil])
  (lorem-ipsum [cl-struct-package-desc lorem-ipsum (0 1) "Insert dummy pseudo Latin text." nil single "marmalade" nil nil nil])
  (lua-mode [cl-struct-package-desc lua-mode (20110428) "a major-mode for editing Lua scripts" nil single "marmalade" nil nil nil])
  (lui [cl-struct-package-desc lui (1 6) "Linewise User Interface" ((tracking (1 6))) tar "marmalade" nil nil nil])
  (lxc [cl-struct-package-desc lxc (0 0 2) "lxc integration with Emacs" nil single "marmalade" nil nil nil])
  (lyskom [cl-struct-package-desc lyskom (20131008) "LysKOM elisp client." nil single "marmalade" nil nil nil])
  (m-buffer [cl-struct-package-desc m-buffer (0 8) "Buffer Manipulation Functions" ((emacs (24 3)) (dash (2 5 0))) tar "marmalade" nil nil nil])
  (mac-key-mode [cl-struct-package-desc mac-key-mode (2010 1 3) "provide mac-style key bindings on Carbon Emacs" nil single "marmalade" nil nil nil])
  (macro-utils [cl-struct-package-desc macro-utils (1 0) "Utilities for writing macros." nil single "marmalade" nil nil nil])
  (macrostep [cl-struct-package-desc macrostep (0 8) "interactive macro stepper for Emacs Lisp" nil single "marmalade" nil nil nil])
  (mactag [cl-struct-package-desc mactag (0 0 1) "Mode for automatically handle multiple tags files with Mactag rubygem" nil single "marmalade" nil nil nil])
  (magit [cl-struct-package-desc magit (2 2 0) "A Git porcelain inside Emacs" ((emacs (24 4)) (async (1 4)) (dash (2 11 0)) (with-editor (2 2 0)) (git-commit (2 2 0)) (magit-popup (2 2 0))) tar "marmalade" nil nil nil])
  (magit-find-file [cl-struct-package-desc magit-find-file (1 0 4) "completing-read over all files in Git" ((magit (1 2 0))) single "marmalade" nil nil nil])
  (magit-gh-pulls [cl-struct-package-desc magit-gh-pulls (0 3) "GitHub pull requests extension for Magit" ((gh (0 4 3)) (magit (1 1 0))) single "marmalade" nil nil nil])
  (magit-popup [cl-struct-package-desc magit-popup (2 2 0) "Define prefix-infix-suffix command combos" ((emacs (24 4)) (async (1 4)) (dash (2 11 0))) tar "marmalade" nil nil nil])
  (magit-simple-keys [cl-struct-package-desc magit-simple-keys (1 0 0) "simple keybindings for Magit" ((magit (1 0 0))) single "marmalade" nil nil nil])
  (magit-tramp [cl-struct-package-desc magit-tramp (0 1 0) "git method for TRAMP" ((magit (1 2 0))) single "marmalade" nil nil nil])
  (maildir [cl-struct-package-desc maildir (0 0 28) "Simple maildir based MUA." ((kv (0 0 17)) (dash (2 3 0)) (s (1 9 0)) (noflet (0 0 8))) tar "marmalade" nil nil nil])
  (main-line [cl-struct-package-desc main-line (1 2 8) "modeline replacement forked from an early version of powerline.el" nil single "marmalade" nil nil nil])
  (mainline [cl-struct-package-desc mainline (1 1 0) "modeline replacement forked from an early version of powerline.el" nil single "marmalade" nil nil nil])
  (makefile-runner [cl-struct-package-desc makefile-runner (1 1 2) "Searches for Makefile and fetches targets" nil single "marmalade" nil nil nil])
  (man-commands [cl-struct-package-desc man-commands (1 1) "Add interactive commands for every manpages installed in your computer." nil single "marmalade" nil nil nil])
  (margo [cl-struct-package-desc margo (2012 9 18) "Client for MarGo, providing Go utilities" ((web (0 1 8)) (json (1 2))) single "marmalade" nil nil nil])
  (mark [cl-struct-package-desc mark (0 3) "Navigate and visualize the mark-ring" ((fm (1 0))) single "marmalade" nil nil nil])
  (mark-more-like-this [cl-struct-package-desc mark-more-like-this (1 0) "Mark additional regions in buffer matching current region." nil single "marmalade" nil nil nil])
  (mark-multiple [cl-struct-package-desc mark-multiple (1 0) "A library that sorta lets you mark several regions at once" nil single "marmalade" nil nil nil])
  (mark-tools [cl-struct-package-desc mark-tools (0 3) "Some simple tools to access the mark-ring in Emacs" nil single "marmalade" nil nil nil])
  (markdown-mode [cl-struct-package-desc markdown-mode (2 0) "Emacs Major mode for Markdown-formatted text files" nil single "marmalade" nil nil nil])
  (markdown-toc [cl-struct-package-desc markdown-toc (0 0 8) "A simple TOC generator for markdown file" ((markdown-mode (2 0)) (dash (2 11 0)) (s (1 9 0))) single "marmalade" nil nil nil])
  (markup-faces [cl-struct-package-desc markup-faces (1 0 0) "collection of faces for markup language modes" nil single "marmalade" nil nil nil])
  (marmalade [cl-struct-package-desc marmalade (0 0 4) "Elisp interface for the Emacs Lisp package server." ((furl (0 0 2))) single "marmalade" nil nil nil])
  (marmalade-client [cl-struct-package-desc marmalade-client (0 0 12) "client for marmalade API from emacs" ((web (0 5 2)) (kv (0 0 19)) (gh (0 8 0))) single "marmalade" nil nil nil])
  (marmalade-demo [cl-struct-package-desc marmalade-demo (0 0 5) "a demonstration elpa package" nil single "marmalade" nil nil nil])
  (marmalade-service [cl-struct-package-desc marmalade-service (2 0 16) "The Marmalade package store service." ((dash (1 1 0)) (s (1 6 0)) (kv (0 0 16)) (noflet (0 0 7)) (elnode (0 9 9 8 6)) (file-format (0 0 1)) (htmlize (1 3 9))) tar "marmalade" nil nil nil])
  (marmalade-test [cl-struct-package-desc marmalade-test (0 0 1) "A test tarball package." nil tar "marmalade" nil nil nil])
  (marmalade-upload [cl-struct-package-desc marmalade-upload (0 0 5) "upload client for marmalade from emacs" ((web (0 4 2)) (kv (0 0 19))) single "marmalade" nil nil nil])
  (marshal [cl-struct-package-desc marshal (0 4 0) "eieio extension for automatic (un)marshalling" ((eieio (1 4)) (json (1 4))) single "marmalade" nil nil nil])
  (master-mode [cl-struct-package-desc master-mode (0 1) "Become an Emacs master" nil single "marmalade" nil nil nil])
  (math-at-point [cl-struct-package-desc math-at-point (0 0 1) "Utilities for modifying numbers at point" nil single "marmalade" nil nil nil])
  (maxframe [cl-struct-package-desc maxframe (0 5 1) "maximize the emacs frame based on display size" nil single "marmalade" nil nil nil])
  (mbe [cl-struct-package-desc mbe (0 1) "Macros by Example" ((emacs (24)) (cl-lib (0 5))) single "marmalade" nil nil nil])
  (mc-jump [cl-struct-package-desc mc-jump (1 0 0) "like \"jump-char\", but \"multiple-cursors\" friendly" nil single "marmalade" nil nil nil])
  (mediawiki [cl-struct-package-desc mediawiki (2 2 3) "mediawiki frontend" nil single "marmalade" nil nil nil])
  (memoize [cl-struct-package-desc memoize (1 0 1) "Memoization functions" nil single "marmalade" nil nil nil])
  (message-templ [cl-struct-package-desc message-templ (0 1 20141026) "Templates for message-mode." nil single "marmalade" nil nil nil])
  (meta-presenter [cl-struct-package-desc meta-presenter (20150501 410) "A simple multi-file presentation tool for Emacs" nil single "marmalade" nil nil nil])
  (mic-paren [cl-struct-package-desc mic-paren (3 8) "advanced highlighting of matching parentheses" nil single "marmalade" nil nil nil])
  (midje-mode [cl-struct-package-desc midje-mode (0 1 2) "Minor mode for running Midje tests in emacs, see: https://github.com/dnaumov/midje-mode" ((slime (1 0)) (clojure-mode (1 0))) tar "marmalade" nil nil nil])
  (minimal-session-saver [cl-struct-package-desc minimal-session-saver (0 6 2) "Very lean session saver" nil single "marmalade" nil nil nil])
  (minimap [cl-struct-package-desc minimap (1 0) "Sidebar showing a \"mini-map\" of a buffer" nil single "marmalade" nil nil nil])
  (minitest [cl-struct-package-desc minitest (0 5) "An Emacs mode for ruby minitest files" ((dash (1 0 0))) single "marmalade" nil nil nil])
  (mldonkey [cl-struct-package-desc mldonkey (0 0 4) "Multi-networks peer-to-peer client." nil tar "marmalade" nil nil nil])
  (mo-git-blame [cl-struct-package-desc mo-git-blame (0 1 0) "An interactive, iterative 'git blame' mode for Emacs" nil single "marmalade" nil nil nil])
  (mocker [cl-struct-package-desc mocker (0 3 0) "mocking framework for emacs" ((eieio (1 3)) (el-x (0 2 4))) single "marmalade" nil nil nil])
  (mode-compile [cl-struct-package-desc mode-compile (2 29) "Smart command for compiling files" nil single "marmalade" nil nil nil])
  (mode-icons [cl-struct-package-desc mode-icons (0 1 0) "Show icons for modes" nil tar "marmalade" nil nil nil])
  (modeline-posn [cl-struct-package-desc modeline-posn (22 0) "Set up `mode-line-position'." nil single "marmalade" nil nil nil])
  (modtime-skip-mode [cl-struct-package-desc modtime-skip-mode (0 9) "Minor mode for disabling modtime and supersession checks on files." nil single "marmalade" nil nil nil])
  (moinmoin-mode [cl-struct-package-desc moinmoin-mode (1 0) "a major mode to edit MoinMoin wiki pages" ((screen-lines (0 55))) single "marmalade" nil nil nil])
  (mongo [cl-struct-package-desc mongo (0 5) "A MongoDB client." nil tar "marmalade" nil nil nil])
  (mongo-elnode [cl-struct-package-desc mongo-elnode (0 5 0) "elnode adapter for mongo-el" ((mongo (0 5)) (elnode (0 9 9))) single "marmalade" nil nil nil])
  (monky [cl-struct-package-desc monky (0 1) "control Hg from Emacs." nil single "marmalade" nil nil nil])
  (monokai-theme [cl-struct-package-desc monokai-theme (0 0 12) "DEPRECATED: Monokai Color Theme for Emacs." nil single "marmalade" nil nil nil])
  (monroe [cl-struct-package-desc monroe (0 2 0) "Yet another client for nREPL" nil single "marmalade" nil nil nil])
  (mote-mode [cl-struct-package-desc mote-mode (1 0 0) "Mote minor mode" ((ruby-mode (1 1))) single "marmalade" nil nil nil])
  (move-line [cl-struct-package-desc move-line (0 0 1) "utilities for moving lines in file" nil single "marmalade" nil nil nil])
  (move-text [cl-struct-package-desc move-text (1 0) "Move current line or region with M-up or M-down." nil single "marmalade" nil nil nil])
  (multi [cl-struct-package-desc multi (2 0 1) "Clojure-style multi-methods for emacs lisp" ((emacs (24))) single "marmalade" nil nil nil])
  (multi-eshell [cl-struct-package-desc multi-eshell (0 0 1) "makes it easier to use multiple shells within emacs" nil single "marmalade" nil nil nil])
  (multi-project [cl-struct-package-desc multi-project (0 0 17) "Easily work with multiple projects." nil single "marmalade" nil nil nil])
  (multi-term [cl-struct-package-desc multi-term (0 8 8) "Managing multiple terminal buffers in Emacs." nil single "marmalade" nil nil nil])
  (multi-web-mode [cl-struct-package-desc multi-web-mode (0 1) "multiple major mode support for web editing" nil single "marmalade" nil nil nil])
  (multiple-cursors [cl-struct-package-desc multiple-cursors (1 3 0) "Multiple cursors for Emacs." nil tar "marmalade" nil nil nil])
  (mustache [cl-struct-package-desc mustache (0 20) "a mustache templating library in emacs lisp" ((ht (0 9)) (s (1 3 0)) (dash (1 2 0))) tar "marmalade" nil nil nil])
  (mustache-mode [cl-struct-package-desc mustache-mode (1 2) "A major mode for editing Mustache files." nil single "marmalade" nil nil nil])
  (mv-shell [cl-struct-package-desc mv-shell (1 2) "keep buffers in sync with filename throughout 'mv'commands in shell-mode." nil single "marmalade" nil nil nil])
  (mvn-help [cl-struct-package-desc mvn-help (0 0 1) "maven help tools" nil single "marmalade" nil nil nil])
  (mwe-log-commands [cl-struct-package-desc mwe-log-commands (20041106) "log keyboard commands to buffer" nil single "marmalade" nil nil nil])
  (my-packages [cl-struct-package-desc my-packages (0 1 0) "Package Initialization." nil single "marmalade" nil nil nil])
  (myterminal-controls [cl-struct-package-desc myterminal-controls (20150427 347) "Quick toggle controls at a key-stroke" ((emacs (24)) (cl-lib (0 5))) single "marmalade" nil nil nil])
  (n3-mode [cl-struct-package-desc n3-mode (20071215) "mode for Notation 3" nil single "marmalade" nil nil nil])
  (namakemono [cl-struct-package-desc namakemono (0 0 1) "utility function set for namakemono" nil single "marmalade" nil nil nil])
  (nav-flash [cl-struct-package-desc nav-flash (1 1 0) "Briefly highlight the current line" nil single "marmalade" nil nil nil])
  (navigate [cl-struct-package-desc navigate (0 1 5) "Seamlessly navigate between Emacs and tmux" nil single "marmalade" nil nil nil])
  (nginx-mode [cl-struct-package-desc nginx-mode (1 1) "major mode for editing nginx config files" nil single "marmalade" nil nil nil])
  (niclein [cl-struct-package-desc niclein (0 0 5) "Nic's lein and clojure integration" ((shadchen (1 4)) (smartparens (1 5))) single "marmalade" nil nil nil])
  (nimrod-mode [cl-struct-package-desc nimrod-mode (0 1 5) "A major mode for the Nimrod programming language" ((auto-complete (1 4))) single "marmalade" nil nil nil])
  (no-easy-keys [cl-struct-package-desc no-easy-keys (1 0 2) "Learn the proper Emacs movement keys" nil single "marmalade" nil nil nil])
  (nodejs-repl [cl-struct-package-desc nodejs-repl (0 0 2 1) "Run Node.js REPL" nil single "marmalade" nil nil nil])
  (noflet [cl-struct-package-desc noflet (0 0 15) "locally override functions" nil single "marmalade" nil nil nil])
  (nose [cl-struct-package-desc nose (0 1 1) "Easy Python test running in Emacs" nil single "marmalade" nil nil nil])
  (nose-mode [cl-struct-package-desc nose-mode (0 1) "Minor mode for running nose tests." ((nose (0 1 1))) tar "marmalade" nil nil nil])
  (notify [cl-struct-package-desc notify (2010 8 20) "notification front-end" nil single "marmalade" nil nil nil])
  (notmuch-labeler [cl-struct-package-desc notmuch-labeler (0 1) "Improves notmuch way of displaying labels through fonts, pictures, and hyperlinks." nil tar "marmalade" nil nil nil])
  (nrepl-decompile [cl-struct-package-desc nrepl-decompile (0 0 1) "decompilation extension for nrepl.el" ((nrepl (0 1 7)) (javap-mode (9))) single "marmalade" nil nil nil])
  (nrepl-discover [cl-struct-package-desc nrepl-discover (0 0 1) "Client to load commands from nrepl server" nil single "marmalade" nil nil nil])
  (nrepl-ritz [cl-struct-package-desc nrepl-ritz (0 6 0) "nrepl extensions for ritz" ((nrepl (0 1 5))) single "marmalade" nil nil nil])
  (nsis-mode [cl-struct-package-desc nsis-mode (0 44) "NSIS-mode" nil single "marmalade" nil nil nil])
  (nssh [cl-struct-package-desc nssh (0 9 9) "New SSH mode for Emacs" nil single "marmalade" nil nil nil])
  (nssh-n [cl-struct-package-desc nssh-n (0 9 8) "SSH mode for Emacs" nil single "marmalade" nil nil nil])
  (ntcmd [cl-struct-package-desc ntcmd (1 0) "major mode for editing cmd scripts" nil single "marmalade" nil nil nil])
  (nurumacs [cl-struct-package-desc nurumacs (3 5 4) "smooth-scrolling and minimap, like sublime editor" nil single "marmalade" nil nil nil])
  (nzenburn-theme [cl-struct-package-desc nzenburn-theme (20130513) "A low contrast color theme for Emacs." nil single "marmalade" nil nil nil])
  (oauth [cl-struct-package-desc oauth (1 0 3) "An Emacs oauth client. See https://github.com/psanford/emacs-oauth/" nil tar "marmalade" nil nil nil])
  (ob-sml [cl-struct-package-desc ob-sml (0 2) "org-babel functions for template evaluation" ((sml-mode (6 4))) single "marmalade" nil nil nil])
  (occur-default-current-word [cl-struct-package-desc occur-default-current-word (1 0) "Have M-x occur default to the word at point" nil single "marmalade" nil nil nil])
  (occur-x [cl-struct-package-desc occur-x (0 1 1) "Extra functionality for occur" nil single "marmalade" nil nil nil])
  (octomacs [cl-struct-package-desc octomacs (0 0 1) "Octopress interface for Emacs" nil single "marmalade" nil nil nil])
  (oddmuse [cl-struct-package-desc oddmuse (20090222) "edit pages on an Oddmuse wiki" nil single "marmalade" nil nil nil])
  (offlineimap [cl-struct-package-desc offlineimap (0 1) "Run OfflineIMAP from Emacs" nil single "marmalade" nil nil nil])
  (om-mode [cl-struct-package-desc om-mode (0 5 20140916) "Insert Om component template with life cycle." nil single "marmalade" nil nil nil])
  (openstack-cgit-browse-file [cl-struct-package-desc openstack-cgit-browse-file (0 2) "Browse the current file in OpenStack cgit" nil single "marmalade" nil nil nil])
  (openwith [cl-struct-package-desc openwith (20120531) "Open files with external programs" nil single "marmalade" nil nil nil])
  (operate-on-number [cl-struct-package-desc operate-on-number (1 1 0) "Operate on number at point with arithmetic functions" nil single "marmalade" nil nil nil])
  (org-blog [cl-struct-package-desc org-blog (1 18 1 1) "create and publish a blog with org-mode" nil single "marmalade" nil nil nil])
  (org-cliplink [cl-struct-package-desc org-cliplink (0 2) "insert org-mode links by URL from the clipboard" nil single "marmalade" nil nil nil])
  (org-cua-dwim [cl-struct-package-desc org-cua-dwim (0 5) "Org-mode and Cua mode compatibility layer" nil single "marmalade" nil nil nil])
  (org-dotemacs [cl-struct-package-desc org-dotemacs (0 3) "Store your emacs config as an org file, and choose which bits to load." ((org (7 9 3)) (cl-lib (1 0))) single "marmalade" nil nil nil])
  (org-ehtml [cl-struct-package-desc org-ehtml (0 20131014) "Export Org-mode files as editable web pages" ((elnode (20130416 1626)) (org-plus-contrib (20131007))) tar "marmalade" nil nil nil])
  (org-email [cl-struct-package-desc org-email (3 0 1) "use org for an email database" ((shadchen (1 2)) (dash (2 9 0)) (noflet (0 0 12))) single "marmalade" nil nil nil])
  (org-gnome [cl-struct-package-desc org-gnome (0 1) "Orgmode integration with the GNOME desktop" ((notify (2010 8 20)) (telepathy (0 1))) single "marmalade" nil nil nil])
  (org-journal [cl-struct-package-desc org-journal (1 9 6) "a simple org-mode based journaling mode" nil single "marmalade" nil nil nil])
  (org-magit [cl-struct-package-desc org-magit (0 2 2) "basic support for magit links" ((magit (1 2 0)) (org (6 1))) single "marmalade" nil nil nil])
  (org-mime [cl-struct-package-desc org-mime (20120112) "org html export for text/html MIME emails" nil single "marmalade" nil nil nil])
  (org-outlook [cl-struct-package-desc org-outlook (0 3) "Outlook org" nil single "marmalade" nil nil nil])
  (org-presie [cl-struct-package-desc org-presie (0 0 5) "simple presentation with an org file" ((framesize (0 0 1)) (eimp (1 4 0)) (org (7 8 9))) single "marmalade" nil nil nil])
  (org-protocol-jekyll [cl-struct-package-desc org-protocol-jekyll (0 1) "Jekyll's handler for org-protocol" nil single "marmalade" nil nil nil])
  (org-publish-agenda [cl-struct-package-desc org-publish-agenda (1 7) "Publish org agenda with links to other files" nil single "marmalade" nil nil nil])
  (org-readme [cl-struct-package-desc org-readme (20130322 926) "Integrates Readme.org and Commentary/Change-logs." ((http-post-simple (1 0)) (yaoddmuse (0 1 1)) (header2 (21 0)) (lib-requires (21 0))) single "marmalade" nil nil nil])
  (org-table-comment [cl-struct-package-desc org-table-comment (0 2) "Org table comment modes." nil single "marmalade" nil nil nil])
  (org-trello [cl-struct-package-desc org-trello (0 7 3) "Minor mode to synchronize org-mode buffer and trello board" ((request-deferred (0 2 0)) (deferred (0 3 2)) (s (1 9 0)) (dash-functional (2 11 0)) (dash (2 11 0)) (emacs (24))) tar "marmalade" nil nil nil])
  (org2blog [cl-struct-package-desc org2blog (0 5) "Blog from Org mode to wordpress" ((org (7 7)) (xml-rpc (1 6 8))) tar "marmalade" nil nil nil])
  (org2jekyll [cl-struct-package-desc org2jekyll (0 1 7) "Minor mode to publish org-mode post to jekyll without specific yaml" ((dash (2 11 0)) (dash-functional (2 11 0)) (s (1 9 0)) (deferred (0 3 1))) single "marmalade" nil nil nil])
  (org2nikola [cl-struct-package-desc org2nikola (0 0 8) "export html and meta data used by static blog like nikola from org file" nil tar "marmalade" nil nil nil])
  (osx-browse [cl-struct-package-desc osx-browse (0 8 8) "Web browsing helpers for OS X" ((string-utils (0 3 2)) (browse-url-dwim (0 6 6))) single "marmalade" nil nil nil])
  (osx-location [cl-struct-package-desc osx-location (0 2) "Watch and respond to changes in geographical location on OS X" nil tar "marmalade" nil nil nil])
  (osx-pseudo-daemon [cl-struct-package-desc osx-pseudo-daemon (1 0) "Daemon mode that plays nice with OSX." nil single "marmalade" nil nil nil])
  (osx-trash [cl-struct-package-desc osx-trash (0 1 1) "System trash for OS X" ((emacs (24 1))) tar "marmalade" nil nil nil])
  (otp [cl-struct-package-desc otp (1 0) "a one-time password creator" nil single "marmalade" nil nil nil])
  (otter-mode [cl-struct-package-desc otter-mode (1 2) "Major mode for source files of the Otter automated theorem prover" nil single "marmalade" nil nil nil])
  (outlined-elisp-mode [cl-struct-package-desc outlined-elisp-mode (1 0 5) "outline-minor-mode settings for emacs lisp" nil single "marmalade" nil nil nil])
  (overseer [cl-struct-package-desc overseer (0 1 0) "Ert-runner Integration Into Emacs." ((emacs (24)) (dash (2 10 0)) (pkg-info (0 4))) single "marmalade" nil nil nil])
  (oz [cl-struct-package-desc oz (16513) "Major mode for editing Oz programs" nil tar "marmalade" nil nil nil])
  (p4 [cl-struct-package-desc p4 (11 0) "Perforce-Emacs Integration Library" nil single "marmalade" nil nil nil])
  (pabbrev [cl-struct-package-desc pabbrev (4 2) "Predictive abbreviation expansion" nil single "marmalade" nil nil nil])
  (package [cl-struct-package-desc package (1 0 1) "Simple package system for Emacs" ((tabulated-list (1 0))) single "marmalade" nil nil nil])
  (package-store [cl-struct-package-desc package-store (0 3) "a package cache" nil single "marmalade" nil nil nil])
  (page-break-lines [cl-struct-package-desc page-break-lines (0 9) "Display ugly ^L page breaks as tidy horizontal lines" nil single "marmalade" nil nil nil])
  (pager [cl-struct-package-desc pager (2 0) "windows-scroll commands" nil single "marmalade" nil nil nil])
  (pager-default-keybindings [cl-struct-package-desc pager-default-keybindings (1 1) "Add the default keybindings suggested for pager.el" nil single "marmalade" nil nil nil])
  (palimpsest [cl-struct-package-desc palimpsest (0 8) "Various deletion strategies when editing" nil single "marmalade" nil nil nil])
  (palimpsest-mode [cl-struct-package-desc palimpsest-mode (0 8) "Various deletion strategies when editing" nil single "marmalade" nil nil nil])
  (paredit [cl-struct-package-desc paredit (22) "minor mode for editing parentheses" nil single "marmalade" nil nil nil])
  (paredit-everywhere [cl-struct-package-desc paredit-everywhere (0 3) "Enable some paredit features in non-lisp buffers" ((paredit (22))) single "marmalade" nil nil nil])
  (paredit-menu [cl-struct-package-desc paredit-menu (1 0) "Adds a menu to paredit.el as memory aid" nil single "marmalade" nil nil nil])
  (parenface [cl-struct-package-desc parenface (1 1) "Provide a face for parens in lisp modes." nil single "marmalade" nil nil nil])
  (parenface-plus [cl-struct-package-desc parenface-plus (1 1) "Provide a face for parens in lispy modes." nil tar "marmalade" nil nil nil])
  (parenface-reversion [cl-struct-package-desc parenface-reversion (1 2) "Provide a face for parens in lisp modes." nil single "marmalade" nil nil nil])
  (parenface2 [cl-struct-package-desc parenface2 (1 1) "Provide a face for parens in lisp modes." nil single "marmalade" nil nil nil])
  (parscope [cl-struct-package-desc parscope (0 1 0) "Minor mode for showing the current scope in Lisp-like languages." nil single "marmalade" nil nil nil])
  (paste-kde [cl-struct-package-desc paste-kde (0 6) "paste text to KDE's pastebin service" ((web (0 3 6))) single "marmalade" nil nil nil])
  (pastebin [cl-struct-package-desc pastebin (0 1) "A simple interface to the www.pastebin.com webservice" nil single "marmalade" nil nil nil])
  (pastels-on-dark-theme [cl-struct-package-desc pastels-on-dark-theme (0 3) "Pastels on Dark theme for Emacs 24" nil single "marmalade" nil nil nil])
  (pbcopy [cl-struct-package-desc pbcopy (0 1 0) "OS X clipboard integration for Emacs" nil single "marmalade" nil nil nil])
  (pc-mode [cl-struct-package-desc pc-mode (0 1) "major mode for editing PC code," nil single "marmalade" nil nil nil])
  (pcache [cl-struct-package-desc pcache (0 3 1) "persistent caching for Emacs" ((eieio (1 3))) single "marmalade" nil nil nil])
  (pcmpl-args [cl-struct-package-desc pcmpl-args (0 1 1) "Enhanced shell command completion" nil single "marmalade" nil nil nil])
  (pcre2el [cl-struct-package-desc pcre2el (1 5) "parse, convert, and font-lock PCRE, Emacs and rx regexps" ((cl-lib (0 3))) single "marmalade" nil nil nil])
  (pcsv [cl-struct-package-desc pcsv (1 3 3) "Parser of csv" nil single "marmalade" nil nil nil])
  (pde [cl-struct-package-desc pde (0 2 16) "Perl Development Environment" nil tar "marmalade" nil nil nil])
  (peep-open [cl-struct-package-desc peep-open (0 0 2) "PeepOpen plugin for emacs." nil single "marmalade" nil nil nil])
  (peepopen [cl-struct-package-desc peepopen (0 1 0) "Graphical file chooser for Emacs on Mac OS X." nil single "marmalade" nil nil nil])
  (pep8 [cl-struct-package-desc pep8 (1 2) "run the python pep8 checker putting hits in a grep buffer" nil single "marmalade" nil nil nil])
  (perl-myvar [cl-struct-package-desc perl-myvar (1 23) "Declare lexicaly scoped vars as my()." nil single "marmalade" nil nil nil])
  (perlbrew [cl-struct-package-desc perlbrew (0 1) "basic support for perlbrew environments" ((cl (0))) single "marmalade" nil nil nil])
  (perlcritic [cl-struct-package-desc perlcritic (1 10) "minor mode for Perl::Critic integration" nil single "marmalade" nil nil nil])
  (persistent-soft [cl-struct-package-desc persistent-soft (0 8 8) "Persistent storage, returning nil on failure" ((pcache (0 2 3)) (list-utils (0 4 2))) single "marmalade" nil nil nil])
  (perspective [cl-struct-package-desc perspective (1 12) "switch between named \"perspectives\" of the editor" ((cl-lib (0 5))) single "marmalade" nil nil nil])
  (pg [cl-struct-package-desc pg (0 12) "Emacs Lisp interface to the PostgreSQL RDBMS" nil single "marmalade" nil nil nil])
  (phantomjs [cl-struct-package-desc phantomjs (0 0 11) "Control phantomjs from Emacs			" nil tar "marmalade" nil nil nil])
  (phi-search [cl-struct-package-desc phi-search (1 1 0) "inferior isearch compatible with \"multiple-cursors\"" nil single "marmalade" nil nil nil])
  (php-completion [cl-struct-package-desc php-completion (0 3) "complete everything PHP with Anything.el" nil single "marmalade" nil nil nil])
  (php-extras [cl-struct-package-desc php-extras (2 2 0 20140405) "Extra features for `php-mode'" ((php-mode (1 5 0))) tar "marmalade" nil nil nil])
  (php-mode [cl-struct-package-desc php-mode (1 5 0) "major mode for editing PHP code" nil single "marmalade" nil nil nil])
  (pickup [cl-struct-package-desc pickup (0 0 3) "pickup file." nil single "marmalade" nil nil nil])
  (picpocket [cl-struct-package-desc picpocket (16) "Image viewer" nil single "marmalade" nil nil nil])
  (pinboard [cl-struct-package-desc pinboard (0 0 1) "get stuff from pinboard" nil single "marmalade" nil nil nil])
  (pinboard-api [cl-struct-package-desc pinboard-api (0 1) "Rudimentary http://pinboard.in integration" nil single "marmalade" nil nil nil])
  (pivotal-tracker [cl-struct-package-desc pivotal-tracker (1 2 0) "Interact with Pivotal Tracker through its API" nil single "marmalade" nil nil nil])
  (pkg-info [cl-struct-package-desc pkg-info (0 6) "Information about packages" ((epl (0 8))) single "marmalade" nil nil nil])
  (pkg-info-dummy-package [cl-struct-package-desc pkg-info-dummy-package (3 4 2 1) "pkg-info: Dummy package for unit tests" nil single "marmalade" nil nil nil])
  (po-elscreen [cl-struct-package-desc po-elscreen (1 4 6) "Screen for Emacsen(this is not original. original is http://www.morishima.net/~naoto/elscreen-en/?lang=en)" nil single "marmalade" nil nil nil])
  (pod-mode [cl-struct-package-desc pod-mode (20121117 2120) "Major mode for editing .pod-files." nil tar "marmalade" nil nil nil])
  (pointback [cl-struct-package-desc pointback (0 2) "Restore window points when returning to buffers" nil single "marmalade" nil nil nil])
  (pony-mode [cl-struct-package-desc pony-mode (0 2) "Minor mode for working with Django Projects" nil tar "marmalade" nil nil nil])
  (popup [cl-struct-package-desc popup (0 5) "Visual Popup User Interface" nil single "marmalade" nil nil nil])
  (popwin [cl-struct-package-desc popwin (0 4) "Popup Window Manager." nil single "marmalade" nil nil nil])
  (pos-tip [cl-struct-package-desc pos-tip (0 4 5) "Show tooltip at point" nil single "marmalade" nil nil nil])
  (pov-mode [cl-struct-package-desc pov-mode (3 3) "Major mode for editing POV-Ray scene files." nil tar "marmalade" nil nil nil])
  (powershell [cl-struct-package-desc powershell (0 2 1) "run powershell as an inferior shell in emacs" nil single "marmalade" nil nil nil])
  (pp-c-l [cl-struct-package-desc pp-c-l (1 0) "Display Control-l characters in a pretty way" nil single "marmalade" nil nil nil])
  (pretty-lambdada [cl-struct-package-desc pretty-lambdada (22 0) "Show the word `lambda' as the Greek letter." nil single "marmalade" nil nil nil])
  (pretty-mode-plus [cl-struct-package-desc pretty-mode-plus (1 2) "Redisplay parts of the buffer as pretty symbols." nil tar "marmalade" nil nil nil])
  (proc-net [cl-struct-package-desc proc-net (0 0 1) "network process tools" nil single "marmalade" nil nil nil])
  (processing-mode [cl-struct-package-desc processing-mode (1 2 1) "Major mode for Processing 2.0" nil single "marmalade" nil nil nil])
  (processing-snippets [cl-struct-package-desc processing-snippets (1 0 0) "Snippets for the Processing major mode" ((yasnippet (0 8 0))) tar "marmalade" nil nil nil])
  (project [cl-struct-package-desc project (1 0) "Keep track of the current project" nil single "marmalade" nil nil nil])
  (project-explorer [cl-struct-package-desc project-explorer (0 13) "A project explorer sidebar" ((cl-lib (0 3)) (es-lib (0 3)) (es-windows (0 1)) (emacs (24))) single "marmalade" nil nil nil])
  (projectile [cl-struct-package-desc projectile (0 10 0) "Manage and navigate projects in Emacs easily" ((s (1 6 0)) (dash (1 5 0)) (pkg-info (0 4))) single "marmalade" nil nil nil])
  (prolog [cl-struct-package-desc prolog (1 22) "major mode for editing and running Prolog (and Mercury) code" nil single "marmalade" nil nil nil])
  (protobuf-mode [cl-struct-package-desc protobuf-mode (0 3) "major mode for editing protocol buffers." nil single "marmalade" nil nil nil])
  (proxy-mode [cl-struct-package-desc proxy-mode (0 9) "Provides proxy minor mode." nil single "marmalade" nil nil nil])
  (ps-ccrypt [cl-struct-package-desc ps-ccrypt (1 10) "reading/writing/loading encrypted files" nil tar "marmalade" nil nil nil])
  (psci [cl-struct-package-desc psci (0 0 6) "Major mode for purescript repl psci" ((purescript-mode (13 10)) (dash (2 9 0)) (s (1 9 0)) (f (0 17 1)) (deferred (0 3 2))) single "marmalade" nil nil nil])
  (psgml [cl-struct-package-desc psgml (1 4 1) "Lennart Staflin's Psgml package, with Elisp syntax and sgml-validate fixed for Emacsen >=24." nil tar "marmalade" nil nil nil])
  (psvn [cl-struct-package-desc psvn (1 1 1) "Subversion interface for emacs" nil single "marmalade" nil nil nil])
  (puppet-mode [cl-struct-package-desc puppet-mode (0 3) "Major mode for Puppet manifests" ((emacs (24 1)) (cl-lib (0 5)) (pkg-info (0 4))) single "marmalade" nil nil nil])
  (purple-haze-theme [cl-struct-package-desc purple-haze-theme (20130930 36) "an overtly purple color theme for Emacs24." ((emacs (24 0))) single "marmalade" nil nil nil])
  (py-import-check [cl-struct-package-desc py-import-check (0 2) "Finds the unused python imports using importchecker" nil single "marmalade" nil nil nil])
  (pycomplete [cl-struct-package-desc pycomplete (1 0) "Complete symbols at point using Pymacs." nil single "marmalade" nil nil nil])
  (pyde [cl-struct-package-desc pyde (0 6) "Python Development Environment" ((pymacs (0 25)) (auto-complete (1 4)) (yasnippet (0 8)) (fuzzy (0 1)) (pyvirtualenv (1 0))) single "marmalade" nil nil nil])
  (pyflakes [cl-struct-package-desc pyflakes (1 0) "run the python pyflakes checker putting hits in a grep buffer" nil single "marmalade" nil nil nil])
  (pylint [cl-struct-package-desc pylint (1 0) "run the python pylint checker putting hits in a grep buffer" nil single "marmalade" nil nil nil])
  (pymacs [cl-struct-package-desc pymacs (0 25) "Interface between Emacs Lisp and Python" nil single "marmalade" nil nil nil])
  (pysmell [cl-struct-package-desc pysmell (0 7 2) "Complete python code using heuristic static analysis" nil single "marmalade" nil nil nil])
  (pytest [cl-struct-package-desc pytest (0 2 1) "Easy Python test running in Emacs" nil single "marmalade" nil nil nil])
  (python [cl-struct-package-desc python (20120402) "Python's flying circus support for Emacs" nil single "marmalade" nil nil nil])
  (python-django [cl-struct-package-desc python-django (0 1) "A Jazzy package for managing Django projects" nil single "marmalade" nil nil nil])
  (python-mode [cl-struct-package-desc python-mode (6 1 3) "An Emacs mode for editing Python code" nil tar "marmalade" nil nil nil])
  (python-pep8 [cl-struct-package-desc python-pep8 (1 1) "minor mode for running `pep8'" nil single "marmalade" nil nil nil])
  (python-pylint [cl-struct-package-desc python-pylint (1 1) "minor mode for running `pylint'" nil single "marmalade" nil nil nil])
  (pyvenv [cl-struct-package-desc pyvenv (1 7) "Python virtual environment interface" nil single "marmalade" nil nil nil])
  (pyvirtualenv [cl-struct-package-desc pyvirtualenv (1 1) "Python Pyvirtualenv support" nil single "marmalade" nil nil nil])
  (qsimpleq-theme [cl-struct-package-desc qsimpleq-theme (0 1 3) "Based on solarized color theme for Emacs." nil single "marmalade" nil nil nil])
  (quack [cl-struct-package-desc quack (0 42) "enhanced support for editing and running Scheme code" nil single "marmalade" nil nil nil])
  (quickrun [cl-struct-package-desc quickrun (1 8 4) "Run commands quickly" nil single "marmalade" nil nil nil])
  (r-autoyas [cl-struct-package-desc r-autoyas (0 28) "Provides automatically created yasnippets for R function argument lists." nil single "marmalade" nil nil nil])
  (r5rs [cl-struct-package-desc r5rs (1 0) "Browse documentation from the R5RS Revised5 Report" nil single "marmalade" nil nil nil])
  (rainbow-delimiters [cl-struct-package-desc rainbow-delimiters (1 3 21) "Highlight nested parens, brackets, braces a different color at each depth." nil single "marmalade" nil nil nil])
  (rbenv [cl-struct-package-desc rbenv (0 0 3) "Emacs integration for rbenv" nil single "marmalade" nil nil nil])
  (rcirc-color [cl-struct-package-desc rcirc-color (0 2) "color nicks" nil single "marmalade" nil nil nil])
  (rcirc-notify [cl-struct-package-desc rcirc-notify (1 0 0) "libnotify popups" nil single "marmalade" nil nil nil])
  (rcirc-robots [cl-struct-package-desc rcirc-robots (0 0 7) "robots based on rcirc irc" ((kv (0 0 8)) (anaphora (0 0 5))) single "marmalade" nil nil nil])
  (rcirc-ssh [cl-struct-package-desc rcirc-ssh (0 0 7) "do irc over ssh sessions" ((kv (0 0 3))) single "marmalade" nil nil nil])
  (rcirc-ucomplete [cl-struct-package-desc rcirc-ucomplete (1 0 1) "Unambiguous non-cycling completion for rcirc" nil single "marmalade" nil nil nil])
  (real-auto-save [cl-struct-package-desc real-auto-save (0 3) "enable real auto save" nil single "marmalade" nil nil nil])
  (rect-mark [cl-struct-package-desc rect-mark (1 4) "Mark a rectangle of text with highlighting." nil single "marmalade" nil nil nil])
  (recursive-narrow [cl-struct-package-desc recursive-narrow (20140811 1546) "narrow-to-region that operates recursively" nil single "marmalade" nil nil nil])
  (refheap [cl-struct-package-desc refheap (0 0 6) "A library for pasting to https://refheap.com" ((json (1 2))) single "marmalade" nil nil nil])
  (regex-tool [cl-struct-package-desc regex-tool (1 2) "A regular expression evaluation tool for programmers" nil single "marmalade" nil nil nil])
  (region-bindings-mode [cl-struct-package-desc region-bindings-mode (0 1) "Enable custom bindings when mark is active." nil single "marmalade" nil nil nil])
  (region-list-edit [cl-struct-package-desc region-list-edit (20100530 808) "Add/delete a region into/from a region list, such as ((4 . 7) (11 . 15) (17 . 17) (20 . 25))." nil single "marmalade" nil nil nil])
  (relax [cl-struct-package-desc relax (0 2) "For browsing and interacting with CouchDB" ((json (1 2))) single "marmalade" nil nil nil])
  (remember-theme [cl-struct-package-desc remember-theme (20140122 1500) "Remembers the last theme in use and re-loads for the next session." nil single "marmalade" nil nil nil])
  (repository-root [cl-struct-package-desc repository-root (1 0 4) "deduce the repository root directory for a given file" nil single "marmalade" nil nil nil])
  (request [cl-struct-package-desc request (0 2 0) "Compatible layer for URL request in Emacs" nil single "marmalade" nil nil nil])
  (request-deferred [cl-struct-package-desc request-deferred (0 2 0) "Wrap request.el by deferred" ((deferred (0 3 1)) (request (0 2 0))) single "marmalade" nil nil nil])
  (requirejs-mode [cl-struct-package-desc requirejs-mode (1 1) "Improved AMD module management" nil single "marmalade" nil nil nil])
  (revive [cl-struct-package-desc revive (2 19) "Resume Emacs." nil single "marmalade" nil nil nil])
  (rinari [cl-struct-package-desc rinari (2 10) "Rinari Is Not A Rails IDE" ((ruby-mode (1 0)) (inf-ruby (2 2 1)) (ruby-compilation (0 8)) (jump (2 0))) single "marmalade" nil nil nil])
  (rings [cl-struct-package-desc rings (1 0 1) "Buffer rings. Like tabs, but better." nil single "marmalade" nil nil nil])
  (robe [cl-struct-package-desc robe (0 7 7) "Code navigation, documentation lookup and completion for Ruby" ((inf-ruby (2 3 0))) tar "marmalade" nil nil nil])
  (roy-mode [cl-struct-package-desc roy-mode (0 1 0) "Roy major mode" nil single "marmalade" nil nil nil])
  (rspec-mode [cl-struct-package-desc rspec-mode (1 10) "Enhance ruby-mode for RSpec" nil tar "marmalade" nil nil nil])
  (rubocop [cl-struct-package-desc rubocop (0 3) "An Emacs interface for RuboCop" ((dash (1 0 0))) single "marmalade" nil nil nil])
  (ruby-block [cl-struct-package-desc ruby-block (0 0 11) "highlight matching block" nil single "marmalade" nil nil nil])
  (ruby-compilation [cl-struct-package-desc ruby-compilation (2 10) "run a ruby process in a compilation buffer" ((inf-ruby (2 2 1))) single "marmalade" nil nil nil])
  (ruby-end [cl-struct-package-desc ruby-end (0 3 1) "Automatic insertion of end blocks for Ruby" nil single "marmalade" nil nil nil])
  (ruby-hash-syntax [cl-struct-package-desc ruby-hash-syntax (0 3) "Toggle ruby hash syntax between classic and 1.9 styles" nil single "marmalade" nil nil nil])
  (ruby-mode [cl-struct-package-desc ruby-mode (1 1) "ruby-mode package" nil tar "marmalade" nil nil nil])
  (ruby-test-mode [cl-struct-package-desc ruby-test-mode (1 7) "Minor mode for Behaviour and Test Driven" ((ruby-mode (1 0))) single "marmalade" nil nil nil])
  (ruby-tools [cl-struct-package-desc ruby-tools (0 1 0) "Collection of handy functions for ruby-mode" nil single "marmalade" nil nil nil])
  (rubyinterpol [cl-struct-package-desc rubyinterpol (0 1) "Ruby-like String Interpolation for format" nil single "marmalade" nil nil nil])
  (rudel [cl-struct-package-desc rudel (0 3) "A collaborative editing framework for Emacs" ((eieio (1 4))) tar "marmalade" nil nil nil])
  (rust-mode [cl-struct-package-desc rust-mode (0 1 0) "A major emacs mode for editing Rust source code" ((cm-mode (0 1 0))) single "marmalade" nil nil nil])
  (rvm [cl-struct-package-desc rvm (1 4 0) "Emacs integration for rvm" nil single "marmalade" nil nil nil])
  (rw-hunspell [cl-struct-package-desc rw-hunspell (0 2) "special functions for Hunspell in ispell.el" nil single "marmalade" nil nil nil])
  (rw-ispell [cl-struct-package-desc rw-ispell (0 1) "additional functions for ispell.el" nil single "marmalade" nil nil nil])
  (rw-language-and-country-codes [cl-struct-package-desc rw-language-and-country-codes (0 1) "Language & Country Codes" nil single "marmalade" nil nil nil])
  (s [cl-struct-package-desc s (1 9 0) "The long lost Emacs string manipulation library." nil single "marmalade" nil nil nil])
  (s-buffer [cl-struct-package-desc s-buffer (0 0 4) "s operations for buffers" ((s (1 6 0)) (noflet (0 0 3))) single "marmalade" nil nil nil])
  (sackspace [cl-struct-package-desc sackspace (0 8 2) "A better backspace" nil single "marmalade" nil nil nil])
  (sass-mode [cl-struct-package-desc sass-mode (3 0 16) "Major mode for editing Sass files" ((haml-mode (3 0 15))) single "marmalade" nil nil nil])
  (sauron [cl-struct-package-desc sauron (0 8) "Track (erc/org/dbus/...) events and react to them." nil tar "marmalade" nil nil nil])
  (save-packages [cl-struct-package-desc save-packages (0 20121012) "save and restore installed packages" nil single "marmalade" nil nil nil])
  (save-visited-files [cl-struct-package-desc save-visited-files (1 2) "save opened files across sessions" nil single "marmalade" nil nil nil])
  (sawfish [cl-struct-package-desc sawfish (1 32) "Sawfish mode." nil single "marmalade" nil nil nil])
  (scala-mode [cl-struct-package-desc scala-mode (0 0 2) "Scala major mode" nil tar "marmalade" nil nil nil])
  (scheme-here [cl-struct-package-desc scheme-here (12 8 2008) "cmuscheme extension for multiple inferior processes" nil single "marmalade" nil nil nil])
  (scpaste [cl-struct-package-desc scpaste (0 6 3) "Paste to the web via scp." ((htmlize (1 39))) single "marmalade" nil nil nil])
  (scratch [cl-struct-package-desc scratch (20110708) "Mode-specific scratch buffers" nil single "marmalade" nil nil nil])
  (scratch-palette [cl-struct-package-desc scratch-palette (1 0 1) "add scratch notes for each file" nil single "marmalade" nil nil nil])
  (scratch-persist [cl-struct-package-desc scratch-persist (1 1) "persist the scratch buffer across sessions" nil single "marmalade" nil nil nil])
  (scratch-pop [cl-struct-package-desc scratch-pop (1 0 0) "popup scratch" nil single "marmalade" nil nil nil])
  (screen-lines [cl-struct-package-desc screen-lines (0 55) "a minor mode for screen-line-based point motion" nil single "marmalade" nil nil nil])
  (scrolloff [cl-struct-package-desc scrolloff (1 0) "This mode ofers vim-like scrolloff function" nil single "marmalade" nil nil nil])
  (scss-mode [cl-struct-package-desc scss-mode (0 5 0) "Major mode for editing SCSS files" nil single "marmalade" nil nil nil])
  (sea-before-storm-theme [cl-struct-package-desc sea-before-storm-theme (0 4 20141114) "Sea Before Storm color theme for Emacs 24" nil single "marmalade" nil nil nil])
  (seclusion-mode [cl-struct-package-desc seclusion-mode (1 1 1) "Edit in seclusion. A Dark Room mode." nil single "marmalade" nil nil nil])
  (sedated [cl-struct-package-desc sedated (1 0) "A few extremely simple sed functions for familiar text manipulation" nil single "marmalade" nil nil nil])
  (seethru [cl-struct-package-desc seethru (0 3) "Easily change Emacs' transparency" ((shadchen (1 4))) single "marmalade" nil nil nil])
  (sensitive [cl-struct-package-desc sensitive (1 0 1) "A dead simple way to load sensitive information" ((emacs (24)) (sequences (0 1 0))) single "marmalade" nil nil nil])
  (sentence-highlight [cl-struct-package-desc sentence-highlight (0 1) "highlight the current sentence" nil single "marmalade" nil nil nil])
  (sequence [cl-struct-package-desc sequence (0 0 1) "makes sequences of numbers" nil single "marmalade" nil nil nil])
  (sequences [cl-struct-package-desc sequences (0 1 0) "Ports of some Clojure sequence functions." ((emacs (24))) single "marmalade" nil nil nil])
  (session [cl-struct-package-desc session (2 2 1) "use variables, registers and buffer places across sessions" nil single "marmalade" nil nil nil])
  (session-manager [cl-struct-package-desc session-manager (0 5) "Support for the Gnome Session Manager" nil single "marmalade" nil nil nil])
  (setup-cygwin [cl-struct-package-desc setup-cygwin (21 0) "Set up Emacs for using Cygwin" nil single "marmalade" nil nil nil])
  (shackle [cl-struct-package-desc shackle (0 7 0) "Enforce rules for popups" ((cl-lib (0 5))) single "marmalade" nil nil nil])
  (shadchen [cl-struct-package-desc shadchen (1 4) "pattern matching for elisp" nil single "marmalade" nil nil nil])
  (shell-here [cl-struct-package-desc shell-here (1 3) "Open a shell relative to the working directory" nil single "marmalade" nil nil nil])
  (shell-pop [cl-struct-package-desc shell-pop (0 3) "helps you to use shell easily on Emacs. Only one key action to work." nil single "marmalade" nil nil nil])
  (shell-switcher [cl-struct-package-desc shell-switcher (0 1 5 1) "Easily switch between shell buffers, like with alt+tab." nil tar "marmalade" nil nil nil])
  (shoes-off [cl-struct-package-desc shoes-off (0 1 8) "irc bouncer" ((kv (0 0 5)) (anaphora (0 0 4))) single "marmalade" nil nil nil])
  (shorten [cl-struct-package-desc shorten (1 6) "component-wise string shortener" nil single "marmalade" nil nil nil])
  (show-css [cl-struct-package-desc show-css (1 1) "Show the css of the html attribute the cursor is on" nil single "marmalade" nil nil nil])
  (show-marks [cl-struct-package-desc show-marks (0 4) "Navigate and visualize the mark-ring" ((fm (1 0))) single "marmalade" nil nil nil])
  (simp [cl-struct-package-desc simp (0 2 0) "Simple project definition, chiefly for project file finding and grepping." nil tar "marmalade" nil nil nil])
  (simple-httpd [cl-struct-package-desc simple-httpd (1 4 6) "pure elisp HTTP server" ((cl-lib (0 3))) single "marmalade" nil nil nil])
  (simple-mode-line [cl-struct-package-desc simple-mode-line (0 3) "Simplified Mode Line for Emacs 24" nil single "marmalade" nil nil nil])
  (simpleclip [cl-struct-package-desc simpleclip (1 0 0) "Simplified access to the system clipboard" nil single "marmalade" nil nil nil])
  (simplezen [cl-struct-package-desc simplezen (0 1 1) "A simple subset of zencoding-mode for Emacs." nil single "marmalade" nil nil nil])
  (skewer-less [cl-struct-package-desc skewer-less (0 2) "Skewer support for live LESS stylesheet updates" ((skewer-mode (1 5 3))) single "marmalade" nil nil nil])
  (skewer-mode [cl-struct-package-desc skewer-mode (1 6 2) "live browser JavaScript, CSS, and HTML interaction" ((simple-httpd (1 4 0)) (js2-mode (20090723)) (emacs (24))) tar "marmalade" nil nil nil])
  (skinny [cl-struct-package-desc skinny (0 0 6) "a blog engine with elnode" ((elnode (0 9 9 6 1)) (creole (0 8 17))) single "marmalade" nil nil nil])
  (slamhound [cl-struct-package-desc slamhound (2 0 0) "Rip Clojure namespaces apart and rebuild them." nil single "marmalade" nil nil nil])
  (slim-mode [cl-struct-package-desc slim-mode (1 1) "Major mode for editing Slim files" nil single "marmalade" nil nil nil])
  (slime [cl-struct-package-desc slime (20100404 1) "Superior Lisp Interaction Mode for Emacs" nil single "marmalade" nil nil nil])
  (slime-clj [cl-struct-package-desc slime-clj (0 1 6) "slime extensions for swank-clj" nil single "marmalade" nil nil nil])
  (slime-fuzzy [cl-struct-package-desc slime-fuzzy (20100404) "Fuzzy symbol completion for Slime" ((slime (20100404))) single "marmalade" nil nil nil])
  (slime-js [cl-struct-package-desc slime-js (0 0 1) "Slime extension for swank-js." ((slime-repl (20100404)) (slime (20100404))) single "marmalade" nil nil nil])
  (slime-repl [cl-struct-package-desc slime-repl (20100404) "Read-Eval-Print Loop written in Emacs Lisp" ((slime (20100404))) single "marmalade" nil nil nil])
  (slime-ritz [cl-struct-package-desc slime-ritz (0 6 0) "slime extensions for ritz" nil single "marmalade" nil nil nil])
  (slime-scratch [cl-struct-package-desc slime-scratch (1 0 0) "Imitate Emacs' *scratch* buffer" ((slime (20100404))) single "marmalade" nil nil nil])
  (slough [cl-struct-package-desc slough (0 1) "package for slough - this is for a secret TW thing" ((nrepl (0 1 7)) (smartparens (1 4 3))) single "marmalade" nil nil nil])
  (smart-forward [cl-struct-package-desc smart-forward (1 0 0) "Semantic navigatioin" ((expand-region (0 8 0))) single "marmalade" nil nil nil])
  (smart-operator [cl-struct-package-desc smart-operator (2 0 20110812) "Insert operators with surrounding spaces smartly" nil single "marmalade" nil nil nil])
  (smart-tab [cl-struct-package-desc smart-tab (0 3) "Intelligent tab completion and indentation." nil single "marmalade" nil nil nil])
  (smart-whitespace-comment-fixup [cl-struct-package-desc smart-whitespace-comment-fixup (1 1) "Enables advice around yanking/killing lines that auto-indents and formats properly" nil single "marmalade" nil nil nil])
  (smart-window [cl-struct-package-desc smart-window (0 6) "vim-like window controlling plugin" nil single "marmalade" nil nil nil])
  (smarter-compile [cl-struct-package-desc smarter-compile (2012 4 9) "a smarter wrapper for `compile'" nil single "marmalade" nil nil nil])
  (smartparens [cl-struct-package-desc smartparens (1 4) "Automatic insertion, wrapping and paredit-like navigation with user defined pairs." ((dash (1 1 0))) tar "marmalade" nil nil nil])
  (smartrep [cl-struct-package-desc smartrep (0 0 3) "Support sequential operation which omitted prefix keys." nil single "marmalade" nil nil nil])
  (smex [cl-struct-package-desc smex (3 0) "M-x interface with Ido-style fuzzy matching." nil single "marmalade" nil nil nil])
  (sml-modeline [cl-struct-package-desc sml-modeline (0 5) "Show position in a scrollbar like way in mode-line" nil single "marmalade" nil nil nil])
  (smooth-scroll [cl-struct-package-desc smooth-scroll (1 2) "Minor mode for smooth scrolling and in-place scrolling." nil single "marmalade" nil nil nil])
  (smooth-scrolling [cl-struct-package-desc smooth-scrolling (1 0 1) "Make emacs scroll smoothly" nil single "marmalade" nil nil nil])
  (smtpmail-multi [cl-struct-package-desc smtpmail-multi (0 6) "Use different smtp servers for sending mail" nil single "marmalade" nil nil nil])
  (snakehump [cl-struct-package-desc snakehump (0 1 1) "Convert between compound word conventions" nil tar "marmalade" nil nil nil])
  (sokoban [cl-struct-package-desc sokoban (1 23) "Play the Sokoban game in emacs" nil single "marmalade" nil nil nil])
  (solarized-theme [cl-struct-package-desc solarized-theme (1 0 0) "The Solarized color theme, ported to Emacs." nil tar "marmalade" nil nil nil])
  (soothe-theme [cl-struct-package-desc soothe-theme (0 3 16) "a dark colorful theme for Emacs24." ((emacs (24 1))) single "marmalade" nil nil nil])
  (sourcetalk [cl-struct-package-desc sourcetalk (1 2 0) "SourceTalk (http://sourcetalk.net) plugin for Emacs" ((request (0 2 0))) single "marmalade" nil nil nil])
  (sparkline [cl-struct-package-desc sparkline (1 0 2) "Make sparkline images from a list of numbers" ((cl-lib (0 3))) single "marmalade" nil nil nil])
  (sparql-mode [cl-struct-package-desc sparql-mode (0 8 4) "Edit and interactively evaluate SPARQL queries." nil tar "marmalade" nil nil nil])
  (speck [cl-struct-package-desc speck (2010 5 25) "minor mode for spell checking" nil single "marmalade" nil nil nil])
  (spotify [cl-struct-package-desc spotify (0 3) "Control the spotify application from emacs" nil single "marmalade" nil nil nil])
  (sprintly-mode [cl-struct-package-desc sprintly-mode (0 0 4) "Major mode for dealing with sprint.ly" ((furl (0 0 2))) single "marmalade" nil nil nil])
  (sql-indent [cl-struct-package-desc sql-indent (1 10) "indentation of SQL statements" nil single "marmalade" nil nil nil])
  (sr-speedbar [cl-struct-package-desc sr-speedbar (0 1 8) "Same frame speedbar" nil single "marmalade" nil nil nil])
  (ssh [cl-struct-package-desc ssh (1 2) "Support for remote logins using ssh." nil single "marmalade" nil nil nil])
  (ssh-file-modes [cl-struct-package-desc ssh-file-modes (1 20150626) "major modes for ssh authorized_keys and known_hosts files" nil single "marmalade" nil nil nil])
  (starter-kit [cl-struct-package-desc starter-kit (2 0 3) "Saner defaults and goodies." ((paredit (22)) (idle-highlight-mode (1 1 1)) (find-file-in-project (3 0)) (smex (1 1 1)) (ido-ubiquitous (0 3)) (magit (0 8 1))) tar "marmalade" nil nil nil])
  (starter-kit-bindings [cl-struct-package-desc starter-kit-bindings (2 0 2) "Saner defaults and goodies: bindings" ((starter-kit (2 0 2))) single "marmalade" nil nil nil])
  (starter-kit-eshell [cl-struct-package-desc starter-kit-eshell (2 0 3) "Saner defaults and goodies: eshell tweaks" nil single "marmalade" nil nil nil])
  (starter-kit-js [cl-struct-package-desc starter-kit-js (2 0 1) "Saner defaults and goodies for Javascript" ((starter-kit (2 0 1))) single "marmalade" nil nil nil])
  (starter-kit-lisp [cl-struct-package-desc starter-kit-lisp (2 0 3) "Saner defaults and goodies for lisp languages" ((starter-kit (2 0 2)) (elisp-slime-nav (0 1))) single "marmalade" nil nil nil])
  (starter-kit-ruby [cl-struct-package-desc starter-kit-ruby (2 0 3) "Saner defaults and goodies for Ruby" ((inf-ruby (2 2 3)) (starter-kit (2 0 1))) single "marmalade" nil nil nil])
  (steady-theme [cl-struct-package-desc steady-theme (0 1 0) "A steady theme for Emacs" nil single "marmalade" nil nil nil])
  (string-edit [cl-struct-package-desc string-edit (0 1 0) "Avoid escape nightmares by editing string in separate buffer" ((dash (1 2 0))) single "marmalade" nil nil nil])
  (string-utils [cl-struct-package-desc string-utils (0 3 2) "String-manipulation utilities" ((list-utils (0 4 2))) single "marmalade" nil nil nil])
  (stripe-buffer [cl-struct-package-desc stripe-buffer (0 2 2) "Use a different background for even and odd lines" ((cl-lib (1 0))) single "marmalade" nil nil nil])
  (stylus-mode [cl-struct-package-desc stylus-mode (0 1) "Major mode for editing stylus templates." nil single "marmalade" nil nil nil])
  (subatomic-theme [cl-struct-package-desc subatomic-theme (1 6 0) "Low contrast bluish color theme" nil single "marmalade" nil nil nil])
  (sublime [cl-struct-package-desc sublime (0 0 7) "REQUIRES EMACS 24 - Sublime Text 2 Emulation for Emacs" ((coffee-mode (0 3 0)) (find-file-in-project (3 0)) (haml-mode (3 0 14)) (ido-ubiquitous (1 0)) (less-css-mode (0 6)) (magit (1 1 1)) (markdown-mode (1 8 1)) (monokai-theme (0 0 6)) (paredit (22)) (sass-mode (3 0 14)) (smex (1 1 2)) (yaml-mode (0 0 7)) (yasnippet (0 6 1))) tar "marmalade" nil nil nil])
  (subshell-proc [cl-struct-package-desc subshell-proc (1 0 0) "Functions for working with comints" nil single "marmalade" nil nil nil])
  (sudden-death [cl-struct-package-desc sudden-death (0 1) "Totsuzen-no-Shi" nil single "marmalade" nil nil nil])
  (sudo-edit [cl-struct-package-desc sudo-edit (0 0 1) "Utilities for opening files with sudo" nil single "marmalade" nil nil nil])
  (sumatra-forward [cl-struct-package-desc sumatra-forward (2008 10 8) "Provides Sumatra Forward search" nil single "marmalade" nil nil nil])
  (suomalainen-kalenteri [cl-struct-package-desc suomalainen-kalenteri (2013 4 18) "Finnish national and Christian holidays for calendar" nil tar "marmalade" nil nil nil])
  (supergenpass [cl-struct-package-desc supergenpass (0 1) "SuperGenPass for Emacs" nil single "marmalade" nil nil nil])
  (surround [cl-struct-package-desc surround (0 1) "emulate surround.vim from Vim" nil single "marmalade" nil nil nil])
  (swank-cdt [cl-struct-package-desc swank-cdt (1 0 1) "swank-cdt helper functions" nil single "marmalade" nil nil nil])
  (swarmhacker [cl-struct-package-desc swarmhacker (0 0 1) "simple swarm chat" nil single "marmalade" nil nil nil])
  (switch-window [cl-struct-package-desc switch-window (0 9) "A *visual* way to choose a window to switch to" nil single "marmalade" nil nil nil])
  (sws-mode [cl-struct-package-desc sws-mode (0 1) "SWS mode" nil single "marmalade" nil nil nil])
  (symbols-mode [cl-struct-package-desc symbols-mode (0 3) "List symbols of object files" nil single "marmalade" nil nil nil])
  (synonyms [cl-struct-package-desc synonyms (1 0) "Look up synonyms for a word or phrase in a thesaurus." nil single "marmalade" nil nil nil])
  (synosaurus [cl-struct-package-desc synosaurus (0 1 0) "An extensible thesaurus supporting lookup and substitution." ((cl-lib (0 5))) tar "marmalade" nil nil nil])
  (syntactic-sugar [cl-struct-package-desc syntactic-sugar (0 9 4) "Effect-free forms such as if/then/else" nil single "marmalade" nil nil nil])
  (syslog-mode [cl-struct-package-desc syslog-mode (2 2) "Major-mode for viewing log files" ((hide-lines (20130623))) single "marmalade" nil nil nil])
  (systemtap-mode [cl-struct-package-desc systemtap-mode (0 2) "A mode for SystemTap" nil single "marmalade" nil nil nil])
  (tabbar-ruler [cl-struct-package-desc tabbar-ruler (0 40) "Pretty tabbar, autohide, use both tabbar/ruler" ((tabbar (2 0 1))) single "marmalade" nil nil nil])
  (tabkey2 [cl-struct-package-desc tabkey2 (1 40) "Use second tab key pressed for what you want" nil single "marmalade" nil nil nil])
  (tabulated-list [cl-struct-package-desc tabulated-list (0) "generic major mode for tabulated lists." nil single "marmalade" nil nil nil])
  (tagedit [cl-struct-package-desc tagedit (1 4 0) "Some paredit-like features for html-mode" ((s (1 3 1)) (dash (1 0 3))) single "marmalade" nil nil nil])
  (tango-2 [cl-struct-package-desc tango-2 (1 0 0) "Tango 2 color theme for GNU Emacs 24" nil single "marmalade" nil nil nil])
  (tango-2-theme [cl-struct-package-desc tango-2-theme (1 0 0) "Tango 2 color theme for GNU Emacs 24" nil single "marmalade" nil nil nil])
  (tbemail [cl-struct-package-desc tbemail (0 2) "Provide syntax highlighting for email editing via" nil single "marmalade" nil nil nil])
  (tdd [cl-struct-package-desc tdd (1 0) "recompile on save and indicate success in the mode line" nil single "marmalade" nil nil nil])
  (tdd-status-mode-line [cl-struct-package-desc tdd-status-mode-line (0 1 2) "TDD status on the mode-line" nil single "marmalade" nil nil nil])
  (telepathy [cl-struct-package-desc telepathy (0 1) "Access Telepathy from Emacs" nil single "marmalade" nil nil nil])
  (template [cl-struct-package-desc template (0 1 0) "create project templates in Emacs easily" ((request (20140316 417))) single "marmalade" nil nil nil])
  (test-case-mode [cl-struct-package-desc test-case-mode (0 1 9) "unit test front-end" nil single "marmalade" nil nil nil])
  (tex-smart-umlauts [cl-struct-package-desc tex-smart-umlauts (1 2 0) "Smart umlaut conversion for TeX." nil single "marmalade" nil nil nil])
  (text-language [cl-struct-package-desc text-language (0 20121008) "tracking, setting, guessing language of text" nil single "marmalade" nil nil nil])
  (textmate [cl-struct-package-desc textmate (5) "TextMate minor mode for Emacs" nil single "marmalade" nil nil nil])
  (textmate-to-yas [cl-struct-package-desc textmate-to-yas (0 21) "Import Textmate macros into yasnippet syntax" nil single "marmalade" nil nil nil])
  (theme-changer [cl-struct-package-desc theme-changer (2 1 0) "Sunrise/Sunset Theme Changer for Emacs" nil single "marmalade" nil nil nil])
  (theme-looper [cl-struct-package-desc theme-looper (20150723 1104) "Loop thru the available color-themes" ((cl-lib (0 5))) single "marmalade" nil nil nil])
  (thesaurus [cl-struct-package-desc thesaurus (2012 4 7) "replace a word with a synonym looked up in a web service." nil single "marmalade" nil nil nil])
  (thread-dump [cl-struct-package-desc thread-dump (1 0) "java thread dump viewer" nil single "marmalade" nil nil nil])
  (thumb-through [cl-struct-package-desc thumb-through (0 3) "Plain text reader of HTML documents" nil single "marmalade" nil nil nil])
  (tidy [cl-struct-package-desc tidy (2 12) "Interface to the HTML Tidy program" nil single "marmalade" nil nil nil])
  (timestamper [cl-struct-package-desc timestamper (0 1 0) "A minor mode for easy timelogging" nil single "marmalade" nil nil nil])
  (tintin-mode [cl-struct-package-desc tintin-mode (1 0 0) "Mayor mode for editing tintin++ scripts" nil single "marmalade" nil nil nil])
  (todotxt [cl-struct-package-desc todotxt (0 2 3) "A major mode for editing todo.txt files" nil single "marmalade" nil nil nil])
  (toggle-test [cl-struct-package-desc toggle-test (1 0 2) "Toggle between source and test files in various programming languages" nil single "marmalade" nil nil nil])
  (toml-mode [cl-struct-package-desc toml-mode (0 1 3) "Mojor mode for editing TOML files" nil single "marmalade" nil nil nil])
  (tommyh-theme [cl-struct-package-desc tommyh-theme (1 2) "A bright, bold-colored theme for emacs." nil single "marmalade" nil nil nil])
  (tox [cl-struct-package-desc tox (20130819 1127) "Launch current python test with tox." nil single "marmalade" nil nil nil])
  (toxi-theme [cl-struct-package-desc toxi-theme (0 1 0) "REQUIRES EMACS 24" nil single "marmalade" nil nil nil])
  (tracking [cl-struct-package-desc tracking (1 6) "Buffer modification tracking" ((shorten (0 3))) single "marmalade" nil nil nil])
  (transmission [cl-struct-package-desc transmission (0 4 1) "Interface to a Transmission session" ((emacs (24 4)) (let-alist (1 0 3)) (seq (1 5))) single "marmalade" nil nil nil])
  (tron-theme [cl-struct-package-desc tron-theme (12) "A theme loosely based on Tron: Legacy colors" nil single "marmalade" nil nil nil])
  (troncle [cl-struct-package-desc troncle (0 1 2) "Emacs convenience functions for tracing clojure code" ((cider (0 5 0))) single "marmalade" nil nil nil])
  (tronesque-theme [cl-struct-package-desc tronesque-theme (1 5) "Color Theme based on Tron universe." nil single "marmalade" nil nil nil])
  (truthy [cl-struct-package-desc truthy (0 2 8) "Test the content of a value" ((list-utils (0 4 2))) single "marmalade" nil nil nil])
  (try [cl-struct-package-desc try (0 0 1) "Try out Emacs packages." ((emacs (24))) single "marmalade" nil nil nil])
  (tsql [cl-struct-package-desc tsql (1 0) "customizes sql.el for T-SQL" nil single "marmalade" nil nil nil])
  (tt-mode [cl-struct-package-desc tt-mode (20121117 2045) "Emacs major mode for editing Template Toolkit files." nil tar "marmalade" nil nil nil])
  (ttl-mode [cl-struct-package-desc ttl-mode (0 1) "mode for Turtle(RDF)" nil single "marmalade" nil nil nil])
  (ttrss [cl-struct-package-desc ttrss (1 7 5) "Tiny Tiny RSS elisp bindings" ((emacs (23 1))) single "marmalade" nil nil nil])
  (tuareg [cl-struct-package-desc tuareg (2 0 8) "OCaml mode for Emacs" ((caml (3 12 0 1))) tar "marmalade" nil nil nil])
  (tumble [cl-struct-package-desc tumble (1 5) "an Tumblr mode for Emacs" nil single "marmalade" nil nil nil])
  (tumblesocks [cl-struct-package-desc tumblesocks (0 0 7) "An Emacs tumblr client." ((htmlize (1 39)) (oauth (1 0 3)) (markdown-mode (1 8 1))) tar "marmalade" nil nil nil])
  (tup-mode [cl-struct-package-desc tup-mode (1 2) "Major mode for editing files for Tup" nil single "marmalade" nil nil nil])
  (twilight-theme [cl-struct-package-desc twilight-theme (1 0 0) "Twilight theme for GNU Emacs 24 (deftheme)" nil single "marmalade" nil nil nil])
  (twittering-mode [cl-struct-package-desc twittering-mode (3 0 1) "Major mode for Twitter" nil single "marmalade" nil nil nil])
  (typescript [cl-struct-package-desc typescript (0 1 1) "Major mode for editing typescript" nil single "marmalade" nil nil nil])
  (typing [cl-struct-package-desc typing (1 1 4) "A game for fast typers, inspired by The Typing Of The Dead." nil single "marmalade" nil nil nil])
  (typing-practice [cl-struct-package-desc typing-practice (0 1) "Typing practice" nil single "marmalade" nil nil nil])
  (typo [cl-struct-package-desc typo (1 1) "Minor mode for typographic editing" nil single "marmalade" nil nil nil])
  (typopunct [cl-struct-package-desc typopunct (1 0) "Automatic typographical punctuation marks" nil single "marmalade" nil nil nil])
  (uci-mode [cl-struct-package-desc uci-mode (1 0 0) "Major mode for UCI configuration files" nil single "marmalade" nil nil nil])
  (ucs-utils [cl-struct-package-desc ucs-utils (0 7 10) "Utilities for Unicode characters" ((persistent-soft (0 8 8)) (pcache (0 2 3)) (list-utils (0 4 2))) single "marmalade" nil nil nil])
  (ujelly-theme [cl-struct-package-desc ujelly-theme (1 0 35) "Ujelly theme for GNU Emacs 24 (deftheme)" nil single "marmalade" nil nil nil])
  (unbound [cl-struct-package-desc unbound (0 1) "find convenient unbound keystrokes" nil single "marmalade" nil nil nil])
  (undo-tree [cl-struct-package-desc undo-tree (0 3 1) "Treat undo history as a tree" nil single "marmalade" nil nil nil])
  (unfill [cl-struct-package-desc unfill (0 1) "The inverse of fill-paragraph and fill-region" nil single "marmalade" nil nil nil])
  (unicode-enbox [cl-struct-package-desc unicode-enbox (0 1 4) "Surround a string with box-drawing characters" ((string-utils (0 3 2)) (ucs-utils (0 7 6)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "marmalade" nil nil nil])
  (unicode-fonts [cl-struct-package-desc unicode-fonts (0 3 8) "Configure Unicode fonts" ((font-utils (0 7 0)) (ucs-utils (0 7 6)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "marmalade" nil nil nil])
  (unicode-progress-reporter [cl-struct-package-desc unicode-progress-reporter (0 5 4) "Progress-reporter with fancy characters" ((emacs (24 1 0)) (ucs-utils (0 7 6)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "marmalade" nil nil nil])
  (unicode-whitespace [cl-struct-package-desc unicode-whitespace (0 2 4) "teach whitespace-mode about fancy characters" ((ucs-utils (0 7 6)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "marmalade" nil nil nil])
  (uuid [cl-struct-package-desc uuid (0 0 3) "UUID's for EmacsLisp" nil single "marmalade" nil nil nil])
  (uzumaki [cl-struct-package-desc uzumaki (0 1) "A simple buffer cycler" ((cl-lib (0 5))) single "marmalade" nil nil nil])
  (vala-mode [cl-struct-package-desc vala-mode (0 1) "Vala mode derived mode" nil single "marmalade" nil nil nil])
  (vc-darcs [cl-struct-package-desc vc-darcs (1 12) "a VC backend for darcs" nil single "marmalade" nil nil nil])
  (vc-tfs [cl-struct-package-desc vc-tfs (0 1 3) "Support for TFS version control system" nil single "marmalade" nil nil nil])
  (vcard [cl-struct-package-desc vcard (0 1) "vcard parsing and display routines" nil single "marmalade" nil nil nil])
  (vector-utils [cl-struct-package-desc vector-utils (0 1 2) "Vector-manipulation utility functions" nil single "marmalade" nil nil nil])
  (vertica [cl-struct-package-desc vertica (0 1 0) "Vertica SQL mode extension" ((sql (3 0))) single "marmalade" nil nil nil])
  (vimgolf [cl-struct-package-desc vimgolf (0 9 2) "VimGolf interface for the One True Editor" nil single "marmalade" nil nil nil])
  (vimpulse [cl-struct-package-desc vimpulse (0 5) "emulates Vim's most useful features" nil single "marmalade" nil nil nil])
  (viper-in-more-modes [cl-struct-package-desc viper-in-more-modes (0 1 3) "vi-like keybindings for various Emacs modes" nil single "marmalade" nil nil nil])
  (virtualenv [cl-struct-package-desc virtualenv (1 2) "Virtualenv for Python" nil single "marmalade" nil nil nil])
  (visible-color-code [cl-struct-package-desc visible-color-code (0 0 1) "color code strings in current buffer, this elisp show you one as real color." nil single "marmalade" nil nil nil])
  (vline [cl-struct-package-desc vline (1 10) "show vertical line (column highlighting) mode." nil single "marmalade" nil nil nil])
  (volatile-highlights [cl-struct-package-desc volatile-highlights (1 10) "Minor mode for visual feedback on some operations." nil single "marmalade" nil nil nil])
  (w32-browser [cl-struct-package-desc w32-browser (21 0) "Run Windows application associated with a file." nil single "marmalade" nil nil nil])
  (wacspace [cl-struct-package-desc wacspace (0 4 2) "The WACky WorkSPACE manager for emACS" ((dash (1 2 0)) (cl-lib (0 2))) tar "marmalade" nil nil nil])
  (waher-theme [cl-struct-package-desc waher-theme (20130917 7) "Emacs 24 theme based on waher for st2 by dduckster" ((emacs (24 1))) single "marmalade" nil nil nil])
  (watch-buffer [cl-struct-package-desc watch-buffer (1 0 1) "run a shell command when saving a buffer" nil single "marmalade" nil nil nil])
  (wc-mode [cl-struct-package-desc wc-mode (1 3) "Running word count with goals (minor mode)" nil single "marmalade" nil nil nil])
  (wcheck-mode [cl-struct-package-desc wcheck-mode (2014 6 21) "General interface for text checkers" nil tar "marmalade" nil nil nil])
  (weather [cl-struct-package-desc weather (2012 3 27 2) "Get weather reports via worldweatheronline.com" nil single "marmalade" nil nil nil])
  (weather-metno [cl-struct-package-desc weather-metno (20140909) "Weather data from met.no in Emacs" ((emacs (24)) (cl-lib (0 3))) tar "marmalade" nil nil nil])
  (web [cl-struct-package-desc web (0 5 2) "useful HTTP client" ((dash (2 9 0)) (s (1 5 0))) single "marmalade" nil nil nil])
  (web-mode [cl-struct-package-desc web-mode (8 0 4) "major mode for editing html templates" nil single "marmalade" nil nil nil])
  (websocket [cl-struct-package-desc websocket (1 0) "Emacs WebSocket client and server" nil single "marmalade" nil nil nil])
  (wedge-ws [cl-struct-package-desc wedge-ws (0 1 2) "Wedge whitespace between columns in text" nil tar "marmalade" nil nil nil])
  (weechat [cl-struct-package-desc weechat (0 2 2) "Chat via WeeChat's relay protocol in Emacs" ((s (1 3 1)) (cl-lib (0 2)) (emacs (24)) (tracking (1 2))) tar "marmalade" nil nil nil])
  (wget [cl-struct-package-desc wget (1 94) "Emacs-wget is an interface program of GNU wget on Emacs." nil tar "marmalade" nil nil nil])
  (wgrep [cl-struct-package-desc wgrep (2 1 3) "Writable grep buffer and apply the changes to files" nil single "marmalade" nil nil nil])
  (wgrep-ack [cl-struct-package-desc wgrep-ack (0 1 1) "Writable ack-and-a-half buffer and apply the changes to files" ((wgrep (2 1 1))) single "marmalade" nil nil nil])
  (wgrep-helm [cl-struct-package-desc wgrep-helm (0 1 0) "Writable helm-grep-mode buffer and apply the changes to files" ((wgrep (2 1 1))) single "marmalade" nil nil nil])
  (whitespace-cleanup-mode [cl-struct-package-desc whitespace-cleanup-mode (0 8) "Intelligently call whitespace-cleanup on save" nil single "marmalade" nil nil nil])
  (wiki-nav [cl-struct-package-desc wiki-nav (1 0 2) "Simple file navigation using [[WikiStrings]]" ((button-lock (1 0 2)) (nav-flash (1 0 0))) single "marmalade" nil nil nil])
  (wikidoc [cl-struct-package-desc wikidoc (0 9) "use elisp doc strings to make other documentation" ((s\.el (1 9 0))) single "marmalade" nil nil nil])
  (win-switch [cl-struct-package-desc win-switch (1 0 8) "fast, dynamic bindings for window-switching/resizing" nil single "marmalade" nil nil nil])
  (window-end-visible [cl-struct-package-desc window-end-visible (0 1 0) "Find the last visible point in a window" nil single "marmalade" nil nil nil])
  (window-margin [cl-struct-package-desc window-margin (0 1) "automatic margins for visual-line-mode wrapping" nil single "marmalade" nil nil nil])
  (window-number [cl-struct-package-desc window-number (1 0 3) "Select windows by numbers." nil single "marmalade" nil nil nil])
  (winner-mode-enable [cl-struct-package-desc winner-mode-enable (0 0 5) "Enables winner mode if its available" nil tar "marmalade" nil nil nil])
  (winpoint [cl-struct-package-desc winpoint (1 4) "Remember buffer positions per-window, not per buffer" nil single "marmalade" nil nil nil])
  (winpoint-ignore-dired [cl-struct-package-desc winpoint-ignore-dired (1 1) "Have winpoint ignore dired-mode buffers" ((winpoint (1 0))) single "marmalade" nil nil nil])
  (wisp [cl-struct-package-desc wisp (0 1 4) "Tools for wisp: the Whitespace-to-Lisp preprocessor" nil single "marmalade" nil nil nil])
  (wisp-mode [cl-struct-package-desc wisp-mode (0 2 1) "Tools for wisp: the Whitespace-to-Lisp preprocessor" nil single "marmalade" nil nil nil])
  (with-editor [cl-struct-package-desc with-editor (2 2 0) "Use the Emacsclient as $EDITOR" ((emacs (24 4)) (async (1 4)) (dash (2 11 0))) tar "marmalade" nil nil nil])
  (with-namespace [cl-struct-package-desc with-namespace (1 1) "Poor-man's namespaces for elisp" nil single "marmalade" nil nil nil])
  (wonderland [cl-struct-package-desc wonderland (0 1 1) "declarative configuration for Emacsen" ((dash (2 0 0)) (dash-functional (1 0 0)) (multi (2 0 0)) (emacs (24))) single "marmalade" nil nil nil])
  (workgroups [cl-struct-package-desc workgroups (0 2 0) "workgroups for windows (for Emacs)" nil single "marmalade" nil nil nil])
  (workspaces [cl-struct-package-desc workspaces (0 1) "Workspaces for Emacsen" nil single "marmalade" nil nil nil])
  (world-time-mode [cl-struct-package-desc world-time-mode (0 0 6) "show whole days of world-time diffs" nil single "marmalade" nil nil nil])
  (wrap-region [cl-struct-package-desc wrap-region (0 7 1) "Wrap text with punctation or tag" nil single "marmalade" nil nil nil])
  (writegood-mode [cl-struct-package-desc writegood-mode (20130406 2316) "Polish up poor writing on the fly" nil single "marmalade" nil nil nil])
  (ws-trim [cl-struct-package-desc ws-trim (1 4) "Tools and minor mode to trim whitespace on text lines" nil single "marmalade" nil nil nil])
  (wsd-mode [cl-struct-package-desc wsd-mode (0 4 0) "Emacs major-mode for www.websequencediagrams.com" nil tar "marmalade" nil nil nil])
  (wxwidgets-help [cl-struct-package-desc wxwidgets-help (0 0 3) "Look up wxWidgets API by using local html manual." nil tar "marmalade" nil nil nil])
  (xbm-life [cl-struct-package-desc xbm-life (0 1) "A XBM version of Conway's Game of Life" nil single "marmalade" nil nil nil])
  (xkcd [cl-struct-package-desc xkcd (1 0) "View xkcd from Emacs" ((json (1 3))) single "marmalade" nil nil nil])
  (xlicense [cl-struct-package-desc xlicense (1 1) "Insert pre-defined license text" nil tar "marmalade" nil nil nil])
  (xml-gen [cl-struct-package-desc xml-gen (0 4) "A DSL for generating XML." nil single "marmalade" nil nil nil])
  (xml-rpc [cl-struct-package-desc xml-rpc (1 6 8) "An elisp implementation of clientside XML-RPC" nil single "marmalade" nil nil nil])
  (xmlgen [cl-struct-package-desc xmlgen (0 4) "A DSL for generating XML." nil single "marmalade" nil nil nil])
  (yagist [cl-struct-package-desc yagist (0 8 6) "Yet Another Emacs integration for gist.github.com" ((json (1 2 0))) single "marmalade" nil nil nil])
  (yaml-mode [cl-struct-package-desc yaml-mode (0 0 9) "Major mode for editing YAML files" nil single "marmalade" nil nil nil])
  (yaoddmuse [cl-struct-package-desc yaoddmuse (0 1 1) "Yet another oddmuse for Emacs" nil single "marmalade" nil nil nil])
  (yari [cl-struct-package-desc yari (0 7) "Yet Another RI interface for Emacs" nil single "marmalade" nil nil nil])
  (yas-jit [cl-struct-package-desc yas-jit (0 8 3) "Loads Yasnippets on demand (makes start up faster)" nil single "marmalade" nil nil nil])
  (yascroll [cl-struct-package-desc yascroll (0 2 0) "Yet Another Scroll Bar Mode" nil single "marmalade" nil nil nil])
  (yasnippet [cl-struct-package-desc yasnippet (0 6 1) "Yasnippet template engine" nil tar "marmalade" nil nil nil])
  (yasnippet-bundle [cl-struct-package-desc yasnippet-bundle (0 6 1) "Yet another snippet extension (Auto compiled bundle)" nil single "marmalade" nil nil nil])
  (yesql-ghosts [cl-struct-package-desc yesql-ghosts (0 1 0) "Display ghostly yesql defqueries inline" ((s (1 9 0)) (dash (2 10 0)) (cider (0 8 0))) single "marmalade" nil nil nil])
  (yoshi-theme [cl-struct-package-desc yoshi-theme (5 12 0) "Theme named after my cat" nil single "marmalade" nil nil nil])
  (zeal-at-point [cl-struct-package-desc zeal-at-point (0 0 3) "Search the word at point with Zeal" nil single "marmalade" nil nil nil])
  (zeitgeist [cl-struct-package-desc zeitgeist (0 1) "integrates Emacs with Zeitgeist." nil single "marmalade" nil nil nil])
  (zen-and-art-theme [cl-struct-package-desc zen-and-art-theme (1 0 1) "zen and art color theme for GNU Emacs 24" nil single "marmalade" nil nil nil])
  (zen-mode [cl-struct-package-desc zen-mode (20120627) "remove/restore Emacs distractions quickly" nil tar "marmalade" nil nil nil])
  (zenburn [cl-struct-package-desc zenburn (0 1) "A low contrast colour theme for Emacs" nil single "marmalade" nil nil nil])
  (zenburn-theme [cl-struct-package-desc zenburn-theme (2 1) "A low contrast color theme for Emacs." nil single "marmalade" nil nil nil])
  (zencoding-mode [cl-struct-package-desc zencoding-mode (0 5 1) "Unfold CSS-selector-like expressions to markup" nil single "marmalade" nil nil nil])
  (zjl-hl [cl-struct-package-desc zjl-hl (20121028 1901) "Highlight variable and function call and others in c/emacs, make life easy." ((highlight (21 0)) (region-list-edit (20100530 808))) single "marmalade" nil nil nil])
  (znc [cl-struct-package-desc znc (0 0 2) "ZNC + ERC" ((cl (2 2)) (erc (5 3))) single "marmalade" nil nil nil])
  (zone-matrix [cl-struct-package-desc zone-matrix (0 0 1) "Matrix themed Zone mode" nil tar "marmalade" nil nil nil])
 )
