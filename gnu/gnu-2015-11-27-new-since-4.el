'(
  (ztree [cl-struct-package-desc ztree (1 0 2) "Text mode directory tree" nil tar "gnu" nil ((:keywords "files" "tools") (:url . "https://github.com/fourier/ztree")) nil])
  (xpm [cl-struct-package-desc xpm (1 0 3) "edit XPM images" nil tar "gnu" nil ((:keywords "multimedia" "xpm") (:url . "http://www.gnuvola.org/software/xpm/")) nil])
  (xelb [cl-struct-package-desc xelb (0 4) "X protocol Emacs Lisp Binding" ((emacs (24 4)) (cl-generic (0 2))) tar "gnu" nil ((:keywords "unix") (:url . "https://github.com/ch11ng/xelb")) nil])
  (wpuzzle [cl-struct-package-desc wpuzzle (1 1) "find as many word in a given time" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/wpuzzle.html") (:keywords)) nil])
  (wisi [cl-struct-package-desc wisi (1 1 1) "Utilities for implementing an indentation/navigation engine using a generalized LALR parser" ((cl-lib (0 4)) (emacs (24 2))) tar "gnu" nil ((:keywords "parser" "indentation" "navigation") (:url . "http://stephe-leake.org/emacs/ada-mode/emacs-ada-mode.html")) nil])
  (websocket [cl-struct-package-desc websocket (1 5) "Emacs WebSocket client and server" nil tar "gnu" nil ((:keywords "communication" "websocket" "server") (:url . "http://elpa.gnu.org/packages/websocket.html")) nil])
  (web-server [cl-struct-package-desc web-server (0 1 1) "Emacs Web Server" ((emacs (24 3))) tar "gnu" nil ((:keywords "http" "server" "network") (:url . "https://github.com/eschulte/emacs-web-server")) nil])
  (wconf [cl-struct-package-desc wconf (0 2 0) "Minimal window layout manager" ((emacs (24 4))) single "gnu" nil ((:url . "https://github.com/ilohmar/wconf") (:keywords "windows" "frames" "layout")) nil])
  (wcheck-mode [cl-struct-package-desc wcheck-mode (2014 6 21) "General interface for text checkers" nil single "gnu" nil ((:url . "https://github.com/tlikonen/wcheck-mode") (:keywords "text" "spell" "check" "languages" "ispell")) nil])
  (w3 [cl-struct-package-desc w3 (4 0 49) "Fully customizable, largely undocumented web browser for Emacs" nil tar "gnu" nil ((:keywords "faces" "help" "comm" "news" "mail" "processes" "mouse" "hypermedia") (:url . "http://elpa.gnu.org/packages/w3.html")) nil])
  (tiny [cl-struct-package-desc tiny (0 1) "Quickly generate linear ranges in Emacs" nil tar "gnu" nil ((:keywords "convenience") (:url . "https://github.com/abo-abo/tiny")) nil])
  (timerfunctions [cl-struct-package-desc timerfunctions (1 4 2) "Enhanced versions of some timer.el functions" ((cl-lib (0 5))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/timerfunctions.html") (:keywords)) nil])
  (test-simple [cl-struct-package-desc test-simple (1 1) "Simple Unit Test Framework for Emacs Lisp" ((cl-lib (0))) single "gnu" nil ((:url . "http://github.com/rocky/emacs-test-simple") (:keywords "unit-test")) nil])
  (temp-buffer-browse [cl-struct-package-desc temp-buffer-browse (1 4) "temp buffer browse mode" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/temp-buffer-browse.html") (:keywords "convenience")) nil])
  (swiper [cl-struct-package-desc swiper (0 5 1) "Isearch with an overview. Oh, man!" ((emacs (24 1))) tar "gnu" nil ((:keywords "matching") (:url . "https://github.com/abo-abo/swiper")) nil])
  (svg [cl-struct-package-desc svg (0 1) "svg image creation functions" ((emacs (25))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/svg.html") (:keywords "image")) nil])
  (stream [cl-struct-package-desc stream (2 1 0) "Implementation of streams" ((emacs (25))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/stream.html") (:keywords "stream" "laziness" "sequences")) nil])
  (spinner [cl-struct-package-desc spinner (1 4) "Add spinners and progress-bars to the mode-line for ongoing operations" nil single "gnu" nil ((:url . "https://github.com/Malabarba/spinner.el") (:keywords "processes" "mode-line")) nil])
  (sotlisp [cl-struct-package-desc sotlisp (1 4 1) "Write lisp at the speed of thought." ((emacs (24 1))) single "gnu" nil ((:url . "https://github.com/Malabarba/speed-of-thought-lisp") (:keywords "convenience" "lisp")) nil])
  (seq [cl-struct-package-desc seq (1 11) "Sequence manipulation functions" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/seq.html") (:keywords "sequences")) nil])
  (scroll-restore [cl-struct-package-desc scroll-restore (1 0) "restore original position after scrolling" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/scroll-restore.html") (:keywords "scrolling")) nil])
  (rudel [cl-struct-package-desc rudel (0 3) "A collaborative editing framework for Emacs" nil tar "gnu" nil ((:keywords "rudel" "collaboration") (:url . "http://rudel.sourceforge.net/")) nil])
  (rich-minority [cl-struct-package-desc rich-minority (1 0) "Clean-up and Beautify the list of minor-modes." ((cl-lib (0 5))) single "gnu" nil ((:url . "https://github.com/Malabarba/rich-minority") (:keywords "mode-line" "faces")) nil])
  (poker [cl-struct-package-desc poker (0 1) "Texas hold'em poker" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/poker.html") (:keywords "games")) nil])
  (pinentry [cl-struct-package-desc pinentry (0 1) "GnuPG Pinentry server implementation" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/pinentry.html") (:keywords "gnupg")) nil])
  (pabbrev [cl-struct-package-desc pabbrev (4 2 1) "Predictive abbreviation expansion" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/pabbrev.html") (:keywords)) nil])
  (other-frame-window [cl-struct-package-desc other-frame-window (1 0 2) "Minor mode to enable global prefix keys for other frame/window buffer placement" ((emacs (24 4))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/other-frame-window.html") (:keywords "frame" "window")) nil])
  (osc [cl-struct-package-desc osc (0 1) "Open Sound Control protocol library" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/osc.html") (:keywords "comm" "processes" "multimedia")) nil])
  (on-screen [cl-struct-package-desc on-screen (1 3 2) "guide your eyes while scrolling" ((cl-lib (0))) single "gnu" nil ((:url . "https://github.com/michael-heerdegen/on-screen.el") (:keywords "convenience")) nil])
  (names [cl-struct-package-desc names (20150723 0) "Namespaces for emacs-lisp. Avoid name clobbering without hiding symbols." ((emacs (24 1)) (cl-lib (0 5))) tar "gnu" nil ((:keywords "extensions" "lisp") (:url . "https://github.com/Bruce-Connor/names")) nil])
  (nameless [cl-struct-package-desc nameless (0 5 1) "Hide package namespace in your emacs-lisp code" ((emacs (24 4))) single "gnu" nil ((:url . "https://github.com/Malabarba/nameless") (:keywords "convenience" "lisp")) nil])
  (minibuffer-line [cl-struct-package-desc minibuffer-line (0 1) "Display status info in the minibuffer window" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/minibuffer-line.html") (:keywords)) nil])
  (midi-kbd [cl-struct-package-desc midi-kbd (0 2) "Create keyboard events from Midi input" ((emacs (25))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/midi-kbd.html") (:keywords "convenience" "hardware" "multimedia")) nil])
  (metar [cl-struct-package-desc metar (0 1) "Retrieve and decode METAR weather information" ((cl-lib (0 5))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/metar.html") (:keywords "comm")) nil])
  (math-symbol-lists [cl-struct-package-desc math-symbol-lists (1 0) "Lists of Unicode math symbols and latex commands" nil single "gnu" nil ((:url . "https://github.com/vspinu/math-symbol-lists") (:keywords "unicode" "symbols" "mathematics")) nil])
  (loc-changes [cl-struct-package-desc loc-changes (1 2) "keep track of positions even after buffer changes" nil single "gnu" nil ((:url . "http://github.com/rocky/emacs-loc-changes") (:keywords)) nil])
  (load-relative [cl-struct-package-desc load-relative (1 2) "relative file load (within a multi-file Emacs package)" nil single "gnu" nil ((:url . "http://github.com/rocky/emacs-load-relative") (:keywords "internal")) nil])
  (let-alist [cl-struct-package-desc let-alist (1 0 4) "Easily let-bind values of an assoc-list by their names" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/let-alist.html") (:keywords "extensions" "lisp")) nil])
  (landmark [cl-struct-package-desc landmark (1 0) "Neural-network robot that learns landmarks" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/landmark.html") (:keywords "games" "neural network" "adaptive search" "chemotaxis")) nil])
  (javaimp [cl-struct-package-desc javaimp (0 6) "Add and reorder Java import statements in Maven projects" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/javaimp.html") (:keywords "java" "maven" "programming")) nil])
  (iterators [cl-struct-package-desc iterators (0 1) "Functions for working with iterators" ((emacs (25))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/iterators.html") (:keywords "extensions" "elisp")) nil])
  (hydra [cl-struct-package-desc hydra (0 13 3) "Make bindings that stick around." ((cl-lib (0 5))) tar "gnu" nil ((:keywords "bindings") (:url . "https://github.com/abo-abo/hydra")) nil])
  (gnugo [cl-struct-package-desc gnugo (3 0 0) "play GNU Go in a buffer" ((ascii-art-to-unicode (1 5)) (xpm (1 0 1)) (cl-lib (0 5))) tar "gnu" nil ((:keywords "games" "processes") (:url . "http://www.gnuvola.org/software/gnugo/")) nil])
  (gnorb [cl-struct-package-desc gnorb (1 1 1) "Glue code between Gnus, Org, and BBDB" ((cl-lib (0 5))) tar "gnu" nil ((:keywords "mail" "org" "gnus" "bbdb" "todo" "task") (:url . "https://github.com/girzel/gnorb")) nil])
  (fsm [cl-struct-package-desc fsm (0 2) "state machine library" ((emacs (24 1)) (cl-lib (0 5))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/fsm.html") (:keywords "extensions")) nil])
  (flylisp [cl-struct-package-desc flylisp (0 2) "Color unbalanced parentheses and parentheses inconsistent with indentation" ((emacs (24 1)) (cl-lib (0 4))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/flylisp.html") (:keywords)) nil])
  (exwm [cl-struct-package-desc exwm (0 1) "Emacs X Window Manager" ((xelb (0 3))) tar "gnu" nil ((:keywords "unix") (:url . "https://github.com/ch11ng/exwm")) nil])
  (ergoemacs-mode [cl-struct-package-desc ergoemacs-mode (5 14 7 3) "Emacs mode based on common modern interface and ergonomics." ((emacs (24 1)) (undo-tree (0 6 5))) tar "gnu" nil ((:keywords "convenience") (:url . "https://github.com/ergoemacs/ergoemacs-mode")) nil])
  (electric-spacing [cl-struct-package-desc electric-spacing (5 0) "Insert operators with surrounding spaces smartly" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/electric-spacing.html") (:keywords)) nil])
  (el-search [cl-struct-package-desc el-search (0 1) "Expression based incremental search for emacs-lisp-mode" ((emacs (25))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/el-search.html") (:keywords "lisp")) nil])
  (easy-kill [cl-struct-package-desc easy-kill (0 9 3) "kill & mark things easily" ((emacs (24)) (cl-lib (0 5))) tar "gnu" nil ((:keywords "killing" "convenience") (:url . "https://github.com/leoliu/easy-kill")) nil])
  (dts-mode [cl-struct-package-desc dts-mode (0 1 0) "Major mode for Device Tree source files" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/dts-mode.html") (:keywords "languages")) nil])
  (dismal [cl-struct-package-desc dismal (1 5) "Dis Mode Ain't Lotus: Spreadsheet program Emacs" ((cl-lib (0))) tar "gnu" nil ((:url . "http://elpa.gnu.org/packages/dismal.html")) nil])
  (diff-hl [cl-struct-package-desc diff-hl (1 8 1) "Highlight uncommitted changes" ((cl-lib (0 2))) tar "gnu" nil ((:keywords "vc" "diff") (:url . "https://github.com/dgutov/diff-hl")) nil])
  (dbus-codegen [cl-struct-package-desc dbus-codegen (0 1) "Lisp code generation for D-Bus." ((cl-lib (0 5))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/dbus-codegen.html") (:keywords "comm" "dbus" "convenience")) nil])
  (dash [cl-struct-package-desc dash (2 12 0) "A modern list library for Emacs" nil tar "gnu" nil ((:keywords "lists") (:url . "http://elpa.gnu.org/packages/dash.html")) nil])
  (darkroom [cl-struct-package-desc darkroom (0 1) "Remove visual distractions and focus on writing" ((cl-lib (0 5))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/darkroom.html") (:keywords "convenience" "emulations")) nil])
  (crisp [cl-struct-package-desc crisp (1 3 4) "CRiSP/Brief Emacs emulator" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/crisp.html") (:keywords "emulations" "brief" "crisp")) nil])
  (context-coloring [cl-struct-package-desc context-coloring (7 2 0) "Highlight by scope" ((emacs (24 3)) (js2-mode (20150713))) single "gnu" nil ((:url . "https://github.com/jacksonrayhamilton/context-coloring") (:keywords "convenience" "faces" "tools")) nil])
  (company-statistics [cl-struct-package-desc company-statistics (0 2 2) "Sort candidates using completion history" ((emacs (24 3)) (company (0 8 5))) tar "gnu" nil ((:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/company-mode/company-statistics")) nil])
  (company-math [cl-struct-package-desc company-math (1 0 1) "Completion backends for unicode math symbols and latex tags" ((company (0 8 0)) (math-symbol-lists (1 0))) single "gnu" nil ((:url . "https://github.com/vspinu/company-math") (:keywords "unicode" "symbols" "completion")) nil])
  (cl-generic [cl-struct-package-desc cl-generic (0 2) "Forward cl-generic compatibility for Emacs<25" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/cl-generic.html") (:keywords)) nil])
  (chess [cl-struct-package-desc chess (2 0 4) "Play chess in GNU Emacs" ((cl-lib (0 5))) tar "gnu" nil ((:keywords "games") (:url . "http://elpa.gnu.org/packages/chess.html")) nil])
  (caps-lock [cl-struct-package-desc caps-lock (1 0) "Caps-lock as a minor mode" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/caps-lock.html") (:keywords)) nil])
  (bug-hunter [cl-struct-package-desc bug-hunter (1 0) "Hunt down errors in elisp files" ((seq (1 3)) (cl-lib (0 5))) single "gnu" nil ((:url . "http://github.com/Malabarba/elisp-bug-hunter") (:keywords "lisp")) nil])
  (beacon [cl-struct-package-desc beacon (0 5 1) "Highlight the cursor whenever the window scrolls" ((seq (1 11))) single "gnu" nil ((:url . "https://github.com/Malabarba/beacon") (:keywords "convenience")) nil])
  (avy [cl-struct-package-desc avy (0 3 0) "set-based completion" ((emacs (24 1)) (cl-lib (0 5))) tar "gnu" nil ((:keywords "point" "location") (:url . "https://github.com/abo-abo/avy")) nil])
  (auto-overlays [cl-struct-package-desc auto-overlays (0 10 9) "Automatic regexp-delimited overlays" nil tar "gnu" nil ((:keywords "extensions") (:url . "http://www.dr-qubit.org/emacs.php")) nil])
  (aumix-mode [cl-struct-package-desc aumix-mode (7) "run the aumix program in a buffer" nil single "gnu" nil ((:url . "http://user42.tuxfamily.org/aumix-mode/index.html") (:keywords "multimedia" "mixer" "aumix")) nil])
  (ascii-art-to-unicode [cl-struct-package-desc ascii-art-to-unicode (1 9) "a small artist adjunct" nil single "gnu" nil ((:url . "http://www.gnuvola.org/software/aa2u/") (:keywords "ascii" "unicode" "box-drawing")) nil])
  (ahungry-theme [cl-struct-package-desc ahungry-theme (1 0 12) "Ahungry color theme for Emacs.  Make sure to (load-theme 'ahungry)." ((emacs (24))) tar "gnu" nil ((:keywords "ahungry" "palette" "color" "theme" "emacs" "color-theme" "deftheme") (:url . "https://github.com/ahungry/color-theme-ahungry")) nil])
  (aggressive-indent [cl-struct-package-desc aggressive-indent (1 4) "Minor mode to aggressively keep your code always indented" ((emacs (24 1)) (cl-lib (0 5))) single "gnu" nil ((:url . "http://github.com/Malabarba/aggressive-indent-mode") (:keywords "indent" "lisp" "maint" "tools")) nil])
  (adjust-parens [cl-struct-package-desc adjust-parens (3 0) "Indent and dedent Lisp code, automatically adjust close parens" nil tar "gnu" nil ((:url . "http://elpa.gnu.org/packages/adjust-parens.html")) nil])
  (ada-ref-man [cl-struct-package-desc ada-ref-man (2012 0) "Ada Reference Manual 2012" nil tar "gnu" nil ((:keywords "languages" "ada") (:url . "http://stephe-leake.org/ada/arm.html")) nil])
  (ada-mode [cl-struct-package-desc ada-mode (5 1 8) "major-mode for editing Ada sources" ((wisi (1 1 1)) (cl-lib (0 4)) (emacs (24 2))) tar "gnu" nil ((:keywords "languages" "ada") (:url . "http://stephe-leake.org/emacs/ada-mode/emacs-ada-mode.html")) nil])
  (ace-window [cl-struct-package-desc ace-window (0 9 0) "Quickly switch windows." ((avy (0 2 0))) single "gnu" nil ((:url . "https://github.com/abo-abo/ace-window") (:keywords "window" "location")) nil])
 )
