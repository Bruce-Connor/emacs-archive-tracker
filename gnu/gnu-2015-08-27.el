'(
  (ztree [cl-struct-package-desc ztree (1 0 2) "Text mode directory tree" nil tar "gnu" nil ((:keywords "files" "tools") (:url . "https://github.com/fourier/ztree")) nil])
  (yasnippet [cl-struct-package-desc yasnippet (0 8 0) "Yet another snippet extension for Emacs." nil tar "gnu" nil ((:keywords "convenience" "emulation") (:url . "http://github.com/capitaomorte/yasnippet")) nil])
  (xpm [cl-struct-package-desc xpm (1 0 3) "edit XPM images" nil tar "gnu" nil ((:keywords "multimedia" "xpm") (:url . "http://www.gnuvola.org/software/xpm/")) nil])
  (xclip [cl-struct-package-desc xclip (1 3) "use xclip to copy&paste" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/xclip.html") (:keywords "convenience" "tools")) nil])
  (wpuzzle [cl-struct-package-desc wpuzzle (1 1) "find as many word in a given time" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/wpuzzle.html") (:keywords)) nil])
  (wisi [cl-struct-package-desc wisi (1 1 1) "Utilities for implementing an indentation/navigation engine using a generalized LALR parser" ((cl-lib (0 4)) (emacs (24 2))) tar "gnu" nil ((:keywords "parser" "indentation" "navigation") (:url . "http://stephe-leake.org/emacs/ada-mode/emacs-ada-mode.html")) nil])
  (windresize [cl-struct-package-desc windresize (0 1) "Resize windows interactively" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/windresize.html") (:keywords "window")) nil])
  (websocket [cl-struct-package-desc websocket (1 5) "Emacs WebSocket client and server" nil tar "gnu" nil ((:keywords "communication" "websocket" "server") (:url . "http://elpa.gnu.org/packages/websocket.html")) nil])
  (web-server [cl-struct-package-desc web-server (0 1 1) "Emacs Web Server" ((emacs (24 3))) tar "gnu" nil ((:keywords "http" "server" "network") (:url . "https://github.com/eschulte/emacs-web-server")) nil])
  (wconf [cl-struct-package-desc wconf (0 2 0) "Minimal window layout manager" ((emacs (24 4))) single "gnu" nil ((:url . "https://github.com/ilohmar/wconf") (:keywords "windows" "frames" "layout")) nil])
  (wcheck-mode [cl-struct-package-desc wcheck-mode (2014 6 21) "General interface for text checkers" nil single "gnu" nil ((:url . "https://github.com/tlikonen/wcheck-mode") (:keywords "text" "spell" "check" "languages" "ispell")) nil])
  (w3 [cl-struct-package-desc w3 (4 0 49) "Fully customizable, largely undocumented web browser for Emacs" nil tar "gnu" nil ((:keywords "faces" "help" "comm" "news" "mail" "processes" "mouse" "hypermedia") (:url . "http://elpa.gnu.org/packages/w3.html")) nil])
  (vlf [cl-struct-package-desc vlf (1 7) "View Large Files" nil tar "gnu" nil ((:keywords "large files" "utilities") (:url . "https://github.com/m00natic/vlfi")) nil])
  (uni-confusables [cl-struct-package-desc uni-confusables (0 1) "Unicode confusables table" nil tar "gnu" nil ((:url . "http://elpa.gnu.org/packages/uni-confusables.html")) nil])
  (undo-tree [cl-struct-package-desc undo-tree (0 6 5) "Treat undo history as a tree" nil single "gnu" nil ((:url . "http://www.dr-qubit.org/emacs.php") (:keywords "convenience" "files" "undo" "redo" "history" "tree")) nil])
  (trie [cl-struct-package-desc trie (0 2 6) "Trie data structure" ((tNFA (0 1 1)) (heap (0 3))) single "gnu" nil ((:url . "http://www.dr-qubit.org/emacs.php") (:keywords "extensions" "matching" "data structures trie" "ternary search tree" "tree" "completion" "regexp")) nil])
  (tiny [cl-struct-package-desc tiny (0 1) "Quickly generate linear ranges in Emacs" nil tar "gnu" nil ((:keywords "convenience") (:url . "https://github.com/abo-abo/tiny")) nil])
  (timerfunctions [cl-struct-package-desc timerfunctions (1 4 2) "Enhanced versions of some timer.el functions" ((cl-lib (0 5))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/timerfunctions.html") (:keywords)) nil])
  (test-simple [cl-struct-package-desc test-simple (1 1) "Simple Unit Test Framework for Emacs Lisp" ((cl-lib (0))) single "gnu" nil ((:url . "http://github.com/rocky/emacs-test-simple") (:keywords "unit-test")) nil])
  (temp-buffer-browse [cl-struct-package-desc temp-buffer-browse (1 4) "temp buffer browse mode" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/temp-buffer-browse.html") (:keywords "convenience")) nil])
  (tNFA [cl-struct-package-desc tNFA (0 1 1) "Tagged non-deterministic finite-state automata" ((queue (0 1))) single "gnu" nil ((:url . "http://www.dr-qubit.org/emacs.php") (:keywords "extensions" "matching" "data structures tnfa" "nfa" "dfa" "finite state automata" "automata" "regexp")) nil])
  (swiper [cl-struct-package-desc swiper (0 5 1) "Isearch with an overview. Oh, man!" ((emacs (24 1))) tar "gnu" nil ((:keywords "matching") (:url . "https://github.com/abo-abo/swiper")) nil])
  (svg-clock [cl-struct-package-desc svg-clock (0 5) "Analog clock using Scalable Vector Graphics" ((svg (0 1)) (emacs (25 0))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/svg-clock.html") (:keywords "demo" "svg" "clock")) nil])
  (svg [cl-struct-package-desc svg (0 1) "svg image creation functions" ((emacs (25))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/svg.html") (:keywords "image")) nil])
  (spinner [cl-struct-package-desc spinner (1 4) "Add spinners and progress-bars to the mode-line for ongoing operations" nil single "gnu" nil ((:url . "https://github.com/Malabarba/spinner.el") (:keywords "processes" "mode-line")) nil])
  (sotlisp [cl-struct-package-desc sotlisp (1 3) "Write lisp at the speed of thought." ((emacs (24 1))) single "gnu" nil ((:url . "https://github.com/Malabarba/speed-of-thought-lisp") (:keywords "convenience" "lisp")) nil])
  (sokoban [cl-struct-package-desc sokoban (1 4) "Implementation of Sokoban for Emacs." nil tar "gnu" nil ((:keywords "games") (:url . "http://elpa.gnu.org/packages/sokoban.html")) nil])
  (sml-mode [cl-struct-package-desc sml-mode (6 7) "Major mode for editing (Standard) ML" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/sml-mode.html") (:keywords "sml")) nil])
  (sisu-mode [cl-struct-package-desc sisu-mode (3 0 3) "Major mode for SiSU markup text" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/sisu-mode.html") (:keywords "text" "processes" "tools")) nil])
  (shen-mode [cl-struct-package-desc shen-mode (0 1) "A major mode for editing shen source code" nil tar "gnu" nil ((:keywords "languages" "shen") (:url . "http://elpa.gnu.org/packages/shen-mode.html")) nil])
  (seq [cl-struct-package-desc seq (1 8) "Sequence manipulation functions" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/seq.html") (:keywords "sequences")) nil])
  (scroll-restore [cl-struct-package-desc scroll-restore (1 0) "restore original position after scrolling" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/scroll-restore.html") (:keywords "scrolling")) nil])
  (rudel [cl-struct-package-desc rudel (0 3) "A collaborative editing framework for Emacs" nil tar "gnu" nil ((:keywords "rudel" "collaboration") (:url . "http://rudel.sourceforge.net/")) nil])
  (register-list [cl-struct-package-desc register-list (0 1) "Interactively list/edit registers" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/register-list.html") (:keywords "register")) nil])
  (rainbow-mode [cl-struct-package-desc rainbow-mode (0 11) "Colorize color names in buffers" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/rainbow-mode.html") (:keywords "faces")) nil])
  (queue [cl-struct-package-desc queue (0 1 1) "Queue data structure" nil single "gnu" nil ((:url . "http://www.dr-qubit.org/emacs.php") (:keywords "extensions" "data structures" "queue")) nil])
  (quarter-plane [cl-struct-package-desc quarter-plane (0 1) "Minor mode for quarter-plane style editing" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/quarter-plane.html") (:keywords "convenience" "wp")) nil])
  (poker [cl-struct-package-desc poker (0 1) "Texas hold'em poker" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/poker.html") (:keywords "games")) nil])
  (pinentry [cl-struct-package-desc pinentry (0 1) "GnuPG Pinentry server implementation" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/pinentry.html") (:keywords "gnupg")) nil])
  (pabbrev [cl-struct-package-desc pabbrev (4 2 1) "Predictive abbreviation expansion" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/pabbrev.html") (:keywords)) nil])
  (other-frame-window [cl-struct-package-desc other-frame-window (1 0 1) "Minor mode to enable global prefix keys for other frame/window buffer placement" ((emacs (24 4))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/other-frame-window.html") (:keywords "frame" "window")) nil])
  (osc [cl-struct-package-desc osc (0 1) "Open Sound Control protocol library" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/osc.html") (:keywords "comm" "processes" "multimedia")) nil])
  (org [cl-struct-package-desc org (20150824) "Outline-based notes management and organizer" nil tar "gnu" nil nil nil])
  (omn-mode [cl-struct-package-desc omn-mode (1 1) "Support for OWL Manchester Notation" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/omn-mode.html") (:keywords)) nil])
  (oauth2 [cl-struct-package-desc oauth2 (0 10) "OAuth 2.0 Authorization Protocol" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/oauth2.html") (:keywords "comm")) nil])
  (num3-mode [cl-struct-package-desc num3-mode (1 2) "highlight groups of digits in long numbers" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/num3-mode.html") (:keywords "faces" "minor-mode")) nil])
  (notes-mode [cl-struct-package-desc notes-mode (1 30) "Indexing system for on-line note-taking" nil tar "gnu" nil ((:url . "http://elpa.gnu.org/packages/notes-mode.html")) nil])
  (nlinum [cl-struct-package-desc nlinum (1 6) "Show line numbers in the margin" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/nlinum.html") (:keywords "convenience")) nil])
  (nhexl-mode [cl-struct-package-desc nhexl-mode (0 1) "Minor mode to edit files via hex-dump format" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/nhexl-mode.html") (:keywords "data")) nil])
  (names [cl-struct-package-desc names (20150723 0) "Namespaces for emacs-lisp. Avoid name clobbering without hiding symbols." ((emacs (24 1)) (cl-lib (0 5))) tar "gnu" nil ((:keywords "extensions" "lisp") (:url . "http://github.com/Bruce-Connor/names")) nil])
  (muse [cl-struct-package-desc muse (3 20) "Authoring and publishing tool for Emacs" nil tar "gnu" nil ((:keywords "hypermedia") (:url . "http://mwolson.org/projects/EmacsMuse.html")) nil])
  (minimap [cl-struct-package-desc minimap (1 2) "Sidebar showing a \"mini-map\" of a buffer" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/minimap.html") (:keywords)) nil])
  (minibuffer-line [cl-struct-package-desc minibuffer-line (0 1) "Display status info in the minibuffer window" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/minibuffer-line.html") (:keywords)) nil])
  (metar [cl-struct-package-desc metar (0 1) "Retrieve and decode METAR weather information" ((cl-lib (0 5))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/metar.html") (:keywords "comm")) nil])
  (memory-usage [cl-struct-package-desc memory-usage (0 2) "Analyze the memory usage of Emacs in various ways" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/memory-usage.html") (:keywords "maint")) nil])
  (markchars [cl-struct-package-desc markchars (0 2 0) "Mark chars fitting certain characteristics" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/markchars.html") (:keywords)) nil])
  (loc-changes [cl-struct-package-desc loc-changes (1 2) "keep track of positions even after buffer changes" nil single "gnu" nil ((:url . "http://github.com/rocky/emacs-loc-changes") (:keywords)) nil])
  (load-relative [cl-struct-package-desc load-relative (1 2) "relative file load (within a multi-file Emacs package)" nil single "gnu" nil ((:url . "http://github.com/rocky/emacs-load-relative") (:keywords "internal")) nil])
  (load-dir [cl-struct-package-desc load-dir (0 0 3) "Load all Emacs Lisp files in a given directory" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/load-dir.html") (:keywords "lisp" "files" "convenience")) nil])
  (lmc [cl-struct-package-desc lmc (1 3) "Little Man Computer in Elisp" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/lmc.html") (:keywords)) nil])
  (lex [cl-struct-package-desc lex (1 1) "Lexical analyser construction" nil tar "gnu" nil ((:url . "http://elpa.gnu.org/packages/lex.html")) nil])
  (let-alist [cl-struct-package-desc let-alist (1 0 4) "Easily let-bind values of an assoc-list by their names" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/let-alist.html") (:keywords "extensions" "lisp")) nil])
  (landmark [cl-struct-package-desc landmark (1 0) "Neural-network robot that learns landmarks" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/landmark.html") (:keywords "games" "neural network" "adaptive search" "chemotaxis")) nil])
  (jumpc [cl-struct-package-desc jumpc (3 0) "jump to previous insertion points" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/jumpc.html") (:keywords)) nil])
  (js2-mode [cl-struct-package-desc js2-mode (20150713) "Improved JavaScript editing mode" ((emacs (24 1)) (cl-lib (0 5))) tar "gnu" nil ((:keywords "languages" "javascript") (:url . "https://github.com/mooz/js2-mode/")) nil])
  (jgraph-mode [cl-struct-package-desc jgraph-mode (1 1) "Major mode for Jgraph files" ((cl-lib (0 5))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/jgraph-mode.html") (:keywords "tex" "wp")) nil])
  (javaimp [cl-struct-package-desc javaimp (0 5) "Add and reorder Java import statements in Maven projects" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/javaimp.html") (:keywords "java" "maven" "programming")) nil])
  (iterators [cl-struct-package-desc iterators (0 1) "Functions for working with iterators" ((emacs (25))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/iterators.html") (:keywords "extensions" "elisp")) nil])
  (ioccur [cl-struct-package-desc ioccur (2 4) "Incremental occur" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/ioccur.html") (:keywords)) nil])
  (hydra [cl-struct-package-desc hydra (0 13 2) "Make bindings that stick around." ((cl-lib (0 5))) tar "gnu" nil ((:keywords "bindings") (:url . "https://github.com/abo-abo/hydra")) nil])
  (heap [cl-struct-package-desc heap (0 3) "Heap (a.k.a. priority queue) data structure" nil single "gnu" nil ((:url . "http://www.dr-qubit.org/emacs.php") (:keywords "extensions" "data structures" "heap" "priority queue")) nil])
  (gnugo [cl-struct-package-desc gnugo (3 0 0) "play GNU Go in a buffer" ((ascii-art-to-unicode (1 5)) (xpm (1 0 1)) (cl-lib (0 5))) tar "gnu" nil ((:keywords "games" "processes") (:url . "http://www.gnuvola.org/software/gnugo/")) nil])
  (gnorb [cl-struct-package-desc gnorb (1 1 1) "Glue code between Gnus, Org, and BBDB" ((cl-lib (0 5))) tar "gnu" nil ((:keywords "mail" "org" "gnus" "bbdb" "todo" "task") (:url . "https://github.com/girzel/gnorb")) nil])
  (ggtags [cl-struct-package-desc ggtags (0 8 10) "emacs frontend to GNU Global source code tagging system" ((emacs (24)) (cl-lib (0 5))) single "gnu" nil ((:url . "https://github.com/leoliu/ggtags") (:keywords "tools" "convenience")) nil])
  (flylisp [cl-struct-package-desc flylisp (0 2) "Color unbalanced parentheses and parentheses inconsistent with indentation" ((emacs (24 1)) (cl-lib (0 4))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/flylisp.html") (:keywords)) nil])
  (f90-interface-browser [cl-struct-package-desc f90-interface-browser (1 1) "Parse and browse f90 interfaces" nil single "gnu" nil ((:url . "http://github.com/wence-/f90-iface/") (:keywords)) nil])
  (ergoemacs-mode [cl-struct-package-desc ergoemacs-mode (5 14 7 3) "Emacs mode based on common modern interface and ergonomics." ((emacs (24 1)) (undo-tree (0 6 5))) tar "gnu" nil ((:keywords "convenience") (:url . "https://github.com/ergoemacs/ergoemacs-mode")) nil])
  (epoch-view [cl-struct-package-desc epoch-view (0 0 1) "Minor mode to visualize epoch timestamps" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/epoch-view.html") (:keywords "data" "timestamp" "epoch" "unix")) nil])
  (enwc [cl-struct-package-desc enwc (1 0) "The Emacs Network Client" nil tar "gnu" nil ((:keywords "enwc" "network" "wicd" "manager" "nm") (:url . "http://elpa.gnu.org/packages/enwc.html")) nil])
  (electric-spacing [cl-struct-package-desc electric-spacing (5 0) "Insert operators with surrounding spaces smartly" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/electric-spacing.html") (:keywords)) nil])
  (eldoc-eval [cl-struct-package-desc eldoc-eval (0 1) "Enable eldoc support when minibuffer is in use." nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/eldoc-eval.html") (:keywords)) nil])
  (el-search [cl-struct-package-desc el-search (0 0 2) "Expression based incremental search for emacs-lisp-mode" ((emacs (25)) (cl-lib (0))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/el-search.html") (:keywords "lisp")) nil])
  (ediprolog [cl-struct-package-desc ediprolog (1 0) "Emacs Does Interactive Prolog" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/ediprolog.html") (:keywords "languages" "processes")) nil])
  (easy-kill [cl-struct-package-desc easy-kill (0 9 3) "kill & mark things easily" ((emacs (24)) (cl-lib (0 5))) tar "gnu" nil ((:keywords "killing" "convenience") (:url . "https://github.com/leoliu/easy-kill")) nil])
  (dts-mode [cl-struct-package-desc dts-mode (0 1 0) "Major mode for Device Tree source files" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/dts-mode.html") (:keywords "languages")) nil])
  (docbook [cl-struct-package-desc docbook (0 1) "Info-like viewer for DocBook" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/docbook.html") (:keywords "docs" "help")) nil])
  (djvu [cl-struct-package-desc djvu (0 5) "Edit and view Djvu files via djvused" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/djvu.html") (:keywords "files" "wp")) nil])
  (dismal [cl-struct-package-desc dismal (1 5) "Dis Mode Ain't Lotus: Spreadsheet program Emacs" ((cl-lib (0))) tar "gnu" nil ((:url . "http://elpa.gnu.org/packages/dismal.html")) nil])
  (diff-hl [cl-struct-package-desc diff-hl (1 7 0) "Highlight uncommitted changes" ((cl-lib (0 2))) tar "gnu" nil ((:keywords "vc" "diff") (:url . "https://github.com/dgutov/diff-hl")) nil])
  (dict-tree [cl-struct-package-desc dict-tree (0 12 8) "Dictionary data structure" ((trie (0 2 5)) (tNFA (0 1 1)) (heap (0 3))) single "gnu" nil ((:url . "http://www.dr-qubit.org/emacs.php") (:keywords "extensions" "matching" "data structures trie" "tree" "dictionary" "completion" "regexp")) nil])
  (debbugs [cl-struct-package-desc debbugs (0 7) "SOAP library to access debbugs servers" nil tar "gnu" nil ((:keywords "comm" "hypermedia") (:url . "http://elpa.gnu.org/packages/debbugs.html")) nil])
  (dbus-codegen [cl-struct-package-desc dbus-codegen (0 1) "Lisp code generation for D-Bus." ((cl-lib (0 5))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/dbus-codegen.html") (:keywords "comm" "dbus" "convenience")) nil])
  (darkroom [cl-struct-package-desc darkroom (0 1) "Remove visual distractions and focus on writing" ((cl-lib (0 5))) single "gnu" nil ((:url . "http://elpa.gnu.org/packages/darkroom.html") (:keywords "convenience" "emulations")) nil])
  (csv-mode [cl-struct-package-desc csv-mode (1 5) "Major mode for editing comma/char separated values" nil single "gnu" nil ((:url . "http://centaur.maths.qmul.ac.uk/Emacs/") (:keywords "convenience")) nil])
  (crisp [cl-struct-package-desc crisp (1 3 4) "CRiSP/Brief Emacs emulator" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/crisp.html") (:keywords "emulations" "brief" "crisp")) nil])
  (context-coloring [cl-struct-package-desc context-coloring (7 0 0) "Highlight by scope" ((emacs (24 3)) (js2-mode (20150126))) single "gnu" nil ((:url . "https://github.com/jacksonrayhamilton/context-coloring") (:keywords "convenience" "faces" "tools")) nil])
  (company-statistics [cl-struct-package-desc company-statistics (0 2 1) "Sort candidates using completion history" ((emacs (24 3)) (company (0 8 5))) tar "gnu" nil ((:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/company-mode/company-statistics")) nil])
  (company [cl-struct-package-desc company (0 8 12) "Modular text completion framework" ((emacs (24 1)) (cl-lib (0 5))) tar "gnu" nil ((:keywords "abbrev" "convenience" "matching") (:url . "http://company-mode.github.io/")) nil])
  (coffee-mode [cl-struct-package-desc coffee-mode (0 4 1 1) "Major mode for CoffeeScript files" nil single "gnu" nil ((:url . "http://github.com/defunkt/coffee-mode") (:keywords "coffeescript" "major" "mode")) nil])
  (cl-lib [cl-struct-package-desc cl-lib (0 5) "Properly prefixed CL functions and macros" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/cl-lib.html") (:keywords)) nil])
  (cl-generic [cl-struct-package-desc cl-generic (0 2) "Forward cl-generic compatibility for Emacs<25" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/cl-generic.html") (:keywords)) nil])
  (chess [cl-struct-package-desc chess (2 0 4) "Play chess in GNU Emacs" ((cl-lib (0 5))) tar "gnu" nil ((:keywords "games") (:url . "http://elpa.gnu.org/packages/chess.html")) nil])
  (caps-lock [cl-struct-package-desc caps-lock (1 0) "Caps-lock as a minor mode" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/caps-lock.html") (:keywords)) nil])
  (bug-hunter [cl-struct-package-desc bug-hunter (1 0) "Hunt down errors in elisp files" ((seq (1 3)) (cl-lib (0 5))) single "gnu" nil ((:url . "http://github.com/Malabarba/elisp-bug-hunter") (:keywords "lisp")) nil])
  (avy [cl-struct-package-desc avy (0 3 0) "set-based completion" ((emacs (24 1)) (cl-lib (0 5))) tar "gnu" nil ((:keywords "point" "location") (:url . "https://github.com/abo-abo/avy")) nil])
  (auto-overlays [cl-struct-package-desc auto-overlays (0 10 9) "Automatic regexp-delimited overlays" nil tar "gnu" nil ((:keywords "extensions") (:url . "http://www.dr-qubit.org/emacs.php")) nil])
  (aumix-mode [cl-struct-package-desc aumix-mode (7) "run the aumix program in a buffer" nil single "gnu" nil ((:url . "http://user42.tuxfamily.org/aumix-mode/index.html") (:keywords "multimedia" "mixer" "aumix")) nil])
  (auctex [cl-struct-package-desc auctex (11 88 7) "Integrated environment for *TeX*" nil tar "gnu" nil ((:url . "http://www.gnu.org/software/auctex/")) nil])
  (ascii-art-to-unicode [cl-struct-package-desc ascii-art-to-unicode (1 9) "a small artist adjunct" nil single "gnu" nil ((:url . "http://www.gnuvola.org/software/aa2u/") (:keywords "ascii" "unicode" "box-drawing")) nil])
  (all [cl-struct-package-desc all (1 0) "Edit all lines matching a given regexp" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/all.html") (:keywords "matching")) nil])
  (ahungry-theme [cl-struct-package-desc ahungry-theme (1 0 9) "Ahungry color theme for Emacs.  Make sure to (load-theme 'ahungry)." ((emacs (24))) tar "gnu" nil ((:keywords "ahungry" "palette" "color" "theme" "emacs" "color-theme" "deftheme") (:url . "https://github.com/ahungry/color-theme-ahungry")) nil])
  (aggressive-indent [cl-struct-package-desc aggressive-indent (1 1 3) "Minor mode to aggressively keep your code always indented" ((emacs (24 1)) (names (20150125 9)) (cl-lib (0 5))) single "gnu" nil ((:url . "http://github.com/Malabarba/aggressive-indent-mode") (:keywords "indent" "lisp" "maint" "tools")) nil])
  (adjust-parens [cl-struct-package-desc adjust-parens (3 0) "Indent and dedent Lisp code, automatically adjust close parens" nil tar "gnu" nil ((:url . "http://elpa.gnu.org/packages/adjust-parens.html")) nil])
  (adaptive-wrap [cl-struct-package-desc adaptive-wrap (0 5) "Smart line-wrapping with wrap-prefix" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/adaptive-wrap.html") (:keywords)) nil])
  (ada-ref-man [cl-struct-package-desc ada-ref-man (2012 0) "Ada Reference Manual 2012" nil tar "gnu" nil ((:keywords "languages" "ada") (:url . "http://stephe-leake.org/ada/arm.html")) nil])
  (ada-mode [cl-struct-package-desc ada-mode (5 1 8) "major-mode for editing Ada sources" ((wisi (1 1 1)) (cl-lib (0 4)) (emacs (24 2))) tar "gnu" nil ((:keywords "languages" "ada") (:url . "http://stephe-leake.org/emacs/ada-mode/emacs-ada-mode.html")) nil])
  (ack [cl-struct-package-desc ack (1 3) "Interface to ack-like source code search tools" nil tar "gnu" nil ((:keywords "tools" "processes" "convenience") (:url . "https://github.com/leoliu/ack-el")) nil])
  (ace-window [cl-struct-package-desc ace-window (0 9 0) "Quickly switch windows." ((avy (0 2 0))) single "gnu" nil ((:url . "https://github.com/abo-abo/ace-window") (:keywords "window" "location")) nil])
 )
