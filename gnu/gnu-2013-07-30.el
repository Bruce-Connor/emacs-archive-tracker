'(
  (yasnippet . [(0 8 0) nil "A template system for Emacs" tar "gnu"])
  (xclip . [(1 0) nil "Emacs Interface to XClip" single "gnu"])
  (windresize . [(0 1) nil "Resize windows interactively" single "gnu"])
  (vlf . [(0 9) nil "View Large Files" single "gnu"])
  (uni-confusables . [(0 1) nil "Unicode confusables table" tar "gnu"])
  (undo-tree . [(0 6 3) nil "Treat undo history as a tree" single "gnu"])
  (trie . [(0 2 6) ((tNFA (0 1 1)) (heap (0 3))) "Trie data structure" single "gnu"])
  (tNFA . [(0 1 1) ((queue (0 1))) "Tagged non-deterministic finite-state automata" single "gnu"])
  (svg-clock . [(0 5) nil "Analog clock using Scalable Vector Graphics" single "gnu"])
  (sokoban . [(1 0 4) nil "Sokoban game for emacs" tar "gnu"])
  (sml-mode . [(6 4) nil "Major mode for editing (Standard) ML" single "gnu"])
  (smart-operator . [(4 0) nil "Insert operators with surrounding spaces smartly" single "gnu"])
  (sisu-mode . [(3 0 3) nil "Major mode for SiSU markup text" single "gnu"])
  (shen-mode . [(0 1) nil "Utilities for working with Shen code." tar "gnu"])
  (register-list . [(0 1) nil "Interactively list/edit registers" single "gnu"])
  (rainbow-mode . [(0 8) nil "Colorize color names in buffers" single "gnu"])
  (queue . [(0 1) nil "Queue data structure" single "gnu"])
  (quarter-plane . [(0 1) nil "Minor mode for quarter-plane style editing" single "gnu"])
  (org . [(20130729) nil "Outline-based notes management and organizer" tar "gnu"])
  (omn-mode . [(1 0) nil "Support for OWL Manchester Notation" single "gnu"])
  (oauth2 . [(0 9) nil "OAuth 2.0 Authorization Protocol" single "gnu"])
  (num3-mode . [(1 1) nil "highlight groups of digits in long numbers" single "gnu"])
  (notes-mode . [(1 30) nil "Organizing on-line note-taking" tar "gnu"])
  (nlinum . [(1 1) nil "Show line numbers in the margin" single "gnu"])
  (nhexl-mode . [(0 1) nil "Minor mode to edit files via hex-dump format" single "gnu"])
  (muse . [(3 20) nil "Authoring and publishing tool" tar "gnu"])
  (minimap . [(1 0) nil "Sidebar showing a \"mini-map\" of a buffer" single "gnu"])
  (memory-usage . [(0 2) nil "Analyze the memory usage of Emacs in various ways" single "gnu"])
  (markchars . [(0 2 0) nil "Mark chars fitting certain characteristics" single "gnu"])
  (load-dir . [(0 0 3) nil "Load all Emacs Lisp files in a given directory" single "gnu"])
  (lmc . [(1 2) nil "Little Man Computer in Elisp" single "gnu"])
  (lex . [(1 1) nil "Lexical analyser construction" tar "gnu"])
  (jumpc . [(3 0) nil "jump to previous insertion points" single "gnu"])
  (js2-mode . [(20130619) ((emacs (24 1))) "Improved JavaScript editing mode" single "gnu"])
  (jgraph-mode . [(1 0) nil "Major mode for Jgraph files" single "gnu"])
  (ioccur . [(2 4) nil "Incremental occur" single "gnu"])
  (heap . [(0 3) nil "Heap (a.k.a. priority queue) data structure" single "gnu"])
  (ggtags . [(0 6 6) nil "GNU Global source code tagging system" single "gnu"])
  (f90-interface-browser . [(1 1) nil "Parse and browse f90 interfaces" single "gnu"])
  (epoch-view . [(0 0 1) nil "Minor mode to visualize epoch timestamps" single "gnu"])
  (enwc . [(1 0) nil "The Emacs Network Client" tar "gnu"])
  (eldoc-eval . [(0 1) nil "Enable eldoc support when minibuffer is in use." single "gnu"])
  (ediprolog . [(1 0) nil "Emacs Does Interactive Prolog" single "gnu"])
  (docbook . [(0 1) nil "Info-like viewer for DocBook" single "gnu"])
  (djvu . [(0 5) nil "Edit and view Djvu files via djvused" single "gnu"])
  (dict-tree . [(0 12 8) ((trie (0 2 5)) (tNFA (0 1 1)) (heap (0 3))) "Dictionary data structure" single "gnu"])
  (debbugs . [(0 4) nil "SOAP library to access debbugs servers" tar "gnu"])
  (csv-mode . [(1 2) nil "Major mode for editing comma/char separated values" single "gnu"])
  (company . [(0 6 10) nil "Modular in-buffer completion framework" tar "gnu"])
  (coffee-mode . [(0 4 1) nil "Major mode for CoffeeScript files" tar "gnu"])
  (cl-lib . [(0 3) nil "Properly prefixed CL functions and macros" single "gnu"])
  (auctex . [(11 86 1) nil "Integrated environment for *TeX*" tar "gnu"])
  (all . [(1 0) nil "Edit all lines matching a given regexp" single "gnu"])
  (adaptive-wrap . [(0 3) nil "Smart line-wrapping with wrap-prefix" single "gnu"])
  (ack . [(1 2) nil "Interface to ack-like source code search tools" tar "gnu"])
 )
