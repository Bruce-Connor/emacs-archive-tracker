'(
  (yasnippet [cl-struct-package-desc yasnippet (0 8 0) "Yet another snippet extension for Emacs." nil tar "gnu" nil ((:keywords quote ("convenience" "emulation")) (:url . "http://github.com/capitaomorte/yasnippet")) nil])
  (xclip [cl-struct-package-desc xclip (1 3) "use xclip to copy&paste" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/xclip.html") (:keywords quote ("convenience" "tools"))) nil])
  (wpuzzle [cl-struct-package-desc wpuzzle (1 1) "find as many word in a given time" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/wpuzzle.html") (:keywords quote nil)) nil])
  (wisi [cl-struct-package-desc wisi (1 0) "Utilities for implementing an indentation/navigation engine using a generalized LALR parser" ((cl-lib (0))) tar "gnu" nil ((:keywords quote nil) (:url . "http://stephe-leake.org/emacs/ada-mode/emacs-ada-mode.html")) nil])
  (windresize [cl-struct-package-desc windresize (0 1) "Resize windows interactively" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/windresize.html") (:keywords quote ("window"))) nil])
  (websocket [cl-struct-package-desc websocket (1 1) "Emacs WebSocket client and server" nil tar "gnu" nil ((:keywords quote ("communication" "websocket" "server")) (:url . "http://elpa.gnu.org/packages/websocket.html")) nil])
  (web-server [cl-struct-package-desc web-server (0 1 0) "Emacs Web Server" ((emacs (24 3))) tar "gnu" nil ((:keywords quote ("http" "server" "network")) (:url . "https://github.com/eschulte/emacs-web-server")) nil])
  (w3 [cl-struct-package-desc w3 (4 0 49) "Fully customizable, largely undocumented web browser for Emacs" nil tar "gnu" nil ((:keywords quote ("faces" "help" "comm" "news" "mail" "processes" "mouse" "hypermedia")) (:url . "http://elpa.gnu.org/packages/w3.html")) nil])
  (vlf [cl-struct-package-desc vlf (1 5) "View Large Files" nil tar "gnu" nil ((:keywords quote ("large files" "utilities")) (:url . "https://github.com/m00natic/vlfi")) nil])
  (uni-confusables [cl-struct-package-desc uni-confusables (0 1) "Unicode confusables table" nil tar "gnu" nil ((:keywords quote nil) (:url . "http://elpa.gnu.org/packages/uni-confusables.html")) nil])
  (undo-tree [cl-struct-package-desc undo-tree (0 6 5) "Treat undo history as a tree" nil single "gnu" nil ((:url . "http://www.dr-qubit.org/emacs.php") (:keywords quote ("convenience" "files" "undo" "redo" "history" "tree"))) nil])
  (trie [cl-struct-package-desc trie (0 2 6) "Trie data structure" ((tNFA (0 1 1)) (heap (0 3))) single "gnu" nil ((:url . "http://www.dr-qubit.org/emacs.php") (:keywords quote ("extensions" "matching" "data structures trie" "ternary search tree" "tree" "completion" "regexp"))) nil])
  (temp-buffer-browse [cl-struct-package-desc temp-buffer-browse (1 2) "temp buffer browse mode" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/temp-buffer-browse.html") (:keywords quote ("convenience"))) nil])
  (tNFA [cl-struct-package-desc tNFA (0 1 1) "Tagged non-deterministic finite-state automata" ((queue (0 1))) single "gnu" nil ((:url . "http://www.dr-qubit.org/emacs.php") (:keywords quote ("extensions" "matching" "data structures tnfa" "nfa" "dfa" "finite state automata" "automata" "regexp"))) nil])
  (svg-clock [cl-struct-package-desc svg-clock (0 5) "Analog clock using Scalable Vector Graphics" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/svg-clock.html") (:keywords quote ("demo" "svg" "clock"))) nil])
  (sokoban [cl-struct-package-desc sokoban (1 4) "Implementation of Sokoban for Emacs." nil tar "gnu" nil ((:keywords quote ("games")) (:url . "http://elpa.gnu.org/packages/sokoban.html")) nil])
  (sml-mode [cl-struct-package-desc sml-mode (6 4) "Major mode for editing (Standard) ML" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/sml-mode.html") (:keywords quote ("sml"))) nil])
  (smart-operator [cl-struct-package-desc smart-operator (4 0) "Insert operators with surrounding spaces smartly" nil single "gnu" nil ((:url . "http://xwl.appspot.com/ref/smart-operator.el") (:keywords quote nil)) nil])
  (sisu-mode [cl-struct-package-desc sisu-mode (3 0 3) "Major mode for SiSU markup text" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/sisu-mode.html") (:keywords quote ("text" "processes" "tools"))) nil])
  (shen-mode [cl-struct-package-desc shen-mode (0 1) "A major mode for editing shen source code" nil tar "gnu" nil ((:keywords quote ("languages" "shen")) (:url . "http://elpa.gnu.org/packages/shen-mode.html")) nil])
  (register-list [cl-struct-package-desc register-list (0 1) "Interactively list/edit registers" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/register-list.html") (:keywords quote ("register"))) nil])
  (rainbow-mode [cl-struct-package-desc rainbow-mode (0 9) "Colorize color names in buffers" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/rainbow-mode.html") (:keywords quote ("faces"))) nil])
  (queue [cl-struct-package-desc queue (0 1) "Queue data structure" nil single "gnu" nil ((:url . "http://www.dr-qubit.org/emacs.php") (:keywords quote ("extensions" "data structures" "queue"))) nil])
  (quarter-plane [cl-struct-package-desc quarter-plane (0 1) "Minor mode for quarter-plane style editing" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/quarter-plane.html") (:keywords quote ("convenience" "wp"))) nil])
  (org [cl-struct-package-desc org (20140310) "Outline-based notes management and organizer" nil tar "gnu" nil nil nil])
  (omn-mode [cl-struct-package-desc omn-mode (1 0) "Support for OWL Manchester Notation" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/omn-mode.html") (:keywords quote nil)) nil])
  (oauth2 [cl-struct-package-desc oauth2 (0 10) "OAuth 2.0 Authorization Protocol" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/oauth2.html") (:keywords quote ("comm"))) nil])
  (num3-mode [cl-struct-package-desc num3-mode (1 2) "highlight groups of digits in long numbers" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/num3-mode.html") (:keywords quote ("faces" "minor-mode"))) nil])
  (notes-mode [cl-struct-package-desc notes-mode (1 30) "Indexing system for on-line note-taking" nil tar "gnu" nil ((:keywords quote nil) (:url . "http://elpa.gnu.org/packages/notes-mode.html")) nil])
  (nlinum [cl-struct-package-desc nlinum (1 2) "Show line numbers in the margin" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/nlinum.html") (:keywords quote ("convenience"))) nil])
  (nhexl-mode [cl-struct-package-desc nhexl-mode (0 1) "Minor mode to edit files via hex-dump format" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/nhexl-mode.html") (:keywords quote ("data"))) nil])
  (muse [cl-struct-package-desc muse (3 20) "Authoring and publishing tool for Emacs" nil tar "gnu" nil ((:keywords quote ("hypermedia")) (:url . "http://mwolson.org/projects/EmacsMuse.html")) nil])
  (minimap [cl-struct-package-desc minimap (1 1) "Sidebar showing a \"mini-map\" of a buffer" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/minimap.html") (:keywords quote nil)) nil])
  (memory-usage [cl-struct-package-desc memory-usage (0 2) "Analyze the memory usage of Emacs in various ways" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/memory-usage.html") (:keywords quote ("maint"))) nil])
  (markchars [cl-struct-package-desc markchars (0 2 0) "Mark chars fitting certain characteristics" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/markchars.html") (:keywords quote nil)) nil])
  (load-dir [cl-struct-package-desc load-dir (0 0 3) "Load all Emacs Lisp files in a given directory" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/load-dir.html") (:keywords quote ("lisp" "files" "convenience"))) nil])
  (lmc [cl-struct-package-desc lmc (1 3) "Little Man Computer in Elisp" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/lmc.html") (:keywords quote nil)) nil])
  (lex [cl-struct-package-desc lex (1 1) "Lexical analyser construction" nil tar "gnu" nil ((:keywords quote nil) (:url . "http://elpa.gnu.org/packages/lex.html")) nil])
  (jumpc [cl-struct-package-desc jumpc (3 0) "jump to previous insertion points" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/jumpc.html") (:keywords quote nil)) nil])
  (js2-mode [cl-struct-package-desc js2-mode (20140114) "Improved JavaScript editing mode" ((emacs (24 1))) tar "gnu" nil ((:keywords quote ("languages" "javascript")) (:url . "https://github.com/mooz/js2-mode/")) nil])
  (jgraph-mode [cl-struct-package-desc jgraph-mode (1 0) "Major mode for Jgraph files" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/jgraph-mode.html") (:keywords quote ("tex" "wp"))) nil])
  (ioccur [cl-struct-package-desc ioccur (2 4) "Incremental occur" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/ioccur.html") (:keywords quote nil)) nil])
  (heap [cl-struct-package-desc heap (0 3) "Heap (a.k.a. priority queue) data structure" nil single "gnu" nil ((:url . "http://www.dr-qubit.org/emacs.php") (:keywords quote ("extensions" "data structures" "heap" "priority queue"))) nil])
  (gnugo [cl-struct-package-desc gnugo (2 3 1) "play GNU Go in a buffer" nil tar "gnu" nil ((:keywords quote nil) (:url . "http://elpa.gnu.org/packages/gnugo.html")) nil])
  (ggtags [cl-struct-package-desc ggtags (0 7 12) "emacs frontend to GNU Global source code tagging system" ((emacs (24))) single "gnu" nil ((:url . "https://github.com/leoliu/ggtags") (:keywords quote ("tools" "convenience"))) nil])
  (flylisp [cl-struct-package-desc flylisp (0 2) "Color unbalanced parentheses and parentheses inconsistent with indentation" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/flylisp.html") (:keywords quote nil)) nil])
  (f90-interface-browser [cl-struct-package-desc f90-interface-browser (1 1) "Parse and browse f90 interfaces" nil single "gnu" nil ((:url . "http://github.com/wence-/f90-iface/") (:keywords quote nil)) nil])
  (epoch-view [cl-struct-package-desc epoch-view (0 0 1) "Minor mode to visualize epoch timestamps" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/epoch-view.html") (:keywords quote ("data" "timestamp" "epoch" "unix"))) nil])
  (enwc [cl-struct-package-desc enwc (1 0) "The Emacs Network Client" nil tar "gnu" nil ((:keywords quote ("enwc" "network" "wicd" "manager" "nm")) (:url . "http://elpa.gnu.org/packages/enwc.html")) nil])
  (eldoc-eval [cl-struct-package-desc eldoc-eval (0 1) "Enable eldoc support when minibuffer is in use." nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/eldoc-eval.html") (:keywords quote nil)) nil])
  (ediprolog [cl-struct-package-desc ediprolog (1 0) "Emacs Does Interactive Prolog" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/ediprolog.html") (:keywords quote ("languages" "processes"))) nil])
  (docbook [cl-struct-package-desc docbook (0 1) "Info-like viewer for DocBook" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/docbook.html") (:keywords quote ("docs" "help"))) nil])
  (djvu [cl-struct-package-desc djvu (0 5) "Edit and view Djvu files via djvused" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/djvu.html") (:keywords quote ("files" "wp"))) nil])
  (dismal [cl-struct-package-desc dismal (1 5) "Dis Mode Ain't Lotus: Spreadsheet program Emacs" ((cl-lib (0))) tar "gnu" nil ((:keywords quote nil) (:url . "http://elpa.gnu.org/packages/dismal.html")) nil])
  (diff-hl [cl-struct-package-desc diff-hl (1 5 3) "Highlight uncommitted changes" ((cl-lib (0 2))) tar "gnu" nil ((:keywords quote ("vc" "diff")) (:url . "https://github.com/dgutov/diff-hl")) nil])
  (dict-tree [cl-struct-package-desc dict-tree (0 12 8) "Dictionary data structure" ((trie (0 2 5)) (tNFA (0 1 1)) (heap (0 3))) single "gnu" nil ((:url . "http://www.dr-qubit.org/emacs.php") (:keywords quote ("extensions" "matching" "data structures trie" "tree" "dictionary" "completion" "regexp"))) nil])
  (debbugs [cl-struct-package-desc debbugs (0 6) "SOAP library to access debbugs servers" nil tar "gnu" nil ((:keywords quote ("comm" "hypermedia")) (:url . "http://elpa.gnu.org/packages/debbugs.html")) nil])
  (csv-mode [cl-struct-package-desc csv-mode (1 2) "Major mode for editing comma/char separated values" nil single "gnu" nil ((:url . "http://centaur.maths.qmul.ac.uk/Emacs/") (:keywords quote ("convenience"))) nil])
  (company [cl-struct-package-desc company (0 7) "Modular in-buffer completion framework" nil tar "gnu" nil ((:keywords quote ("abbrev" "convenience" "matching")) (:url . "http://company-mode.github.io/")) nil])
  (coffee-mode [cl-struct-package-desc coffee-mode (0 4 1 1) "Major mode for CoffeeScript files" nil single "gnu" nil ((:url . "http://github.com/defunkt/coffee-mode") (:keywords quote ("coffeescript" "major" "mode"))) nil])
  (cl-lib [cl-struct-package-desc cl-lib (0 5) "Properly prefixed CL functions and macros" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/cl-lib.html") (:keywords quote nil)) nil])
  (auctex [cl-struct-package-desc auctex (11 87 3) "Integrated environment for *TeX*" nil tar "gnu" nil ((:keywords quote nil) (:url . "http://www.gnu.org/software/auctex/")) nil])
  (ascii-art-to-unicode [cl-struct-package-desc ascii-art-to-unicode (1 4) "a small artist adjunct" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/ascii-art-to-unicode.html") (:keywords quote nil)) nil])
  (all [cl-struct-package-desc all (1 0) "Edit all lines matching a given regexp" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/all.html") (:keywords quote ("matching"))) nil])
  (adjust-parens [cl-struct-package-desc adjust-parens (3 0) "Indent and dedent Lisp code, automatically adjust close parens" nil tar "gnu" nil ((:keywords quote nil) (:url . "http://elpa.gnu.org/packages/adjust-parens.html")) nil])
  (adaptive-wrap [cl-struct-package-desc adaptive-wrap (0 5) "Smart line-wrapping with wrap-prefix" nil single "gnu" nil ((:url . "http://elpa.gnu.org/packages/adaptive-wrap.html") (:keywords quote nil)) nil])
  (ada-mode [cl-struct-package-desc ada-mode (5 0 1) "major-mode for editing Ada sources" ((wisi (1 0))) tar "gnu" nil ((:keywords quote nil) (:url . "http://stephe-leake.org/emacs/ada-mode/emacs-ada-mode.html")) nil])
  (ack [cl-struct-package-desc ack (1 3) "Interface to ack-like source code search tools" nil tar "gnu" nil ((:keywords quote ("tools" "processes" "convenience")) (:url . "https://github.com/leoliu/ack-el")) nil])
 )
