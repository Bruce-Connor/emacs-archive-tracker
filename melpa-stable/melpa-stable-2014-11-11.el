'(
  (abc-mode . [(20140225 944) nil "Major mode for editing abc music files" single ((:keywords "local" "docs")) "melpa-stable"])
  (ac-cake . [(1 0 0) ((cake (1 4 2)) (auto-complete (1 4))) "CakePHP Minor Mode auto-complete.el source" single ((:url . "http://code.101000lab.org")) "melpa-stable"])
  (ac-cake2 . [(1 0 1) ((cake2 (1 1 2)) (auto-complete (1 4 0))) "CakePHP 2 Minor Mode auto-complete.el source" single ((:url . "http://code.101000lab.org")) "melpa-stable"])
  (ac-cider . [(0 2 0) ((cider (0 6 0)) (auto-complete (1 4))) "Clojure auto-complete sources using CIDER" single ((:url . "https://github.com/clojure-emacs/ac-cider") (:keywords "languages" "clojure" "nrepl" "cider" "compliment")) "melpa-stable"])
  (ac-dcd . [(0 4) ((auto-complete (1 3 1)) (flycheck-dmd-dub (0 7))) "Auto Completion source for dcd for GNU Emacs" single ((:url . "http://github.com/atilaneves/ac-dcd") (:keywords "languages")) "melpa-stable"])
  (ac-etags . [(0 6) ((auto-complete (1 4))) "etags/ctags completion source for auto-complete" single ((:url . "https://github.com/syohex/emacs-ac-etags")) "melpa-stable"])
  (ac-geiser . [(0 1) ((geiser (0 5)) (auto-complete (1 4))) "Auto-complete backend for geiser" tar nil "melpa-stable"])
  (ac-haskell-process . [(0 4) ((auto-complete (1 4)) (haskell-mode (13))) "Haskell auto-complete source which uses the current haskell process" single ((:keywords "languages")) "melpa-stable"])
  (ac-helm . [(2 1) ((helm (20130328)) (auto-complete (1 4 0)) (popup (0 5 0))) "Auto Complete with Helm" single ((:keywords "completion" "convenience" "helm")) "melpa-stable"])
  (ac-inf-ruby . [(0 4) ((inf-ruby (2 3 2)) (auto-complete (1 4))) "Enable auto-complete in inf-ruby sessions" single ((:keywords "languages" "tools")) "melpa-stable"])
  (ac-ispell . [(0 6) ((auto-complete (1 4))) "ispell completion source for auto-complete" single ((:url . "https://github.com/syohex/emacs-ac-ispell")) "melpa-stable"])
  (ac-octave . [(0 4) ((auto-complete (1 4 0))) "An auto-complete source for Octave" single ((:url . "https://github.com/coldnew/ac-octave") (:keywords "octave" "auto-complete" "completion")) "melpa-stable"])
  (ac-slime . [(0 7) ((auto-complete (1 4)) (slime (2 9)) (cl-lib (0 5))) "An auto-complete source using slime completions" single ((:url . "https://github.com/purcell/ac-slime")) "melpa-stable"])
  (ace-jump-mode . [(2 0) nil "a quick cursor location minor mode for emacs" single ((:url . "https://github.com/winterTTr/ace-jump-mode/") (:keywords "motion" "location" "cursor")) "melpa-stable"])
  (ace-window . [(0 5 0) ((ace-jump-mode (2 0))) "Quickly switch windows using `ace-jump-mode'." single ((:url . "https://github.com/abo-abo/ace-window") (:keywords "cursor" "window" "location")) "melpa-stable"])
  (ack-and-a-half . [(1 2 0) nil "Yet another front-end for ack" single ((:url . "http://technosorcery.net")) "melpa-stable"])
  (actionscript-mode . [(7 2 2) nil "A simple mode for editing Actionscript 3 files" single ((:keywords "language" "modes")) "melpa-stable"])
  (adoc-mode . [(0 6 2) ((markup-faces (1 0 0))) "a major-mode for editing AsciiDoc files in Emacs" single ((:url . "https://github.com/sensorflo/adoc-mode/wiki") (:keywords "wp" "asciidoc")) "melpa-stable"])
  (aes . [(0 6) nil "Implementation of AES" single ((:url . "https://github.com/gaddhi/aes") (:keywords "data" "tools")) "melpa-stable"])
  (ag . [(0 44) nil "A front-end for ag ('the silver searcher'), the C ack replacement." single nil "melpa-stable"])
  (aggressive-indent . [(0 3 1) ((emacs (24 1)) (names (0 5)) (cl-lib (0 5))) "Minor mode to aggressively keep your code always indented" single ((:url . "http://github.com/Bruce-Connor/aggressive-indent-mode") (:keywords "indent" "lisp" "maint" "tools")) "melpa-stable"])
  (alchemist . [(0 6 0) ((emacs (24)) (pkg-info (0 5))) "Elixir tooling integration into emacs" tar ((:url . "http://www.github.com/tonini/alchemist.el") (:keywords "languages" "mix" "elixir" "elixirc" "hex")) "melpa-stable"])
  (alect-themes . [(0 6) nil "Configurable color themes (light, dark and black) for Emacs 24" tar nil "melpa-stable"])
  (anaconda-mode . [(0 1 0) nil "No description available." tar nil "melpa-stable"])
  (anaphora . [(1 0 0) nil "anaphoric macros providing implicit temp variables" single ((:url . "http://github.com/rolandwalker/anaphora") (:keywords "extensions")) "melpa-stable"])
  (android-mode . [(0 3 1) nil "Minor mode for Android application development" single ((:url . "https://github.com/remvee/android-mode") (:keywords "tools" "processes")) "melpa-stable"])
  (angular-snippets . [(0 2 3) ((s (1 4 0)) (dash (1 2 0))) "Yasnippets for AngularJS" tar nil "melpa-stable"])
  (ansi . [(0 4 0) ((s (1 6 1)) (dash (1 5 0)) (noflet (0 0 11))) "Turn string into ansi strings" single ((:url . "http://github.com/rejeep/ansi") (:keywords "color" "ansi")) "melpa-stable"])
  (ansible . [(0 0 2) ((s (1 9 0)) (f (0 16 2))) "Ansible minor mode" tar ((:url . "http://101000lab.org")) "melpa-stable"])
  (ansible-doc . [(0 1) ((emacs (24 1))) "Ansible documentation Minor Mode" single ((:url . "https://github.com/lunaryorn/ansible-doc.el") (:keywords "tools" "help")) "melpa-stable"])
  (anti-zenburn-theme . [(2 1) nil "Low-contrast Zenburn-inverted theme" single ((:url . "https://github.com/m00natic/anti-zenburn-theme")) "melpa-stable"])
  (anyins . [(0 1 1) nil "Insert content at multiple places from shell command or kill-ring" single ((:url . "http://github.com/antham/anyins") (:keywords "insert" "rectangular")) "melpa-stable"])
  (anything . [(1 3 9) nil "open anything / QuickSilver-like candidate-selection framework" tar ((:url . "http://repo.or.cz/w/anything-config.git") (:keywords "files" "frames" "help" "matching" "outlines" "processes" "tools" "convenience" "anything")) "melpa-stable"])
  (anything-exuberant-ctags . [(0 1 2) ((anything (1 3 9))) "Exuberant ctags anything.el interface" single ((:url . "http://code.101000lab.org") (:keywords "anything" "exuberant ctags")) "melpa-stable"])
  (anything-replace-string . [(0 9 2) ((anything (1 3 9))) "`replace-string' and `query-replace' `anything.el' interface" single ((:url . "http://code.101000lab.org")) "melpa-stable"])
  (anything-sage . [(0 0 1) ((cl-lib (0 5)) (anything (1 3 9)) (sage-shell-mode (0 0 1))) "An anything extension for sage-shell-mode." single ((:url . "https://github.com/stakemori/anything-sage") (:keywords "sage" "math" "anything")) "melpa-stable"])
  (anzu . [(0 41) ((cl-lib (0 5)) (emacs (24))) "Show number of matches in mode-line while searching" single ((:url . "https://github.com/syohex/emacs-anzu")) "melpa-stable"])
  (apples-mode . [(0 0 2) nil "Major mode for editing and executing AppleScript code" tar ((:keywords "applescript" "languages")) "melpa-stable"])
  (async . [(1 2) nil "Asynchronous processing in Emacs" tar nil "melpa-stable"])
  (aurel . [(0 6) nil "Search, get info, vote and download AUR packages" single ((:url . "https://github.com/alezost/aurel") (:keywords "tools")) "melpa-stable"])
  (auto-compile . [(1 2 1) ((cl-lib (0 2)) (packed (0 3 4))) "automatically compile Emacs Lisp libraries" single ((:url . "http://tarsius.github.com/auto-compile") (:keywords "compile" "convenience" "lisp")) "melpa-stable"])
  (auto-complete . [(1 4 0) ((popup (0 5 0))) "Auto Completion for GNU Emacs" tar nil "melpa-stable"])
  (auto-complete-clang-async . [(0 5) nil "Auto Completion source for clang for GNU Emacs" single ((:keywords "completion" "convenience")) "melpa-stable"])
  (auto-complete-exuberant-ctags . [(0 0 7) ((auto-complete (1 4 0))) "Exuberant ctags auto-complete.el source" single ((:url . "http://code.101000lab.org") (:keywords "anto-complete" "exuberant ctags")) "melpa-stable"])
  (auto-complete-sage . [(0 0 1) ((auto-complete (1 4 0)) (sage-shell-mode (0 0 1))) "An auto-complete source for sage-shell-mode." single ((:url . "https://github.com/stakemori/auto-complete-sage") (:keywords "sage" "math" "auto-complete")) "melpa-stable"])
  (auto-dictionary . [(1 1) nil "automatic dictionary switcher for flyspell" single ((:url . "http://nschum.de/src/emacs/auto-dictionary/") (:keywords "wp")) "melpa-stable"])
  (auto-indent-mode . [(0 126) nil "Auto indent Minor mode" tar ((:url . "https://github.com/mlf176f2/auto-indent-mode.el/") (:keywords "auto" "indentation")) "melpa-stable"])
  (auto-shell-command . [(1 0 0) ((deferred (20130312)) (popwin (20130329))) "Run the shell command asynchronously that you specified when you save the file." single ((:keywords "shell" "save" "async" "deferred" "auto")) "melpa-stable"])
  (autopair . [(0 6 1) ((cl-lib (0 3))) "Automagically pair braces and quotes like TextMate" single ((:url . "http://autopair.googlecode.com") (:keywords "convenience" "emulations")) "melpa-stable"])
  (babel . [(1 4) nil "interface to web translation services such as Babelfish" single ((:keywords "translation" "web")) "melpa-stable"])
  (back-button . [(0 6 6) ((nav-flash (1 0 0)) (smartrep (0 0 3)) (ucs-utils (0 7 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Visual navigation through mark rings" single ((:url . "http://github.com/rolandwalker/back-button") (:keywords "convenience" "navigation" "interface")) "melpa-stable"])
  (bbcode-mode . [(2 0 0) nil "Major mode for writing BBCode markup" single ((:url . "https://github.com/ejmr/bbcode-mode")) "melpa-stable"])
  (bbdb-vcard . [(0 3) nil "vCard import/export for BBDB" tar ((:url . "http://github.com/trebb/bbdb-vcard") (:keywords "data" "calendar" "mail" "news")) "melpa-stable"])
  (bbdb2erc . [(0 1 3) ((bbdb (3 0))) "make bbdb show if pal is online with ERC, click i to chat" single ((:keywords "irc" "contacts" "chat" "client" "internet")) "melpa-stable"])
  (beeminder . [(1 0 0) nil "Emacs interface for Beeminder" single ((:keywords "beeminder")) "melpa-stable"])
  (bind-key . [(20140601) nil "A simple way to manage personal keybindings" single ((:url . "https://github.com/jwiegley/use-package") (:keywords "keys" "keybinding" "config" "dotemacs")) "melpa-stable"])
  (birds-of-paradise-plus-theme . [(0 1 1) nil "A brown/orange light-on-dark theme for Emacs 24 (deftheme)." single ((:url . "https://github.com/jimeh/birds-of-paradise-plus-theme.el") (:keywords "themes")) "melpa-stable"])
  (bog . [(0 6 0) ((org (8 0 0)) (dash (2 5 0))) "Extensions for research notes in Org mode" single ((:url . "https://github.com/kyleam/bog") (:keywords "bibtex" "org-mode")) "melpa-stable"])
  (boon . [(0 1) ((emacs (24 3)) (expand-region (0 10 0))) "Ergonomic Command Mode for Emacs." tar nil "melpa-stable"])
  (browse-kill-ring . [(2 0 0) nil "interactively insert items from kill-ring" single ((:url . "https://github.com/browse-kill-ring/browse-kill-ring") (:keywords "convenience")) "melpa-stable"])
  (browse-url-dwim . [(0 6 8) ((string-utils (0 3 2))) "Context-sensitive external browse URL or Internet search" single ((:url . "http://github.com/rolandwalker/browse-url-dwim") (:keywords "hypermedia")) "melpa-stable"])
  (buffer-move . [(0 6 1) nil "" single ((:url . "https://github.com/lukhas/buffer-move") (:keywords "lisp" "convenience")) "melpa-stable"])
  (buffer-utils . [(0 1 0) nil "Buffer-manipulation utility functions" single ((:url . "http://github.com/rolandwalker/buffer-utils") (:keywords "extensions")) "melpa-stable"])
  (bufshow . [(0 1 0) nil "No description available." single nil "melpa-stable"])
  (bug-reference-github . [(0 2 0) nil "Automatically set `bug-reference-url-format' in Github repositories." single ((:url . "https://github.com/arnested/bug-reference-github") (:keywords "programming" "tools")) "melpa-stable"])
  (bundler . [(1 1 0) ((inf-ruby (2 1))) "Interact with Bundler from Emacs" single ((:url . "http://github.com/tobiassvn/") (:keywords "bundler" "ruby")) "melpa-stable"])
  (butler . [(0 2 3) ((deferred (3 1)) (json (1 2)) (emacs (24))) "Emacs client for Jenkins" tar nil "melpa-stable"])
  (button-lock . [(1 0 0) nil "Clickable text defined by regular expression" single ((:url . "http://github.com/rolandwalker/button-lock") (:keywords "mouse" "button" "hypermedia" "extensions")) "melpa-stable"])
  (cacoo . [(2 1 2) ((concurrent (0 3 1))) "Minor mode for Cacoo : http://cacoo.com" tar nil "melpa-stable"])
  (cake . [(1 4 3) ((cake-inflector (1 1 0)) (historyf (0 0 8)) (anything (1 3 9))) "CakePHP Minor Mode" tar ((:url . "https://github.com/k1LoW/emacs-cake")) "melpa-stable"])
  (cake-inflector . [(1 1 1) ((s (1 9 0))) "Lazy porting CakePHP infrector.php to el" single ((:url . "https://github.com/k1LoW/emacs-cake-inflector")) "melpa-stable"])
  (cake2 . [(2 1 0) ((dash (2 6 0)) (s (1 9 0)) (f (0 16 2)) (ht (2 0)) (json (1 2)) (cake-inflector (1 1 0)) (historyf (0 0 8)) (anything (1 3 9))) "CakePHP2 Minor Mode" tar ((:url . "http://code.101000lab.org")) "melpa-stable"])
  (calfw . [(1 3) nil "Calendar view framework on Emacs" tar ((:keywords "calendar")) "melpa-stable"])
  (cask . [(0 7 2) ((s (1 8 0)) (dash (2 2 0)) (f (0 16 0)) (epl (0 5)) (shut-up (0 1 0)) (cl-lib (0 3)) (package-build (0 1))) "Cask: Project management for Emacs package development" tar ((:url . "http://github.com/cask/cask") (:keywords "speed" "convenience")) "melpa-stable"])
  (cdlatex . [(4 7) nil "Fast input methods for LaTeX environments and math" single ((:keywords "tex")) "melpa-stable"])
  (cerbere . [(0 1 0) ((s (1 9 0)) (f (0 16 0)) (go-mode (20140409)) (pkg-info (0 5))) "Unit testing in Emacs for several programming languages" tar ((:url . "https://github.com/nlamirault/cerbere") (:keywords "python" "go" "php" "tests" "tdd")) "melpa-stable"])
  (cfengine-code-style . [(3 6 2) nil "C code style for CFEngine project." single ((:url . "https://github.com/cfengine/core")) "melpa-stable"])
  (charmap . [(0 0 1) nil "Unicode table for Emacs" single ((:url . "https://github.com/lateau/charmap") (:keywords "unicode" "character" "ucs")) "melpa-stable"])
  (cider . [(0 7 0) ((clojure-mode (2 0 0)) (cl-lib (0 3)) (dash (2 4 1)) (pkg-info (0 4)) (emacs (24))) "Clojure Integrated Development Environment and REPL" tar ((:url . "http://www.github.com/clojure-emacs/cider") (:keywords "languages" "clojure" "cider")) "melpa-stable"])
  (cl-lib-highlight . [(1 0 0) ((cl-lib (0 3))) "full cl-lib font-lock highlighting" single ((:url . "https://github.com/skeeto/cl-lib-highlight")) "melpa-stable"])
  (clips-mode . [(0 7) nil "Major mode for editing CLIPS code and REPL" tar nil "melpa-stable"])
  (clj-refactor . [(0 12 0) ((s (1 8 0)) (dash (2 4 0)) (yasnippet (0 6 1)) (paredit (22)) (multiple-cursors (1 2 2))) "A collection of clojure refactoring functions" single ((:keywords "convenience")) "melpa-stable"])
  (clojure-cheatsheet . [(0 2 2) ((helm (1 5 3)) (cider (0 1 8))) "The Clojure Cheatsheet for Emacs" single ((:url . "https://github.com/krisajenkins/clojure-cheatsheet") (:keywords "clojure" "nrepl" "cheatsheet" "helm")) "melpa-stable"])
  (clojure-mode . [(3 0 0) ((emacs (24 1))) "Major mode for Clojure code" single ((:url . "http://github.com/clojure-emacs/clojure-mode") (:keywords "languages" "clojure" "clojurescript" "lisp")) "melpa-stable"])
  (clojure-mode-extra-font-locking . [(3 0 0) ((clojure-mode (3 0))) "Extra font-locking for Clojure mode" single ((:url . "http://github.com/clojure-emacs/clojure-mode") (:keywords "languages" "lisp")) "melpa-stable"])
  (clojure-snippets . [(1 0 0) ((yasnippet (0 8 0))) "Yasnippets for clojure" tar nil "melpa-stable"])
  (clojure-test-mode . [(3 0 0) ((clojure-mode (1 7)) (cider (0 4 0))) "Minor mode for Clojure tests" single ((:url . "http://emacswiki.org/cgi-bin/wiki/ClojureTestMode") (:keywords "languages" "lisp" "test")) "melpa-stable"])
  (cm-mode . [(1 1) nil "Minor mode for CriticMarkup" single ((:keywords "text" "markdown")) "melpa-stable"])
  (cmake-ide . [(0 2) nil "No description available." single nil "melpa-stable"])
  (cmake-mode . [(3 0 2) nil "major-mode for editing CMake sources" single nil "melpa-stable"])
  (codic . [(0 2) ((cl-lib (0 5))) "Search Codic (codic.jp) naming dictionaries" tar ((:url . "https://github.com/syohex/emacs-codic")) "melpa-stable"])
  (coffee-mode . [(0 5 6) ((emacs (24 1)) (cl-lib (0 5))) "Major mode to edit CoffeeScript files in Emacs" single ((:url . "http://github.com/defunkt/coffee-mode") (:keywords "coffeescript" "major" "mode")) "melpa-stable"])
  (color-theme-sanityinc-solarized . [(2 27) nil "A version of Ethan Schoonover's Solarized themes" tar nil "melpa-stable"])
  (color-theme-sanityinc-tomorrow . [(1 14) nil "A version of Chris Kempson's various Tomorrow themes" tar nil "melpa-stable"])
  (colorsarenice-theme . [(1 0 16) ((emacs (24))) "A colorful color theme." tar nil "melpa-stable"])
  (commander . [(0 7 0) ((s (1 6 0)) (dash (2 0 0)) (cl-lib (0 3)) (f (0 6 1))) "Emacs command line parser" single ((:url . "http://github.com/rejeep/commander.el") (:keywords "cli" "argv")) "melpa-stable"])
  (company . [(0 8 7) ((emacs (24 1)) (cl-lib (0 5))) "Modular text completion framework" tar ((:url . "http://company-mode.github.io/") (:keywords "abbrev" "convenience" "matching")) "melpa-stable"])
  (company-ghc . [(0 1 8) ((cl-lib (0 5)) (company (0 8 0)) (ghc (4 1 1)) (emacs (24))) "company-mode ghc-mod backend" single ((:url . "https://github.com/iquiw/company-ghc") (:keywords "haskell" "completion")) "melpa-stable"])
  (company-tern . [(0 2 0) ((company (0 8 0)) (tern (0 0 1)) (dash (2 8 0)) (dash-functional (2 8 0)) (s (1 9 0)) (cl-lib (0 5 0))) "Tern backend for company-mode" single ((:url . "https://github.com/proofit404/company-tern")) "melpa-stable"])
  (concurrent . [(0 3 2) ((deferred (0 3 1))) "Concurrent utility functions for emacs lisp" single ((:url . "https://github.com/kiwanami/emacs-deferred/blob/master/README-concurrent.markdown") (:keywords "deferred" "async" "concurrent")) "melpa-stable"])
  (conkeror-minor-mode . [(1 6 1) nil "Mode for editing conkeror javascript files." single ((:url . "http://github.com/BruceConnor/conkeror-minor-mode") (:keywords "programming" "tools")) "melpa-stable"])
  (connection . [(1 10) nil "No description available." single nil "melpa-stable"])
  (cperl-mode . [(6 2) nil "Perl code editing commands for Emacs" single ((:keywords "languages" "perl")) "melpa-stable"])
  (cpputils-cmake . [(0 4 22) nil "Easy real time C++ syntax check and intellisense if you use CMake" tar nil "melpa-stable"])
  (creds . [(0 0 6 1) ((s (1 9 0)) (dash (2 5 0))) "A parser credentials file library (not limited to credentials entries)" tar nil "melpa-stable"])
  (crm-custom . [(0 4) nil "Alternate `completing-read-multiple' that uses `completing-read'" single ((:url . "https://github.com/DarwinAwardWinner") (:keywords "completion" "minibuffer" "multiple elements")) "melpa-stable"])
  (cryptol-mode . [(0 1 0) nil "Cryptol major mode for Emacs" single ((:url . "http://github.com/thoughtpolice/cryptol-mode") (:keywords "cryptol" "cryptography")) "melpa-stable"])
  (ctable . [(0 1 2) nil "Table component for Emacs Lisp" single ((:url . "https://github.com/kiwanami/emacs-ctable") (:keywords "table")) "melpa-stable"])
  (ctags . [(1 1 1) nil "No description available." single nil "melpa-stable"])
  (ctags-update . [(0 2 0) nil "(auto) update TAGS in parent directory using exuberant-ctags" single ((:url . "https://github.com/jixiuf/helm-etags-plus") (:keywords "exuberant-ctags" "etags")) "melpa-stable"])
  (cuda-mode . [(1 0 0) nil "NVIDIA CUDA Major Mode" single ((:keywords "c" "languages")) "melpa-stable"])
  (cyberpunk-theme . [(1 10) nil "Cyberpunk Color Theme" single ((:keywords "color" "theme" "cyberpunk")) "melpa-stable"])
  (cython-mode . [(0 21 2 2) nil "Major mode for editing Cython files" single nil "melpa-stable"])
  (d-mode . [(2 0 6) nil "D Programming Language mode for (X)Emacs" single ((:keywords "d" "programming" "language" "emacs" "cc-mode")) "melpa-stable"])
  (dart-mode . [(0 9) nil "Major mode for editing Dart files" single ((:url . "http://code.google.com/p/dart-mode") (:keywords "language")) "melpa-stable"])
  (dash . [(2 9 0) nil "A modern list library for Emacs" single ((:keywords "lists")) "melpa-stable"])
  (dash-functional . [(2 9 0) ((dash (2 0 0)) (emacs (24))) "Collection of useful combinators for Emacs Lisp" single ((:keywords "lisp" "functions" "combinators")) "melpa-stable"])
  (dedicated . [(1 0 0) nil "A very simple minor mode for dedicated buffers" single ((:keywords "dedicated" "buffer")) "melpa-stable"])
  (deferred . [(0 3 2) nil "Simple asynchronous functions for emacs lisp" single ((:url . "https://github.com/kiwanami/emacs-deferred") (:keywords "deferred" "async")) "melpa-stable"])
  (deft . [(0 5 1) nil "quickly browse, filter, and edit plain text notes" single ((:url . "http://jblevins.org/projects/deft/") (:keywords "plain text" "notes" "simplenote" "notational velocity")) "melpa-stable"])
  (demangle-mode . [(1 0) ((emacs (24)) (cl-lib (0 1))) "Automatically demangle C++ symbols" single ((:keywords "c" "tools")) "melpa-stable"])
  (desktop-registry . [(1 2 0) nil "Keep a central registry of desktop files" single ((:url . "http://projects.ryuslash.org/desktop-registry/") (:keywords "convenience")) "melpa-stable"])
  (dictionary . [(1 10) nil "No description available." single nil "melpa-stable"])
  (digistar-mode . [(0 4) nil "major mode for Digistar scripts" single ((:keywords "languages")) "melpa-stable"])
  (dim-autoload . [(1 1 2) nil "dim complete autoload cookie lines" single ((:url . "http://github.com/tarsius/dim-autoload") (:keywords "convenience")) "melpa-stable"])
  (diminish . [(0 44) nil "Diminished modes are minor modes with no modeline display" single ((:url . "http://www.eskimo.com/~seldon") (:keywords "extensions" "diminish" "minor" "codeprose")) "melpa-stable"])
  (dired-efap . [(0 8) nil "Edit Filename At Point in a dired buffer" single ((:keywords "dired" "environment" "files" "renaming")) "melpa-stable"])
  (dired-k . [(0 12) ((cl-lib (0 5)) (emacs (24))) "highlight dired buffer by file size, modified time, git status" tar ((:url . "https://github.com/syohex/emacs-dired-k")) "melpa-stable"])
  (discover . [(0 3) ((makey (0 3))) "discover more of Emacs" single nil "melpa-stable"])
  (dispass . [(1 1 2) nil "Emacs wrapper for DisPass" single ((:url . "http://projects.ryuslash.org/dispass.el/") (:keywords "processes")) "melpa-stable"])
  (drag-stuff . [(0 1 0) nil "Drag stuff (lines, words, region, etc...) around" tar nil "melpa-stable"])
  (drupal-mode . [(0 5 0) ((php-mode (1 5 0))) "Advanced minor mode for Drupal development" tar ((:url . "https://github.com/arnested/drupal-mode") (:keywords "programming" "php" "drupal")) "melpa-stable"])
  (drupal-spell . [(0 2 2) nil "Aspell extra dictionary for Drupal" tar ((:url . "https://github.com/arnested/drupal-spell") (:keywords "wp")) "melpa-stable"])
  (ducpel . [(0 1) ((cl-lib (0 5))) "Logic game with sokoban elements" tar ((:url . "https://github.com/alezost/ducpel") (:keywords "games")) "melpa-stable"])
  (dvorak-mode . [(1 0 0) nil "Switch to dvorak layout easily" single ((:url . "https://github.com/proofit404/dvorak-mode")) "melpa-stable"])
  (dynamic-fonts . [(0 6 4) ((font-utils (0 7 0)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Set faces based on available fonts" single ((:url . "http://github.com/rolandwalker/dynamic-fonts") (:keywords "faces" "frames")) "melpa-stable"])
  (e2wm . [(1 3) nil "simple window manager for emacs" tar ((:keywords "tools" "window manager")) "melpa-stable"])
  (e2wm-R . [(0 4) ((e2wm (1 2))) "some e2wm plugin and perspective for GNU R" single ((:keywords "window manager" "convenience" "e2wm")) "melpa-stable"])
  (easy-kill . [(0 9 3) ((emacs (24)) (cl-lib (0 5))) "kill & mark things easily" tar ((:url . "https://github.com/leoliu/easy-kill") (:keywords "killing" "convenience")) "melpa-stable"])
  (easy-kill-extras . [(0 9 3) ((easy-kill (0 9 4))) "Extra functions for easy-kill." single ((:url . "https://github.com/knu/easy-kill-extras.el") (:keywords "killing" "convenience")) "melpa-stable"])
  (ebib . [(1 15 6) nil "a BibTeX database manager" tar ((:keywords "text" "bibtex")) "melpa-stable"])
  (ecb . [(2 -3 24) nil "a code browser for Emacs" tar ((:keywords "browser" "code" "programming" "tools")) "melpa-stable"])
  (ecukes . [(0 6 15) ((commander (0 6 1)) (espuds (0 2 2)) (ansi (0 3 0)) (dash (2 2 0)) (s (1 8 0)) (f (0 11 0))) "Cucumber for Emacs." tar nil "melpa-stable"])
  (edbi . [(0 1 2) ((concurrent (0 3 1)) (ctable (0 1 1)) (epc (0 1 1))) "Emacs Database Interface" tar nil "melpa-stable"])
  (edit-list . [(0 3) nil "edit a single list" single ((:url . "http://mwolson.org/static/dist/elisp/edit-list.el")) "melpa-stable"])
  (edit-server . [(1 13) nil "server that responds to edit requests from Chrome" single ((:url . "https://github.com/stsquad/emacs_chrome")) "melpa-stable"])
  (editorconfig . [(0 3) nil "EditorConfig Emacs extension" single ((:url . "http://github.com/editorconfig/editorconfig-emacs#readme")) "melpa-stable"])
  (edts . [(0 1 0) nil "No description available." tar nil "melpa-stable"])
  (egison-mode . [(3 3 13) nil "Egison editing mode" single ((:url . "https://github.com/egisatoshi/egison3/blob/master/elisp/egison-mode.el")) "melpa-stable"])
  (eide . [(2 0 0) nil "Emacs-IDE" tar ((:url . "http://emacs-ide.tuxfamily.org/")) "melpa-stable"])
  (ein . [(0 2 0) ((websocket (0 9)) (auto-complete (1 4))) "Emacs IPython Notebook" tar nil "melpa-stable"])
  (el-autoyas . [(0 5) nil "Automatically create Emacs-Lisp Yasnippets" tar ((:url . "https://github.com/mlf176f2/el-autoyas.el") (:keywords "emacs" "lisp" "mode" "yasnippet")) "melpa-stable"])
  (el-get . [(5 1) nil "Manage the external elisp bits and pieces you depend upon" tar ((:url . "http://www.emacswiki.org/emacs/el-get") (:keywords "emacs" "package" "elisp" "install" "elpa" "git" "git-svn" "bzr" "cvs" "svn" "darcs" "hg" "apt-get" "fink" "pacman" "http" "http-tar" "emacswiki")) "melpa-stable"])
  (el-mock . [(1 25 0) nil "Tiny Mock and Stub framework in Emacs Lisp" single ((:url . "http://github.com/rejeep/el-mock.el") (:keywords "lisp" "testing" "unittest")) "melpa-stable"])
  (el-spice . [(0 2 2) ((thingatpt+ (0))) "Extra spice for emacs lisp programming" tar ((:url . "https://github.com/vedang/el-spice") (:keywords "configuration")) "melpa-stable"])
  (el-x . [(0 3 0) nil "main entry point for el-x package" tar ((:keywords "lisp")) "melpa-stable"])
  (elfeed . [(1 1 2) ((emacs (24 1))) "an Emacs Atom/RSS feed reader" tar nil "melpa-stable"])
  (elfeed-web . [(1 1 2) ((simple-httpd (1 4 3)) (elfeed (1 0 1)) (emacs (24 1))) "web interface to Elfeed" tar nil "melpa-stable"])
  (elisp-slime-nav . [(0 7) ((cl-lib (0 2))) "Make M-. and M-, work in elisp like they do in slime" single ((:url . "https://github.com/purcell/elisp-slime-nav") (:keywords "navigation" "slime" "elisp" "emacs-lisp")) "melpa-stable"])
  (elixir-mix . [(1 0 0) nil "Emacs integration for Elixir's mix" single ((:url . "http://github.com/tonini/elixir-mix.el") (:keywords "elixir" "mix" "elixir-mix")) "melpa-stable"])
  (elixir-mode . [(2 0 2) nil "Major mode for editing Elixir files" tar ((:url . "https://github.com/elixir-lang/emacs-elixir") (:keywords "languages" "elixir")) "melpa-stable"])
  (elmacro . [(0 3 0) ((s (1 9 0)) (dash (1 5 0)) (cl-lib (0 5))) "Convert keyboard macros to elisp" single ((:url . "https://github.com/Silex/elmacro") (:keywords "macro" "elisp" "convenience")) "melpa-stable"])
  (elmine . [(0 3) nil "No description available." single nil "melpa-stable"])
  (elpa-audit . [(0 4) nil "Handy functions for inspecting and comparing package archives" single ((:url . "https://github.com/purcell/elpa-audit") (:keywords "maint")) "melpa-stable"])
  (elpa-mirror . [(1 1 4) nil "ELPA mirror from locally installed packages is easy" tar nil "melpa-stable"])
  (elpy . [(1 6 0) ((company (0 8 2)) (find-file-in-project (3 3)) (highlight-indentation (0 5 0)) (idomenu (0 1)) (pyvenv (1 3)) (yasnippet (0 8 0))) "Emacs Python Development Environment" tar nil "melpa-stable"])
  (elscreen-mew . [(1 0 1) ((elscreen (20120413 807))) "ElScreen Add-On for Mew" single ((:url . "https://github.com/masutaka/elscreen-mew")) "melpa-stable"])
  (elx . [(0 9 6) ((emacs (24 3 50))) "extract information from Emacs Lisp libraries" single ((:url . "https://github.com/tarsius/elx") (:keywords "docs" "libraries" "packages")) "melpa-stable"])
  (emacs-eclim . [(0 2) nil "No description available." tar nil "melpa-stable"])
  (emacs-setup . [(1 0) nil "Package for maintaining your emacs configuration. Clean up your .emacs!" tar nil "melpa-stable"])
  (emacsc . [(1 2 20131027) nil "helper for emacsc(1)" tar ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) "melpa-stable"])
  (emacsql . [(1 0 2) ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) "high-level SQL database front-end" tar ((:url . "https://github.com/skeeto/emacsql")) "melpa-stable"])
  (emamux . [(0 13) ((emacs (24)) (cl-lib (0 5))) "Interact with tmux" single ((:url . "https://github.com/syohex/emacs-emamux")) "melpa-stable"])
  (emmet-mode . [(1 0 8) nil "Unofficial Emmet's support for emacs" single ((:url . "https://github.com/smihica/emmet-mode") (:keywords "convenience")) "melpa-stable"])
  (enotify . [(0 1 3) nil "No description available." tar nil "melpa-stable"])
  (epc . [(0 1 0) ((concurrent (0 3 1)) (ctable (0 1 0))) "A RPC stack for the Emacs Lisp" tar ((:url . "https://github.com/kiwanami/emacs-epc") (:keywords "lisp" "rpc")) "melpa-stable"])
  (epl . [(0 7) ((cl-lib (0 3))) "Emacs Package Library" single ((:url . "http://github.com/cask/epl") (:keywords "convenience")) "melpa-stable"])
  (erc-crypt . [(1 0) nil "Symmetric Encryption for ERC" single ((:keywords "application")) "melpa-stable"])
  (erc-hl-nicks . [(1 3 0) nil "ERC nick highlighter that ignores uniquifying chars when colorizing" single ((:url . "http://www.github.com/leathekd/erc-hl-nicks")) "melpa-stable"])
  (ercn . [(1 0 2) nil "Flexible ERC notifications" single ((:url . "http://www.github.com/leathekd/ercn")) "melpa-stable"])
  (ergoemacs-mode . [(5 14 7 3) ((emacs (24 1)) (undo-tree (0 6 5))) "Emacs mode based on common modern interface and ergonomics." tar ((:url . "https://github.com/ergoemacs/ergoemacs-mode") (:keywords "convenience")) "melpa-stable"])
  (ert-async . [(0 1 1) nil "Async support for ERT" single ((:url . "http://github.com/rejeep/ert-async.el") (:keywords "test")) "melpa-stable"])
  (ert-junit . [(0 1 1) ((ert (0))) "JUnit XML reports from ert results" single ((:url . "http://bitbucket.org/olanilsson/ert-junit") (:keywords "tools" "test" "unittest" "ert")) "melpa-stable"])
  (ert-runner . [(0 6 3) ((s (1 6 1)) (dash (1 8 0)) (f (0 10 0)) (commander (0 2 0)) (ansi (0 1 0)) (shut-up (0 1 0))) "Opinionated Ert testing workflow" tar ((:url . "http://github.com/rejeep/ert-runner.el") (:keywords "test")) "melpa-stable"])
  (es-mode . [(3 1 0) nil "A major mode for editing Elasticsearch queries" tar ((:url . "http://www.github.com/dakrone/es-mode") (:keywords "elasticsearch")) "melpa-stable"])
  (es-windows . [(0 3) ((cl-lib (0 3)) (emacs (24))) "Window-management utilities" single ((:url . "https://github.com/sabof/es-windows")) "melpa-stable"])
  (espuds . [(0 2 6) ((s (1 7 0)) (dash (2 2 0)) (noflet (0 0 10)) (f (0 12 1))) "Ecukes step definitions" single ((:url . "http://github.com/ecukes/espuds") (:keywords "test")) "melpa-stable"])
  (ess . [(14 9) nil "No description available." tar nil "melpa-stable"])
  (ess-smart-underscore . [(0 79) nil "Ess Smart Underscore" tar ((:url . "http://github.com/mlf176f2/ess-smart-underscore.el") (:keywords "ess" "underscore")) "melpa-stable"])
  (esup . [(0 4) nil "the Emacs StartUp Profiler (ESUP)" single ((:url . "http://github.com/jschaf/esup") (:keywords "emacs-lisp" "elisp" "profile" "startup")) "melpa-stable"])
  (eval-sexp-fu . [(0 4 0) nil "Tiny functionality enhancements for evaluating sexps." single ((:keywords "lisp" "highlight" "convenience")) "melpa-stable"])
  (evil . [(1 0 9) ((undo-tree (0 6 3)) (goto-last-change (1 2))) "Extensible Vi layer for Emacs." tar nil "melpa-stable"])
  (evil-args . [(1 0) ((evil (1 0 8))) "Motions and text objects for delimited arguments in Evil." single ((:url . "http://github.com/wcsmith/evil-args") (:keywords "evil" "vim-emulation")) "melpa-stable"])
  (evil-escape . [(1 0) ((emacs (24)) (evil (1 0 9)) (key-chord (0 6))) "Customizable key sequence to escape from insert state and everything else." single ((:url . "https://github.com/syl20bnr/evil-escape") (:keywords "convenience" "editing" "evil")) "melpa-stable"])
  (evil-jumper . [(0 0 1) ((evil (0))) "Jump like vimmers do!" single ((:url . "https://github.com/bling/evil-jumper") (:keywords "evil" "vim" "jumplist" "jump" "list")) "melpa-stable"])
  (evil-leader . [(0 4 3) ((evil (0))) "let there be <leader>" single ((:url . "http://github.com/cofi/evil-leader") (:keywords "evil" "vim-emulation" "leader")) "melpa-stable"])
  (evil-matchit . [(1 4 0) nil "Vim matchit ported into Emacs (requires EVIL)" tar nil "melpa-stable"])
  (evil-nerd-commenter . [(1 5 10) nil "Comment/uncomment lines efficiently. Like Nerd Commenter in Vim" tar nil "melpa-stable"])
  (evil-numbers . [(0 4) nil "increment/decrement numbers like in vim" single ((:url . "http://github.com/cofi/evil-numbers") (:keywords "numbers" "increment" "decrement" "octal" "hex" "binary")) "melpa-stable"])
  (evil-org . [(0 1 1) ((evil (0)) (org (0))) "evil keybindings for org-mode" single ((:url . "https://github.com/edwtjo/evil-org-mode.git") (:keywords "evil" "vim-emulation" "org-mode" "key-bindings" "presets")) "melpa-stable"])
  (evil-search-highlight-persist . [(1 1) nil "Persistent highlights after search" single nil "melpa-stable"])
  (evil-space . [(0 0 2) ((evil (1 0 0))) "Repeat motion in Evil. Correct the behaviour of what SPC should do." single ((:url . "http://github.com/linktohack/evil-space") (:keywords "space" "repeat" "motion")) "melpa-stable"])
  (evil-visualstar . [(0 0 1) ((evil (0))) "Starts a * or # search from the visual selection" single ((:url . "https://github.com/bling/evil-visualstar") (:keywords "evil" "vim" "visualstar")) "melpa-stable"])
  (evm . [(0 4 2) ((dash (2 3 0)) (f (0 13 0))) "Emacs Version Manager" single ((:url . "http://github.com/rejeep/evm")) "melpa-stable"])
  (eww-lnum . [(1 0) nil "Operations using link numbers" single ((:url . "https://github.com/m00natic/eww-lnum") (:keywords "eww" "browse" "conkeror")) "melpa-stable"])
  (exec-path-from-shell . [(1 8) nil "Get environment variables such as $PATH from the shell" single ((:url . "https://github.com/purcell/exec-path-from-shell") (:keywords "environment")) "melpa-stable"])
  (expand-region . [(0 10 0) nil "Increase selected region by semantic units." tar nil "melpa-stable"])
  (express . [(0 6 0) ((string-utils (0 3 2))) "Alternatives to `message'" single ((:url . "http://github.com/rolandwalker/express") (:keywords "extensions" "message" "interface")) "melpa-stable"])
  (extend-dnd . [(0 5) nil "R drag and Drop" tar ((:url . "https://github.com/mlf176f2/extend-dnd") (:keywords "extend" "drag and drop")) "melpa-stable"])
  (eyebrowse . [(0 3 2) ((dash (2 7 0))) "Easy window config switching" single ((:url . "https://github.com/wasamasa/eyebrowse") (:keywords "convenience")) "melpa-stable"])
  (f . [(0 17 1) ((s (1 7 0)) (dash (2 2 0))) "Modern API for working with files and directories" single ((:url . "http://github.com/rejeep/f.el") (:keywords "files" "directories")) "melpa-stable"])
  (fabric . [(0 2 0) nil "Launch Fabric using Emacs" tar ((:url . "https://github.com/nlamirault/fabric.el") (:keywords "python" "fabric")) "melpa-stable"])
  (factlog . [(0 0 1) nil "File activity logger" single nil "melpa-stable"])
  (fancy-battery . [(0 2) ((emacs (24 1))) "Fancy battery display" single ((:url . "https://github.com/lunaryorn/fancy-battery.el") (:keywords "convenience" "tools" "hardware")) "melpa-stable"])
  (fancy-narrow . [(0 9 4) nil "narrow-to-region with more eye candy." single ((:url . "http://github.com/Bruce-Connor/fancy-narrow-region") (:keywords "faces" "convenience")) "melpa-stable"])
  (fasm-mode . [(0 1 10) nil "Fasm major mode" single ((:url . "https://github.com/Fanael/fasm-mode")) "melpa-stable"])
  (fastnav . [(1 0 7) nil "Fast navigation and editing routines." single ((:keywords "nav" "fast" "fastnav" "navigation")) "melpa-stable"])
  (fill-column-indicator . [(1 81) nil "Graphically indicate the fill column" tar ((:keywords "convenience")) "melpa-stable"])
  (finalize . [(1 0 0) ((emacs (24 1)) (cl-lib (0 3)) (eieio (1 4))) "finalizers for Emacs Lisp" tar nil "melpa-stable"])
  (find-file-in-project . [(3 3) nil "Find files in a project quickly." single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/FindFileInProject") (:keywords "project" "convenience")) "melpa-stable"])
  (find-file-in-repository . [(1 2) nil "Quickly find files in a git, mercurial or other repository" single ((:url . "https://github.com/hoffstaetter/find-file-in-repository") (:keywords "files" "convenience" "repository" "project" "source control")) "melpa-stable"])
  (fiplr . [(0 2 4) ((grizzl (0 1 0))) "Fuzzy Search for Files in Projects" tar nil "melpa-stable"])
  (fixmee . [(0 8 4) ((button-lock (1 0 0)) (nav-flash (1 0 0)) (back-button (0 6 0)) (smartrep (0 0 3)) (string-utils (0 3 2)) (tabulated-list (0))) "Quickly navigate to FIXME notices in code" single ((:url . "http://github.com/rolandwalker/fixmee") (:keywords "navigation" "convenience")) "melpa-stable"])
  (floobits . [(1 5 12) ((json (1 2)) (highlight (0))) "Floobits plugin for real-time collaborative editing" tar ((:url . "http://github.com/Floobits/floobits-emacs") (:keywords "comm" "tools")) "melpa-stable"])
  (flx . [(0 5) ((cl-lib (0 3))) "fuzzy matching with good sorting" single ((:url . "https://github.com/lewang/flx")) "melpa-stable"])
  (flx-ido . [(0 5) ((flx (0 1)) (cl-lib (0 3))) "flx integration for ido" single ((:url . "https://github.com/lewang/flx")) "melpa-stable"])
  (flycheck . [(0 21) ((dash (2 4 0)) (pkg-info (0 4)) (cl-lib (0 3)) (emacs (24 1))) "Modern on-the-fly syntax checking for GNU Emacs" tar ((:url . "https://flycheck.readthedocs.org") (:keywords "convenience" "languages" "tools")) "melpa-stable"])
  (flycheck-cask . [(0 1) ((flycheck (0 14)) (dash (2 0 0)) (f (0 6 0))) "Cask support in Flycheck" single ((:url . "https://github.com/flycheck/flycheck-cask") (:keywords "tools" "convenience")) "melpa-stable"])
  (flycheck-color-mode-line . [(0 3) ((flycheck (0 15)) (dash (1 2)) (emacs (24 1))) "Change mode line color with Flycheck status" single ((:keywords "convenience" "language" "tools")) "melpa-stable"])
  (flycheck-dmd-dub . [(0 7) ((flycheck (0 17))) "Sets flycheck-dmd-include-paths from dub package information" single ((:url . "http://github.com/atilaneves/flycheck-dmd-dub") (:keywords "languages")) "melpa-stable"])
  (flycheck-haskell . [(0 5) ((flycheck (0 19 -3)) (haskell-mode (13 7)) (dash (2 4 0))) "Flycheck: Cabal projects and sandboxes" tar ((:url . "https://github.com/flycheck/flycheck-haskell") (:keywords "tools" "convenience")) "melpa-stable"])
  (flycheck-hdevtools . [(0 3) ((flycheck (0 15))) "A flycheck checker for Haskell using hdevtools" single ((:url . "https://github.com/flycheck/flycheck-hdevtools") (:keywords "convenience" "languages" "tools")) "melpa-stable"])
  (flycheck-ledger . [(0 4) ((flycheck (0 15))) "Flycheck integration for ledger files" single ((:keywords "convenience" "languages" "tools")) "melpa-stable"])
  (flymake-coffee . [(0 12) ((flymake-easy (0 1))) "A flymake handler for coffee script" single ((:url . "https://github.com/purcell/flymake-coffee")) "melpa-stable"])
  (flymake-css . [(0 3) ((flymake-easy (0 1))) "Flymake support for css using csslint" single ((:url . "https://github.com/purcell/flymake-css")) "melpa-stable"])
  (flymake-easy . [(0 10) nil "Helpers for easily building flymake checkers" single ((:url . "https://github.com/purcell/flymake-easy") (:keywords "convenience" "internal")) "melpa-stable"])
  (flymake-gjshint . [(0 0 6) nil "A flymake handler for javascript using both jshint and gjslint" single ((:keywords "flymake" "javascript" "jshint" "gjslint")) "melpa-stable"])
  (flymake-haml . [(0 8) ((flymake-easy (0 1))) "A flymake handler for haml files" single ((:url . "https://github.com/purcell/flymake-haml")) "melpa-stable"])
  (flymake-haskell-multi . [(0 3) ((flymake-easy (0 1))) "Syntax-check haskell-mode using both ghc and hlint" tar nil "melpa-stable"])
  (flymake-hlint . [(0 2) ((flymake-easy (0 1))) "A flymake handler for haskell-mode files using hlint" single ((:url . "https://github.com/purcell/flymake-hlint")) "melpa-stable"])
  (flymake-jslint . [(0 23) nil "Flymake support for javascript using jslint" single ((:url . "https://github.com/purcell/flymake-jslint")) "melpa-stable"])
  (flymake-json . [(0 1) ((flymake-easy (0 1))) "A flymake handler for json using jsonlint" single ((:url . "https://github.com/purcell/flymake-json")) "melpa-stable"])
  (flymake-perlcritic . [(1 0 3) ((flymake (0 3))) "Flymake handler for Perl to invoke Perl::Critic" tar ((:url . "https://github.com/illusori/emacs-flymake-perlcritic")) "melpa-stable"])
  (flymake-php . [(0 5) ((flymake-easy (0 1))) "A flymake handler for php-mode files" single ((:url . "https://github.com/purcell/flymake-php")) "melpa-stable"])
  (flymake-python-pyflakes . [(0 9) ((flymake-easy (0 8))) "A flymake handler for python-mode files using pyflakes (or flake8)" single ((:url . "https://github.com/purcell/flymake-python-pyflakes")) "melpa-stable"])
  (flymake-ruby . [(0 8) ((flymake-easy (0 1))) "A flymake handler for ruby-mode files" single ((:url . "https://github.com/purcell/flymake-ruby")) "melpa-stable"])
  (flymake-sass . [(0 6) ((flymake-easy (0 1))) "Flymake handler for sass files" single ((:url . "https://github.com/purcell/flymake-sass")) "melpa-stable"])
  (flymake-shell . [(0 8) ((flymake-easy (0 1))) "A flymake syntax-checker for shell scripts" single ((:url . "https://github.com/purcell/flymake-shell")) "melpa-stable"])
  (flyspell-lazy . [(0 6 6) nil "Improve flyspell responsiveness using idle timers" single ((:url . "http://github.com/rolandwalker/flyspell-lazy") (:keywords "spelling")) "melpa-stable"])
  (fm . [(1 0) nil "follow mode for compilation/output buffers" single ((:keywords "outlines")) "melpa-stable"])
  (fold-dwim . [(1 2) nil "No description available." single nil "melpa-stable"])
  (fold-dwim-org . [(0 6) ((fold-dwim (1 2))) "Fold DWIM bound to org key-strokes." single ((:url . "https://github.com/mlf176f2/fold-dwim-org") (:keywords "folding" "emacs" "org-mode")) "melpa-stable"])
  (fold-this . [(0 2 0) nil "Just fold this region please" single ((:keywords "convenience")) "melpa-stable"])
  (font-utils . [(0 7 2) ((persistent-soft (0 8 8)) (pcache (0 2 3))) "Utility functions for working with fonts" single ((:url . "http://github.com/rolandwalker/font-utils") (:keywords "extensions")) "melpa-stable"])
  (fountain-mode . [(1 3 4) ((s (1 9 0))) "Major mode for screenwriting in Fountain markup" single ((:url . "https://github.com/rnkn/fountain-mode") (:keywords "wp")) "melpa-stable"])
  (frame-restore . [(0 5) ((emacs (24 1))) "Restore Emacs frame" single ((:url . "https://github.com/lunaryorn/frame-restore.el") (:keywords "frames" "convenience")) "melpa-stable"])
  (fringe-helper . [(1 0 1) nil "helper functions for fringe bitmaps" single ((:url . "http://nschum.de/src/emacs/fringe-helper/") (:keywords "lisp")) "melpa-stable"])
  (fsharp-mode . [(1 4 1) ((auto-complete (1 4)) (popup (0 5)) (pos-tip (0 4 5)) (s (1 3 1)) (dash (1 1 0))) "F# mode for Emacs" tar nil "melpa-stable"])
  (fuel . [(0 96) nil "No description available." tar nil "melpa-stable"])
  (full-ack . [(1 0) nil "a front-end for ack" single ((:url . "http://nschum.de/src/emacs/full-ack/") (:keywords "tools" "matching")) "melpa-stable"])
  (fuzzy . [(0 1) nil "Fuzzy Matching" single ((:keywords "convenience")) "melpa-stable"])
  (fvwm-mode . [(1 6 4) nil "major mode for editing Fvwm configuration files" single ((:keywords "files")) "melpa-stable"])
  (fwb-cmds . [(0 4 0) nil "misc frame, window and buffer commands" single ((:url . "http://github.com/tarsius/fwb-cmds") (:keywords "convenience")) "melpa-stable"])
  (gather . [(1 0 5) nil "Gather string in buffer." single ((:url . "https://github.com/mhayashi1120/Emacs-gather/raw/master/gather.el") (:keywords "matching" "convenience" "tools")) "melpa-stable"])
  (geiser . [(0 6) nil "GNU Emacs and Scheme talk to each other" tar nil "melpa-stable"])
  (ggo-mode . [(20130521) nil "Gengetopt major mode" single ((:keywords "extensions" "convenience" "local")) "melpa-stable"])
  (ggtags . [(0 8 7) ((emacs (24)) (cl-lib (0 5))) "emacs frontend to GNU Global source code tagging system" single ((:url . "https://github.com/leoliu/ggtags") (:keywords "tools" "convenience")) "melpa-stable"])
  (gh . [(0 8 0) ((eieio (1 3)) (pcache (0 2 4)) (logito (0 1))) "A GitHub library for Emacs" tar nil "melpa-stable"])
  (ghc . [(5 2 1 0) nil "Sub mode for Haskell mode" tar nil "melpa-stable"])
  (gist . [(1 1 0) ((eieio (1 3)) (gh (0 7 0)) (tabulated-list (0))) "Emacs integration for gist.github.com" single ((:keywords "gist" "git" "github" "paste" "pastie" "pastebin")) "melpa-stable"])
  (git . [(0 1 1) ((s (1 7 0)) (dash (2 2 0)) (f (0 10 0))) "An Elisp API for programmatically using Git" single ((:url . "http://github.com/rejeep/git.el") (:keywords "git")) "melpa-stable"])
  (git-auto-commit-mode . [(4 2 2) nil "Emacs Minor mode to automatically commit and push" single ((:url . "http://ryuslash.org/projects/git-auto-commit-mode/") (:keywords "vc")) "melpa-stable"])
  (git-commit-mode . [(0 15 0) nil "Major mode for editing git commit messages" single ((:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git")) "melpa-stable"])
  (git-gutter+ . [(0 2) nil "Manage Git hunks straight from the buffer" single ((:url . "https://github.com/nonsequitur/git-gutter-plus")) "melpa-stable"])
  (git-gutter . [(0 78) ((cl-lib (0 5)) (emacs (24))) "Port of Sublime Text plugin GitGutter" single ((:url . "https://github.com/syohex/emacs-git-gutter")) "melpa-stable"])
  (git-gutter-fringe+ . [(0 1) ((git-gutter+ (0 1)) (fringe-helper (20130519 1641))) "Fringe version of git-gutter+.el" single ((:url . "https://github.com/nonsequitur/git-gutter-fringe-plus")) "melpa-stable"])
  (git-gutter-fringe . [(0 21) ((git-gutter (0 73)) (fringe-helper (0 1 1)) (cl-lib (0 5)) (emacs (24))) "Fringe version of git-gutter.el" single ((:url . "https://github.com/syohex/emacs-git-gutter-fringe")) "melpa-stable"])
  (git-link . [(0 0 2) nil "Get the GitHub/Bitbucket/Gitorious URL for a buffer location" single ((:url . "http://github.com/sshaw/git-link")) "melpa-stable"])
  (git-messenger . [(0 15) ((popup (0 5 0))) "Pop up last commit information of current line" single ((:url . "https://github.com/syohex/emacs-git-messenger")) "melpa-stable"])
  (git-rebase-mode . [(0 15 0) nil "Major mode for editing git rebase files" single ((:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git")) "melpa-stable"])
  (git-timemachine . [(1 9) nil "Walk through git revisions of a file" single ((:url . "https://github.com/pidu/git-timemachine") (:keywords "git")) "melpa-stable"])
  (gitattributes-mode . [(0 15 0) nil "Major mode for editing .gitattributes files" single ((:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git")) "melpa-stable"])
  (gitconfig . [(1 0 0) nil "Emacs lisp interface to work with git-config variables" single ((:keywords "git" "gitconfig" "git-config")) "melpa-stable"])
  (gitconfig-mode . [(0 15 0) nil "Major mode for editing .gitconfig files" single ((:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git")) "melpa-stable"])
  (github-clone . [(0 2) ((gh (0 7 2)) (magit (1 2 0)) (emacs (24))) "Fork and clone github repos" single ((:url . "https://github.com/dgtized/github-clone.el") (:keywords "vc" "tools")) "melpa-stable"])
  (gitignore-mode . [(0 15 0) nil "Major mode for editing .gitignore files" single ((:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git")) "melpa-stable"])
  (gitlab . [(0 1 0) ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) "Emacs client for Gitlab" tar ((:url . "https://github.com/nlamirault/emacs-gitlab") (:keywords "gitlab")) "melpa-stable"])
  (gmail-message-mode . [(1 3 2) ((ham-mode (1 0))) "A major-mode for editing gmail messages using markdown syntax." single ((:url . "http://github.com/Bruce-Connor/gmail-message-mode") (:keywords "mail" "convenience" "emulation")) "melpa-stable"])
  (gnuplot . [(0 7 0) nil "drive gnuplot from within emacs" tar ((:keywords "gnuplot" "plotting")) "melpa-stable"])
  (gnus-desktop-notify . [(1 4) ((gnus (1 0))) "Gnus Desktop Notification global minor mode" single ((:url . "http://www.thregr.org/~wavexx/hacks/gnus-desktop-notify/")) "melpa-stable"])
  (go-direx . [(0 3) ((direx (0 1 -3)) (cl-lib (0 5))) "Tree style source code viewer for Go language" single ((:url . "https://github.com/syohex/emacs-go-direx")) "melpa-stable"])
  (go-eldoc . [(0 19) ((go-mode (0)) (cl-lib (0 5))) "eldoc for go-mode" single ((:url . "https://github.com/syohex/emacs-go-eldoc")) "melpa-stable"])
  (golden-ratio . [(0 0 4) nil "Automatic resizing of Emacs windows to the golden ratio" single ((:keywords "window" "resizing")) "melpa-stable"])
  (google-this . [(1 9) ((emacs (24 1))) "A set of functions and bindings to google under point." single ((:url . "http://github.com/Bruce-Connor/emacs-google-this") (:keywords "convenience" "hypermedia")) "melpa-stable"])
  (google-translate . [(0 10 5) nil "Emacs interface to Google Translate." tar nil "melpa-stable"])
  (gotest . [(0 2 0) ((s (1 9 0)) (f (0 11 0)) (go-mode (20131222))) "Launch GO unit tests" single ((:url . "https://github.com/nlamirault/gotest.el") (:keywords "go" "tests")) "melpa-stable"])
  (gotham-theme . [(1 0) nil "A very dark Emacs color theme." single ((:url . "https://github.com/wasamasa/gotham-theme")) "melpa-stable"])
  (goto-gem . [(1 2) ((s (1 9 0))) "Open dired in gem directory" single ((:keywords "gemfile" "convenience")) "melpa-stable"])
  (gradle-mode . [(0 5 4) ((s (1 8 0))) "Gradle integration with Emacs' compile" single ((:url . "http://github.com/jacobono/emacs-gradle-mode") (:keywords "gradle")) "melpa-stable"])
  (grails-projectile-mode . [(1 0 0) ((projectile (0 10 0)) (emacs (24)) (cl-lib (0 5))) "Grails mode with Projectile for projects management." single ((:keywords "grails" "projectile")) "melpa-stable"])
  (grapnel . [(0 5 3) nil "HTTP request lib with flexible callback dispatch" single ((:url . "http://www.github.com/leathekd/grapnel")) "melpa-stable"])
  (grass-mode . [(0 1) ((cl-lib (0 2))) "Provides Emacs modes for interacting with the GRASS GIS program" single ((:keywords "grass" "gis")) "melpa-stable"])
  (grin . [(1 0) nil "run grin and grind (python replacements for grep and find) putting hits in a grep buffer" single ((:url . "http://bitbucket.org/dariusp686/emacs-grin") (:keywords "python" "grin" "grind" "grep" "find")) "melpa-stable"])
  (grizzl . [(0 1 1) nil "Fuzzy Search Library & Completing Read" tar nil "melpa-stable"])
  (groovy-mode . [(201311291207) nil "Groovy mode derived mode" tar nil "melpa-stable"])
  (gruber-darker-theme . [(0 6) nil "Gruber Darker color theme for Emacs 24." single ((:url . "http://github.com/rexim/gruber-darker-theme")) "melpa-stable"])
  (guru-mode . [(0 2) nil "Become an Emacs guru" single ((:url . "https://github.com/bbatsov/guru-mode") (:keywords "convenience")) "melpa-stable"])
  (hackernews . [(0 2) ((json (1 2))) "Access the hackernews aggregator from Emacs" tar nil "melpa-stable"])
  (ham-mode . [(1 1 1) ((html-to-markdown (1 2)) (markdown-mode (2 0))) "Html As Markdown. Transparently edit an html file using markdown." single ((:url . "http://github.com/Bruce-Connor/ham-mode") (:keywords "convenience" "emulation" "wp")) "melpa-stable"])
  (haml-mode . [(3 1 8) ((ruby-mode (1 0))) "Major mode for editing Haml files" single ((:url . "http://github.com/nex3/haml/tree/master") (:keywords "markup" "language" "html")) "melpa-stable"])
  (hardhat . [(0 4 4) ((ignoramus (0 7 0))) "Protect against clobbering user-writable files" single ((:url . "http://github.com/rolandwalker/hardhat") (:keywords "convenience")) "melpa-stable"])
  (haskell-mode . [(13 10) nil "A Haskell editing mode" tar nil "melpa-stable"])
  (header-button . [(0 3 0) nil "clickable buttons in header lines" single ((:url . "https://github.com/emacsattic/header-button") (:keywords "extensions")) "melpa-stable"])
  (helm . [(1 6 4) ((emacs (24)) (cl-lib (0 5)) (async (1 2))) "Helm is an Emacs incremental and narrowing framework" tar nil "melpa-stable"])
  (helm-ack . [(0 13) ((helm (1 0)) (cl-lib (0 5))) "Ack command with helm interface" single ((:url . "https://github.com/syohex/emacs-helm-ack")) "melpa-stable"])
  (helm-ag . [(0 30) ((helm (1 5 6)) (cl-lib (0 5))) "the silver searcher with helm interface" single ((:url . "https://github.com/syohex/emacs-helm-ag")) "melpa-stable"])
  (helm-backup . [(0 2 0) ((helm (1 5 5)) (s (1 8 0))) "Backup each file change using git" single ((:url . "http://github.com/antham/helm-backup") (:keywords "backup")) "melpa-stable"])
  (helm-dash . [(1 1 0) ((helm (0 0 0))) "Helm extension to search dash docsets" single ((:url . "http://github.com/areina/helm-dash") (:keywords "docs")) "melpa-stable"])
  (helm-descbinds . [(1 7 1) nil "Yet Another `describe-bindings' with `helm'." single ((:keywords "helm" "help")) "melpa-stable"])
  (helm-ghc . [(0 1 0) ((emacs (24)) (cl-lib (0 5)) (helm (1 6 4)) (ghc (5 2 1 0))) "A Helm datasource for ghc-mod errors" single ((:keywords "languages" "helm")) "melpa-stable"])
  (helm-ghq . [(1 4 0) ((helm (1 6 2))) "ghq with helm interface" single ((:url . "https://github.com/masutaka/emacs-helm-ghq")) "melpa-stable"])
  (helm-github-stars . [(1 1 1) ((helm (1 5 5))) "Helm integration for your starred repositories on github" single ((:keywords "helm" "github" "stars")) "melpa-stable"])
  (helm-gitlab . [(0 1 0) ((s (1 9 0)) (dash (2 9 0)) (helm (1 0)) (gitlab (0))) "Helm interface to Gitlab" single ((:url . "https://github.com/nlamirault/emacs-gitlab") (:keywords "gitlab" "helm")) "melpa-stable"])
  (helm-gtags . [(1 4 1) ((helm (1 5 6)) (cl-lib (0 5))) "GNU GLOBAL helm interface" single ((:url . "https://github.com/syohex/emacs-helm-gtags")) "melpa-stable"])
  (helm-hatena-bookmark . [(1 0 2) ((helm (1 5 6))) "Hatena::Bookmark helm.el interface" single ((:url . "https://github.com/masutaka/emacs-helm-hatena-bookmark")) "melpa-stable"])
  (helm-hayoo . [(0 0 5) ((helm (1 6 0)) (json (1 2)) (haskell-mode (13 7))) "Source and configured helm for searching hayoo" single ((:keywords "helm")) "melpa-stable"])
  (helm-open-github . [(0 11) ((helm (1 0)) (gh (1 0)) (cl-lib (0 5))) "Utilities of Opening Github Page" single ((:url . "https://github.com/syohex/emacs-helm-open-github")) "melpa-stable"])
  (helm-package . [(0 2) ((helm (1 0)) (cl-lib (0 3))) "Listing ELPA packages with helm interface" single ((:url . "https://github.com/syohex/emacs-helm-package")) "melpa-stable"])
  (helm-perldoc . [(0 7) ((helm (1 0)) (deferred (0 3 1)) (cl-lib (0 5))) "perldoc with helm interface" tar ((:url . "https://github.com/syohex/emacs-helm-perldoc")) "melpa-stable"])
  (helm-proc . [(0 0 4) ((helm (1 6 0))) "Helm interface for managing system processes" tar nil "melpa-stable"])
  (helm-projectile . [(0 11 0) ((helm (1 4 0)) (projectile (0 11 0)) (cl-lib (0 3))) "Helm integration for Projectile" single ((:url . "https://github.com/bbatsov/projectile") (:keywords "project" "convenience")) "melpa-stable"])
  (helm-pydoc . [(0 6) ((helm (1 0)) (cl-lib (0 5))) "pydoc with helm interface" tar ((:url . "https://github.com/syohex/emacs-helm-pydoc")) "melpa-stable"])
  (helm-robe . [(0 1) ((helm (1 0))) "completing read function for robe" single ((:url . "https://github.com/syohex/emacs-helm-robe")) "melpa-stable"])
  (helm-rubygems-org . [(0 0 1) ((emacs (24)) (helm (1 6 3)) (cl-lib (0 5))) "Use helm to search rubygems.org" single ((:url . "https://github.com/neomantic/helm-rubygems-org") (:keywords "ruby" "rubygems" "gemfile" "helm")) "melpa-stable"])
  (helm-sage . [(0 0 1) ((cl-lib (0 5)) (helm (1 5 6)) (sage-shell-mode (0 0 1))) "A helm extension for sage-shell-mode." single ((:url . "https://github.com/stakemori/helm-sage") (:keywords "sage" "math" "helm")) "melpa-stable"])
  (helm-spaces . [(0 2) ((helm (1 0)) (spaces (0 1 0))) "helm sources for spaces" single ((:url . "https://github.com/yasuyk/helm-spaces") (:keywords "helm" "frames" "convenience")) "melpa-stable"])
  (helm-themes . [(0 4) ((helm (1 0))) "Color theme selection with helm interface" single ((:url . "https://github.com/syohex/emacs-helm-themes")) "melpa-stable"])
  (highlight-blocks . [(0 1 13) ((emacs (24))) "Highlight the blocks point is in" single ((:url . "https://github.com/Fanael/highlight-blocks")) "melpa-stable"])
  (highlight-defined . [(0 1 5) ((emacs (24))) "Syntax highlighting of known Elisp symbols" single ((:url . "https://github.com/Fanael/highlight-defined")) "melpa-stable"])
  (highlight-numbers . [(0 2) ((emacs (24)) (parent-mode (2 0))) "Highlight numbers in source code" single ((:url . "https://github.com/Fanael/highlight-numbers")) "melpa-stable"])
  (highlight-parentheses . [(1 0 2) nil "highlight surrounding parentheses" single ((:url . "http://nschum.de/src/emacs/highlight-parentheses/") (:keywords "faces" "matching")) "melpa-stable"])
  (highlight-quoted . [(0 1) ((emacs (24))) "Highlight Lisp quotes and quoted symbols" single ((:url . "https://github.com/Fanael/highlight-quoted")) "melpa-stable"])
  (highlight-symbol . [(1 2) nil "automatic and manual symbol highlighting" single ((:url . "http://nschum.de/src/emacs/highlight-symbol/") (:keywords "faces" "matching")) "melpa-stable"])
  (hippie-expand-slime . [(0 1) nil "Hook slime's completion into hippie-expand" single ((:url . "https://github.com/purcell/hippie-expand-slime")) "melpa-stable"])
  (hippie-namespace . [(0 5 8) nil "Special treatment for namespace prefixes in hippie-expand" single ((:url . "http://github.com/rolandwalker/hippie-namespace") (:keywords "convenience" "lisp" "tools" "completion")) "melpa-stable"])
  (historyf . [(0 0 8) nil "file history library like browser" single ((:url . "https://github.com/k1LoW/emacs-historyf")) "melpa-stable"])
  (hl-anything . [(0 0 6) ((emacs (24 3))) "Things highlight in a text file is fundamental and very helpful to everyone.

Main features:
1. Words or selections highlights with different colors set. The highlights are 
still visible even under current line highlight (`hl-line-mode' or 
`global-hl-line-mode' is enabled).
2. Search highlighted things at point in the current buffer.
3. Highlight outward and inward parentheses with different colors set.

Extended feature:
1. Additional faces set for temporary highlights." tar nil "melpa-stable"])
  (hl-sentence . [(3) nil "highlight a sentence based on customizable face" single ((:url . "http://github.com/milkypostman/hl-sentence") (:keywords "highlighting")) "melpa-stable"])
  (hl-sexp . [(1 0 0) nil "highlight the current sexp" single ((:keywords "faces" "frames" "emulation")) "melpa-stable"])
  (hl-todo . [(1 3 1) nil "highlight TODO keywords" single ((:url . "http://github.com/tarsius/hl-todo") (:keywords "convenience")) "melpa-stable"])
  (hookify . [(0 2 0) ((s (1 9 0)) (dash (1 5 0))) "Interactive commands to create temporary hooks" single ((:url . "https://github.com/Silex/hookify") (:keywords "hook" "convenience")) "melpa-stable"])
  (html-to-markdown . [(1 5) nil "HTML to Markdown converter written in Emacs-lisp." single ((:url . "http://github.com/Bruce-Connor/html-to-markdown") (:keywords "tools" "wp" "languages")) "melpa-stable"])
  (httpcode . [(0 1) nil "explains the meaning of an HTTP status code" single ((:url . "http://github.com/rspivak/httpcode.el")) "melpa-stable"])
  (httprepl . [(1 1) ((s (1 9 0)) (dash (2 5 0)) (emacs (24))) "An HTTP REPL" single ((:url . "https://github.com/gregsexton/httprepl.el") (:keywords "http" "repl")) "melpa-stable"])
  (hyde . [(0 2) nil "No description available." tar nil "melpa-stable"])
  (ibuffer-vc . [(0 8) ((cl-lib (0 2))) "Group ibuffer's list by VC project, or show VC status" single ((:url . "http://github.com/purcell/ibuffer-vc") (:keywords "themes")) "melpa-stable"])
  (identica-mode . [(1 3 1) nil "Major mode API client for status.net open microblogging" tar ((:url . "http://blog.gabrielsaldana.org/identica-mode-for-emacs/") (:keywords "identica" "web")) "melpa-stable"])
  (idle-highlight-mode . [(1 1 3) nil "highlight the word the point is on" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/IdleHighlight") (:keywords "convenience")) "melpa-stable"])
  (ido-complete-space-or-hyphen . [(1 1) nil "No description available." single nil "melpa-stable"])
  (ido-load-library . [(0 2 0) ((persistent-soft (0 8 8)) (pcache (0 2 3))) "Load-library alternative using ido-completing-read" single ((:url . "http://github.com/rolandwalker/ido-load-library") (:keywords "maint" "completion")) "melpa-stable"])
  (ido-ubiquitous . [(2 14) ((emacs (24 1))) "Use ido (nearly) everywhere." single ((:url . "https://github.com/DarwinAwardWinner/ido-ubiquitous") (:keywords "convenience")) "melpa-stable"])
  (ido-vertical-mode . [(0 1 5) nil "Makes ido-mode display vertically." single ((:url . "https://github.com/gempesaw/ido-vertical-mode.el") (:keywords "convenience")) "melpa-stable"])
  (idris-mode . [(0 9 15) ((emacs (24))) "Major mode for editing Idris code" tar ((:url . "https://github.com/idris-hackers/idris-mode") (:keywords "languages")) "melpa-stable"])
  (iflipb . [(1 2) nil "interactively flip between recently visited buffers" single ((:url . "http://hg.rosdahl.net/iflipb")) "melpa-stable"])
  (ignoramus . [(0 7 0) nil "Ignore backups, build files, et al." single ((:url . "http://github.com/rolandwalker/ignoramus") (:keywords "convenience" "tools")) "melpa-stable"])
  (immutant-server . [(1 2 0) nil "Run your Immutant server in Emacs" single ((:url . "http://www.github.com/leathekd/immutant-server.el")) "melpa-stable"])
  (import-popwin . [(0 8) ((popwin (0 6)) (cl-lib (0 5))) "popwin buffer near by import statements with popwin" single ((:url . "https://github.com/syohex/emacs-import-popwin")) "melpa-stable"])
  (inf-ruby . [(2 4 0) nil "Run a Ruby process in a buffer" single ((:url . "http://github.com/nonsequitur/inf-ruby") (:keywords "languages" "ruby")) "melpa-stable"])
  (inflections . [(2 3) nil "convert english words between singular and plural" single ((:url . "https://github.com/eschulte/jump.el") (:keywords "ruby" "rails" "languages" "oop")) "melpa-stable"])
  (init-loader . [(0 2) nil "Loader for configuration files" single ((:url . "https://github.com/emacs-jp/init-loader/")) "melpa-stable"])
  (initsplit . [(1 6) nil "No description available." single nil "melpa-stable"])
  (inline-crypt . [(0 1 4) nil "Simple inline encryption via openssl" tar nil "melpa-stable"])
  (insert-shebang . [(0 9 3) nil "Insert shebang line automatically." single ((:url . "http://github.com/psachin/insert-shebang") (:keywords "shebang" "tool" "convenience")) "melpa-stable"])
  (instapaper . [(0 9 5) nil "No description available." single nil "melpa-stable"])
  (ir-black-theme . [(1 0 1) nil "Port of ir-black theme" single ((:keywords "faces")) "melpa-stable"])
  (irony . [(0 1 2) ((cl-lib (0 5))) "C/C++ minor mode powered by libclang" tar ((:url . "https://github.com/Sarcasm/irony-mode") (:keywords "c" "convenience" "tools")) "melpa-stable"])
  (ix . [(0 7) ((grapnel (0 5 3))) "Emacs client for http://ix.io pastebin" single ((:url . "http://www.github.com/theanalyst/ix.el")) "melpa-stable"])
  (j-mode . [(1 1 1) nil "Major mode for editing J programs" tar ((:url . "http://github.com/zellio/j-mode") (:keywords "j" "langauges")) "melpa-stable"])
  (jabber . [(0 8 92) nil "A Jabber client for Emacs." tar nil "melpa-stable"])
  (jedi . [(0 1 2) ((epc (0 1 0)) (auto-complete (1 4))) "Python auto-completion for Emacs" tar nil "melpa-stable"])
  (js2-closure . [(1 4) ((js2-mode (20140114))) "Google Closure dependency manager" single ((:url . "http://github.com/jart/js2-closure")) "melpa-stable"])
  (js2-mode . [(20140114) ((emacs (24 1))) "Improved JavaScript editing mode" tar ((:url . "https://github.com/mooz/js2-mode/") (:keywords "languages" "javascript")) "melpa-stable"])
  (js2-refactor . [(0 6 1) ((js2-mode (20101228)) (multiple-cursors (1 0 0)) (dash (1 0 0)) (s (1 0 0)) (yasnippet (20130218))) "A JavaScript refactoring library for emacs." tar nil "melpa-stable"])
  (js3-mode . [(1 1 0) nil "An improved JavaScript editing mode" tar ((:keywords "javascript" "languages")) "melpa-stable"])
  (json-mode . [(1 1 0) nil "Major mode for editing JSON files" single ((:url . "https://github.com/joshwnj/json-mode")) "melpa-stable"])
  (json-reformat . [(0 0 1) nil "Reformatting tool for JSON" single ((:url . "https://github.com/gongo/json-reformat") (:keywords "json")) "melpa-stable"])
  (jsx-mode . [(0 1 10) nil "major mode for JSX" single ((:url . "https://github.com/jsx/jsx-mode.el")) "melpa-stable"])
  (julia-mode . [(0 3 2) nil "No description available." single nil "melpa-stable"])
  (jump . [(2 3) ((findr (0 7)) (inflections (1 1))) "build functions which contextually jump between files" single ((:url . "http://github.com/eschulte/jump.el/tree/master") (:keywords "project" "convenience" "navigation")) "melpa-stable"])
  (jump-to-line . [(0 2 0) nil "Jump to line number at point." single ((:keywords "jump" "line" "back" "file" "ruby" "csharp" "python" "perl")) "melpa-stable"])
  (kakapo-mode . [(0 2) ((cl-lib (0 5))) "TABS (hard or soft) for indentation (leading whitespace), and SPACES for alignment." single ((:url . "https://github.com/listx/kakapo-mode") (:keywords "indentation")) "melpa-stable"])
  (key-combo . [(1 2) nil "map key sequence to commands" tar ((:url . "https://github.com/uk-ar/key-combo") (:keywords "keyboard" "input")) "melpa-stable"])
  (keychain-environment . [(2 0 1) nil "load keychain environment variables" single ((:url . "https://github.com/tarsius/keychain-environment") (:keywords "gnupg" "pgp" "ssh")) "melpa-stable"])
  (keydef . [(1 15) nil "a simpler way to define keys, with kbd syntax" single ((:keywords "convenience" "lisp" "customization" "keyboard" "keys")) "melpa-stable"])
  (keymap-utils . [(0 4 4) ((cl-lib (0 2))) "Keymap utilities" tar nil "melpa-stable"])
  (keyset . [(0 1 0) ((dash (2 8 0)) (cl-lib (0 5))) "A small library for structuring key bindings." single nil "melpa-stable"])
  (kill-ring-search . [(1 1) nil "incremental search for the kill ring" single ((:url . "http://nschum.de/src/emacs/kill-ring-search/") (:keywords "convenience" "matching")) "melpa-stable"])
  (killer . [(0 2 2) nil "kill and delete text" single ((:url . "http://github.com/tarsius/killer") (:keywords "convenience")) "melpa-stable"])
  (kivy-mode . [(1 8 0) nil "Emacs major mode for editing Kivy files" single nil "melpa-stable"])
  (know-your-http-well . [(0 2 0) nil "Look up the meaning of HTTP headers, methods, relations, status codes" tar nil "melpa-stable"])
  (langtool . [(1 2 1) nil "Grammer check utility using LanguageTool" single ((:url . "https://github.com/mhayashi1120/Emacs-langtool/raw/master/langtool.el") (:keywords "docs")) "melpa-stable"])
  (latex-extra . [(1 8) ((auctex (11 86 1)) (cl-lib (0 5))) "Adds several useful functionalities to LaTeX-mode." single ((:url . "http://github.com/Bruce-Connor/latex-extra") (:keywords "tex")) "melpa-stable"])
  (ledger-mode . [(3 1) nil "Helper code for use with the \"ledger\" command-line tool" tar nil "melpa-stable"])
  (less-css-mode . [(0 19) nil "Major mode for editing LESS CSS files (lesscss.org)" single ((:url . "https://github.com/purcell/less-css-mode") (:keywords "less" "css" "mode")) "melpa-stable"])
  (lfe-mode . [(0 9 0) nil "Lisp Flavoured Erlang mode" tar nil "melpa-stable"])
  (lingr . [(0 2) nil "Lingr Client for GNU Emacs" single ((:url . "http://github.com/lugecy/lingr-el") (:keywords "chat" "client" "internet")) "melpa-stable"])
  (link . [(1 10) nil "No description available." single nil "melpa-stable"])
  (linked-buffer . [(0 5) ((emacs (24)) (m-buffer (0 5)) (dash (2 5 0))) "One buffer as a view of another" tar nil "melpa-stable"])
  (linum-relative . [(0 4) nil "display relative line number in emacs." single ((:url . "http://github.com/coldnew/linum-relative") (:keywords "converience")) "melpa-stable"])
  (lispy . [(0 13 0) ((helm (1 5 3)) (ace-jump-mode (2 0)) (s (1 4 0)) (noflet (0 0 10)) (multiple-cursors (1 3 0)) (iedit (0 97))) "vi-like Paredit" tar nil "melpa-stable"])
  (lispyscript-mode . [(0 3 5) nil "Major mode for LispyScript code." single ((:url . "https://github.com/krisajenkins/lispyscript-mode") (:keywords "lisp" "languages")) "melpa-stable"])
  (list-utils . [(0 4 2) nil "List-manipulation utility functions" single ((:url . "http://github.com/rolandwalker/list-utils") (:keywords "extensions")) "melpa-stable"])
  (literate-coffee-mode . [(0 4) ((coffee-mode (0 5 0))) "major-mode for Literate CoffeeScript" single ((:url . "https://github.com/syohex/emacs-literate-coffee-mode")) "melpa-stable"])
  (log4j-mode . [(1 3) nil "major mode for viewing log files" single ((:keywords "log" "log4j" "java")) "melpa-stable"])
  (logalimacs . [(1 0 0) nil "Front-end to logaling-command for Ruby gems" single ((:url . "https://github.com/logaling/logalimacs")) "melpa-stable"])
  (logito . [(0 1) ((eieio (1 3))) "logging library for Emacs" single ((:keywords "lisp" "tool")) "melpa-stable"])
  (love-minor-mode . [(1 1) nil "Minor mode for working on L\303\226VE projects" single ((:url . "https://github.com/ejmr/love-minor-mode")) "melpa-stable"])
  (lua-mode . [(20140514) nil "a major-mode for editing Lua scripts" single ((:url . "http://immerrr.github.com/lua-mode") (:keywords "languages" "processes" "tools")) "melpa-stable"])
  (m-buffer . [(0 5) ((dash (2 5 0)) (emacs (24 3))) "Buffer Manipulation Functions" single nil "melpa-stable"])
  (macro-math . [(1 0) nil "in-buffer mathematical operations" single ((:url . "http://nschum.de/src/emacs/macro-math/") (:keywords "convenience")) "melpa-stable"])
  (macrostep . [(0 8) nil "interactive macro stepper for Emacs Lisp" single ((:url . "https://github.com/joddie/macrostep") (:keywords "lisp" "languages" "macro" "debugging")) "melpa-stable"])
  (magit . [(90141025) ((cl-lib (0 3)) (git-commit-mode (0 14 0)) (git-rebase-mode (0 14 0))) "control Git from Emacs" tar ((:keywords "vc" "tools")) "melpa-stable"])
  (magit-annex . [(0 10 0) ((cl-lib (0 3)) (magit (1 2 0))) "Use git annex within magit" single ((:url . "https://github.com/kyleam/magit-annex") (:keywords "magit" "git-annex")) "melpa-stable"])
  (magit-find-file . [(2 0 0) ((magit (1 2 0)) (dash (2 8 0))) "completing-read over all files in Git" single ((:url . "https://github.com/bradleywright/magit-find-file.el") (:keywords "git")) "melpa-stable"])
  (magit-gh-pulls . [(0 3) ((gh (0 4 3)) (magit (1 1 0))) "GitHub pull requests extension for Magit" single ((:keywords "tools")) "melpa-stable"])
  (magit-gitflow . [(1 0 0) ((magit (1 3 0))) "gitflow extension for magit" single ((:url . "https://github.com/jtatarik/magit-gitflow") (:keywords "vc" "tools")) "melpa-stable"])
  (magit-push-remote . [(0 5 0) ((magit (1 3 0))) "push remote support for Magit" single ((:url . "https://github.com/tarsius/magit-push-remote") (:keywords "convenience")) "melpa-stable"])
  (magit-stgit . [(90141025) ((cl-lib (0 3)) (magit (1 3 0))) "StGit plug-in for Magit" single ((:keywords "vc" "tools")) "melpa-stable"])
  (magit-svn . [(90141025) ((cl-lib (0 3)) (magit (1 3 0))) "git-svn plug-in for Magit" single ((:keywords "vc" "tools")) "melpa-stable"])
  (magit-topgit . [(90141025) ((cl-lib (0 3)) (magit (1 3 0))) "topgit plug-in for Magit" single ((:keywords "vc" "tools")) "melpa-stable"])
  (magit-tramp . [(0 1 0) ((magit (1 2 0))) "git method for TRAMP" single ((:url . "https://github.com/sigma/magit-tramp")) "melpa-stable"])
  (make-color . [(0 4) nil "Alternative to picking color - update fg/bg color by pressing r/g/b/... keys" single ((:url . "http://github.com/alezost/make-color.el") (:keywords "color")) "melpa-stable"])
  (makey . [(0 3) ((cl-lib (0 2))) "interactive commandline mode" single nil "melpa-stable"])
  (malabar-mode . [(20140303 946) ((fringe-helper (1 0 1))) "A better Java mode for Emacs" tar ((:url . "http://www.github.com/m0smith/malabar-mode") (:keywords "java" "maven" "language" "malabar")) "melpa-stable"])
  (malinka . [(0 2 0) ((s (1 9 0)) (dash (2 4 0)) (f (0 11 0)) (cl-lib (0 3)) (rtags (0 0)) (projectile (0 11 0))) "A C/C++ project configuration package for Emacs" single ((:url . "https://github.com/LefterisJP/malinka") (:keywords "c" "c++" "project-management")) "melpa-stable"])
  (mallard-mode . [(0 3 0) nil "Major mode for editing Mallard files" tar ((:url . "https://github.com/jhradilek/emacs-mallard-mode") (:keywords "xml" "mallard")) "melpa-stable"])
  (map-progress . [(0 5 0) nil "mapping macros that report progress" single ((:url . "https://github.com/tarsius/map-progress/") (:keywords "convenience")) "melpa-stable"])
  (map-regexp . [(0 3 0) ((cl-lib (0 2))) "map over matches of a regular expression" single ((:url . "https://github.com/tarsius/map-regexp") (:keywords "convenience")) "melpa-stable"])
  (mark-tools . [(0 3) nil "Some simple tools to access the mark-ring in Emacs" single ((:url . "https://github.com/stsquad/emacs-mark-tools")) "melpa-stable"])
  (markdown-mode . [(2 0) nil "Emacs Major mode for Markdown-formatted text files" single ((:url . "http://jblevins.org/projects/markdown-mode/") (:keywords "markdown" "github flavored markdown" "itex")) "melpa-stable"])
  (markdown-toc . [(0 0 6) ((s (1 7 0)) (dash (2 5 0)) (markdown-mode (2 0))) "A simple TOC generator for markdown file" tar nil "melpa-stable"])
  (marmalade . [(0 0 4) ((furl (0 0 2))) "Elisp interface for the Emacs Lisp package server." single ((:url . "http://code.google.com/p/marmalade")) "melpa-stable"])
  (maxframe . [(0 5) nil "No description available." single nil "melpa-stable"])
  (mc-extras . [(1 0 3) ((multiple-cursors (1 2 1))) "Extra functions for multiple-cursors mode." tar ((:url . "https://github.com/knu/mc-extras.el") (:keywords "editing" "cursors")) "melpa-stable"])
  (mentor . [(0 1) nil "Control rtorrent from GNU Emacs" tar ((:keywords "bittorrent" "rtorrent")) "melpa-stable"])
  (merlin . [(2 0) nil "Mode for Merlin, an assistant for OCaml." tar ((:url . "http://github.com/the-lambda-church/merlin") (:keywords "ocaml" "languages")) "melpa-stable"])
  (mew . [(6 6) nil "Messaging in the Emacs World" tar nil "melpa-stable"])
  (migemo . [(1 9 1) nil "Japanese incremental search through dynamic pattern expansion" single ((:url . "https://github.com/emacs-jp/migemo")) "melpa-stable"])
  (milkode . [(0 4) nil "Command line search and direct jump with Milkode" single ((:keywords "milkode" "search" "grep" "jump" "keyword")) "melpa-stable"])
  (minibuffer-complete-cycle . [(1 25 20130814) nil "Cycle through the *Completions* buffer" single ((:url . "https://github.com/knu/minibuffer-complete-cycle") (:keywords "completion")) "melpa-stable"])
  (minibuffer-cua . [(1 0 0) nil "Make CUA mode's S-up/S-down work in minibuffer" single ((:url . "https://github.com/knu/minibuffer-cua.el") (:keywords "completion" "editing")) "melpa-stable"])
  (miniedit . [(2 0) nil "Enhanced editing for minibuffer fields." single nil "melpa-stable"])
  (minimal-session-saver . [(0 6 2) nil "Very lean session saver" single ((:url . "http://github.com/rolandwalker/minimal-session-saver") (:keywords "tools" "frames" "project")) "melpa-stable"])
  (minitest . [(0 7 1) ((dash (1 0 0))) "An Emacs mode for ruby minitest files" single ((:url . "https://github.com/arthurnn/minitest-emacs")) "melpa-stable"])
  (mmm-mako . [(1 1) ((mmm-mode (0 4 8))) "MMM submode class for Mako Templates" single ((:url . "https://bitbucket.org/pjenvey/mmm-mako")) "melpa-stable"])
  (mmm-mode . [(0 5 1) nil "Allow Multiple Major Modes in a buffer" tar ((:url . "https://github.com/purcell/mmm-mode") (:keywords "convenience" "faces" "languages" "tools")) "melpa-stable"])
  (mocker . [(0 3 0) ((eieio (1 3)) (el-x (0 2 4))) "mocking framework for emacs" single ((:keywords "lisp" "testing")) "melpa-stable"])
  (mode-icons . [(0 1 0) nil "Show icons for modes" tar ((:url . "http://ryuslash.org/projects/mode-icons.html") (:keywords "multimedia")) "melpa-stable"])
  (mode-line-debug . [(1 2 1) nil "show status of `debug-on-error' in the mode-line" single ((:url . "https://github.com/tarsius/mode-line-debug") (:keywords "convenience" "lisp")) "melpa-stable"])
  (monroe . [(0 2 0) nil "Yet another client for nREPL" single ((:url . "http://www.github.com/sanel/monroe") (:keywords "languages" "clojure" "nrepl" "lisp")) "melpa-stable"])
  (morlock . [(0 4 0) nil "more font-lock keywords for elisp" single ((:url . "http://github.com/tarsius/morlock") (:keywords "convenience")) "melpa-stable"])
  (move-dup . [(0 2 1) nil "Eclipse-like moving and duplicating lines or rectangles." single ((:keywords "convenience" "wp")) "melpa-stable"])
  (moz . [(1 1 0) nil "Lets current buffer interact with inferior mozilla." single ((:url . "http://github.com/bard/mozrepl/raw/master/chrome/content/moz.el")) "melpa-stable"])
  (multi . [(2 0 1) ((emacs (24))) "Clojure-style multi-methods for emacs lisp" single ((:url . "http://github.com/kurisuwhyte/emacs-multi") (:keywords "multimethod" "generic" "predicate" "dispatch")) "melpa-stable"])
  (multi-web-mode . [(0 2 1) nil "multiple major mode support for web editing" tar ((:keywords "convenience" "languages" "wp")) "melpa-stable"])
  (multiple-cursors . [(1 3 0) nil "Multiple cursors for Emacs." tar nil "melpa-stable"])
  (mustache-mode . [(1 3) nil "A major mode for editing Mustache files." single nil "melpa-stable"])
  (mykie . [(0 2 1) nil "Command multiplexer: Register multiple functions to a keybind" tar ((:url . "https://github.com/yuutayamada/mykie-el") (:keywords "emacs" "configuration" "keybind")) "melpa-stable"])
  (names . [(0 5 4) ((emacs (24 1)) (cl-lib (0 5))) "Namespaces for emacs-lisp. Works like C++ namespaces to avoid name clobbering." tar ((:url . "http://github.com/Bruce-Connor/names") (:keywords "extensions" "lisp")) "melpa-stable"])
  (nav-flash . [(1 1 0) nil "Briefly highlight the current line" single ((:url . "http://github.com/rolandwalker/nav-flash") (:keywords "extensions" "navigation" "interface")) "melpa-stable"])
  (navi-mode . [(2 0) nil "major-mode for easy buffer-navigation" single ((:url . "https://github.com/tj64/navi")) "melpa-stable"])
  (navorski . [(0 2 7) ((s (1 9 0)) (dash (1 5 0)) (multi-term (0 8 14))) "Helping you live in the terminal, like Viktor did." single ((:keywords "terminal")) "melpa-stable"])
  (ncl-mode . [(0 98) nil "No description available." tar nil "melpa-stable"])
  (nemerle . [(1 2) nil "major mode for editing nemerle programs" single ((:keywords "nemerle" "mode" "languages")) "melpa-stable"])
  (neotree . [(0 2 1) nil "A tree plugin like NerdTree for Vim" single ((:url . "https://github.com/jaypei/emacs-neotree")) "melpa-stable"])
  (ninja-mode . [(1 5 1) nil "Major mode for editing .ninja files" single nil "melpa-stable"])
  (nix-mode . [(1 7) nil "No description available." single nil "melpa-stable"])
  (nodejs-repl . [(0 0 2) nil "Run Node.js REPL" single nil "melpa-stable"])
  (nose . [(0 1 1) nil "Easy Python test running in Emacs" single ((:keywords "nose" "python" "testing")) "melpa-stable"])
  (notmuch . [(0 18 2) nil "No description available." tar nil "melpa-stable"])
  (nrepl-ritz . [(0 6 0) ((nrepl (0 1 5))) "nrepl extensions for ritz" single ((:url . "https://github.com/pallet/ritz") (:keywords "languages" "lisp" "nrepl")) "melpa-stable"])
  (nrepl-sync . [(0 3 1) ((cider (0 6))) "connect to nrepl port and eval .sync.clj." single ((:url . "https://github.com/phillord/lein-sync")) "melpa-stable"])
  (nsis-mode . [(0 44) nil "NSIS-mode" tar ((:url . "http://github.com/mlf176f2/nsis-mode") (:keywords "nsis")) "melpa-stable"])
  (nvm . [(0 0 3) ((s (1 8 0)) (dash (2 4 0)) (f (0 14 0))) "Manage Node versions within Emacs" single ((:url . "http://github.com/rejeep/nvm.el") (:keywords "node" "nvm")) "melpa-stable"])
  (o-blog . [(2 0) nil "" tar ((:keywords "emacs")) "melpa-stable"])
  (ob-sml . [(0 2) ((sml-mode (6 4))) "org-babel functions for template evaluation" single ((:url . "http://orgmode.org") (:keywords "literate programming" "reproducible research")) "melpa-stable"])
  (ob-translate . [(0 1 2) ((google-translate (0 4)) (org (8))) "Translation of text blocks in org-mode." single ((:url . "https://github.com/krisajenkins/ob-translate") (:keywords "org" "babel" "translate" "translation")) "melpa-stable"])
  (object-registry . [(1 2 0) ((cl-lib (0 2))) "track data items by various instance slots" single ((:url . "https://github.com/tarsius/object-registry") (:keywords "data" "oo")) "melpa-stable"])
  (ocp-indent . [(1 4 2 2) nil "automatic indentation with ocp-indent" single ((:url . "http://www.typerex.org/ocp-indent.html") (:keywords "ocaml" "languages")) "melpa-stable"])
  (octomacs . [(0 0 1) nil "Octopress interface for Emacs" single ((:url . "http://technosorcery.net")) "melpa-stable"])
  (olivetti . [(1 0 1) nil "Minor mode for a nice writing environment" single ((:keywords "wp")) "melpa-stable"])
  (operate-on-number . [(1 1 0) nil "Operate on number at point with arithmetic functions" single ((:url . "https://github.com/knu/operate-on-number.el") (:keywords "editing")) "melpa-stable"])
  (org-agenda-property . [(1 3 1) ((emacs (24 2))) "Display org properties in the agenda buffer." single ((:url . "http://github.com/Bruce-Connor/org-agenda-property") (:keywords "calendar")) "melpa-stable"])
  (org-bullets . [(0 2 4) nil "Show bullets in org-mode as UTF-8 characters" single ((:url . "https://github.com/sabof/org-bullets")) "melpa-stable"])
  (org-elisp-help . [(0 1 0) ((cl-lib (0 2)) (org (8 0))) "org links to emacs-lisp documentation" single ((:url . "http://tarsius.github.com/org-elisp-help") (:keywords "org" "remember" "lisp")) "melpa-stable"])
  (org-journal . [(1 5 3) nil "a simple org-mode based journaling mode" single ((:url . "http://github.com/bastibe/emacs-journal")) "melpa-stable"])
  (org-mac-iCal . [(7 9 3 5) nil "Imports events from iCal.app to the Emacs diary" single ((:keywords "outlines" "calendar")) "melpa-stable"])
  (org-magit . [(0 2 2) ((magit (1 2 0)) (org (6 1))) "basic support for magit links" single ((:keywords "git" "magit" "outlines")) "melpa-stable"])
  (org-outlook . [(0 11) nil "Outlook org" tar ((:url . "https://github.com/mlf176f2/org-outlook.el") (:keywords "org-outlook")) "melpa-stable"])
  (org-page . [(0 41) ((ht (1 5)) (mustache (0 22)) (htmlize (1 47)) (org (8))) "a static site generator based on org mode" tar nil "melpa-stable"])
  (org-pomodoro . [(1 3 3) ((alert (0 5 10))) "Pomodoro implementation for org-mode." tar nil "melpa-stable"])
  (org-protocol-jekyll . [(0 1) nil "Jekyll's handler for org-protocol" single nil "melpa-stable"])
  (org-readme . [(20130322 926) ((http-post-simple (1 0)) (yaoddmuse (0 1 1)) (header2 (21 0)) (lib-requires (21 0))) "Integrates Readme.org and Commentary/Change-logs." tar ((:url . "https://github.com/mlf176f2/org-readme") (:keywords "header2" "readme.org" "emacswiki" "git")) "melpa-stable"])
  (org-toodledo . [(2 16) nil "Toodledo integration for Emacs Org mode" tar ((:keywords "outlines" "data")) "melpa-stable"])
  (org-trello . [(0 6 4) ((request-deferred (0 1 0)) (deferred (0 3 2)) (s (1 9 0)) (dash (2 8 0)) (emacs (24))) "Minor mode to synchronize org-mode buffer and trello board" tar nil "melpa-stable"])
  (orgbox . [(0 5 0) ((org (8 0)) (cl-lib (0 5))) "Mailbox-like task scheduling Org." single ((:url . "https://github.com/yasuhito/orgbox") (:keywords "org")) "melpa-stable"])
  (orglink . [(0 2 1) ((dash (1 3 2)) (org (8 0))) "use Org Mode links in other modes" single ((:url . "http://github.com/tarsius/orglink") (:keywords "hypertext")) "melpa-stable"])
  (osx-browse . [(0 8 8) ((string-utils (0 3 2)) (browse-url-dwim (0 6 6))) "Web browsing helpers for OS X" single ((:url . "http://github.com/rolandwalker/osx-browse") (:keywords "hypermedia" "external")) "melpa-stable"])
  (osx-location . [(0 1) nil "Watch and respond to changes in geographical location on OS X" tar nil "melpa-stable"])
  (osx-plist . [(1 0 0) nil "Apple plist file parser" single ((:keywords "convenience")) "melpa-stable"])
  (outorg . [(2 0) nil "Org-style comment editing" single ((:url . "https://github.com/tj64/outorg")) "melpa-stable"])
  (outshine . [(2 0) nil "outline with outshine outshines outline" single ((:url . "https://github.com/tj64/outshine")) "melpa-stable"])
  (pabbrev . [(4 1) nil "Predictive abbreviation expansion" single nil "melpa-stable"])
  (package-safe-delete . [(0 1 4) ((emacs (24 3)) (epl (0 7 -3))) "Safely delete package.el packages" single ((:url . "https://github.com/Fanael/package-safe-delete")) "melpa-stable"])
  (package-utils . [(0 2 0) ((epl (0 7 -3))) "Extensions for package.el" single ((:url . "https://github.com/Silex/package-utils") (:keywords "package" "convenience")) "melpa-stable"])
  (packed . [(0 3 5) ((cl-lib (0 5))) "package manager agnostic Emacs Lisp package utilities" single ((:url . "http://tarsius.github.com/packed") (:keywords "compile" "convenience" "lisp" "package" "library")) "melpa-stable"])
  (packed-git . [(0 3 5) ((cl-lib (0 5)) (magit (2 1 0))) "Utilities for Emacs packages living in Git repositories" single ((:url . "http://tarsius.github.com/packed") (:keywords "compile" "convenience" "lisp" "package" "library")) "melpa-stable"])
  (page-break-lines . [(0 9) nil "Display ugly ^L page breaks as tidy horizontal lines" single ((:url . "https://github.com/purcell/page-break-lines") (:keywords "convenience" "faces")) "melpa-stable"])
  (pallet . [(0 6) ((cask (0 6))) "A package management tool for Emacs, using Cask." tar nil "melpa-stable"])
  (pandoc-mode . [(2 6) nil "Minor mode for interacting with Pandoc" tar ((:keywords "text" "pandoc")) "melpa-stable"])
  (pangu-spacing . [(0 4) nil "Minor-mode to add space between Chinese and English characters." single ((:url . "http://github.com/coldnew/pangu-spacing")) "melpa-stable"])
  (paradox . [(1 2 4) ((emacs (24 1)) (dash (2 6 0)) (cl-lib (0 5)) (json (1 3))) "A modern Packages Menu. Colored, with package ratings, and customizable." tar ((:url . "http://github.com/Bruce-Connor/paradox") (:keywords "package" "packages" "mode-line")) "melpa-stable"])
  (paredit . [(23) nil "minor mode for editing parentheses" single ((:keywords "lisp")) "melpa-stable"])
  (paredit-everywhere . [(0 4) ((paredit (22))) "Enable some paredit features in non-lisp buffers" single ((:keywords "languages" "convenience")) "melpa-stable"])
  (paren-face . [(0 1 0) nil "a face for parentheses in lisp modes" single ((:url . "http://github.com/tarsius/paren-face")) "melpa-stable"])
  (parent-mode . [(2 1) nil "get major mode's parent modes" single ((:url . "https://github.com/Fanael/parent-mode")) "melpa-stable"])
  (passthword . [(1 3) ((cl-lib (0 5))) "Simple password manager" single nil "melpa-stable"])
  (password-store . [(1 6 3) ((dash (1 5 0)) (f (0 11 0)) (s (1 9 0))) "Password store (pass) support" single ((:keywords "pass")) "melpa-stable"])
  (pastehub . [(0 5 2) nil "A client for the PasteHub cloud service" single ((:url . "https://github.com/kiyoka/pastehub")) "melpa-stable"])
  (pcache . [(0 2 4) ((eieio (1 3))) "persistent caching for Emacs" single nil "melpa-stable"])
  (persistent-soft . [(0 8 8) ((pcache (0 2 3)) (list-utils (0 4 2))) "Persistent storage, returning nil on failure" single ((:url . "http://github.com/rolandwalker/persistent-soft") (:keywords "data" "extensions")) "melpa-stable"])
  (persp-mode . [(1 0) nil "\"perspectives\" + save/load + shared among frames - bugs." single ((:url . "https://github.com/Bad-ptr/persp-mode.el") (:keywords "perspectives" "session")) "melpa-stable"])
  (persp-projectile . [(0 11 0) ((perspective (1 9)) (projectile (0 11 0)) (cl-lib (0 3))) "Perspective integration with Projectile" single ((:keywords "project" "convenience")) "melpa-stable"])
  (perspective . [(1 10) nil "switch between named \"perspectives\" of the editor" single ((:url . "http://github.com/nex3/perspective-el") (:keywords "workspace" "convenience" "frames")) "melpa-stable"])
  (ph . [(0 1 0) ((emacs (24 3))) "A global minor mode for managing multiple projects." tar nil "melpa-stable"])
  (phi-search-mc . [(2 1) ((phi-search (2 0 0)) (multiple-cursors (1 2 1))) "multiple-cursors extension for phi-search" single ((:url . "https://github.com/knu/phi-search-mc.el") (:keywords "search" "cursors")) "melpa-stable"])
  (php-auto-yasnippets . [(2 3 1) ((php-mode (1 11)) (yasnippet (0 8 0))) "Creates snippets for PHP functions" tar ((:url . "https://github.com/ejmr/php-auto-yasnippets")) "melpa-stable"])
  (php-mode . [(1 15 0) nil "Major mode for editing PHP code" single ((:url . "https://github.com/ejmr/php-mode")) "melpa-stable"])
  (phpunit . [(0 3 0) ((s (1 9 0)) (f (0 16 0)) (pkg-info (0 5))) "Launch PHP unit tests using phpunit" single ((:url . "https://github.com/nlamirault/phpunit.el") (:keywords "php" "tests" "phpunit")) "melpa-stable"])
  (pip-requirements . [(0 4) ((dash (2 8 0))) "A major mode for editing pip requirements files." single nil "melpa-stable"])
  (pkg-info . [(0 5) ((dash (1 6 0)) (epl (0 4))) "Information about packages" single ((:url . "https://github.com/lunaryorn/pkg-info.el") (:keywords "convenience")) "melpa-stable"])
  (pkgbuild-mode . [(0 11) nil "Interface to the ArchLinux package manager" single nil "melpa-stable"])
  (plenv . [(0 32) nil "A plenv wrapper for Emacs" single ((:keywords "emacs" "perl")) "melpa-stable"])
  (popup . [(0 5 0) ((cl-lib (0 3))) "Visual Popup User Interface" single ((:keywords "lisp")) "melpa-stable"])
  (popup-complete . [(0 2) ((popup (0 5 0))) "completion with popup" single ((:url . "https://github.com/syohex/emacs-popup-complete")) "melpa-stable"])
  (popwin . [(0 6 2) nil "Popup Window Manager." single ((:keywords "convenience")) "melpa-stable"])
  (pov-mode . [(3 3) nil "Major mode for editing POV-Ray scene files." tar nil "melpa-stable"])
  (powerline . [(2 2) ((cl-lib (0 2))) "Rewrite of Powerline" tar ((:url . "http://github.com/milkypostman/powerline/") (:keywords "mode-line")) "melpa-stable"])
  (pretty-mode . [(2 0 2) nil "Redisplay parts of the buffer as pretty symbols." single ((:url . "https://github.com/akatov/pretty-mode") (:keywords "pretty" "unicode" "symbols")) "melpa-stable"])
  (processing-mode . [(1 0) ((yasnippet (0 8 0))) "Major mode for Processing 2.0" single ((:keywords "languages" "snippets")) "melpa-stable"])
  (prodigy . [(0 6 0) ((s (1 8 0)) (dash (2 4 0)) (f (0 14 0)) (emacs (24))) "Manage external services from within Emacs" single ((:url . "http://github.com/rejeep/prodigy.el")) "melpa-stable"])
  (project-explorer . [(0 13 5) ((cl-lib (0 3)) (es-lib (0 3)) (es-windows (0 1)) (emacs (24))) "A project explorer sidebar" single ((:url . "https://github.com/sabof/project-explorer")) "melpa-stable"])
  (project-root . [(0 7) nil "Define a project root and take actions based upon it." single nil "melpa-stable"])
  (projectile . [(0 11 0) ((s (1 6 0)) (dash (1 5 0)) (pkg-info (0 4))) "Manage and navigate projects in Emacs easily" single ((:url . "https://github.com/bbatsov/projectile") (:keywords "project" "convenience")) "melpa-stable"])
  (psci . [(0 0 5) ((purescript-mode (13 10)) (dash (2 9 0)) (s (1 9 0)) (f (0 17 1)) (deferred (0 3 2))) "Major mode for purescript repl psci" tar ((:url . "https://github.com/ardumont/emacs-psci") (:keywords "purescript" "psci" "repl" "major" "mode")) "melpa-stable"])
  (punctuality-logger . [(0 4) nil "Punctuality logger for Emacs" single ((:url . "https://gitlab.com/elzair/punctuality-logger") (:keywords "reminder" "calendar")) "melpa-stable"])
  (pungi . [(0 9 5) ((jedi (0 2 0 -3 2))) "Integrates jedi with virtualenv and buildout python environments" single ((:keywords "convenience")) "melpa-stable"])
  (puppet-mode . [(0 3) ((emacs (24 1)) (cl-lib (0 5)) (pkg-info (0 4))) "Major mode for Puppet manifests" single ((:url . "https://github.com/lunaryorn/puppet-mode") (:keywords "languages")) "melpa-stable"])
  (purescript-mode . [(13 10) nil "No description available." tar nil "melpa-stable"])
  (pushbullet . [(0 5 2) ((grapnel (0 5 2)) (json (1 2))) "Emacs client for the PushBullet Android app" single ((:url . "http://www.github.com/theanalyst/revolver") (:keywords "convenience")) "melpa-stable"])
  (python-environment . [(0 0 1) ((deferred (0 3 1))) "virtualenv API for Emacs Lisp" tar ((:keywords "applications" "tools")) "melpa-stable"])
  (pyvenv . [(1 3) nil "Python virtual environment interface" single ((:url . "http://github.com/jorgenschaefer/pyvenv") (:keywords "python" "virtualenv" "tools")) "melpa-stable"])
  (qiita . [(0 0 1) nil "No description available." single nil "melpa-stable"])
  (qml-mode . [(0 1) nil "Major mode for editing QT Declarative (QML) code." single ((:url . "https://github.com/coldnew/qml-mode") (:keywords "qml" "qt" "qt declarative")) "melpa-stable"])
  (quickrun . [(2 2 0) ((emacs (24)) (cl-lib (0 5))) "Run commands quickly" single ((:url . "https://github.com/syohex/emacs-quickrun")) "melpa-stable"])
  (r-autoyas . [(0 28) nil "Provides automatically created yasnippets for R function argument lists." tar ((:url . "https://github.com/mlf176f2/r-autoyas.el") (:keywords "r" "yasnippet")) "melpa-stable"])
  (rainbow-delimiters . [(2 0 1) nil "Highlight nested parens, brackets, braces a different color at each depth." single ((:url . "https://github.com/Fanael/rainbow-delimiters") (:keywords "faces" "convenience" "lisp" "tools")) "melpa-stable"])
  (rainbow-identifiers . [(0 2 2) ((emacs (24))) "Highlight identifiers according to their names" single ((:url . "https://github.com/Fanael/rainbow-identifiers")) "melpa-stable"])
  (rase . [(1 1) nil "Run At Sun Event daemon" single ((:url . "https://github.com/m00natic/rase/") (:keywords "solar" "sunrise" "sunset" "midday" "midnight")) "melpa-stable"])
  (rbenv . [(0 0 3) nil "Emacs integration for rbenv" single ((:url . "https://github.com/senny/rbenv.el") (:keywords "ruby" "rbenv")) "melpa-stable"])
  (relative-line-numbers . [(0 3 1) ((emacs (24))) "Display relative line numbers on the margin" single ((:url . "https://github.com/Fanael/relative-line-numbers")) "melpa-stable"])
  (relax . [(0 2) ((json (1 2))) "For browsing and interacting with CouchDB" single ((:url . "http://github.com/technomancy/relax.el") (:keywords "database" "http")) "melpa-stable"])
  (req-package . [(0 9) ((use-package (1 0)) (dash (2 7 0)) (log4e (0 2 0))) "A use-package wrapper for package runtime dependencies management" single ((:url . "https://github.com/edvorg/req-package") (:keywords "dotemacs" "startup" "speed" "config" "package")) "melpa-stable"])
  (request . [(0 1 0) nil "Compatible layer for URL request in Emacs" single nil "melpa-stable"])
  (request-deferred . [(0 1 0) nil "Wrap request.el by deferred" single nil "melpa-stable"])
  (reveal-in-finder . [(0 3 1) nil "Reveal the file associated with the buffer in the OS X Finder" single ((:url . "https://github.com/kaz-yos/elisp") (:keywords "os x" "finder")) "melpa-stable"])
  (rich-minority . [(0 1 1) ((cl-lib (0 5))) "Clean-up and Beautify the list of minor-modes." single ((:url . "http://github.com/Bruce-Connor/rich-minority") (:keywords "mode-line" "faces")) "melpa-stable"])
  (rinari . [(2 11) ((ruby-mode (1 0)) (inf-ruby (2 2 5)) (ruby-compilation (0 16)) (jump (2 0))) "Rinari Is Not A Rails IDE" single ((:url . "https://github.com/eschulte/rinari") (:keywords "ruby" "rails" "project" "convenience" "web")) "melpa-stable"])
  (rnc-mode . [(1 0 6) nil "A major mode for editing RELAX NG Compact syntax." single nil "melpa-stable"])
  (roguel-ike . [(0 1 0) ((popup (0 5 0))) "A coffee-break roguelike" tar nil "melpa-stable"])
  (rsense . [(0 3) nil "RSense client for Emacs" single ((:keywords "convenience")) "melpa-stable"])
  (rspec-mode . [(1 11) ((ruby-mode (1 0)) (cl-lib (0 4))) "Enhance ruby-mode for RSpec" tar ((:url . "http://github.com/pezra/rspec-mode") (:keywords "rspec" "ruby")) "melpa-stable"])
  (rtags . [(1 1) nil "No description available." tar nil "melpa-stable"])
  (ruby-compilation . [(2 11) ((inf-ruby (2 2 1))) "run a ruby process in a compilation buffer" single ((:url . "https://github.com/eschulte/rinari") (:keywords "test" "convenience")) "melpa-stable"])
  (ruby-end . [(0 4 0) nil "Automatic insertion of end blocks for Ruby" single ((:url . "http://github.com/rejeep/ruby-end") (:keywords "speed" "convenience" "ruby")) "melpa-stable"])
  (ruby-hash-syntax . [(0 4) nil "Toggle ruby hash syntax between classic and 1.9 styles" single ((:url . "https://github.com/purcell/ruby-hash-syntax") (:keywords "languages")) "melpa-stable"])
  (ruby-test-mode . [(1 0) nil "Minor mode for Behaviour and Test Driven" single ((:keywords "ruby" "unit" "test" "rspec")) "melpa-stable"])
  (ruby-tools . [(0 1 2) nil "Collection of handy functions for ruby-mode." tar nil "melpa-stable"])
  (rust-mode . [(0 12 0) nil "A major emacs mode for editing Rust source code" single ((:url . "https://github.com/rust-lang/rust") (:keywords "languages")) "melpa-stable"])
  (rvm . [(1 3 0) nil "Emacs integration for rvm" single ((:url . "http://www.emacswiki.org/emacs/RvmEl") (:keywords "ruby" "rvm")) "melpa-stable"])
  (s . [(1 9 0) nil "The long lost Emacs string manipulation library." single ((:keywords "strings")) "melpa-stable"])
  (sackspace . [(0 8 2) nil "A better backspace" single ((:url . "http://github.com/cofi/sackspace.el") (:keywords "delete" "convenience")) "melpa-stable"])
  (sage-shell-mode . [(0 0 3) ((cl-lib (0 5)) (deferred (0 3 2))) "A front-end for Sage Math" tar ((:url . "https://github.com/stakemori/sage-shell-mode") (:keywords "sage" "math")) "melpa-stable"])
  (sass-mode . [(3 0 18) ((haml-mode (3 0 15))) "Major mode for editing Sass files" single ((:url . "http://github.com/nex3/haml/tree/master") (:keywords "markup" "language" "css")) "melpa-stable"])
  (sauron . [(0 10) nil "Track (erc/org/dbus/...) events and react to them." tar nil "melpa-stable"])
  (save-sexp . [(0 2 0) nil "save variables in files using setter forms like `setq'" tar ((:url . "https://github.com/tarsius/save-sexp") (:keywords "convenience")) "melpa-stable"])
  (scala-mode . [(2 11 4) nil "Major mode for editing Scala code." tar ((:keywords "scala" "languages" "oop")) "melpa-stable"])
  (scala-mode2 . [(0 22) nil "Major mode for editing Scala >= 2.9" tar nil "melpa-stable"])
  (scala-outline-popup . [(0 2) ((popup (0 5 0)) (scala-mode2 (0 22))) "scala file summary popup" single ((:url . "https://github.com/ancane/scala-outline-popup.el") (:keywords "scala" "structure" "summary")) "melpa-stable"])
  (scss-mode . [(0 5 0) nil "Major mode for editing SCSS files" single ((:url . "https://github.com/antonj/scss-mode") (:keywords "scss" "css" "mode")) "melpa-stable"])
  (sekka . [(1 5 7) ((cl-lib (0 3)) (concurrent (0 3 1)) (popup (0 5 0))) "A client for Sekka IME server" single ((:url . "https://github.com/kiyoka/sekka") (:keywords "ime" "skk" "japanese")) "melpa-stable"])
  (servant . [(0 3 0) ((s (1 8 0)) (dash (2 2 0)) (f (0 11 0)) (ansi (0 3 0)) (commander (0 5 0)) (epl (0 2)) (shut-up (0 2 1)) (web-server (0 0 1))) "ELPA server written in Emacs Lisp" tar ((:url . "http://github.com/rejeep/servant.el") (:keywords "elpa" "server")) "melpa-stable"])
  (serverspec . [(0 0 4) ((dash (2 6 0)) (s (1 9 0)) (f (0 16 2)) (helm (1 6 1))) "Serverspec minor mode" tar ((:url . "http://101000lab.org")) "melpa-stable"])
  (session . [(2 3 1) nil "use variables, registers and buffer places across sessions" single ((:url . "http://emacs-session.sourceforge.net/") (:keywords "session" "session management" "desktop" "data" "tools")) "melpa-stable"])
  (shampoo . [(0 0 1) nil "Shampoo, a remote Smalltalk developemnt" tar nil "melpa-stable"])
  (shell-pop . [(0 3) nil "helps you to use shell easily on Emacs. Only one key action to work." single ((:url . "http://github.com/kyagi/shell-pop-el") (:keywords "shell" "terminal" "tools")) "melpa-stable"])
  (shm . [(1 0 1) nil "No description available." tar nil "melpa-stable"])
  (shut-up . [(0 3 2) ((cl-lib (0 3)) (emacs (24))) "Shut up would you!" single ((:url . "http://github.com/rejeep/shut-up.el")) "melpa-stable"])
  (simple-httpd . [(1 4 5) ((cl-lib (0 3))) "pure elisp HTTP server" single ((:url . "https://github.com/skeeto/emacs-http-server")) "melpa-stable"])
  (simpleclip . [(1 0 0) nil "Simplified access to the system clipboard" single ((:url . "http://github.com/rolandwalker/simpleclip") (:keywords "convenience")) "melpa-stable"])
  (simplezen . [(0 1 1) nil "A simple subset of zencoding-mode for Emacs." single nil "melpa-stable"])
  (skeletor . [(1 4) ((s (1 7 0)) (f (0 14 0)) (dash (2 2 0)) (cl-lib (0 3)) (emacs (24 1))) "Provides project skeletons for Emacs" tar nil "melpa-stable"])
  (skewer-less . [(0 2) ((skewer-mode (1 5 3))) "Skewer support for live LESS stylesheet updates" single ((:keywords "languages" "tools")) "melpa-stable"])
  (skewer-mode . [(1 6 1) ((simple-httpd (1 4 0)) (js2-mode (20090723)) (emacs (24))) "live browser JavaScript, CSS, and HTML interaction" tar nil "melpa-stable"])
  (slamhound . [(1 5 4) nil "Rip Clojure namespaces apart and rebuild them." single ((:url . "https://github.com/technomancy/slamhound") (:keywords "tools" "lisp")) "melpa-stable"])
  (slideview . [(0 6 1) nil "File slideshow" single ((:url . "https://github.com/mhayashi1120/Emacs-slideview/raw/master/slideview.el") (:keywords "files")) "melpa-stable"])
  (slim-mode . [(1 1) nil "Major mode for editing Slim files" single ((:url . "http://github.com/minad/emacs-slim") (:keywords "markup" "language")) "melpa-stable"])
  (slime . [(2 10 1) ((cl-lib (0 5))) "Superior Lisp Interaction Mode for Emacs" tar ((:url . "https://github.com/slime/slime") (:keywords "languages" "lisp" "slime")) "melpa-stable"])
  (slime-company . [(0 8) ((slime (2 3 2)) (company (0 7))) "slime completion backend for company mode" single ((:keywords "convenience" "lisp" "abbrev")) "melpa-stable"])
  (slime-ritz . [(0 6 0) nil "slime extensions for ritz" single ((:url . "https://github.com/pallet/ritz") (:keywords "languages" "lisp" "slime")) "melpa-stable"])
  (slime-volleyball . [(1 1) nil "An SVG Slime Volleyball Game" tar ((:keywords "games")) "melpa-stable"])
  (sly . [(2 9) nil "No description available." tar nil "melpa-stable"])
  (smart-mode-line . [(2 6) ((emacs (24 3)) (dash (2 2 0)) (rich-minority (0 1))) "A color coded smart mode-line." tar ((:url . "http://github.com/Bruce-Connor/smart-mode-line") (:keywords "mode-line" "faces" "theme" "themes")) "melpa-stable"])
  (smart-mode-line-powerline-theme . [(2 6) ((emacs (24 3)) (powerline (2 3)) (smart-mode-line (2 5))) "smart-mode-line theme that mimics the powerline appearance." single ((:url . "http://github.com/Bruce-Connor/smart-mode-line")) "melpa-stable"])
  (smart-tabs-mode . [(1 0) nil "Intelligently indent with tabs, align with spaces!" single ((:url . "http://www.emacswiki.org/emacs/SmartTabs") (:keywords "languages")) "melpa-stable"])
  (smartrep . [(0 0 3) nil "Support sequential operation which omitted prefix keys." single ((:url . "https://github.com/myuhe/smartrep.el") (:keywords "convenience")) "melpa-stable"])
  (smartscan . [(0 2) nil "Jumps between other symbols found at point" single ((:keywords "extensions")) "melpa-stable"])
  (smeargle . [(0 1) ((cl-lib (0 5)) (emacs (24))) "Highlighting region by last updated time" single ((:url . "https://github.com/syohex/emacs-smeargle")) "melpa-stable"])
  (smex . [(3 0) nil "M-x interface with Ido-style fuzzy matching." single ((:url . "http://github.com/nonsequitur/smex/") (:keywords "convenience" "usability")) "melpa-stable"])
  (solarized-theme . [(1 2 0) ((dash (2 6 0))) "The Solarized color theme, ported to Emacs." tar nil "melpa-stable"])
  (sourcemap . [(0 2) ((cl-lib (0 5)) (emacs (24))) "Sourcemap parser" single ((:url . "https://github.com/syohex/emacs-sourcemap")) "melpa-stable"])
  (sourcetalk . [(1 2 0) ((request (0 2 0))) "SourceTalk (http://sourcetalk.net) plugin for Emacs" single ((:url . "https://github.com/malroc/sourcetalk_emacs") (:keywords "sourcetalk" "code" "discussion")) "melpa-stable"])
  (sparql-mode . [(0 9 3) nil "Edit and interactively evaluate SPARQL queries." tar ((:url . "https://github.com/ljos/sparql-mode")) "melpa-stable"])
  (sprintly-mode . [(0 0 4) ((furl (0 0 2))) "Major mode for dealing with sprint.ly" single ((:url . "https://github.com/sprintly/sprintly-mode")) "melpa-stable"])
  (stan-mode . [(2 4 2) nil "Major mode for editing Stan files" tar ((:url . "http://github.com/stan-dev/stan-mode") (:keywords "languanges")) "melpa-stable"])
  (stan-snippets . [(2 4 2) ((yasnippet (0 8 0)) (stan-mode (2 4 2))) "Yasnippets for Stan" tar ((:url . "http://github.com/stan-dev/stan-mode") (:keywords "languages")) "melpa-stable"])
  (starter-kit . [(2 0 3) ((paredit (22)) (idle-highlight-mode (1 1 1)) (find-file-in-project (3 0)) (smex (1 1 1)) (ido-ubiquitous (0 3)) (magit (0 8 1))) "Saner defaults and goodies." tar nil "melpa-stable"])
  (starter-kit-bindings . [(2 0 3) ((starter-kit (2 0 2))) "Saner defaults and goodies: bindings" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience")) "melpa-stable"])
  (starter-kit-eshell . [(2 0 3) nil "Saner defaults and goodies: eshell tweaks" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience")) "melpa-stable"])
  (starter-kit-js . [(2 0 3) ((starter-kit (2 0 1))) "Saner defaults and goodies for Javascript" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience")) "melpa-stable"])
  (starter-kit-lisp . [(2 0 3) ((starter-kit (2 0 2)) (elisp-slime-nav (0 1))) "Saner defaults and goodies for lisp languages" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience")) "melpa-stable"])
  (starter-kit-perl . [(2 0 3) nil "Some helpful Perl code" single nil "melpa-stable"])
  (starter-kit-ruby . [(2 0 3) ((inf-ruby (2 2 1)) (starter-kit (2 0 1))) "Saner defaults and goodies for Ruby" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience")) "melpa-stable"])
  (stekene-theme . [(1 0 15) ((emacs (24))) "Low-contrast (except for strings) theme, in light and dark versions." tar nil "melpa-stable"])
  (stgit . [(0 17 1) nil "No description available." single nil "melpa-stable"])
  (string-edit . [(0 1 0) ((dash (1 2 0))) "Avoid escape nightmares by editing string in separate buffer" single nil "melpa-stable"])
  (string-utils . [(0 3 2) ((list-utils (0 4 2))) "String-manipulation utilities" single ((:url . "http://github.com/rolandwalker/string-utils") (:keywords "extensions")) "melpa-stable"])
  (stripe-buffer . [(0 2 4) ((cl-lib (1 0))) "Use a different background for even and odd lines" single ((:url . "https://github.com/sabof/stripe-buffer")) "melpa-stable"])
  (stumpwm-mode . [(0 9 8) nil "special lisp mode for evaluating code into running stumpwm" single ((:keywords "comm" "lisp" "tools")) "melpa-stable"])
  (subshell-proc . [(0 1) nil "Functions for working with comints" single ((:url . "https://github.com/andrewmains12/subshell-proc")) "melpa-stable"])
  (sudden-death . [(0 2) nil "Totsuzen-no-Shi" single ((:url . "https://github.com/yewton/sudden-death.el")) "melpa-stable"])
  (suomalainen-kalenteri . [(2014 6 15) nil "Finnish national and Christian holidays for calendar" tar nil "melpa-stable"])
  (svg-mode-line-themes . [(0 1 1) ((xmlgen (0 4))) "SVG-based themes for mode-line" tar ((:url . "https://github.com/sabof/svg-mode-line-themes")) "melpa-stable"])
  (swift-mode . [(0 3 0) ((emacs (24 1))) "Major-mode for Apple's Swift programming language." single ((:keywords "languages" "swift")) "melpa-stable"])
  (syntactic-sugar . [(0 9 4) nil "Effect-free forms such as if/then/else" single ((:url . "http://github.com/rolandwalker/syntactic-sugar") (:keywords "extensions")) "melpa-stable"])
  (system-specific-settings . [(0 2) nil "Apply settings only on certain systems" single ((:url . "https://github.com/DarwinAwardWinner/emacs-system-specific-settings") (:keywords "configuration")) "melpa-stable"])
  (tabbar-ruler . [(0 40) ((tabbar (2 0 1))) "Pretty tabbar, autohide, use both tabbar/ruler" tar ((:url . "http://github.com/mlf176f2/tabbar-ruler.el") (:keywords "tabbar" "ruler mode" "menu" "tool bar.")) "melpa-stable"])
  (tagedit . [(1 4 0) ((s (1 3 1)) (dash (1 0 3))) "Some paredit-like features for html-mode" single ((:keywords "convenience")) "melpa-stable"])
  (tempbuf . [(1 4) nil "kill unused buffers in the background" single ((:keywords "convenience")) "melpa-stable"])
  (tern . [(0 6 2) ((json (1 2)) (cl-lib (0 5)) (emacs (24))) "Tern-powered JavaScript integration" single ((:url . "http://ternjs.net/")) "melpa-stable"])
  (tern-auto-complete . [(0 6 2) ((tern (0 0 1)) (auto-complete (1 4)) (cl-lib (0 5)) (emacs (24))) "Tern Completion by auto-complete.el" single nil "melpa-stable"])
  (terraform-mode . [(0 1) ((cl-lib (0 5))) "Major mode for terraform configuration file" single ((:url . "https://github.com/syohex/emacs-terraform-mode")) "melpa-stable"])
  (test-case-mode . [(0 1 9) nil "unit test front-end" single ((:url . "http://nschum.de/src/emacs/test-case-mode/") (:keywords "tools")) "melpa-stable"])
  (textmate . [(1) nil "No description available." single nil "melpa-stable"])
  (textmate-to-yas . [(0 21) nil "Import Textmate macros into yasnippet syntax" tar ((:url . "https://github.com/mlf176f2/textmate-to-yas.el/") (:keywords "yasnippet" "textmate")) "melpa-stable"])
  (theme-changer . [(2 1 0) nil "Sunrise/Sunset Theme Changer for Emacs" single ((:url . "https://github.com/hadronzoo/theme-changer") (:keywords "color-theme" "deftheme" "solar" "sunrise" "sunset")) "melpa-stable"])
  (thrift . [(0 9 1) nil "No description available." single nil "melpa-stable"])
  (traad . [(0 4) nil "emacs interface to the traad refactoring server." single ((:url . "https://github.com/abingham/traad")) "melpa-stable"])
  (truthy . [(0 2 8) ((list-utils (0 4 2))) "Test the content of a value" single ((:url . "http://github.com/rolandwalker/truthy") (:keywords "extensions")) "melpa-stable"])
  (ttrss . [(1 7 5) ((emacs (23 1))) "Tiny Tiny RSS elisp bindings" single ((:url . "https://github.com/pedros/ttrss.el") (:keywords "news" "local")) "melpa-stable"])
  (tuareg . [(2 0 8) ((caml (3 12 0 1))) "OCaml mode for Emacs." tar ((:url . "http://forge.ocamlcore.org/projects/tuareg/") (:keywords "ocaml" "languages")) "melpa-stable"])
  (tumble . [(1 5) nil "an Tumblr mode for Emacs" single ((:keywords "tumblr")) "melpa-stable"])
  (tup-mode . [(1 3 1) nil "Major mode for editing files for Tup" single ((:url . "https://github.com/ejmr/tup-mode")) "melpa-stable"])
  (twilight-anti-bright-theme . [(0 3 0) nil "A soothing Emacs 24 light-on-dark theme" single ((:url . "https://github.com/jimeh/twilight-anti-bright-theme.el") (:keywords "themes")) "melpa-stable"])
  (twittering-mode . [(2 0 0) nil "Major mode for Twitter" single ((:url . "http://twmode.sf.net/") (:keywords "twitter" "web")) "melpa-stable"])
  (typo . [(1 1) nil "Minor mode for typographic editing" single ((:url . "https://github.com/jorgenschaefer/typoel") (:keywords "convenience" "wp")) "melpa-stable"])
  (ucs-utils . [(0 8 0) ((persistent-soft (0 8 8)) (pcache (0 2 3)) (list-utils (0 4 2))) "Utilities for Unicode characters" tar ((:url . "http://github.com/rolandwalker/ucs-utils") (:keywords "i18n" "extensions")) "melpa-stable"])
  (undercover . [(0 2 0) ((emacs (24)) (dash (2 0 0)) (shut-up (0 3 2))) "Test coverage library for Emacs" single ((:url . "https://github.com/sviridov/undercover.el") (:keywords "lisp" "tests" "coverage" "tools")) "melpa-stable"])
  (underwater-theme . [(1 1 0) nil "A gentle, deep blue color theme" single ((:keywords "faces")) "melpa-stable"])
  (unfill . [(0 1) nil "The inverse of fill-paragraph and fill-region" single ((:keywords "utilities")) "melpa-stable"])
  (unicode-enbox . [(0 1 4) ((string-utils (0 3 2)) (ucs-utils (0 7 6)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Surround a string with box-drawing characters" single ((:url . "http://github.com/rolandwalker/unicode-enbox") (:keywords "extensions" "interface")) "melpa-stable"])
  (unicode-fonts . [(0 4 2) ((font-utils (0 7 2)) (ucs-utils (0 8 0)) (list-utils (0 4 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Configure Unicode fonts" single ((:url . "http://github.com/rolandwalker/unicode-fonts") (:keywords "i18n" "faces" "frames" "wp" "interface")) "melpa-stable"])
  (unicode-progress-reporter . [(0 5 4) ((emacs (24 1 0)) (ucs-utils (0 7 6)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Progress-reporter with fancy characters" single ((:url . "http://github.com/rolandwalker/unicode-progress-reporter") (:keywords "interface")) "melpa-stable"])
  (unicode-whitespace . [(0 2 4) ((ucs-utils (0 7 6)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "teach whitespace-mode about fancy characters" single ((:url . "http://github.com/rolandwalker/unicode-whitespace") (:keywords "faces" "wp" "interface")) "melpa-stable"])
  (use-package . [(20140601) ((bind-key (1 0)) (diminish (0 44))) "A use-package declaration for simplifying your .emacs" single ((:url . "https://github.com/jwiegley/use-package") (:keywords "dotemacs" "startup" "speed" "config" "package")) "melpa-stable"])
  (utop . [(1 16) ((emacs (24))) "Universal toplevel for OCaml" single ((:url . "https://github.com/diml/utop") (:keywords "ocaml" "languages")) "melpa-stable"])
  (uzumaki . [(0 1) ((cl-lib (0 5))) "A simple buffer cycler" single ((:url . "http://github.com/geyslan/uzumaki") (:keywords "buffer" "convenience")) "melpa-stable"])
  (vcomp . [(0 3 1) nil "compare version strings" single ((:url . "https://github.com/tarsius/vcomp") (:keywords "versions")) "melpa-stable"])
  (vector-utils . [(0 1 2) nil "Vector-manipulation utility functions" single ((:url . "http://github.com/rolandwalker/vector-utils") (:keywords "extensions")) "melpa-stable"])
  (vim-region . [(0 3 0) ((expand-region (20140127))) "Select region as vim" single ((:url . "https://github.com/ongaeshi/emacs-vim-region")) "melpa-stable"])
  (vimgolf . [(0 10 0) nil "VimGolf interface for the One True Editor" single ((:keywords "games" "vimgolf" "vim")) "melpa-stable"])
  (vlf . [(1 6) nil "View Large Files" tar ((:url . "https://github.com/m00natic/vlfi") (:keywords "large files" "utilities")) "melpa-stable"])
  (wacspace . [(0 4 2) ((dash (1 2 0)) (cl-lib (0 2))) "The WACky WorkSPACE manager for emACS" tar nil "melpa-stable"])
  (wc-goal-mode . [(2 1) nil "Running word count with goals (minor mode)" single ((:url . "https://github.com/bnbeckwith/wc-goal-mode")) "melpa-stable"])
  (wcheck-mode . [(2014 6 21) nil "General interface for text checkers" tar nil "melpa-stable"])
  (web-mode . [(10 1) nil "major mode for editing html templates" single ((:url . "http://web-mode.org") (:keywords "html" "template" "javascript" "css" "web" "php" "django" "erb" "jsp")) "melpa-stable"])
  (weechat . [(0 2) ((s (1 3 1)) (cl-lib (0 2)) (emacs (24)) (tracking (1 2))) "Chat via WeeChat's relay protocol in Emacs" tar nil "melpa-stable"])
  (whitespace-cleanup-mode . [(0 9) nil "Intelligently call whitespace-cleanup on save" single ((:url . "https://github.com/purcell/whitespace-cleanup-mode") (:keywords "convenience")) "melpa-stable"])
  (wiki-nav . [(1 0 0) ((button-lock (1 0 0)) (nav-flash (1 0 0))) "Simple file navigation using [[WikiStrings]]" single ((:url . "http://github.com/rolandwalker/button-lock") (:keywords "mouse" "button" "hypermedia" "navigation")) "melpa-stable"])
  (window-end-visible . [(0 1 0) nil "Find the last visible point in a window" single ((:url . "http://github.com/rolandwalker/window-end-visible") (:keywords "extensions")) "melpa-stable"])
  (window-layout . [(1 2) nil "window layout manager" single ((:keywords "window" "layout")) "melpa-stable"])
  (window-numbering . [(1 1 2) nil "No description available." single nil "melpa-stable"])
  (windsize . [(0 1) nil "Simple, intuitive window resizing" single ((:url . "http://github.com/grammati/windsize") (:keywords "window" "resizing" "convenience")) "melpa-stable"])
  (wisp-mode . [(0 8 0) nil "Tools for wisp: the Whitespace-to-Lisp preprocessor" single ((:keywords "languages" "lisp")) "melpa-stable"])
  (wispjs-mode . [(0 2 0) ((clojure-mode (0))) "Major mode for Wisp code." single ((:url . "https://github.com/krisajenkins/wispjs-mode")) "melpa-stable"])
  (wonderland . [(0 1 1) ((dash (2 0 0)) (dash-functional (1 0 0)) (multi (2 0 0)) (emacs (24))) "declarative configuration for Emacsen" single ((:url . "http://github.com/kurisuwhyte/emacs-wonderland") (:keywords "configuration" "profile" "wonderland")) "melpa-stable"])
  (wrap-region . [(0 7 3) ((dash (1 0 3))) "Wrap text with punctation or tag" single ((:url . "http://github.com/rejeep/wrap-region") (:keywords "speed" "convenience")) "melpa-stable"])
  (writegood-mode . [(2 0) nil "Polish up poor writing on the fly" single ((:url . "http://github.com/bnbeckwith/writegood-mode") (:keywords "writing" "weasel-words" "grammar")) "melpa-stable"])
  (writeroom-mode . [(2 5) nil "Minor mode for distraction-free writing" tar ((:keywords "text")) "melpa-stable"])
  (ws-butler . [(0 3) nil "Unobtrusively remove trailing whitespace." single ((:url . "https://github.com/lewang/ws-butler")) "melpa-stable"])
  (xcscope . [(1 1) nil "cscope interface for (X)Emacs" single ((:url . "https://github.com/dkogan/xcscope.el") (:keywords "languages" "c")) "melpa-stable"])
  (xterm-color . [(1 0) nil "ANSI & XTERM 256 color support" single nil "melpa-stable"])
  (xtest . [(1 1 0) ((cl-lib (0 5))) "Simple Testing with Emacs & ERT" single ((:url . "https://github.com/promethial/xtest") (:keywords "testing" "ert")) "melpa-stable"])
  (yafolding . [(0 1 4) nil "Yet another folding extension for Emacs" single ((:keywords "folding")) "melpa-stable"])
  (yagist . [(0 8 10) ((json (1 2 0))) "Yet Another Emacs integration for gist.github.com" single ((:url . "https://github.com/mhayashi1120/yagist.el/raw/master/yagist.el") (:keywords "gist" "git" "github" "paste" "pastie" "pastebin")) "melpa-stable"])
  (yascroll . [(0 1) nil "Yet Another Scroll Bar Mode" single ((:keywords "convenience")) "melpa-stable"])
  (yasnippet . [(0 9 0 1) nil "Yet another snippet extension for Emacs." tar ((:url . "http://github.com/capitaomorte/yasnippet") (:keywords "convenience" "emulation")) "melpa-stable"])
  (zenburn-theme . [(2 0) nil "A low contrast color theme for Emacs." single ((:url . "http://github.com/bbatsov/zenburn-emacs")) "melpa-stable"])
  (zygospore . [(0 0 3) nil "reversible C-x 1 (delete-other-windows)" single ((:url . "https://github.com/louiskottmann/zygospore.el")) "melpa-stable"])
 )
