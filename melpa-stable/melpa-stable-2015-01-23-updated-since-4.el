'(
  (abc-mode . [(20140225 944) nil "Major mode for editing abc music files" single ((:keywords "local" "docs")) "melpa-stable"])
  (ac-cake . [(1 0 0) ((cake (1 4 2)) (auto-complete (1 4))) "CakePHP Minor Mode auto-complete.el source" single ((:url . "http://code.101000lab.org")) "melpa-stable"])
  (ac-cake2 . [(1 0 1) ((cake2 (1 1 2)) (auto-complete (1 4 0))) "CakePHP 2 Minor Mode auto-complete.el source" single ((:url . "http://code.101000lab.org")) "melpa-stable"])
  (ac-cider . [(0 2 1) ((cider (0 8 0)) (auto-complete (1 4)) (cl-lib (0 3))) "Clojure auto-complete sources using CIDER" single ((:url . "https://github.com/clojure-emacs/ac-cider") (:keywords "languages" "clojure" "nrepl" "cider" "compliment")) "melpa-stable"])
  (ac-haskell-process . [(0 5) ((auto-complete (1 4)) (haskell-mode (13))) "Haskell auto-complete source which uses the current haskell process" single ((:keywords "languages")) "melpa-stable"])
  (ace-window . [(0 6 1) ((ace-jump-mode (2 0))) "Quickly switch windows using `ace-jump-mode'." single ((:url . "https://github.com/abo-abo/ace-window") (:keywords "cursor" "window" "location")) "melpa-stable"])
  (ag . [(0 45) ((dash (2 8 0)) (s (1 9 0))) "A front-end for ag ('the silver searcher'), the C ack replacement." single nil "melpa-stable"])
  (alchemist . [(0 13 1) ((emacs (24))) "Elixir tooling integration into emacs" tar ((:url . "http://www.github.com/tonini/alchemist.el") (:keywords "languages" "mix" "elixir" "elixirc" "hex")) "melpa-stable"])
  (ansible . [(0 0 3) ((s (1 9 0)) (f (0 16 2))) "Ansible minor mode" tar ((:url . "http://101000lab.org")) "melpa-stable"])
  (ansible-doc . [(0 3) ((emacs (24 1))) "Ansible documentation Minor Mode" single ((:url . "https://github.com/lunaryorn/ansible-doc.el") (:keywords "tools" "help")) "melpa-stable"])
  (anti-zenburn-theme . [(2 2) nil "Low-contrast Zenburn-inverted theme" single ((:url . "https://github.com/m00natic/anti-zenburn-theme")) "melpa-stable"])
  (anzu . [(0 47) ((cl-lib (0 5)) (emacs (24))) "Show number of matches in mode-line while searching" single ((:url . "https://github.com/syohex/emacs-anzu")) "melpa-stable"])
  (auto-complete-sage . [(0 0 2) ((auto-complete (1 4 0)) (sage-shell-mode (0 0 4))) "An auto-complete source for sage-shell-mode." single ((:url . "https://github.com/stakemori/auto-complete-sage") (:keywords "sage" "math" "auto-complete")) "melpa-stable"])
  (browse-kill-ring . [(2 0 0) nil "interactively insert items from kill-ring" single ((:url . "https://github.com/browse-kill-ring/browse-kill-ring") (:keywords "convenience")) "melpa-stable"])
  (cfengine-code-style . [(3 6 3) nil "C code style for CFEngine project." single ((:url . "https://github.com/cfengine/core")) "melpa-stable"])
  (cider . [(0 8 2) ((clojure-mode (3 0 0)) (cl-lib (0 5)) (dash (2 4 1)) (pkg-info (0 4)) (emacs (24)) (queue (0 1 1))) "Clojure Integrated Development Environment and REPL" tar ((:url . "http://www.github.com/clojure-emacs/cider") (:keywords "languages" "clojure" "cider")) "melpa-stable"])
  (clj-refactor . [(0 13 0) ((s (1 8 0)) (dash (2 4 0)) (yasnippet (0 6 1)) (paredit (22)) (multiple-cursors (1 2 2)) (cider (0 6 0))) "A collection of clojure refactoring functions" single ((:keywords "convenience")) "melpa-stable"])
  (clojure-mode . [(4 0 1) ((emacs (24 1))) "Major mode for Clojure code" single ((:url . "http://github.com/clojure-emacs/clojure-mode") (:keywords "languages" "clojure" "clojurescript" "lisp")) "melpa-stable"])
  (clojure-mode-extra-font-locking . [(4 0 1) ((clojure-mode (3 0))) "Extra font-locking for Clojure mode" single ((:url . "http://github.com/clojure-emacs/clojure-mode") (:keywords "languages" "lisp")) "melpa-stable"])
  (cmake-mode . [(3 1 1) nil "major-mode for editing CMake sources" single nil "melpa-stable"])
  (coffee-mode . [(0 5 8) ((emacs (24 1)) (cl-lib (0 5))) "Major mode to edit CoffeeScript files in Emacs" single ((:url . "http://github.com/defunkt/coffee-mode") (:keywords "coffeescript" "major" "mode")) "melpa-stable"])
  (colorsarenice-theme . [(1 0 19) ((emacs (24))) "A colorful color theme." tar nil "melpa-stable"])
  (company . [(0 8 9) ((emacs (24 1)) (cl-lib (0 5))) "Modular text completion framework" tar ((:url . "http://company-mode.github.io/") (:keywords "abbrev" "convenience" "matching")) "melpa-stable"])
  (company-ghc . [(0 1 9) ((cl-lib (0 5)) (company (0 8 0)) (ghc (4 1 1)) (emacs (24))) "company-mode ghc-mod backend" single ((:url . "https://github.com/iquiw/company-ghc") (:keywords "haskell" "completion")) "melpa-stable"])
  (conkeror-minor-mode . [(1 6 2) nil "Mode for editing conkeror javascript files." single ((:url . "http://github.com/Bruce-Connor/conkeror-minor-mode") (:keywords "programming" "tools")) "melpa-stable"])
  (cpputils-cmake . [(0 5 0) nil "Easy real time C++ syntax check and intellisense if you use CMake" tar nil "melpa-stable"])
  (dash . [(2 10 0) nil "A modern list library for Emacs" single ((:keywords "lists")) "melpa-stable"])
  (dash-functional . [(2 10 0) ((dash (2 0 0)) (emacs (24))) "Collection of useful combinators for Emacs Lisp" single ((:keywords "lisp" "functions" "combinators")) "melpa-stable"])
  (dim-autoload . [(1 1 3) nil "dim complete autoload cookie lines" single ((:url . "http://github.com/tarsius/dim-autoload") (:keywords "convenience")) "melpa-stable"])
  (dired-k . [(0 13) ((cl-lib (0 5)) (emacs (24))) "highlight dired buffer by file size, modified time, git status" tar ((:url . "https://github.com/syohex/emacs-dired-k")) "melpa-stable"])
  (easy-kill . [(0 9 3) ((emacs (24)) (cl-lib (0 5))) "kill & mark things easily" single ((:url . "https://github.com/leoliu/easy-kill") (:keywords "killing" "convenience")) "melpa-stable"])
  (ebib . [(2 1 5) ((dash (2 5 0)) (parsebib (1 0)) (emacs (24 3))) "a BibTeX database manager" tar ((:keywords "text" "bibtex")) "melpa-stable"])
  (editorconfig . [(0 4) nil "EditorConfig Emacs extension" single ((:url . "http://github.com/editorconfig/editorconfig-emacs#readme")) "melpa-stable"])
  (egison-mode . [(3 5 5) nil "Egison editing mode" single ((:url . "https://github.com/egisatoshi/egison3/blob/master/elisp/egison-mode.el")) "melpa-stable"])
  (elfeed . [(1 1 2) ((emacs (24 1))) "an Emacs Atom/RSS feed reader" tar nil "melpa-stable"])
  (elfeed-web . [(1 1 2) ((simple-httpd (1 4 3)) (elfeed (1 0 1)) (emacs (24 1))) "web interface to Elfeed" tar nil "melpa-stable"])
  (elisp-slime-nav . [(0 8) ((cl-lib (0 2))) "Make M-. and M-, work in elisp like they do in slime" single ((:url . "https://github.com/purcell/elisp-slime-nav") (:keywords "navigation" "slime" "elisp" "emacs-lisp")) "melpa-stable"])
  (elixir-mode . [(2 2 0) nil "Major mode for editing Elixir files" tar ((:url . "https://github.com/elixir-lang/emacs-elixir") (:keywords "languages" "elixir")) "melpa-stable"])
  (elmacro . [(0 3 0) ((s (1 9 0)) (dash (1 5 0)) (cl-lib (0 5))) "Convert keyboard macros to elisp" single ((:url . "https://github.com/Silex/elmacro") (:keywords "macro" "elisp" "convenience")) "melpa-stable"])
  (elpy . [(1 6 0) ((company (0 8 2)) (find-file-in-project (3 3)) (highlight-indentation (0 5 0)) (idomenu (0 1)) (pyvenv (1 3)) (yasnippet (0 8 0))) "Emacs Python Development Environment" tar nil "melpa-stable"])
  (elx . [(0 10 0) ((emacs (24 4))) "extract information from Emacs Lisp libraries" single ((:url . "https://github.com/tarsius/elx") (:keywords "docs" "libraries" "packages")) "melpa-stable"])
  (ert-runner . [(0 6 4) ((s (1 6 1)) (dash (1 8 0)) (f (0 10 0)) (commander (0 2 0)) (ansi (0 1 0)) (shut-up (0 1 0))) "Opinionated Ert testing workflow" tar ((:url . "http://github.com/rejeep/ert-runner.el") (:keywords "test")) "melpa-stable"])
  (es-mode . [(4 0 0) nil "A major mode for editing Elasticsearch queries" tar ((:url . "http://www.github.com/dakrone/es-mode") (:keywords "elasticsearch")) "melpa-stable"])
  (evil-jumper . [(0 2 0) ((evil (0))) "Jump like vimmers do!" single ((:url . "https://github.com/bling/evil-jumper") (:keywords "evil" "vim" "jumplist" "jump" "list")) "melpa-stable"])
  (evil-matchit . [(1 4 3) nil "Vim matchit ported into Emacs (requires EVIL)" tar nil "melpa-stable"])
  (evil-nerd-commenter . [(1 5 12) nil "Comment/uncomment lines efficiently. Like Nerd Commenter in Vim" tar nil "melpa-stable"])
  (evil-search-highlight-persist . [(1 3) ((highlight (0))) "Persistent highlights after search" single nil "melpa-stable"])
  (evil-space . [(0 0 3) ((evil (1 0 0))) "Repeat motion in Evil. Correct the behaviour of what SPC should do." single ((:url . "http://github.com/linktohack/evil-space") (:keywords "space" "repeat" "motion")) "melpa-stable"])
  (evil-visualstar . [(0 1 0) ((evil (0))) "Starts a * or # search from the visual selection" single ((:url . "https://github.com/bling/evil-visualstar") (:keywords "evil" "vim" "visualstar")) "melpa-stable"])
  (eww-lnum . [(1 1) nil "Conkeror-like functionality for eww" single ((:url . "https://github.com/m00natic/eww-lnum") (:keywords "eww" "browse" "conkeror")) "melpa-stable"])
  (exec-path-from-shell . [(1 9) nil "Get environment variables such as $PATH from the shell" single ((:url . "https://github.com/purcell/exec-path-from-shell") (:keywords "environment")) "melpa-stable"])
  (f . [(0 17 2) ((s (1 7 0)) (dash (2 2 0))) "Modern API for working with files and directories" single ((:url . "http://github.com/rejeep/f.el") (:keywords "files" "directories")) "melpa-stable"])
  (fasm-mode . [(0 1 11) nil "Fasm major mode" single ((:url . "https://github.com/Fanael/fasm-mode")) "melpa-stable"])
  (floobits . [(1 5 19) ((json (1 2)) (highlight (0))) "Floobits plugin for real-time collaborative editing" tar ((:url . "http://github.com/Floobits/floobits-emacs") (:keywords "comm" "tools")) "melpa-stable"])
  (flycheck . [(0 22) ((dash (2 4 0)) (pkg-info (0 4)) (let-alist (1 0 1)) (cl-lib (0 3)) (emacs (24 1))) "Modern on-the-fly syntax checking for GNU Emacs" tar ((:url . "https://www.flycheck.org") (:keywords "convenience" "languages" "tools")) "melpa-stable"])
  (flycheck-cask . [(0 2 1) ((emacs (24 1)) (flycheck (0 14)) (dash (2 4 0))) "Cask support in Flycheck" single ((:url . "https://github.com/flycheck/flycheck-cask") (:keywords "tools" "convenience")) "melpa-stable"])
  (flycheck-haskell . [(0 5 1) ((flycheck (0 19 -3)) (haskell-mode (13 7)) (dash (2 4 0)) (let-alist (1 0 1))) "Flycheck: Cabal projects and sandboxes" tar ((:url . "https://github.com/flycheck/flycheck-haskell") (:keywords "tools" "convenience")) "melpa-stable"])
  (flyspell-lazy . [(0 6 10) nil "Improve flyspell responsiveness using idle timers" single ((:url . "http://github.com/rolandwalker/flyspell-lazy") (:keywords "spelling")) "melpa-stable"])
  (fountain-mode . [(1 4 5) ((s (1 9 0))) "Major mode for screenwriting in Fountain markup" single ((:url . "https://github.com/rnkn/fountain-mode") (:keywords "wp")) "melpa-stable"])
  (fsharp-mode . [(1 5 1) ((auto-complete (1 4)) (popup (0 5)) (pos-tip (0 4 5)) (s (1 3 1)) (dash (1 1 0))) "F# mode for Emacs" tar nil "melpa-stable"])
  (ggtags . [(0 8 9) ((emacs (24)) (cl-lib (0 5))) "emacs frontend to GNU Global source code tagging system" single ((:url . "https://github.com/leoliu/ggtags") (:keywords "tools" "convenience")) "melpa-stable"])
  (gh . [(0 8 2) ((eieio (1 4)) (pcache (0 2 4)) (logito (0 1))) "A GitHub library for Emacs" tar nil "melpa-stable"])
  (ghc . [(5 2 1 2) nil "Sub mode for Haskell mode" tar nil "melpa-stable"])
  (gist . [(1 2 1) ((eieio (1 4)) (gh (0 8 1)) (tabulated-list (0))) "Emacs integration for gist.github.com" single ((:keywords "gist" "git" "github" "paste" "pastie" "pastebin")) "melpa-stable"])
  (git-auto-commit-mode . [(4 3 0) nil "Emacs Minor mode to automatically commit and push" single ((:url . "http://ryuslash.org/projects/git-auto-commit-mode/") (:keywords "vc")) "melpa-stable"])
  (git-gutter . [(0 80) ((cl-lib (0 5)) (emacs (24))) "Port of Sublime Text plugin GitGutter" single ((:url . "https://github.com/syohex/emacs-git-gutter")) "melpa-stable"])
  (git-timemachine . [(1 9) nil "Walk through git revisions of a file" single ((:url . "https://github.com/pidu/git-timemachine") (:keywords "git")) "melpa-stable"])
  (go-eldoc . [(0 21) ((go-mode (0)) (cl-lib (0 5))) "eldoc for go-mode" single ((:url . "https://github.com/syohex/emacs-go-eldoc")) "melpa-stable"])
  (google-translate . [(0 10 6) nil "Emacs interface to Google Translate." tar nil "melpa-stable"])
  (gotest . [(0 3 0) ((s (1 9 0)) (f (0 17 2)) (go-mode (1 0 0))) "Launch GO unit tests" single ((:url . "https://github.com/nlamirault/gotest.el") (:keywords "languages" "go" "tests")) "melpa-stable"])
  (grails-projectile-mode . [(1 1 1) ((projectile (0 10 0)) (emacs (24)) (cl-lib (0 5))) "Grails mode with Projectile for projects management." tar ((:url . "https://github.com/yveszoundi/grails-projectile-mode") (:keywords "grails" "projectile")) "melpa-stable"])
  (haml-mode . [(3 1 8) ((ruby-mode (1 0))) "Major mode for editing Haml files" single ((:url . "http://github.com/nex3/haml/tree/master") (:keywords "markup" "language" "html")) "melpa-stable"])
  (helm . [(1 6 5) ((emacs (24)) (cl-lib (0 5)) (async (1 2))) "Helm is an Emacs incremental and narrowing framework" tar nil "melpa-stable"])
  (helm-ack . [(0 13) ((helm (1 0)) (cl-lib (0 5))) "Ack command with helm interface" single ((:url . "https://github.com/syohex/emacs-helm-ack")) "melpa-stable"])
  (helm-ag . [(0 31) ((helm (1 5 6)) (cl-lib (0 5))) "the silver searcher with helm interface" single ((:url . "https://github.com/syohex/emacs-helm-ag")) "melpa-stable"])
  (helm-ghq . [(1 4 1) ((helm (1 6 5))) "ghq with helm interface" single ((:url . "https://github.com/masutaka/emacs-helm-ghq")) "melpa-stable"])
  (helm-gtags . [(1 4 5) ((helm (1 5 6)) (cl-lib (0 5))) "GNU GLOBAL helm interface" single ((:url . "https://github.com/syohex/emacs-helm-gtags")) "melpa-stable"])
  (helm-open-github . [(0 12) ((helm (1 0)) (gh (1 0)) (cl-lib (0 5))) "Utilities of Opening Github Page" single ((:url . "https://github.com/syohex/emacs-helm-open-github")) "melpa-stable"])
  (helm-sage . [(0 0 2) ((cl-lib (0 5)) (helm (1 5 6)) (sage-shell-mode (0 0 1))) "A helm extension for sage-shell-mode." single ((:url . "https://github.com/stakemori/helm-sage") (:keywords "sage" "math" "helm")) "melpa-stable"])
  (helm-themes . [(0 5) ((helm (1 0))) "Color theme selection with helm interface" single ((:url . "https://github.com/syohex/emacs-helm-themes")) "melpa-stable"])
  (hookify . [(0 2 1) ((s (1 9 0)) (dash (1 5 0))) "Interactive commands to create temporary hooks" single ((:url . "https://github.com/Silex/hookify") (:keywords "hook" "convenience")) "melpa-stable"])
  (ido-ubiquitous . [(2 16) ((emacs (24 1))) "Use ido (nearly) everywhere." single ((:url . "https://github.com/DarwinAwardWinner/ido-ubiquitous") (:keywords "convenience" "completion" "ido")) "melpa-stable"])
  (idris-mode . [(0 9 15) ((emacs (24))) "Major mode for editing Idris code" tar ((:url . "https://github.com/idris-hackers/idris-mode") (:keywords "languages")) "melpa-stable"])
  (init-loader . [(0 2) nil "Loader for configuration files" single ((:url . "https://github.com/emacs-jp/init-loader/")) "melpa-stable"])
  (insert-shebang . [(0 9 4) nil "Insert shebang line automatically." single ((:url . "http://github.com/psachin/insert-shebang") (:keywords "shebang" "tool" "convenience")) "melpa-stable"])
  (irony . [(0 1 2) ((cl-lib (0 5))) "C/C++ minor mode powered by libclang" tar ((:url . "https://github.com/Sarcasm/irony-mode") (:keywords "c" "convenience" "tools")) "melpa-stable"])
  (js2-mode . [(20141118) ((emacs (24 1))) "Improved JavaScript editing mode" tar ((:url . "https://github.com/mooz/js2-mode/") (:keywords "languages" "javascript")) "melpa-stable"])
  (julia-mode . [(0 3 5) nil "No description available." single nil "melpa-stable"])
  (keychain-environment . [(2 1 0) nil "load keychain environment variables" single ((:url . "https://github.com/tarsius/keychain-environment") (:keywords "gnupg" "pgp" "ssh")) "melpa-stable"])
  (langtool . [(1 2 2) nil "Grammar check utility using LanguageTool" single ((:url . "https://github.com/mhayashi1120/Emacs-langtool/raw/master/langtool.el") (:keywords "docs")) "melpa-stable"])
  (lispy . [(0 21 0) ((helm (1 5 3)) (ace-jump-mode (2 0)) (s (1 4 0)) (multiple-cursors (1 3 0)) (iedit (0 97)) (highlight (0))) "vi-like Paredit" tar nil "melpa-stable"])
  (m-buffer . [(0 8) ((dash (2 8 0)) (emacs (24 3))) "List-Oriented, Functional Buffer Manipulation" tar nil "melpa-stable"])
  (magit . [(90150116) ((cl-lib (0 3)) (git-commit-mode (0 14 0)) (git-rebase-mode (0 14 0))) "control Git from Emacs" tar ((:keywords "vc" "tools")) "melpa-stable"])
  (magit-stgit . [(90150116) ((cl-lib (0 3)) (magit (1 3 0))) "StGit plug-in for Magit" single ((:keywords "vc" "tools")) "melpa-stable"])
  (magit-svn . [(90150116) ((cl-lib (0 3)) (magit (1 3 0))) "git-svn plug-in for Magit" single ((:keywords "vc" "tools")) "melpa-stable"])
  (magit-topgit . [(90150116) ((cl-lib (0 3)) (magit (1 3 0))) "topgit plug-in for Magit" single ((:keywords "vc" "tools")) "melpa-stable"])
  (malinka . [(0 3 1) ((s (1 9 0)) (dash (2 4 0)) (f (0 11 0)) (cl-lib (0 3)) (rtags (0 0)) (projectile (0 11 0))) "A C/C++ project configuration package for Emacs" single ((:url . "https://github.com/LefterisJP/malinka") (:keywords "c" "c++" "project-management")) "melpa-stable"])
  (markdown-toc . [(0 0 7) ((s (1 7 0)) (dash (2 5 0)) (markdown-mode (2 0))) "A simple TOC generator for markdown file" tar nil "melpa-stable"])
  (mc-extras . [(1 1) ((multiple-cursors (1 2 1))) "Extra functions for multiple-cursors mode." tar ((:url . "https://github.com/knu/mc-extras.el") (:keywords "editing" "cursors")) "melpa-stable"])
  (merlin . [(2 1) nil "Mode for Merlin, an assistant for OCaml." tar ((:url . "http://github.com/the-lambda-church/merlin") (:keywords "ocaml" "languages")) "melpa-stable"])
  (minitest . [(0 8 0) ((dash (1 0 0))) "An Emacs mode for ruby minitest files" tar ((:url . "https://github.com/arthurnn/minitest-emacs")) "melpa-stable"])
  (mmm-mode . [(0 5 2) nil "Allow Multiple Major Modes in a buffer" tar ((:url . "https://github.com/purcell/mmm-mode") (:keywords "convenience" "faces" "languages" "tools")) "melpa-stable"])
  (names . [(0 5 4) ((emacs (24 1)) (cl-lib (0 5))) "Namespaces for emacs-lisp. Works like C++ namespaces to avoid name clobbering." tar ((:url . "http://github.com/Bruce-Connor/names") (:keywords "extensions" "lisp")) "melpa-stable"])
  (ninja-mode . [(1 5 3) ((emacs (24))) "Major mode for editing .ninja files" single nil "melpa-stable"])
  (nix-mode . [(1 8) nil "Major mode for editing Nix expressions" single ((:url . "https://github.com/NixOS/nix/tree/master/misc/emacs")) "melpa-stable"])
  (notmuch . [(0 19) nil "No description available." tar nil "melpa-stable"])
  (org-journal . [(1 6 4) nil "a simple org-mode based journaling mode" single ((:url . "http://github.com/bastibe/org-journal")) "melpa-stable"])
  (org-trello . [(0 6 8) ((request-deferred (0 1 0)) (deferred (0 3 2)) (s (1 9 0)) (dash (2 8 0)) (emacs (24))) "Minor mode to synchronize org-mode buffer and trello board" tar nil "melpa-stable"])
  (orglink . [(0 2 2) ((dash (1 3 2)) (org (8 0))) "use Org Mode links in other modes" single ((:url . "http://github.com/tarsius/orglink") (:keywords "hypertext")) "melpa-stable"])
  (package-safe-delete . [(0 1 7) ((emacs (24)) (epl (0 7 -3))) "Safely delete package.el packages" single ((:url . "https://github.com/Fanael/package-safe-delete")) "melpa-stable"])
  (packed . [(0 4 0) ((cl-lib (0 5))) "package manager agnostic Emacs Lisp package utilities" single ((:url . "https://github.com/tarsius/packed") (:keywords "compile" "convenience" "lisp" "package" "library")) "melpa-stable"])
  (pallet . [(0 9 0) ((s (1 9 0)) (f (0 17 1)) (cask (0 7))) "A package management tool for Emacs, using Cask." tar nil "melpa-stable"])
  (pandoc-mode . [(2 8) nil "Minor mode for interacting with Pandoc" tar ((:keywords "text" "pandoc")) "melpa-stable"])
  (paradox . [(1 5) ((emacs (24 1)) (dash (2 6 0)) (cl-lib (0 5)) (json (1 3))) "A modern Packages Menu. Colored, with package ratings, and customizable." tar ((:url . "http://github.com/Bruce-Connor/paradox") (:keywords "package" "packages" "mode-line")) "melpa-stable"])
  (paredit . [(24) nil "minor mode for editing parentheses" single ((:keywords "lisp")) "melpa-stable"])
  (paren-face . [(0 1 1) nil "a face for parentheses in lisp modes" single ((:url . "http://github.com/tarsius/paren-face")) "melpa-stable"])
  (passthword . [(1 4) ((cl-lib (0 5))) "Simple password manager" single nil "melpa-stable"])
  (phi-search-mc . [(2 2) ((phi-search (2 0 0)) (multiple-cursors (1 2 1))) "multiple-cursors extension for phi-search" single ((:url . "https://github.com/knu/phi-search-mc.el") (:keywords "search" "cursors")) "melpa-stable"])
  (popup . [(0 5 2) ((cl-lib (0 3))) "Visual Popup User Interface" single ((:keywords "lisp")) "melpa-stable"])
  (popup-complete . [(0 2) ((popup (0 5 0))) "completion with popup" single ((:url . "https://github.com/syohex/emacs-popup-complete")) "melpa-stable"])
  (pretty-mode . [(2 0 3) nil "Redisplay parts of the buffer as pretty symbols." single ((:url . "https://github.com/akatov/pretty-mode") (:keywords "pretty" "unicode" "symbols")) "melpa-stable"])
  (project-explorer . [(0 13 5) ((cl-lib (0 3)) (es-lib (0 3)) (es-windows (0 1)) (emacs (24))) "A project explorer sidebar" single ((:url . "https://github.com/sabof/project-explorer")) "melpa-stable"])
  (psci . [(0 0 6) ((purescript-mode (13 10)) (dash (2 9 0)) (s (1 9 0)) (f (0 17 1)) (deferred (0 3 2))) "Major mode for purescript repl psci" tar ((:url . "https://github.com/ardumont/emacs-psci") (:keywords "purescript" "psci" "repl" "major" "mode")) "melpa-stable"])
  (punctuality-logger . [(0 8) nil "Punctuality logger for Emacs" single ((:url . "https://gitlab.com/elzair/punctuality-logger") (:keywords "reminder" "calendar")) "melpa-stable"])
  (pungi . [(0 9 7) ((jedi (0 2 0 -3 2)) (pyvenv (1 4))) "Integrates jedi with virtualenv and buildout python environments" single ((:keywords "convenience")) "melpa-stable"])
  (pyvenv . [(1 5) nil "Python virtual environment interface" single ((:url . "http://github.com/jorgenschaefer/pyvenv") (:keywords "python" "virtualenv" "tools")) "melpa-stable"])
  (quickrun . [(2 2 1) ((emacs (24)) (cl-lib (0 5))) "Run commands quickly" single ((:url . "https://github.com/syohex/emacs-quickrun")) "melpa-stable"])
  (rainbow-delimiters . [(2 1) nil "Highlight brackets according to their depth" single ((:url . "https://github.com/Fanael/rainbow-delimiters") (:keywords "faces" "convenience" "lisp" "tools")) "melpa-stable"])
  (rainbow-identifiers . [(0 2 2) ((emacs (24))) "Highlight identifiers according to their names" single ((:url . "https://github.com/Fanael/rainbow-identifiers")) "melpa-stable"])
  (req-package . [(0 9) ((use-package (1 0)) (dash (2 7 0)) (log4e (0 2 0))) "A use-package wrapper for package runtime dependencies management" single ((:url . "https://github.com/edvorg/req-package") (:keywords "dotemacs" "startup" "speed" "config" "package")) "melpa-stable"])
  (ruby-end . [(0 4 1) nil "Automatic insertion of end blocks for Ruby" single ((:url . "http://github.com/rejeep/ruby-end") (:keywords "speed" "convenience" "ruby")) "melpa-stable"])
  (rust-mode . [(1 0 0 -3) nil "A major emacs mode for editing Rust source code" single ((:url . "https://github.com/rust-lang/rust") (:keywords "languages")) "melpa-stable"])
  (sage-shell-mode . [(0 0 4 2) ((cl-lib (0 5)) (deferred (0 3 1))) "A front-end for Sage Math" tar ((:url . "https://github.com/stakemori/sage-shell-mode") (:keywords "sage" "math")) "melpa-stable"])
  (sekka . [(1 5 8) ((cl-lib (0 3)) (concurrent (0 3 1)) (popup (0 5 0))) "A client for Sekka IME server" single ((:url . "https://github.com/kiyoka/sekka") (:keywords "ime" "skk" "japanese")) "melpa-stable"])
  (serverspec . [(0 0 6) ((dash (2 6 0)) (s (1 9 0)) (f (0 16 2)) (helm (1 6 1))) "Serverspec minor mode" tar ((:url . "http://101000lab.org")) "melpa-stable"])
  (shm . [(1 0 10) nil "Structured Haskell Mode" tar ((:keywords "development" "haskell" "structured")) "melpa-stable"])
  (skeletor . [(1 5 1) ((s (1 7 0)) (f (0 14 0)) (dash (2 2 0)) (cl-lib (0 3)) (let-alist (1 0 3)) (emacs (24 1))) "Provides project skeletons for Emacs" tar nil "melpa-stable"])
  (slime . [(2 12) ((cl-lib (0 5))) "Superior Lisp Interaction Mode for Emacs" tar ((:url . "https://github.com/slime/slime") (:keywords "languages" "lisp" "slime")) "melpa-stable"])
  (smart-mode-line . [(2 8) ((emacs (24 3)) (dash (2 2 0)) (rich-minority (0 1))) "A color coded smart mode-line." tar ((:url . "http://github.com/Bruce-Connor/smart-mode-line") (:keywords "mode-line" "faces" "theme" "themes")) "melpa-stable"])
  (smart-mode-line-powerline-theme . [(2 8) ((emacs (24 3)) (powerline (2 2)) (smart-mode-line (2 5))) "smart-mode-line theme that mimics the powerline appearance." single ((:url . "http://github.com/Bruce-Connor/smart-mode-line")) "melpa-stable"])
  (smeargle . [(0 2) ((cl-lib (0 5)) (emacs (24))) "Highlighting region by last updated time" single ((:url . "https://github.com/syohex/emacs-smeargle")) "melpa-stable"])
  (stan-mode . [(4 0 0) ((auto-complete (1 4 0))) "Major mode for editing Stan files" tar ((:url . "http://github.com/stan-dev/stan-mode") (:keywords "languanges")) "melpa-stable"])
  (stan-snippets . [(4 0 0) ((yasnippet (0 8 0)) (stan-mode (4 0 0))) "Yasnippets for Stan" tar ((:url . "http://github.com/stan-dev/stan-mode") (:keywords "languages")) "melpa-stable"])
  (stekene-theme . [(1 0 15) ((emacs (24))) "Low-contrast (except for strings) theme, in light and dark versions." tar nil "melpa-stable"])
  (stripe-buffer . [(0 2 5) ((cl-lib (1 0))) "Use a different background for even and odd lines" single ((:url . "https://github.com/sabof/stripe-buffer")) "melpa-stable"])
  (tern . [(0 8 0) ((json (1 2)) (cl-lib (0 5)) (emacs (24))) "Tern-powered JavaScript integration" single ((:url . "http://ternjs.net/")) "melpa-stable"])
  (tern-auto-complete . [(0 8 0) ((tern (0 0 1)) (auto-complete (1 4)) (cl-lib (0 5)) (emacs (24))) "Tern Completion by auto-complete.el" single nil "melpa-stable"])
  (thrift . [(0 9 2) nil "Major mode for Apache Thrift files" single ((:keywords "files")) "melpa-stable"])
  (traad . [(0 4) nil "emacs interface to the traad refactoring server." tar ((:url . "https://github.com/abingham/traad")) "melpa-stable"])
  (undercover . [(0 4 0) ((emacs (24)) (dash (2 0 0)) (shut-up (0 3 2))) "Test coverage library for Emacs" single ((:url . "https://github.com/sviridov/undercover.el") (:keywords "lisp" "tests" "coverage" "tools")) "melpa-stable"])
  (utop . [(1 17) ((emacs (24))) "Universal toplevel for OCaml" single ((:url . "https://github.com/diml/utop") (:keywords "ocaml" "languages")) "melpa-stable"])
  (vlf . [(1 7) nil "View Large Files" tar ((:url . "https://github.com/m00natic/vlfi") (:keywords "large files" "utilities")) "melpa-stable"])
  (web-mode . [(10 3) nil "major mode for editing web templates" single ((:url . "http://web-mode.org") (:keywords "languages")) "melpa-stable"])
  (whitespace-cleanup-mode . [(0 10) nil "Intelligently call whitespace-cleanup on save" single ((:url . "https://github.com/purcell/whitespace-cleanup-mode") (:keywords "convenience")) "melpa-stable"])
  (wisp-mode . [(0 8 1) nil "Tools for wisp: the Whitespace-to-Lisp preprocessor" single ((:keywords "languages" "lisp")) "melpa-stable"])
  (writeroom-mode . [(2 9) ((emacs (24 1)) (visual-fill-column (1 4))) "Minor mode for distraction-free writing" tar ((:keywords "text")) "melpa-stable"])
  (yagist . [(0 8 11) ((json (1 2 0))) "Yet Another Emacs integration for gist.github.com" single ((:url . "https://github.com/mhayashi1120/yagist.el/raw/master/yagist.el") (:keywords "gist" "git" "github" "paste" "pastie" "pastebin")) "melpa-stable"])
  (zenburn-theme . [(2 2) nil "A low contrast color theme for Emacs." single ((:url . "http://github.com/bbatsov/zenburn-emacs")) "melpa-stable"])
 )
