'(
  (ac-alchemist [cl-struct-package-desc ac-alchemist (0 1) "auto-complete source for alchemist" ((auto-complete (1 5 0)) (alchemist (1 3 1)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-ac-alchemist")) nil])
  (ac-anaconda [cl-struct-package-desc ac-anaconda (0 1 0) "Anaconda sources for auto-complete-mode" ((auto-complete (1 4 0)) (anaconda-mode (0 1 1)) (dash (2 6 0))) single "melpa-stable" nil ((:url . "https://github.com/proofit404/ac-anaconda")) nil])
  (ac-capf [cl-struct-package-desc ac-capf (0 1) "auto-complete source with completion-at-point" ((auto-complete (1 4)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-ac-capf")) nil])
  (ac-clang [cl-struct-package-desc ac-clang (1 6 0) "Auto Completion source by libclang for GNU Emacs" ((emacs (24)) (cl-lib (0 5)) (auto-complete (1 4 0)) (pos-tip (0 4 6)) (yasnippet (0 8 0))) tar "melpa-stable" nil ((:url . "https://github.com/yaruopooner/ac-clang") (:keywords "completion" "convenience" "intellisense")) nil])
  (ac-emoji [cl-struct-package-desc ac-emoji (0 2) "auto-complete source of Emoji" ((auto-complete (1 5 0)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-ac-emoji")) nil])
  (ac-html [cl-struct-package-desc ac-html (0 31) "auto complete source for html tags and attributes" ((auto-complete (1 4)) (web-completion-data (0 1))) tar "melpa-stable" nil ((:url . "https://github.com/cheunghy/ac-html") (:keywords "html" "auto-complete" "rails" "ruby")) nil])
  (ac-html-bootstrap [cl-struct-package-desc ac-html-bootstrap (0 9 3) "auto complete bootstrap3/fontawesome classes for `ac-html' and `company-web'" ((web-completion-data (0 1))) tar "melpa-stable" nil ((:url . "https://github.com/osv/ac-html-bootstrap") (:keywords "html" "auto-complete" "bootstrap" "cssx")) nil])
  (ac-html-csswatcher [cl-struct-package-desc ac-html-csswatcher (0 1 7) "css/less class/id completion with `ac-html' or `company-web'" ((web-completion-data (0 1))) single "melpa-stable" nil ((:url . "https://github.com/osv/ac-html-csswatcher") (:keywords "html" "css" "less" "auto-complete")) nil])
  (ac-mozc [cl-struct-package-desc ac-mozc (0 0 4) "auto-complete sources for Japanese input using Mozc" ((cl-lib (0 5)) (auto-complete (1 4)) (mozc (0))) single "melpa-stable" nil ((:url . "https://github.com/igjit/ac-mozc")) nil])
  (ac-php [cl-struct-package-desc ac-php (1 6 0) "Auto Completion source for php for GNU Emacs" ((emacs (24)) (php-mode (1)) (auto-complete (1 4 0)) (yasnippet (0 8 0)) (xcscope (1)) (s (1)) (f (1))) tar "melpa-stable" nil ((:url . "https://github.com/xcwen/ac-php") (:keywords "completion" "convenience" "intellisense")) nil])
  (ac-racer [cl-struct-package-desc ac-racer (0 1) "auto-complete source of racer" ((auto-complete (1 5 0)) (racer (0 0 2)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-ac-racer")) nil])
  (ace-flyspell [cl-struct-package-desc ace-flyspell (0 1 2) "Jump to and correct spelling errors using `ace-jump-mode' and flyspell" ((ace-jump-mode (2 0))) single "melpa-stable" nil ((:url . "https://github.com/cute-jumper/ace-flyspell") (:keywords "extensions")) nil])
  (ace-isearch [cl-struct-package-desc ace-isearch (0 1 4) "A seamless bridge between isearch, ace-jump-mode, avy and helm-swoop" ((ace-jump-mode (2 0)) (avy (0 3)) (helm-swoop (1 4)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/tam17aki/ace-isearch")) nil])
  (ace-jump-buffer [cl-struct-package-desc ace-jump-buffer (0 3 1) "fast buffer switching extension to `ace-jump-mode'" ((ace-jump-mode (1 0)) (dash (2 4 0))) single "melpa-stable" nil ((:url . "https://github.com/waymondo/ace-jump-buffer")) nil])
  (ace-jump-helm-line [cl-struct-package-desc ace-jump-helm-line (0 3 3) "Ace-jump to a candidate in helm window" ((avy (0 2 0)) (helm (1 6 3))) single "melpa-stable" nil ((:url . "https://github.com/cute-jumper/ace-jump-helm-line") (:keywords "extensions")) nil])
  (ace-jump-zap [cl-struct-package-desc ace-jump-zap (0 1 1) "Character zapping, `ace-jump-mode` style" ((ace-jump-mode (1 0)) (dash (2 10 0))) single "melpa-stable" nil ((:url . "https://github.com/waymondo/ace-jump-zap") (:keywords "convenience" "tools" "extensions")) nil])
  (ace-link [cl-struct-package-desc ace-link (0 3 0) "Quickly follow links using `ace-jump-mode'" ((ace-jump-mode (2 0))) single "melpa-stable" nil ((:url . "https://github.com/abo-abo/ace-link") (:keywords "convenience" "links")) nil])
  (ace-pinyin [cl-struct-package-desc ace-pinyin (0 2 3) "Jump to Chinese characters using ace-jump-char-mode or avy-goto-char" ((ace-jump-mode (2 0)) (avy (0 2 0))) single "melpa-stable" nil ((:url . "https://github.com/cute-jumper/ace-pinyin") (:keywords "extensions")) nil])
  (ace-popup-menu [cl-struct-package-desc ace-popup-menu (0 1 1) "Replace GUI popup menu in Emacs with something more efficient" ((emacs (24 4)) (cl-lib (0 5)) (avy (0 3 0))) single "melpa-stable" nil ((:url . "https://github.com/mrkkrp/ace-popup-menu") (:keywords "convenience" "popup" "menu")) nil])
  (aggressive-indent [cl-struct-package-desc aggressive-indent (1 4 1) "Minor mode to aggressively keep your code always indented" ((emacs (24 1)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/Malabarba/aggressive-indent-mode") (:keywords "indent" "lisp" "maint" "tools")) nil])
  (ahk-mode [cl-struct-package-desc ahk-mode (1 5 5) "Major mode for editing AHK (AutoHotkey and AutoHotkey_L)" nil single "melpa-stable" nil ((:url . "https://github.com/ralesi/ahk-mode") (:keywords "ahk" "autohotkey" "hotkey" "keyboard shortcut" "automation")) nil])
  (airline-themes [cl-struct-package-desc airline-themes (1 2) "vim-airline themes for emacs powerline" ((powerline (2 3))) tar "melpa-stable" nil ((:url . "http://github.com/AnthonyDiGirolamo/airline-themes.el") (:keywords "evil" "mode-line" "powerline" "airline" "themes")) nil])
  (alert [cl-struct-package-desc alert (1 2) "Growl-style notification system for Emacs" ((gntp (0 1)) (log4e (0 3 0))) single "melpa-stable" nil ((:url . "https://github.com/jwiegley/alert") (:keywords "notification" "emacs" "message")) nil])
  (amd-mode [cl-struct-package-desc amd-mode (1 0) "Minor mode for handling JavaScript AMD module requirements." ((projectile (0 10 0)) (s (1 9 0)) (f (0 16 2)) (dash (2 5 0)) (makey (0 3)) (js2-mode (20140114)) (js2-refactor (0 6 1))) single "melpa-stable" nil ((:keywords "javascript" "amd" "projectile")) nil])
  (android-mode [cl-struct-package-desc android-mode (0 4 0) "Minor mode for Android application development" nil single "melpa-stable" nil ((:url . "https://github.com/remvee/android-mode") (:keywords "tools" "processes")) nil])
  (angularjs-mode [cl-struct-package-desc angularjs-mode (1 0) "No description available." nil tar "melpa-stable" nil nil nil])
  (annotate [cl-struct-package-desc annotate (0 4 4) "annotate files without changing them" nil single "melpa-stable" nil ((:url . "https://github.com/bastibe/annotate.el")) nil])
  (annoying-arrows-mode [cl-struct-package-desc annoying-arrows-mode (0 1 0) "Ring the bell if using arrows too much" nil single "melpa-stable" nil nil nil])
  (aproject [cl-struct-package-desc aproject (0 3) "Basic project framework for Emacs" nil tar "melpa-stable" nil ((:url . "https://github.com/vietor/aproject") (:keywords "environment" "project")) nil])
  (artbollocks-mode [cl-struct-package-desc artbollocks-mode (1 1 2) "Improve your writing (especially about art)" nil single "melpa-stable" nil ((:url . "https://github.com/sachac/artbollocks-mode")) nil])
  (asilea [cl-struct-package-desc asilea (0 2 1) "Find best compiler options using simulated annealing" ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/Fanael/asilea")) nil])
  (aurora-config-mode [cl-struct-package-desc aurora-config-mode (0 0 2) "Major mode for Apache Aurora configuration files" nil single "melpa-stable" nil ((:url . "https://github.com/bdd/aurora-config.el") (:keywords "languages" "configuration")) nil])
  (auth-password-store [cl-struct-package-desc auth-password-store (1 0 3) "Integrate auth-source with password-store" ((emacs (24 4)) (password-store (0 1)) (seq (1 9)) (cl-lib (0 5))) single "melpa-stable" nil ((:keywords "pass" "password-store" "auth-source" "username" "password" "login")) nil])
  (auto-complete-nxml [cl-struct-package-desc auto-complete-nxml (0 5 0) "do completion by auto-complete.el on nXML-mode" ((auto-complete (1 4))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/auto-complete-nxml") (:keywords "completion" "html" "xml")) nil])
  (auto-complete-pcmp [cl-struct-package-desc auto-complete-pcmp (0 0 2) "Provide auto-complete sources using pcomplete results" ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 1))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/auto-complete-pcmp") (:keywords "completion")) nil])
  (auto-package-update [cl-struct-package-desc auto-package-update (1 6 1) "Automatically update Emacs packages." ((emacs (24 4)) (dash (2 1 0))) single "melpa-stable" nil ((:url . "http://github.com/rranelli/auto-package-update.el") (:keywords "package" "update")) nil])
  (auto-yasnippet [cl-struct-package-desc auto-yasnippet (0 3 0) "Quickly create disposable yasnippets" ((yasnippet (0 8 0))) single "melpa-stable" nil ((:url . "https://github.com/abo-abo/auto-yasnippet")) nil])
  (autodisass-java-bytecode [cl-struct-package-desc autodisass-java-bytecode (1 3) "Automatically disassemble Java bytecode" nil tar "melpa-stable" nil nil nil])
  (autodisass-llvm-bitcode [cl-struct-package-desc autodisass-llvm-bitcode (1 1) "Automatically disassemble LLVM bitcode" nil tar "melpa-stable" nil nil nil])
  (avy [cl-struct-package-desc avy (0 3 0) "set-based completion" ((emacs (24 1)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/abo-abo/avy") (:keywords "point" "location")) nil])
  (avy-migemo [cl-struct-package-desc avy-migemo (0 2 11) "avy with migemo" ((emacs (24 4)) (avy (0 3)) (migemo (1 9))) tar "melpa-stable" nil ((:url . "https://github.com/momomo5717/avy-migemo") (:keywords "avy" "migemo")) nil])
  (avy-zap [cl-struct-package-desc avy-zap (0 1 4) "Zap to char using `avy'" ((avy (0 2 0))) single "melpa-stable" nil ((:url . "https://github.com/cute-jumper/avy-zap") (:keywords "extensions")) nil])
  (badwolf-theme [cl-struct-package-desc badwolf-theme (1 0) "Bad Wolf color theme" ((emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/bkruczyk/badwolf") (:keywords "faces")) nil])
  (bash-completion [cl-struct-package-desc bash-completion (2 0 0) "BASH completion for the shell buffer" nil tar "melpa-stable" nil nil nil])
  (bbdb- [cl-struct-package-desc bbdb- (0 0 2) "provide interface for more easily search/choice than BBDB." ((bbdb (20140123 1541)) (log4e (0 2 0)) (yaxception (0 1))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/bbdb-") (:keywords "bbdb" "news" "mail")) nil])
  (beginend [cl-struct-package-desc beginend (1 0 0) "Redefine M-< and M-> for some modes" ((emacs (24 4))) single "melpa-stable" nil ((:keywords "dired" "message" "mu4e" "begin" "end" "beginning" "buffer")) nil])
  (better-defaults [cl-struct-package-desc better-defaults (0 1 2) "Fixing weird quirks and poor defaults" nil single "melpa-stable" nil ((:url . "https://github.com/technomancy/better-defaults") (:keywords "convenience")) nil])
  (bing-dict [cl-struct-package-desc bing-dict (0 2 1) "Minimalists' English-Chinese Bing dictionary" nil single "melpa-stable" nil ((:url . "https://github.com/cute-jumper/bing-dict.el") (:keywords "extensions")) nil])
  (bongo [cl-struct-package-desc bongo (1 0) "play music with Emacs" nil tar "melpa-stable" nil nil nil])
  (boon [cl-struct-package-desc boon (0 2) "Ergonomic Command Mode for Emacs." ((emacs (24 5)) (expand-region (0 10 0))) tar "melpa-stable" nil nil nil])
  (boxquote [cl-struct-package-desc boxquote (1 22) "Quote text with a semi-box." nil single "melpa-stable" nil nil nil])
  (bury-successful-compilation [cl-struct-package-desc bury-successful-compilation (0 1) "Bury the *compilation* buffer after successful compilation" nil single "melpa-stable" nil ((:keywords "compilation")) nil])
  (buttercup [cl-struct-package-desc buttercup (1 1) "Behavior-Driven Emacs Lisp Testing" nil tar "melpa-stable" nil nil nil])
  (camcorder [cl-struct-package-desc camcorder (0 2) "Record screencasts in gif or other formats." ((emacs (24)) (names (20150000)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "http://github.com/Bruce-Connor/camcorder.el") (:keywords "multimedia" "screencast")) nil])
  (cask-package-toolset [cl-struct-package-desc cask-package-toolset (0 6 6) "Toolsettize your package" ((emacs (24)) (cl-lib (0 3)) (s (1 6 1)) (dash (1 8 0)) (f (0 10 0)) (commander (0 2 0)) (ansi (0 1 0)) (shut-up (0 1 0))) tar "melpa-stable" nil ((:url . "http://github.com/AdrieanKhisbe/cask-package-toolset.el") (:keywords "convenience" "tools")) nil])
  (caskxy [cl-struct-package-desc caskxy (0 0 5) "Control Cask in Emacs" ((log4e (0 2 0)) (yaxception (0 1))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/caskxy") (:keywords "convenience")) nil])
  (celery [cl-struct-package-desc celery (0 0 3) "a minor mode to draw stats from celery and more?" ((emacs (24)) (dash-functional (2 11 0)) (s (1 9 0)) (deferred (0 3 2))) single "melpa-stable" nil ((:url . "https://github.com/ardumont/emacs-celery") (:keywords "celery" "convenience")) nil])
  (checkbox [cl-struct-package-desc checkbox (0 2 1) "Quick manipulation of textual checkboxes" ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "http://github.com/camdez/checkbox.el") (:keywords "convenience")) nil])
  (chinese-word-at-point [cl-struct-package-desc chinese-word-at-point (0 2 3) "Add `chinese-word' thing to `thing-at-point'" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/xuchunyang/chinese-word-at-point.el") (:keywords "convenience" "chinese")) nil])
  (cider-eval-sexp-fu [cl-struct-package-desc cider-eval-sexp-fu (1 0) "Briefly highlights an evaluated sexps." ((emacs (24)) (highlight (0)) (eval-sexp-fu (0 4 0))) single "melpa-stable" nil ((:keywords "languages" "clojure" "cider")) nil])
  (cil-mode [cl-struct-package-desc cil-mode (0 3) "Common Intermediate Language mode" nil single "melpa-stable" nil ((:url . "https://github.com/ForNeVeR/cil-mode") (:keywords "languages")) nil])
  (circe [cl-struct-package-desc circe (2 0) "Client for IRC in Emacs" ((cl-lib (0 5))) tar "melpa-stable" nil nil nil])
  (cliphist [cl-struct-package-desc cliphist (0 1 1) "Read clipboard history from Parcellite on Linux and Flycut on OS X" ((popup (0 5 0))) tar "melpa-stable" nil ((:url . "http://github.com/redguardtoo/cliphist") (:keywords "clipboard" "manager" "history")) nil])
  (cljr-helm [cl-struct-package-desc cljr-helm (0 7) "Wraps clojure refactor commands with helm" ((clj-refactor (0 13 0)) (helm (1 5 6))) single "melpa-stable" nil ((:url . "https://github.com/philjackson/cljr-helm") (:keywords "helm" "clojure" "refactor")) nil])
  (clocker [cl-struct-package-desc clocker (0 0 10) "Note taker and clock-in enforcer" ((projectile (0 11 0)) (dash (2 10))) single "melpa-stable" nil ((:keywords "org")) nil])
  (clojure-quick-repls [cl-struct-package-desc clojure-quick-repls (0 1 0) "Quickly create Clojure and ClojureScript repls for a project." ((cider (0 8 1)) (dash (2 9 0))) single "melpa-stable" nil ((:url . "https://github.com/symfrog/clojure-quick-repls") (:keywords "languages" "clojure" "cider" "clojurescript")) nil])
  (cmake-project [cl-struct-package-desc cmake-project (0 7) "Integrates CMake build process with Emacs" nil single "melpa-stable" nil ((:url . "http://github.com/alamaison/emacs-cmake-project") (:keywords "c" "cmake" "languages" "tools")) nil])
  (color-theme-modern [cl-struct-package-desc color-theme-modern (0 0 1) "Reimplement colortheme with Emacs 24 theme framework." ((emacs (24))) tar "melpa-stable" nil ((:url . "https://github.com/emacs-jp/replace-colorthemes/")) nil])
  (comment-dwim-2 [cl-struct-package-desc comment-dwim-2 (1 2 2) "An all-in-one comment command to rule them all" nil single "melpa-stable" nil ((:url . "https://github.com/remyferre/comment-dwim-2") (:keywords "convenience")) nil])
  (common-lisp-snippets [cl-struct-package-desc common-lisp-snippets (0 1 1) "Yasnippets for Common Lisp" ((yasnippet (0 8 0))) tar "melpa-stable" nil ((:url . "https://github.com/mrkkrp/common-lisp-snippets") (:keywords "snippets")) nil])
  (company-anaconda [cl-struct-package-desc company-anaconda (0 1 0) "Anaconda backend for company-mode" ((company (0 8 0)) (anaconda-mode (0 1 1)) (cl-lib (0 5 0)) (dash (2 6 0)) (s (1 9))) single "melpa-stable" nil ((:url . "https://github.com/proofit404/anaconda-mode")) nil])
  (company-ansible [cl-struct-package-desc company-ansible (0 1 1) "A company back-end for ansible" ((emacs (24 4)) (company (0 8 12))) tar "melpa-stable" nil ((:url . "https://github.com/krzysztof-magosa/company-ansible") (:keywords "ansible")) nil])
  (company-cabal [cl-struct-package-desc company-cabal (0 1 1) "company-mode cabal backend" ((cl-lib (0 5)) (company (0 8 0)) (emacs (24))) tar "melpa-stable" nil ((:url . "https://github.com/iquiw/company-cabal")) nil])
  (company-emoji [cl-struct-package-desc company-emoji (2 3 0) "company-mode backend for emoji" ((cl-lib (0 5)) (company (0 8 0))) single "melpa-stable" nil ((:url . "https://github.com/dunn/company-emoji.git") (:keywords "emoji" "company" "honk")) nil])
  (company-go [cl-struct-package-desc company-go (20150303) "company-mode backend for Go (using gocode)" ((company (0 8 0))) single "melpa-stable" nil ((:keywords "languages")) nil])
  (company-irony [cl-struct-package-desc company-irony (0 1 0) "company-mode completion back-end for irony-mode" ((emacs (24 1)) (company (0 8 0)) (irony (0 1 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/Sarcasm/company-irony/") (:keywords "convenience")) nil])
  (company-jedi [cl-struct-package-desc company-jedi (0 3) "company-mode completion back-end for Python JEDI" ((emacs (24)) (cl-lib (0 5)) (company (0 8 11)) (jedi-core (0 2 5))) single "melpa-stable" nil nil nil])
  (company-nixos-options [cl-struct-package-desc company-nixos-options (0 0 1) "Company Backend for nixos-options" ((company (0 8 0)) (nixos-options (0 0 1)) (cl-lib (0 5 0))) single "melpa-stable" nil ((:url . "http://www.github.com/travisbhartwell/nix-emacs/") (:keywords "unix")) nil])
  (company-quickhelp [cl-struct-package-desc company-quickhelp (1 2 0) "Popup documentation for completion candidates" ((emacs (24 4)) (company (0 8 9)) (pos-tip (0 4 6))) single "melpa-stable" nil ((:url . "https://www.github.com/expez/company-quickhelp") (:keywords "company" "popup" "documentation" "quickhelp")) nil])
  (company-restclient [cl-struct-package-desc company-restclient (0 0 2) "company-mode completion back-end for restclient-mode" ((cl-lib (0 5)) (company (0 8 0)) (emacs (24)) (know-your-http-well (0 2 0))) single "melpa-stable" nil ((:url . "https://github.com/iquiw/company-restclient")) nil])
  (company-web [cl-struct-package-desc company-web (0 9) "Company version of ac-html, complete for web,html,emmet,jade,slim modes" ((company (0 8 0)) (dash (2 8 0)) (cl-lib (0 5 0)) (web-completion-data (0 1 0))) tar "melpa-stable" nil ((:url . "https://github.com/osv/company-web") (:keywords "html" "company")) nil])
  (company-ycmd [cl-struct-package-desc company-ycmd (0 9) "company-mode backend for ycmd" ((ycmd (0 1)) (company (0 8 3)) (deferred (0 2 0)) (s (1 0 0))) single "melpa-stable" nil ((:url . "https://github.com/abingham/emacs-ycmd")) nil])
  (corral [cl-struct-package-desc corral (0 2) "Incrementally wrap delimiters around s-expressions" nil single "melpa-stable" nil ((:url . "http://github.com/nivekuil/corral")) nil])
  (counsel [cl-struct-package-desc counsel (0 6 0) "Various completion functions using Ivy" ((emacs (24 1)) (swiper (0 4 0))) single "melpa-stable" nil ((:url . "https://github.com/abo-abo/swiper") (:keywords "completion" "matching")) nil])
  (csharp-mode [cl-struct-package-desc csharp-mode (0 8 11) "C# mode derived mode" nil single "melpa-stable" nil ((:url . "https://github.com/josteink/csharp-mode") (:keywords "c#" "languages" "oop" "mode")) nil])
  (ctxmenu [cl-struct-package-desc ctxmenu (0 3 0) "Provide a context menu like right-click." ((popup (20140205 103)) (log4e (0 2 0)) (yaxception (0 1))) tar "melpa-stable" nil ((:url . "https://github.com/aki2o/emacs-ctxmenu") (:keywords "popup")) nil])
  (cyphejor [cl-struct-package-desc cyphejor (0 1 0) "Shorten major mode names using user-defined rules" ((emacs (24 4))) single "melpa-stable" nil ((:url . "https://github.com/cyphejor") (:keywords "mode-line" "major-mode")) nil])
  (darcula-theme [cl-struct-package-desc darcula-theme (1 0) "Inspired by IntelliJ's Darcula theme" nil single "melpa-stable" nil ((:url . "https://github.com/fommil/darcula-theme-emacs") (:keywords "faces")) nil])
  (darktooth-theme [cl-struct-package-desc darktooth-theme (0 1 37) "Color theme for Emacs, when soothe and gruvbox collide" nil single "melpa-stable" nil ((:url . "http://github.com/emacsfodder/emacs-theme-darktooth")) nil])
  (date-at-point [cl-struct-package-desc date-at-point (0 1) "Add `date' to `thing-at-point' function" nil single "melpa-stable" nil ((:url . "https://gitorious.org/alezost-emacs/date-at-point") (:keywords "convenience")) nil])
  (date-field [cl-struct-package-desc date-field (0 0 1) "Date widget" ((dash (2 9 0)) (log4e (0 2 0)) (yaxception (0 3 2))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/emacs-date-field") (:keywords "widgets")) nil])
  (default-text-scale [cl-struct-package-desc default-text-scale (0 1) "Easily adjust the font size in all frames" nil single "melpa-stable" nil ((:keywords "frames" "faces")) nil])
  (define-word [cl-struct-package-desc define-word (0 1 0) "display the definition of word at point." ((emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/abo-abo/define-word") (:keywords "dictionary" "convenience")) nil])
  (describe-number [cl-struct-package-desc describe-number (0 3 1) "Describe arbitrarily large number at point." ((yabin (1 1))) single "melpa-stable" nil ((:url . "https://github.com/netromdk/describe-number") (:keywords "describe" "value" "help")) nil])
  (desktop+ [cl-struct-package-desc desktop+ (0 1) "improved sessions" nil single "melpa-stable" nil nil nil])
  (diffview [cl-struct-package-desc diffview (1 0) "View diffs in side-by-side format" nil single "melpa-stable" nil ((:url . "https://github.com/mgalgs/diffview-mode") (:keywords "convenience" "diff")) nil])
  (dionysos [cl-struct-package-desc dionysos (0 3 0) "Dionysos, a music player for Emacs" ((libmpdee (2 1 0)) (s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0))) tar "melpa-stable" nil ((:url . "https://github.com/nlamirault/dionysos") (:keywords "music")) nil])
  (dired-fdclone [cl-struct-package-desc dired-fdclone (1 5 2) "dired functions and settings to mimic FDclone" nil single "melpa-stable" nil ((:url . "https://github.com/knu/dired-fdclone.el") (:keywords "unix" "directories" "dired")) nil])
  (dired-imenu [cl-struct-package-desc dired-imenu (0 5 0) "imenu binding for dired mode" nil single "melpa-stable" nil ((:url . "https://github.com/DamienCassou/dired-imenu") (:keywords "dired" "imenu")) nil])
  (direx [cl-struct-package-desc direx (1 0 0) "Simple Directory Explorer" nil tar "melpa-stable" nil ((:keywords "convenience")) nil])
  (direx-grep [cl-struct-package-desc direx-grep (0 1 0) "Grep node of direx.el using incremental search like anything.el/helm.el" ((direx (0 1 -3))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/direx-grep") (:keywords "convenience")) nil])
  (discover-my-major [cl-struct-package-desc discover-my-major (1 0) "Discover key bindings and their meaning for the current Emacs major mode" ((makey (0 2))) single "melpa-stable" nil ((:url . "https://github.com/steckerhalter/discover-my-major") (:keywords "discover" "help" "major-mode" "keys")) nil])
  (docker [cl-struct-package-desc docker (0 2 0) "Emacs interface to Docker" ((emacs (24 4)) (dash (1 5 0)) (magit-popup (2 0 50)) (s (1 9 0))) tar "melpa-stable" nil nil nil])
  (dockerfile-mode [cl-struct-package-desc dockerfile-mode (1 2) "Major mode for editing Docker's Dockerfiles" nil single "melpa-stable" nil nil nil])
  (downplay-mode [cl-struct-package-desc downplay-mode (0 1) "focus attention on a region of the buffer" nil single "melpa-stable" nil ((:url . "https://github.com/tobias/downplay-mode/")) nil])
  (dracula-theme [cl-struct-package-desc dracula-theme (1 2 0) "Dracula Theme" ((emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/zenorocha/dracula-theme")) nil])
  (dyalog-mode [cl-struct-package-desc dyalog-mode (0 3) "Major mode for editing Dyalog APL source code" nil single "melpa-stable" nil ((:url . "http://bitbucket.org/harsman/dyalog-mode") (:keywords "languages")) nil])
  (dynamic-ruler [cl-struct-package-desc dynamic-ruler (0 1 4) "Displays a dynamic ruler at point." nil single "melpa-stable" nil ((:url . "http://rocher.github.io/dynamic-ruler") (:keywords "ruler" "tools" "convenience")) nil])
  (e2wm-direx [cl-struct-package-desc e2wm-direx (0 0 5) "Plugin of e2wm.el for direx.el" ((e2wm (1 2)) (direx (0 1 -3))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/e2wm-direx") (:keywords "tools" "window manager" "convenience")) nil])
  (e2wm-pkgex4pl [cl-struct-package-desc e2wm-pkgex4pl (0 0 1) "Plugin of e2wm.el for package explorer of Perl" ((e2wm (1 2)) (plsense-direx (0 2 0))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/e2wm-pkgex4pl") (:keywords "tools" "window manager" "perl")) nil])
  (e2wm-sww [cl-struct-package-desc e2wm-sww (0 0 2) "Plugin of e2wm.el to switch plugin quickly" ((e2wm (1 2))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/e2wm-sww") (:keywords "tools" "window manager")) nil])
  (e2wm-term [cl-struct-package-desc e2wm-term (0 0 5) "Perspective of e2wm.el for work in terminal" ((e2wm (1 2)) (log4e (0 2 0)) (yaxception (0 3 2))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/e2wm-term") (:keywords "tools" "window manager")) nil])
  (easy-repeat [cl-struct-package-desc easy-repeat (0 2) "Repeat easily" ((emacs (24 4))) single "melpa-stable" nil ((:url . "https://github.com/xuchunyang/easy-repeat.el") (:keywords "repeat" "convenience")) nil])
  (ebal [cl-struct-package-desc ebal (0 1 2) "Emacs interface to Cabal" ((emacs (24 4)) (f (0 18 0)) (ido-completing-read+ (3 6))) single "melpa-stable" nil ((:url . "https://github.com/mrkkrp/ebal") (:keywords "convenience" "cabal" "haskell")) nil])
  (edit-indirect [cl-struct-package-desc edit-indirect (0 1 2) "Edit regions in separate buffers" ((emacs (24 3))) single "melpa-stable" nil ((:url . "https://github.com/Fanael/edit-indirect")) nil])
  (editorconfig-core [cl-struct-package-desc editorconfig-core (0 1 5) "EditorConfig Core library written purely in Emacs Lisp" ((editorconfig-fnmatch (20151023 1021)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/10sr/editorconfig-core-emacslisp") (:keywords "utility" "editorconfig")) nil])
  (editorconfig-fnmatch [cl-struct-package-desc editorconfig-fnmatch (0 1 3) "Glob pattern matching in Emacs lisp" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/10sr/editorconfig-fnmatch-el") (:keywords "utility" "shell" "fnmatch" "glob" "wildcard")) nil])
  (edn [cl-struct-package-desc edn (1 1 2) "Support for reading and writing the edn data format from elisp" ((cl-lib (0 3)) (emacs (24 1)) (dash (2 10 0)) (peg (0 6)) (s (1 8 0))) single "melpa-stable" nil ((:url . "https://www.github.com/expez/edn.el") (:keywords "edn" "clojure")) nil])
  (egg [cl-struct-package-desc egg (1 0 9) "Emacs Got Git - Emacs interface to Git" nil tar "melpa-stable" nil ((:keywords "git" "version control" "release management")) nil])
  (el-init [cl-struct-package-desc el-init (0 2 0) "A loader inspired by init-loader" ((emacs (24)) (cl-lib (0 5)) (anaphora (1 0 0))) single "melpa-stable" nil ((:url . "https://github.com/HKey/el-init")) nil])
  (el-init-viewer [cl-struct-package-desc el-init-viewer (0 1 0) "Record viewer for el-init" ((emacs (24)) (cl-lib (0 5)) (ctable (0 1 2)) (dash (2 10 0)) (anaphora (1 0 0)) (el-init (0 1 4))) single "melpa-stable" nil nil nil])
  (eldoc-eval [cl-struct-package-desc eldoc-eval (1 1) "Enable eldoc support when minibuffer is in use." nil single "melpa-stable" nil nil nil])
  (electric-operator [cl-struct-package-desc electric-operator (0 1) "Automatically add spaces around operators" ((dash (2 10 0)) (names (20150618 0)) (emacs (24 4))) single "melpa-stable" nil ((:url . "https://github.com/davidshepherd7/electric-operator") (:keywords "electric")) nil])
  (elixir-yasnippets [cl-struct-package-desc elixir-yasnippets (0 0 1) "Yasnippets for Elixir" ((yasnippet (0 8 0))) tar "melpa-stable" nil nil nil])
  (elscreen-mew [cl-struct-package-desc elscreen-mew (1 0 1) "ElScreen Add-On for Mew" ((elscreen (20120413 807))) single "melpa-stable" nil ((:url . "https://github.com/masutaka/elscreen-mew")) nil])
  (elscreen-persist [cl-struct-package-desc elscreen-persist (0 1 1) "persist the elscreen across sessions" ((elscreen (1 4 6)) (revive (2 19))) single "melpa-stable" nil ((:keywords "elscreen" "frames")) nil])
  (elwm [cl-struct-package-desc elwm (0 0 2) "Minimalistic window manager for emacs" ((dash (1 1 0))) single "melpa-stable" nil ((:url . "https://github.com/Fuco1/elwm") (:keywords "docs")) nil])
  (emacsagist [cl-struct-package-desc emacsagist (1 0 0) "Search Packagist.org packages without leaving Emacs" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools")) nil])
  (emacsql-mysql [cl-struct-package-desc emacsql-mysql (2 0 0) "back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa-stable" nil ((:url . "https://github.com/skeeto/emacsql")) nil])
  (emacsql-psql [cl-struct-package-desc emacsql-psql (2 0 0) "back-end for PostgreSQL via psql" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa-stable" nil ((:url . "https://github.com/skeeto/emacsql")) nil])
  (emacsql-sqlite [cl-struct-package-desc emacsql-sqlite (2 0 0) "No description available." nil tar "melpa-stable" nil nil nil])
  (emms-mode-line-cycle [cl-struct-package-desc emms-mode-line-cycle (0 2 4) "Display the emms mode line as a ticker" ((emacs (24)) (emms (4 0))) single "melpa-stable" nil ((:url . "https://github.com/momomo5717/emms-mode-line-cycle") (:keywords "emms" "mode-line")) nil])
  (emms-player-mpv [cl-struct-package-desc emms-player-mpv (0 0 5) "mpv support for EMMS" ((emms (0))) single "melpa-stable" nil ((:url . "https://github.com/dochang/emms-player-mpv/") (:keywords "emms" "mpv")) nil])
  (emms-player-simple-mpv [cl-struct-package-desc emms-player-simple-mpv (0 3 0) "An extension of emms-player-simple.el for mpv JSON IPC" ((emacs (24)) (cl-lib (0 5)) (emms (4 0))) tar "melpa-stable" nil ((:url . "https://github.com/momomo5717/emms-player-simple-mpv") (:keywords "emms" "mpv")) nil])
  (emoji-cheat-sheet-plus [cl-struct-package-desc emoji-cheat-sheet-plus (1 2 1) "emoji-cheat-sheet for emacs" ((emacs (24)) (helm (1 6 4))) tar "melpa-stable" nil ((:url . "https://github.com/syl20bnr/emacs-emoji-cheat-sheet-plus") (:keywords "emacs" "emoji")) nil])
  (emoji-fontset [cl-struct-package-desc emoji-fontset (0 1 0) "Set font face for Emoji." nil single "melpa-stable" nil ((:keywords "emoji" "font" "config")) nil])
  (emojify [cl-struct-package-desc emojify (0 2) "Display emojis in Emacs" ((seq (1 12)) (ht (2 0)) (emacs (24 3))) tar "melpa-stable" nil ((:url . "https://github.com/iqbalansari/emacs-emojify") (:keywords "multimedia" "convenience")) nil])
  (engine-mode [cl-struct-package-desc engine-mode (1 0 0) "Define and query search engines from within Emacs." nil single "melpa-stable" nil ((:url . "https://github.com/hrs/engine-mode/engine-mode.el")) nil])
  (enlive [cl-struct-package-desc enlive (0 0 1) "query html document with css selectors" nil single "melpa-stable" nil ((:url . "http://github.com/zweifisch/enlive") (:keywords "css" "selector" "query")) nil])
  (erc-youtube [cl-struct-package-desc erc-youtube (0 -3) "Show received youtube urls in the ERC buffer" ((erc (5 3))) single "melpa-stable" nil ((:keywords "multimedia")) nil])
  (erefactor [cl-struct-package-desc erefactor (0 7 0) "Emacs-Lisp refactoring utilities" ((cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-erefactor") (:keywords "extensions" "tools" "maint")) nil])
  (es-lib [cl-struct-package-desc es-lib (0 4) "A collection of emacs utilities" ((cl-lib (0 3))) tar "melpa-stable" nil ((:url . "https://github.com/sabof/es-lib")) nil])
  (eshell-autojump [cl-struct-package-desc eshell-autojump (0 2) "autojump command for Eshell" nil single "melpa-stable" nil ((:url . "http://github.com/coldnew/eshell-autojump")) nil])
  (eshell-z [cl-struct-package-desc eshell-z (0 2 1) "cd to frequent directory in eshell" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/xuchunyang/eshell-z") (:keywords "convenience")) nil])
  (ess-R-data-view [cl-struct-package-desc ess-R-data-view (1 0) "Data viewer for GNU R" ((ctable (20130313 1743)) (popup (20130324 1305)) (ess (20130225 1754))) single "melpa-stable" nil ((:url . "https://github.com/myuhe/ess-R-data-view.el") (:keywords "convenience")) nil])
  (ess-R-object-popup [cl-struct-package-desc ess-R-object-popup (1 0) "popup description of R object" ((popup (20130117 1954)) (ess (20130225 1754))) single "melpa-stable" nil ((:url . "https://github.com/myuhe/ess-R-object-popup.el") (:keywords "convenience" "ess")) nil])
  (eval-in-repl [cl-struct-package-desc eval-in-repl (0 7 0) "Consistent ESS-like eval interface for various REPLs" ((dash (0 0 0)) (paredit (0 0 0))) tar "melpa-stable" nil ((:url . "https://github.com/kaz-yos/eval-in-repl/")) nil])
  (evil-anzu [cl-struct-package-desc evil-anzu (0 3) "anzu for evil-mode" ((evil (1 0 0)) (anzu (0 46))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-evil-anzu")) nil])
  (evil-commentary [cl-struct-package-desc evil-commentary (1 2 0) "Comment stuff out. A port of vim-commentary." ((evil (1 0 0))) single "melpa-stable" nil ((:url . "http://github.com/linktohack/evil-commentary") (:keywords "evil" "comment" "commentary" "evil-commentary")) nil])
  (evil-escape [cl-struct-package-desc evil-escape (3 10) "Escape from anything with a customizable key sequence" ((emacs (24)) (evil (1 0 9)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syl20bnr/evil-escape") (:keywords "convenience" "editing" "evil")) nil])
  (evil-iedit-state [cl-struct-package-desc evil-iedit-state (1 0) "Evil states to interface iedit mode." ((evil (1 0 9)) (iedit (0 97))) single "melpa-stable" nil ((:url . "https://github.com/syl20bnr/evil-iedit-state") (:keywords "convenience" "editing" "evil" "iedit" "mnemonic")) nil])
  (evil-lisp-state [cl-struct-package-desc evil-lisp-state (7 1) "An evil state to edit Lisp code" ((evil (1 0 9)) (evil-leader (0 4 3)) (smartparens (1 6 1))) single "melpa-stable" nil ((:url . "https://github.com/syl20bnr/evil-lisp-state") (:keywords "convenience" "editing" "evil" "smartparens" "lisp" "mnemonic")) nil])
  (evil-mark-replace [cl-struct-package-desc evil-mark-replace (0 0 4) "replace the thing in marked area" ((evil (1 0 8))) single "melpa-stable" nil ((:url . "http://github.com/redguardtoo/evil-mark-replace") (:keywords "mark" "replace" "evil")) nil])
  (evil-quickscope [cl-struct-package-desc evil-quickscope (0 1 3) "Highlight unique characters in words for f,F,t,T navigation" ((evil (0))) single "melpa-stable" nil ((:url . "http://github.com/blorbx/evil-quickscope") (:keywords "faces" "emulation" "vim" "evil")) nil])
  (evil-rsi [cl-struct-package-desc evil-rsi (1 1 1) "Use emacs motion keys in evil, inspired by vim-rsi" ((evil (1 0 0))) single "melpa-stable" nil ((:url . "http://github.com/linktohack/evil-rsi") (:keywords "evil" "rsi" "evil-rsi")) nil])
  (evil-smartparens [cl-struct-package-desc evil-smartparens (0 3 0) "Evil support for smartparens" ((evil (1 0)) (cl-lib (0 3)) (emacs (24 4)) (smartparens (1 6 3))) single "melpa-stable" nil ((:url . "https://www.github.com/expez/evil-smartparens") (:keywords "evil" "smartparens")) nil])
  (evil-snipe [cl-struct-package-desc evil-snipe (1 0) "emulate vim-sneak & vim-seek" nil single "melpa-stable" nil ((:url . "https://github.com/hlissner/evil-snipe") (:keywords "emulation" "vim" "evil" "sneak" "seek")) nil])
  (evil-textobj-anyblock [cl-struct-package-desc evil-textobj-anyblock (0 1) "Textobject for the closest user-defined blocks." ((cl-lib (0 5)) (evil (1 1 0))) single "melpa-stable" nil ((:url . "https://github.com/noctuid/evil-textobj-anyblock") (:keywords "evil")) nil])
  (evil-tutor [cl-struct-package-desc evil-tutor (1 0) "Vimtutor adapted to Evil and wrapped in a major-mode" ((evil (1 0 9))) tar "melpa-stable" nil ((:url . "https://github.com/syl20bnr/evil-tutor") (:keywords "convenience" "editing" "evil")) nil])
  (evil-visual-mark-mode [cl-struct-package-desc evil-visual-mark-mode (0 0 3) "Display evil marks on buffer" ((evil (1 0 9)) (dash (2 10))) single "melpa-stable" nil ((:keywords "evil")) nil])
  (fcitx [cl-struct-package-desc fcitx (0 2) "Make fcitx better in Emacs" nil single "melpa-stable" nil ((:url . "https://github.com/cute-jumper/fcitx.el") (:keywords "extensions")) nil])
  (feature-mode [cl-struct-package-desc feature-mode (0 4) "Major mode for editing Gherkin (i.e. Cucumber) user stories" nil tar "melpa-stable" nil nil nil])
  (find-by-pinyin-dired [cl-struct-package-desc find-by-pinyin-dired (0 0 2) "Find file by first Pinyin characters of Chinese Hanzi" nil tar "melpa-stable" nil nil nil])
  (firestarter [cl-struct-package-desc firestarter (0 2 3) "Execute (shell) commands on save" nil single "melpa-stable" nil ((:url . "https://github.com/wasamasa/firestarter") (:keywords "convenience")) nil])
  (fish-mode [cl-struct-package-desc fish-mode (0 1 1) "Major mode for fish shell scripts" ((emacs (24))) single "melpa-stable" nil ((:keywords "fish" "shell")) nil])
  (fix-word [cl-struct-package-desc fix-word (0 1 1) "Convenient word transformation" ((emacs (24 1)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/mrkkrp/fix-word") (:keywords "word" "convenience")) nil])
  (flycheck-clojure [cl-struct-package-desc flycheck-clojure (0 1 3) "Flycheck: Clojure support" ((cider (0 8 1)) (flycheck (0 22 -3 1)) (let-alist (1 0 1)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/clojure-emacs/squiggly-clojure")) nil])
  (flycheck-ocaml [cl-struct-package-desc flycheck-ocaml (0 3) "Flycheck: OCaml support" ((emacs (24 1)) (flycheck (0 22)) (merlin (2 3)) (let-alist (1 0 3))) single "melpa-stable" nil ((:url . "https://github.com/flycheck/flycheck-ocaml") (:keywords "convenience" "tools" "languages")) nil])
  (flycheck-package [cl-struct-package-desc flycheck-package (0 8) "A Flycheck checker for elisp package authors" ((cl-lib (0 5)) (flycheck (0 22)) (emacs (24))) single "melpa-stable" nil ((:keywords "lisp")) nil])
  (flycheck-pos-tip [cl-struct-package-desc flycheck-pos-tip (0 1) "Display Flycheck errors in GUI tooltips" ((dash (2 12)) (flycheck (0 22)) (pos-tip (0 4 6))) single "melpa-stable" nil ((:url . "https://github.com/flycheck/flycheck-pos-tip") (:keywords "tools" "convenience")) nil])
  (flycheck-status-emoji [cl-struct-package-desc flycheck-status-emoji (1 1) "Show flycheck status using cute, compact emoji" ((emacs (24)) (flycheck (0 20)) (let-alist (1 0))) single "melpa-stable" nil ((:url . "https://github.com/liblit/flycheck-status-emoji") (:keywords "convenience" "languages" "tools")) nil])
  (flycheck-tip [cl-struct-package-desc flycheck-tip (0 5 0) "Show flycheck/flymake errors by tooltip" ((flycheck (0 13)) (emacs (24 1)) (popup (0 5 0))) tar "melpa-stable" nil ((:url . "https://github.com/yuutayamada/flycheck-tip") (:keywords "flycheck")) nil])
  (flycheck-ycmd [cl-struct-package-desc flycheck-ycmd (0 9) "flycheck integration for ycmd" ((emacs (24)) (dash (1 2 0)) (flycheck (0 22)) (ycmd (20141217 453))) single "melpa-stable" nil ((:url . "https://github.com/abingham/emacs-ycmd")) nil])
  (flymake-less [cl-struct-package-desc flymake-less (0 3) "Flymake handler for LESS stylesheets (lesscss.org)" ((less-css-mode (0 15))) single "melpa-stable" nil ((:keywords "languages")) nil])
  (flyspell-popup [cl-struct-package-desc flyspell-popup (0 2) "Correcting words with Flyspell in popup menus" ((popup (0 5 0))) single "melpa-stable" nil ((:url . "https://github.com/xuchunyang/flyspell-popup") (:keywords "convenience")) nil])
  (focus [cl-struct-package-desc focus (0 1 0) "Dim the font color of text in surrounding sections" ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "http://github.com/larstvei/Focus")) nil])
  (fontawesome [cl-struct-package-desc fontawesome (0 3) "fontawesome utility" ((helm-core (1 7 7)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-fontawesome")) nil])
  (forecast [cl-struct-package-desc forecast (0 1 9) "Display a forecast.io weather report in a buffer" ((emacs (24 4))) single "melpa-stable" nil ((:url . "http://gkayaalp.com/emacs.html#forecast.el") (:keywords "weather" "forecast")) nil])
  (foreman-mode [cl-struct-package-desc foreman-mode (0 0 1) "View and manage Procfile-based applications" ((s (1 9 0)) (dash (2 10 0)) (dash-functional (1 2 0)) (f (0 17 2)) (emacs (24))) single "melpa-stable" nil ((:url . "http://github.com/zweifisch/foreman-mode") (:keywords "foreman")) nil])
  (form-feed [cl-struct-package-desc form-feed (0 2 2) "Display ^L glyphs as horizontal lines" nil single "melpa-stable" nil ((:url . "https://github.com/wasamasa/form-feed") (:keywords "faces")) nil])
  (format-sql [cl-struct-package-desc format-sql (0 4) "Use format-sql to make your SQL readable in directly Emacs." nil single "melpa-stable" nil ((:url . "https://github.com/paetzke/format-sql.el")) nil])
  (fullframe [cl-struct-package-desc fullframe (0 1 1) "Generalized automatic execution in a single frame" ((cl-lib (0 5))) single "melpa-stable" nil ((:keywords "fullscreen")) nil])
  (genrnc [cl-struct-package-desc genrnc (0 1 0) "generate RELAX NG Compact Schema from RELAX NG Schema, XML Schema and DTD." ((deferred (0 3 1)) (concurrent (0 3)) (log4e (0 2 0)) (yaxception (0 1))) tar "melpa-stable" nil ((:url . "https://github.com/aki2o/emacs-genrnc") (:keywords "xml")) nil])
  (german-holidays [cl-struct-package-desc german-holidays (0 2 0) "German holidays for Emacs calendar" nil single "melpa-stable" nil ((:url . "https://github.com/rudolfochrist/german-holidays")) nil])
  (ghc-imported-from [cl-struct-package-desc ghc-imported-from (0 1 2) "Haskell documentation lookup with ghc-imported-from" ((emacs (24 1))) single "melpa-stable" nil ((:keywords "languages")) nil])
  (git-commit [cl-struct-package-desc git-commit (2 3 1) "Edit Git commit messages" ((emacs (24 4)) (dash (2 12 1)) (with-editor (2 3 1))) single "melpa-stable" nil ((:url . "https://github.com/magit/magit") (:keywords "git" "tools" "vc")) nil])
  (git-lens [cl-struct-package-desc git-lens (0 4) "Show new, deleted or modified files in branch" ((emacs (24 4))) single "melpa-stable" nil ((:keywords "vc" "convenience")) nil])
  (git-ps1-mode [cl-struct-package-desc git-ps1-mode (0 1 1) "Global minor-mode to print __git_ps1" nil single "melpa-stable" nil ((:url . "https://github.com/10sr/git-ps1-mode-el") (:keywords "utility" "mode-line" "git")) nil])
  (git-wip-timemachine [cl-struct-package-desc git-wip-timemachine (1 0) "Walk through git-wip revisions of a file" ((s (1 9 0))) single "melpa-stable" nil ((:url . "https://github.com/itsjeyd/git-wip-timemachine") (:keywords "git")) nil])
  (github-browse-file [cl-struct-package-desc github-browse-file (0 5 0) "View the file you're editing on GitHub" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/osener/github-browse-file") (:keywords "convenience" "vc" "git" "github")) nil])
  (gitlab [cl-struct-package-desc gitlab (0 7 0) "Emacs client for Gitlab" ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) tar "melpa-stable" nil ((:url . "https://github.com/nlamirault/emacs-gitlab") (:keywords "gitlab")) nil])
  (gmail2bbdb [cl-struct-package-desc gmail2bbdb (0 0 4) "import email and name into bbdb from vcard." nil single "melpa-stable" nil ((:url . "http://github.com/redguardtoo/gmail2bbdb") (:keywords "vcard" "bbdb" "email" "contact" "gmail")) nil])
  (gmpl-mode [cl-struct-package-desc gmpl-mode (0 1 0) "Major mode for editing GMPL(MathProg) files" nil single "melpa-stable" nil ((:keywords "extensions")) nil])
  (gnome-calendar [cl-struct-package-desc gnome-calendar (0 2) "Integration with the GNOME Shell calendar" nil single "melpa-stable" nil ((:keywords "gnome" "calendar")) nil])
  (gntp [cl-struct-package-desc gntp (0 1) "Growl Notification Protocol for Emacs" nil single "melpa-stable" nil nil nil])
  (gnus-x-gm-raw [cl-struct-package-desc gnus-x-gm-raw (0 0 1) "Search mail of Gmail using X-GM-RAW as web interface" ((log4e (0 2 0)) (yaxception (0 1))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/gnus-x-gm-raw") (:keywords "gnus")) nil])
  (go-autocomplete [cl-struct-package-desc go-autocomplete (20150303) "auto-complete-mode backend for go-mode" ((auto-complete (1 4 0))) single "melpa-stable" nil ((:keywords "languages")) nil])
  (go-errcheck [cl-struct-package-desc go-errcheck (1 1 2) "errcheck integration for go-mode" nil single "melpa-stable" nil nil nil])
  (go-mode [cl-struct-package-desc go-mode (1 3 1) "Major mode for the Go programming language" nil tar "melpa-stable" nil ((:url . "https://github.com/dominikh/go-mode.el") (:keywords "languages" "go")) nil])
  (go-scratch [cl-struct-package-desc go-scratch (0 0 1) "*scratch* buffer for Go" ((go-mode (1 3 1)) (emacs (24))) single "melpa-stable" nil ((:keywords "languages" "go")) nil])
  (gotham-theme [cl-struct-package-desc gotham-theme (1 1 5) "A very dark Emacs color theme." nil single "melpa-stable" nil ((:url . "https://github.com/wasamasa/gotham-theme")) nil])
  (goto-last-change [cl-struct-package-desc goto-last-change (1 2 1) "Move point through buffer-undo-list positions" nil single "melpa-stable" nil ((:url . "https://github.com/camdez/goto-last-change.el") (:keywords "convenience")) nil])
  (grandshell-theme [cl-struct-package-desc grandshell-theme (1 0) "Dark color theme for Emacs > 24 with intensive colors." nil tar "melpa-stable" nil nil nil])
  (graphene [cl-struct-package-desc graphene (0 9 5) "Friendly Emacs defaults" ((dash (2 10 0)) (exec-path-from-shell (1 9)) (ppd-sr-speedbar (0 0 6)) (sr-speedbar (20140505)) (ido-ubiquitous (3 6)) (smex (3 0)) (web-mode (11 2)) (smartparens (1 6 3)) (graphene-meta-theme (0 0 2)) (flycheck (0 23)) (company (0 8 12))) tar "melpa-stable" nil nil nil])
  (graphene-meta-theme [cl-struct-package-desc graphene-meta-theme (0 0 2) "Integrated theming for common packages" nil single "melpa-stable" nil ((:url . "https://github.com/rdallasgray/graphene") (:keywords "defaults")) nil])
  (graphviz-dot-mode [cl-struct-package-desc graphviz-dot-mode (0 4) "Mode for the dot-language used by graphviz (att)." nil single "melpa-stable" nil ((:url . "http://ppareit.github.com/graphviz-dot-mode/") (:keywords "mode" "dot" "dot-language" "dotlanguage" "graphviz" "graphs" "att")) nil])
  (grunt [cl-struct-package-desc grunt (1 3 2) "Some glue to stick Emacs and Gruntfiles together" ((dash (2 9 0)) (ansi-color (3 4 2))) single "melpa-stable" nil ((:url . "https://github.com/gempesaw/grunt.el") (:keywords "convenience" "grunt")) nil])
  (gscholar-bibtex [cl-struct-package-desc gscholar-bibtex (0 3 1) "Retrieve BibTeX from Google Scholar and other online sources(ACM, IEEE, DBLP)" nil single "melpa-stable" nil ((:keywords "extensions")) nil])
  (guide-key [cl-struct-package-desc guide-key (1 2 5) "Guide the following key bindings automatically and dynamically" ((popwin (0 3 0))) single "melpa-stable" nil ((:url . "https://github.com/kai2nenobu/guide-key") (:keywords "help" "convenience")) nil])
  (guide-key-tip [cl-struct-package-desc guide-key-tip (0 0 1) "Show guide-key.el hints using pos-tip.el" ((guide-key (1 2 3)) (pos-tip (0 4 5))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/guide-key-tip") (:keywords "help" "convenience" "tooltip")) nil])
  (hardcore-mode [cl-struct-package-desc hardcore-mode (0 1 0) "Disable arrow keys + optionally backspace and return" nil single "melpa-stable" nil nil nil])
  (haskell-emacs [cl-struct-package-desc haskell-emacs (3 1 2) "Write emacs extensions in haskell" nil tar "melpa-stable" nil ((:url . "https://github.com/knupfer/haskell-emacs") (:keywords "haskell" "emacs" "ffi")) nil])
  (haskell-emacs-base [cl-struct-package-desc haskell-emacs-base (3 1 2) "Haskell functions from Prelude" ((haskell-emacs (2 4 0))) tar "melpa-stable" nil ((:url . "https://github.com/knupfer/haskell-emacs/modules/base") (:keywords "haskell" "emacs" "ffi")) nil])
  (haskell-emacs-text [cl-struct-package-desc haskell-emacs-text (3 1 2) "Haskell functions from Data.Text" ((haskell-emacs (2 4 0))) tar "melpa-stable" nil ((:url . "https://github.com/knupfer/haskell-emacs/modules/text") (:keywords "haskell" "emacs" "ffi")) nil])
  (haskell-snippets [cl-struct-package-desc haskell-snippets (0 1 0) "Yasnippets for Haskell" ((yasnippet (0 8 0))) tar "melpa-stable" nil ((:url . "https://github.com/haskell/haskell-snippets") (:keywords "snippets" "haskell")) nil])
  (hcl-mode [cl-struct-package-desc hcl-mode (0 1) "Major mode for Hashicorp" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-hcl-mode")) nil])
  (helm-aws [cl-struct-package-desc helm-aws (1 0 0) "Manage AWS EC2 server instances directly from Emacs" ((helm (1 5 3))) single "melpa-stable" nil ((:url . "https://github.com/istib/helm-aws")) nil])
  (helm-bundle-show [cl-struct-package-desc helm-bundle-show (1 1 3) "bundle show with helm interface" ((helm (1 7 6))) single "melpa-stable" nil ((:url . "https://github.com/masutaka/emacs-helm-bundle-show")) nil])
  (helm-c-yasnippet [cl-struct-package-desc helm-c-yasnippet (0 6 7) "helm source for yasnippet.el" ((helm-core (1 7 7)) (yasnippet (0 8 0)) (cl-lib (0 3))) single "melpa-stable" nil ((:keywords "convenience" "emulation")) nil])
  (helm-circe [cl-struct-package-desc helm-circe (0 3) "helm circe buffer management." ((emacs (24)) (helm (0 0)) (circe (0 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/lesharris/helm-circe") (:keywords "helm" "circe")) nil])
  (helm-commandlinefu [cl-struct-package-desc helm-commandlinefu (0 3) "Search and browse commandlinefu.com from helm" ((emacs (24 1)) (helm (1 7 0)) (json (1 3)) (let-alist (1 0 3))) single "melpa-stable" nil ((:url . "https://github.com/xuchunyang/helm-commandlinefu") (:keywords "commandlinefu.com")) nil])
  (helm-core [cl-struct-package-desc helm-core (1 9 0) "Development files for Helm" ((emacs (24)) (cl-lib (0 5)) (async (1 6))) tar "melpa-stable" nil ((:url . "https://emacs-helm.github.io/helm/")) nil])
  (helm-cscope [cl-struct-package-desc helm-cscope (0 1 1) "Helm interface for xcscope.el." ((xcscope (1 0)) (helm (1 6 7)) (cl-lib (0 5)) (emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/alpha22jp/helm-cscope.el") (:keywords "cscope" "helm")) nil])
  (helm-firefox [cl-struct-package-desc helm-firefox (1 0) "Firefox bookmarks" ((helm (1 5)) (cl-lib (0 5)) (emacs (24 1))) single "melpa-stable" nil nil nil])
  (helm-ghc [cl-struct-package-desc helm-ghc (0 1 0) "A Helm datasource for ghc-mod errors" ((emacs (24)) (cl-lib (0 5)) (helm (1 6 4)) (ghc (5 2 1 0))) single "melpa-stable" nil ((:keywords "languages" "helm")) nil])
  (helm-gitlab [cl-struct-package-desc helm-gitlab (0 7 0) "Helm interface to Gitlab" ((s (1 9 0)) (dash (2 9 0)) (helm (1 0)) (gitlab (0))) single "melpa-stable" nil ((:url . "https://github.com/nlamirault/emacs-gitlab") (:keywords "gitlab" "helm")) nil])
  (helm-hatena-bookmark [cl-struct-package-desc helm-hatena-bookmark (2 0 4) "Hatena::Bookmark with helm interface" ((helm (1 6 9))) single "melpa-stable" nil ((:url . "https://github.com/masutaka/emacs-helm-hatena-bookmark")) nil])
  (helm-ls-git [cl-struct-package-desc helm-ls-git (1 8 0) "list git files." ((helm (1 7 8))) single "melpa-stable" nil nil nil])
  (helm-ls-hg [cl-struct-package-desc helm-ls-hg (1 7 8) "List hg files in hg project." ((helm (1 7 8))) single "melpa-stable" nil nil nil])
  (helm-make [cl-struct-package-desc helm-make (0 1 0) "Select a Makefile target with helm" ((helm (1 5 3)) (projectile (0 11 0))) single "melpa-stable" nil ((:url . "https://github.com/abo-abo/helm-make") (:keywords "makefile")) nil])
  (helm-migemo [cl-struct-package-desc helm-migemo (1 22) "Migemo plug-in for helm" ((helm-core (1 7 8)) (migemo (1 9)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/emacs-jp/helm-migemo") (:keywords "matching" "convenience" "tools" "i18n")) nil])
  (helm-mode-manager [cl-struct-package-desc helm-mode-manager (1 0 0) "Select and toggle major and minor modes with helm" ((helm (1 5 3))) single "melpa-stable" nil ((:url . "https://github.com/istib/helm-mode-manager")) nil])
  (helm-mt [cl-struct-package-desc helm-mt (0 6) "helm multi-term management." ((emacs (24)) (helm (0 0)) (multi-term (0 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/dfdeshom/helm-mt") (:keywords "helm" "multi-term")) nil])
  (helm-nixos-options [cl-struct-package-desc helm-nixos-options (0 0 1) "Helm Interface for nixos-options" ((nixos-options (0 0 1)) (helm (1 5 6))) single "melpa-stable" nil ((:url . "http://www.github.com/travisbhartwell/nix-emacs/") (:keywords "unix")) nil])
  (helm-orgcard [cl-struct-package-desc helm-orgcard (0 2) "browse the orgcard by helm" ((helm-core (1 7 7))) single "melpa-stable" nil ((:url . "https://github.com/emacs-jp/helm-orgcard") (:keywords "convenience" "helm" "org")) nil])
  (helm-pages [cl-struct-package-desc helm-pages (0 1 1) "Pages in current buffer as Helm datasource" ((helm (1 6 5)) (emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:keywords "convenience" "helm" "outlines")) nil])
  (helm-project-persist [cl-struct-package-desc helm-project-persist (1 0 0) "Helm integration for project-persist package" ((helm (1 5 2)) (project-persist (0 1 4))) single "melpa-stable" nil ((:keywords "project-persist" "project" "helm")) nil])
  (helm-pt [cl-struct-package-desc helm-pt (0 2) "Helm interface to the platinum searcher" ((helm (1 5 6))) tar "melpa-stable" nil ((:keywords "helm" "platinum searcher")) nil])
  (helm-recoll [cl-struct-package-desc helm-recoll (0 2) "helm interface for the recoll desktop search tool." ((helm (1 7 7))) single "melpa-stable" nil ((:url . "https://github.com/emacs-helm/helm-recoll") (:keywords "convenience")) nil])
  (helm-swoop [cl-struct-package-desc helm-swoop (1 5 1) "Efficiently hopping squeezed lines powered by helm interface" ((helm (1 0)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/ShingoFukuyama/helm-swoop") (:keywords "helm" "swoop" "inner" "buffer" "search")) nil])
  (helm-unicode [cl-struct-package-desc helm-unicode (0 0 2) "Helm command for unicode characters." ((helm (1 6)) (emacs (24 4))) single "melpa-stable" nil nil nil])
  (helm-w32-launcher [cl-struct-package-desc helm-w32-launcher (0 1 6) "Start Menu entry launcher using Helm" ((emacs (24)) (helm (1 6 5)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/Fanael/helm-w32-launcher")) nil])
  (helm-zhihu-daily [cl-struct-package-desc helm-zhihu-daily (0 2) "Helm interface for 知乎日报 (http://daily.zhihu.com)" ((helm (1 0)) (cl-lib (0 5)) (emacs (24 4))) tar "melpa-stable" nil ((:url . "https://github.com/xuchunyang/helm-zhihu-daily")) nil])
  (hi2 [cl-struct-package-desc hi2 (1 0) "indentation module for Haskell Mode" nil single "melpa-stable" nil ((:url . "https://github.com/errge/hi2") (:keywords "indentation" "haskell")) nil])
  (highlight-indentation [cl-struct-package-desc highlight-indentation (0 7 0) "Minor modes for highlighting indentation" nil single "melpa-stable" nil ((:url . "https://github.com/antonj/Highlight-Indentation-for-Emacs")) nil])
  (hindent [cl-struct-package-desc hindent (5 4 3) "Indent haskell code using the \"hindent\" program" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/chrisdone/hindent")) nil])
  (history [cl-struct-package-desc history (1 0 0) "History utility for source code navigation" ((emacs (24 3))) tar "melpa-stable" nil ((:url . "https://github.com/boyw165/history")) nil])
  (hl-anything [cl-struct-package-desc hl-anything (0 0 9) "Highlight symbols, selections, enclosing parens and more." ((emacs (24 3))) tar "melpa-stable" nil nil nil])
  (hoa-pp-mode [cl-struct-package-desc hoa-pp-mode (0 3 0) "Major mode for Hoa PP grammars" ((emacs (24 1)) (names (20150723 0))) single "melpa-stable" nil ((:url . "https://github.com/hoaproject/Contributions-Emacs-Pp") (:keywords "php" "hoa")) nil])
  (homebrew-mode [cl-struct-package-desc homebrew-mode (1 3 2) "minor mode for editing Homebrew formulae" ((emacs (24 4)) (inf-ruby (2 4 0)) (dash (1 2 0))) single "melpa-stable" nil ((:url . "https://github.com/dunn/homebrew-mode") (:keywords "homebrew" "brew" "ruby")) nil])
  (ht [cl-struct-package-desc ht (2 0) "The missing hash table library for Emacs" nil single "melpa-stable" nil ((:keywords "hash table" "hash map" "hash")) nil])
  (hyai [cl-struct-package-desc hyai (1 0 0) "Haskell Yet Another Indentation" ((cl-lib (0 5)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/iquiw/hyai")) nil])
  (hydra [cl-struct-package-desc hydra (0 13 3) "Make bindings that stick around." ((cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/abo-abo/hydra") (:keywords "bindings")) nil])
  (ibuffer-projectile [cl-struct-package-desc ibuffer-projectile (0 2) "Group ibuffer's list by projectile root" ((projectile (0 11 0))) single "melpa-stable" nil ((:url . "http://github.com/purcell/ibuffer-projectile") (:keywords "themes")) nil])
  (ido-completing-read+ [cl-struct-package-desc ido-completing-read+ (3 8) "A completing-read-function using ido" ((emacs (24 1)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/DarwinAwardWinner/ido-ubiquitous") (:keywords "ido" "completion" "convenience")) nil])
  (ido-describe-bindings [cl-struct-package-desc ido-describe-bindings (0 0 5) "Yet another `describe-bindings' with `ido'." ((ido-vertical-mode (1 0 0)) (dash (2 11 0))) single "melpa-stable" nil ((:url . "https://github.com/danil/ido-describe-bindings") (:keywords "help")) nil])
  (ido-grid-mode [cl-struct-package-desc ido-grid-mode (1 1 5) "Display ido-prospects in the minibuffer in a grid." ((emacs (24 4))) single "melpa-stable" nil ((:url . "https://github.com/larkery/ido-grid-mode.el") (:keywords "convenience")) nil])
  (ido-occur [cl-struct-package-desc ido-occur (0 1 0) "Yet another `occur' with `ido'." ((ido-vertical-mode (1 0 0)) (dash (2 11 0))) single "melpa-stable" nil ((:url . "https://github.com/danil/ido-occur") (:keywords "inner" "buffer" "search")) nil])
  (ido-yes-or-no [cl-struct-package-desc ido-yes-or-no (1 2) "Use Ido to answer yes-or-no questions" nil single "melpa-stable" nil ((:url . "https://github.com/DarwinAwardWinner/ido-yes-or-no")) nil])
  (idomenu [cl-struct-package-desc idomenu (0 1) "imenu tag selection with ido" nil single "melpa-stable" nil ((:url . "https://github.com/birkenfeld/idomenu") (:keywords "extensions" "convenience")) nil])
  (iedit [cl-struct-package-desc iedit (0 9 9) "Edit multiple regions in the same way simultaneously." nil tar "melpa-stable" nil ((:url . "http://www.emacswiki.org/emacs/Iedit") (:keywords "occurrence" "region" "simultaneous" "refactoring")) nil])
  (image+ [cl-struct-package-desc image+ (0 6 2) "Image manipulate extensions for Emacs" ((cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-imagex") (:keywords "multimedia" "extensions")) nil])
  (image-archive [cl-struct-package-desc image-archive (0 0 7) "Image thumbnails in archive file with non-blocking" ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-image-archive/raw/master/image-archive.el") (:keywords "multimedia")) nil])
  (image-dired+ [cl-struct-package-desc image-dired+ (0 7 2) "Image-dired extensions" ((cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-image-diredx") (:keywords "extensions" "multimedia")) nil])
  (imenu-anywhere [cl-struct-package-desc imenu-anywhere (0 9 0) "ido/helm imenu tag selection across all buffers with the same mode" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/vitoshka/imenu-anywhere") (:keywords "ido" "imenu" "tags")) nil])
  (imenu-list [cl-struct-package-desc imenu-list (0 4) "Show imenu entries in a seperate buffer" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/bmag/imenu-list")) nil])
  (imenus [cl-struct-package-desc imenus (0 1) "Imenu for multiple buffers" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://gitorious.org/alezost-emacs/imenus") (:keywords "tools" "convenience")) nil])
  (imgix [cl-struct-package-desc imgix (1 0 0) "Major mode for editing images in emacs via imgix" ((json (1 2)) (ht (2 0)) (s (1 9 0)) (dash (2 9 0)) (cl-lib (0 5))) tar "melpa-stable" nil ((:keywords "images" "image processing" "image editing" "sepia" "blur")) nil])
  (inf-clojure [cl-struct-package-desc inf-clojure (1 3 0) "an inferior-clojure mode" ((emacs (24 1)) (clojure-mode (4 0))) single "melpa-stable" nil ((:url . "http://github.com/clojure-emacs/inf-clojure") (:keywords "processes" "clojure")) nil])
  (init-open-recentf [cl-struct-package-desc init-open-recentf (0 0 2) "Open recentf immediately after Emacs is started" ((emacs (24 4))) single "melpa-stable" nil ((:keywords "file" "recentf" "after-init-hook")) nil])
  (inlineR [cl-struct-package-desc inlineR (1 0) "insert Tag for inline image of R graphics" nil single "melpa-stable" nil ((:url . "https://github.com/myuhe/inlineR.el") (:keywords "convenience" "iimage.el" "cacoo.el")) nil])
  (interleave [cl-struct-package-desc interleave (1 0 0) "Interleaving text books since 2015" nil single "melpa-stable" nil ((:url . "https://github.com/rudolfochrist/interleave")) nil])
  (iplayer [cl-struct-package-desc iplayer (0 1) "Browse and download BBC TV/radio shows" nil single "melpa-stable" nil ((:url . "https://github.com/csrhodes/iplayer-el") (:keywords "multimedia" "bbc")) nil])
  (isgd [cl-struct-package-desc isgd (1 1) "Shorten URLs using the isgd.com shortener service" nil single "melpa-stable" nil ((:url . "https://github.com/chmouel/isgd.el")) nil])
  (jade-mode [cl-struct-package-desc jade-mode (1 0 0) "Major mode for editing .jade files" nil single "melpa-stable" nil ((:url . "https://github.com/brianc/jade-mode")) nil])
  (jammer [cl-struct-package-desc jammer (0 1) "Punish yourself for using Emacs inefficiently" nil single "melpa-stable" nil ((:url . "https://github.com/wasamasa/jammer") (:keywords "games")) nil])
  (japanlaw [cl-struct-package-desc japanlaw (0 9 1) "Japan law from law.e-gov.go.jp" nil single "melpa-stable" nil ((:keywords "docs" "help")) nil])
  (jedi-core [cl-struct-package-desc jedi-core (0 2 6) "Common code of jedi.el and company-jedi.el" ((emacs (24)) (epc (0 1 0)) (python-environment (0 0 2)) (cl-lib (0 5))) tar "melpa-stable" nil nil nil])
  (js-comint [cl-struct-package-desc js-comint (0 0 3) "Run a JavaScript interpreter in an inferior process window." ((nvm (0 2 0))) single "melpa-stable" nil ((:url . "https://github.com/redguardtoo/js-comint") (:keywords "javascript" "node" "inferior-mode" "convenience")) nil])
  (js2-highlight-vars [cl-struct-package-desc js2-highlight-vars (0 1 0) "highlight occurrences of the variable under cursor" ((js2-mode (20150909))) single "melpa-stable" nil ((:url . "http://mihai.bazon.net/projects/editing-javascript-with-emacs-js2-mode/js2-highlight-vars-mode")) nil])
  (jsfmt [cl-struct-package-desc jsfmt (0 2 0) "No description available." nil single "melpa-stable" nil nil nil])
  (json-reformat [cl-struct-package-desc json-reformat (0 0 5) "Reformatting tool for JSON" nil single "melpa-stable" nil ((:url . "https://github.com/gongo/json-reformat") (:keywords "json")) nil])
  (json-snatcher [cl-struct-package-desc json-snatcher (1 0 0) "Grabs the path to JSON values in a JSON file" ((emacs (24))) single "melpa-stable" nil ((:url . "http://github.com/sterlingg/json-snatcher")) nil])
  (jvm-mode [cl-struct-package-desc jvm-mode (0 2 0) "Monitor and manage your JVMs" ((dash (2 6 0)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/martintrojer/jvm-mode.el") (:keywords "convenience")) nil])
  (kaesar [cl-struct-package-desc kaesar (0 9 0) "Another AES algorithm encrypt/decrypt string with password." ((cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-kaesar/raw/master/kaesar.el") (:keywords "data")) nil])
  (kaesar-file [cl-struct-package-desc kaesar-file (0 9 0) "Encrypt/Decrypt file by AES with password." ((kaesar (0 1 1))) single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-kaesar/raw/master/cipher/kaesar-file.el") (:keywords "data" "files")) nil])
  (kaesar-mode [cl-struct-package-desc kaesar-mode (0 9 0) "Encrypt/Decrypt buffer by AES with password." ((kaesar (0 1 4)) (cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-kaesar/raw/master/cipher/kaesar-mode.el") (:keywords "data" "convenience")) nil])
  (kakapo-mode [cl-struct-package-desc kakapo-mode (1 2) "TABS (hard or soft) for indentation (leading whitespace), and SPACES for alignment." ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/listx/kakapo-mode") (:keywords "indentation")) nil])
  (karma [cl-struct-package-desc karma (0 1 0) "Karma Test Runner Emacs Integration" nil single "melpa-stable" nil ((:url . "http://github.com/tonini/karma.el") (:keywords "javascript" "js" "karma" "testing")) nil])
  (key-seq [cl-struct-package-desc key-seq (1 0 1) "map pairs of sequentially pressed keys to commands" ((key-chord (0 6))) single "melpa-stable" nil ((:url . "http://github.com/vlevit/key-seq.el") (:keywords "convenience" "keyboard" "keybindings")) nil])
  (keyfreq [cl-struct-package-desc keyfreq (1 7) "track command frequencies" nil single "melpa-stable" nil nil nil])
  (keyset [cl-struct-package-desc keyset (0 1 2) "A small library for structuring key bindings." ((dash (2 8 0)) (cl-lib (0 5))) single "melpa-stable" nil nil nil])
  (kibit-helper [cl-struct-package-desc kibit-helper (0 1 1) "Conveniently use the Kibit Leiningen plugin from Emacs" ((s (0 8)) (emacs (24))) single "melpa-stable" nil ((:url . "http://www.github.com/brunchboy/kibit-helper") (:keywords "languages" "clojure" "kibit")) nil])
  (kill-or-bury-alive [cl-struct-package-desc kill-or-bury-alive (0 1 1) "Precise control over buffer killing in Emacs" ((emacs (24 4)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/mrkkrp/kill-or-bury-alive") (:keywords "buffer" "killing" "convenience")) nil])
  (kurecolor [cl-struct-package-desc kurecolor (1 2 2) "color editing goodies for Emacs" ((emacs (24 1)) (s (1 0))) single "melpa-stable" nil nil nil])
  (lentic [cl-struct-package-desc lentic (0 10) "One buffer as a view of another" ((emacs (24 4)) (m-buffer (0 13)) (dash (2 5 0)) (f (0 17 2)) (s (1 9 0))) tar "melpa-stable" nil nil nil])
  (letcheck [cl-struct-package-desc letcheck (0 4) "Check the erroneous assignments in let forms" nil single "melpa-stable" nil ((:url . "https://github.com/Fuco1/letcheck") (:keywords "convenience")) nil])
  (lice [cl-struct-package-desc lice (0 2) "License And Header Template" nil tar "melpa-stable" nil ((:url . "https://github.com/buzztaiki/lice-el") (:keywords "template" "license" "tools")) nil])
  (list-packages-ext [cl-struct-package-desc list-packages-ext (0 1 0) "Extras for list-packages" ((s (1 6 0)) (ht (1 5 0)) (persistent-soft (0 8 6))) single "melpa-stable" nil ((:keywords "convenience" "tools")) nil])
  (list-unicode-display [cl-struct-package-desc list-unicode-display (0 1) "Search for and list unicode characters by name" ((cl-lib (0 5))) single "melpa-stable" nil ((:keywords "convenience")) nil])
  (lit-mode [cl-struct-package-desc lit-mode (0 1 1) "Major mode for lit" nil single "melpa-stable" nil ((:keywords "languages" "tools")) nil])
  (live-code-talks [cl-struct-package-desc live-code-talks (0 2 1) "Support for slides with live code in them" ((emacs (24)) (cl-lib (0 5)) (narrowed-page-navigation (0 1))) single "melpa-stable" nil ((:keywords "docs" "multimedia")) nil])
  (live-py-mode [cl-struct-package-desc live-py-mode (2 8 1) "No description available." nil tar "melpa-stable" nil nil nil])
  (load-relative [cl-struct-package-desc load-relative (1 0) "relative file load (within a multi-file Emacs package)" nil tar "melpa-stable" nil ((:url . "http://github.com/rocky/emacs-load-relative") (:keywords "internal")) nil])
  (loc-changes [cl-struct-package-desc loc-changes (1 1) "Helps users and programs keep track of positions even after buffer changes." nil single "melpa-stable" nil ((:url . "http://github.com/rocky/emacs-loc-changes")) nil])
  (log4e [cl-struct-package-desc log4e (0 3 0) "provide logging framework for elisp" nil single "melpa-stable" nil ((:url . "https://github.com/aki2o/log4e") (:keywords "log")) nil])
  (logview [cl-struct-package-desc logview (0 4 2) "Major mode for viewing log files" ((emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/doublep/logview") (:keywords "files" "tools")) nil])
  (magic-filetype [cl-struct-package-desc magic-filetype (0 1 1) "Enhance filetype major mode" ((emacs (24)) (s (1 9 0))) single "melpa-stable" nil ((:keywords "vim" "ft" "file" "magic-mode")) nil])
  (magit-filenotify [cl-struct-package-desc magit-filenotify (0 1) "Refresh status buffer when git tree changes" ((magit (1 3 0)) (emacs (24 4))) single "melpa-stable" nil ((:keywords "tools")) nil])
  (magit-gerrit [cl-struct-package-desc magit-gerrit (0 3) "Magit plugin for Gerrit Code Review" ((magit (2 3 1))) single "melpa-stable" nil ((:url . "https://github.com/terranpro/magit-gerrit")) nil])
  (magit-popup [cl-struct-package-desc magit-popup (2 3 1) "Define prefix-infix-suffix command combos" ((emacs (24 4)) (async (1 5)) (dash (2 12 1))) tar "melpa-stable" nil ((:url . "https://github.com/magit/magit") (:keywords "bindings")) nil])
  (marcopolo [cl-struct-package-desc marcopolo (0 3 0) "Emacs client for Docker API" ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) tar "melpa-stable" nil ((:url . "https://github.com/nlamirault/marcopolo") (:keywords "docker")) nil])
  (markdown-mode+ [cl-struct-package-desc markdown-mode+ (0 8) "extra functions for markdown-mode" ((markdown-mode (20111229))) tar "melpa-stable" nil ((:url . "http://github.com/milkypostman/markdown-mode+.el") (:keywords "markdown" "latex" "osx" "rtf")) nil])
  (markup-faces [cl-struct-package-desc markup-faces (1 0 0) "collection of faces for markup language modes" nil single "melpa-stable" nil ((:url . "https://github.com/sensorflo/markup-faces") (:keywords "wp" "faces")) nil])
  (marshal [cl-struct-package-desc marshal (0 5 3) "eieio extension for automatic (un)marshalling" ((eieio (1 4)) (json (1 3))) single "melpa-stable" nil ((:url . "https://github.com/sigma/marshal.el") (:keywords "eieio")) nil])
  (matrix-client [cl-struct-package-desc matrix-client (0 1 5) "A minimal chat client for the Matrix.org RPC" ((json (1 4)) (request (0 2 0))) tar "melpa-stable" nil ((:url . "http://doc.rix.si/matrix.html") (:keywords "web")) nil])
  (maven-test-mode [cl-struct-package-desc maven-test-mode (0 1 5) "Utilities for navigating test files and running maven test tasks." ((s (1 9)) (emacs (24))) single "melpa-stable" nil ((:url . "http://github.com/rranelli/maven-test-mode") (:keywords "java" "maven" "test")) nil])
  (mbe [cl-struct-package-desc mbe (0 1) "Macros by Example" ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/ijp/mbe.el") (:keywords "tools" "macros")) nil])
  (mediawiki [cl-struct-package-desc mediawiki (2 2 5) "mediawiki frontend" nil single "melpa-stable" nil ((:url . "http://github.com/hexmode/mediawiki-el") (:keywords "mediawiki" "wikipedia" "network" "wiki")) nil])
  (melpa-upstream-visit [cl-struct-package-desc melpa-upstream-visit (1 0 0) "A set of kludges to visit a melpa-hosted package's homepage" ((s (1 6 0))) single "melpa-stable" nil ((:keywords "convenience")) nil])
  (metaweblog [cl-struct-package-desc metaweblog (0 1 1) "An emacs library to access metaweblog based weblogs" ((xml-rpc (1 6 8))) tar "melpa-stable" nil nil nil])
  (mhc [cl-struct-package-desc mhc (1 1 1) "Message Harmonized Calendaring system." ((calfw (20150703))) tar "melpa-stable" nil ((:url . "http://www.quickhack.net/mhc") (:keywords "calendar")) nil])
  (mmt [cl-struct-package-desc mmt (0 1 1) "Missing macro tools for Emacs Lisp" ((emacs (24 1)) (cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/mrkkrp/mmt") (:keywords "macro" "emacs-lisp")) nil])
  (modalka [cl-struct-package-desc modalka (0 1 1) "Easily introduce native modal editing of your own design" ((emacs (24 4))) single "melpa-stable" nil ((:url . "https://github.com/mrkkrp/modalka") (:keywords "modal" "editing")) nil])
  (monokai-theme [cl-struct-package-desc monokai-theme (1 0 0) "A fruity color theme for Emacs." nil single "melpa-stable" nil ((:url . "http://github.com/oneKelvinSmith/monokai-emacs")) nil])
  (mowedline [cl-struct-package-desc mowedline (0 2 8) "elisp utilities for using mowedline" nil single "melpa-stable" nil nil nil])
  (moz-controller [cl-struct-package-desc moz-controller (1 0) "Control Firefox from Emacs" ((moz (0))) single "melpa-stable" nil ((:url . "https://github.com/RenWenshan/emacs-moz-controller")) nil])
  (mpv [cl-struct-package-desc mpv (0 1 0) "control mpv for easy note-taking" ((cl-lib (0 5)) (emacs (24)) (json (1 3)) (names (0 5 4)) (org (8 0))) single "melpa-stable" nil ((:url . "https://github.com/kljohann/mpv.el") (:keywords "tools" "multimedia")) nil])
  (msvc [cl-struct-package-desc msvc (1 2 2) "Microsoft Visual C/C++ mode" ((emacs (24)) (cl-lib (0 5)) (cedet (1 0)) (ac-clang (1 2 0))) tar "melpa-stable" nil ((:url . "https://github.com/yaruopooner/msvc") (:keywords "languages" "completion" "syntax check" "mode" "intellisense")) nil])
  (mu4e-alert [cl-struct-package-desc mu4e-alert (0 3) "Desktop notification for mu4e" ((alert (1 2)) (s (1 10 0)) (emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/iqbalansari/mu4e-alert") (:keywords "mail" "convenience")) nil])
  (mu4e-maildirs-extension [cl-struct-package-desc mu4e-maildirs-extension (0 8) "Show mu4e maildirs summary in mu4e-main-view" nil single "melpa-stable" nil ((:url . "http://github.com/agpchil/mu4e-maildirs-extension")) nil])
  (mwim [cl-struct-package-desc mwim (0 2) "Move to the beginning/end of line or code" nil single "melpa-stable" nil ((:url . "https://github.com/alezost/mwim.el") (:keywords "convenience")) nil])
  (name-this-color [cl-struct-package-desc name-this-color (0 3 0) "Match RGB codes to names easily and precisely" ((emacs (24)) (cl-lib (0 5)) (dash (2 11 0))) single "melpa-stable" nil ((:url . "https://github.com/knl/name-this-color.el") (:keywords "lisp" "color" "hex" "rgb" "shade" "name")) nil])
  (narrow-reindent [cl-struct-package-desc narrow-reindent (0 2 0) "Defines a minor mode to left-align narrowed regions." ((emacs (24 4))) single "melpa-stable" nil ((:url . "https://github.com/emallson/narrow-reindent.el")) nil])
  (narrowed-page-navigation [cl-struct-package-desc narrowed-page-navigation (0 1 0) "A minor mode for showing one page at a time" ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:keywords "outlines")) nil])
  (nasm-mode [cl-struct-package-desc nasm-mode (1 0 1) "NASM x86 assembly major mode" ((emacs (24 3))) single "melpa-stable" nil ((:url . "https://github.com/skeeto/nasm-mode")) nil])
  (nginx-mode [cl-struct-package-desc nginx-mode (1 1 4) "major mode for editing nginx config files" nil single "melpa-stable" nil ((:keywords "nginx")) nil])
  (nixos-options [cl-struct-package-desc nixos-options (0 0 1) "Interface for browsing and completing NixOS options." ((emacs (24)) (json (1 4))) single "melpa-stable" nil ((:url . "http://www.github.com/travisbhartwell/nix-emacs/") (:keywords "unix")) nil])
  (noccur [cl-struct-package-desc noccur (0 2) "Run multi-occur on project/dired files" nil single "melpa-stable" nil ((:keywords "convenience")) nil])
  (notmuch-labeler [cl-struct-package-desc notmuch-labeler (0 1) "Improve notmuch way of displaying labels" ((notmuch (0))) tar "melpa-stable" nil ((:url . "https://github.com/DamienCassou/notmuch-labeler") (:keywords "emacs" "package" "elisp" "notmuch" "emails")) nil])
  (nyan-mode [cl-struct-package-desc nyan-mode (1 0 0) "Nyan Cat shows position in current buffer in mode-line." nil tar "melpa-stable" nil ((:url . "https://github.com/TeMPOraL/nyan-mode/") (:keywords "nyan" "cat" "lulz" "pop tart cat" "build something amazing")) nil])
  (nyan-prompt [cl-struct-package-desc nyan-prompt (0 2 0) "Nyan Cat on the eshell prompt." nil tar "melpa-stable" nil ((:url . "http://github.com/PuercoPop/nyan-prompt") (:keywords "nyan" "cat" "lulz" "eshell" "rainbow dependencies ((rx 0))")) nil])
  (ob-http [cl-struct-package-desc ob-http (0 0 3) "http request in org-mode babel" ((s (1 9 0)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "http://github.com/zweifisch/ob-http")) nil])
  (ocodo-svg-modelines [cl-struct-package-desc ocodo-svg-modelines (0 1 4) "A collection of beautiful SVG modelines" ((svg-mode-line-themes (0))) tar "melpa-stable" nil nil nil])
  (octicons [cl-struct-package-desc octicons (0 1) "octicons utility" ((cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-octicons")) nil])
  (offlineimap [cl-struct-package-desc offlineimap (1) "Run OfflineIMAP from Emacs" nil single "melpa-stable" nil ((:url . "http://julien.danjou.info/offlineimap-el.html")) nil])
  (omni-kill [cl-struct-package-desc omni-kill (0 2 3) "Kill all the things" nil single "melpa-stable" nil ((:keywords "convenience" "editing" "tools")) nil])
  (omni-log [cl-struct-package-desc omni-log (0 1 2) "Logging utilities" ((emacs (24)) (ht (2 0)) (s (1 6 1)) (dash (1 8 0))) tar "melpa-stable" nil ((:url . "https://github.com/AdrieanKhisbe/omni-log.el") (:keywords "convenience" "languages" "tools")) nil])
  (omni-scratch [cl-struct-package-desc omni-scratch (0 1 1) "Easy and mode-specific draft buffers" nil single "melpa-stable" nil ((:keywords "convenience" "languages" "tools")) nil])
  (omni-tags [cl-struct-package-desc omni-tags (0 1 2) "Highlight and Actions for 'Tags'" ((pcre2el (1 7)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "http://github.com/AdrieanKhisbe/omni-tags.el") (:keywords "convenience")) nil])
  (omnisharp [cl-struct-package-desc omnisharp (3 9) "Omnicompletion (intellisense) and more for C#" ((json (1 2)) (flycheck (0 21)) (dash (20141201 2206)) (auto-complete (1 4)) (popup (0 5 1)) (csharp-mode (0 8 7)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/sp3ctum/omnisharp-emacs") (:keywords "csharp" "c#" "ide" "auto-complete" "intellisense")) nil])
  (opam [cl-struct-package-desc opam (0 1) "OPAM tools" ((emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/lunaryorn/opam.el") (:keywords "convenience")) nil])
  (org-ac [cl-struct-package-desc org-ac (0 0 2) "Some auto-complete sources for org-mode" ((auto-complete-pcmp (0 0 1)) (log4e (0 2 0)) (yaxception (0 1))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/org-ac") (:keywords "org" "completion")) nil])
  (org-autolist [cl-struct-package-desc org-autolist (0 12) "Improved list management in org-mode" nil single "melpa-stable" nil ((:url . "https://github.com/calvinwyoung/org-autolist") (:keywords "lists" "checklists" "org-mode")) nil])
  (org-gcal [cl-struct-package-desc org-gcal (0 2) "Org sync with Google Calendar" ((request-deferred (0 2 0)) (alert (1 1)) (emacs (24)) (cl-lib (0 5)) (org (8 2 4))) single "melpa-stable" nil ((:url . "https://github.com/myuhe/org-gcal.el") (:keywords "convenience")) nil])
  (org-gnome [cl-struct-package-desc org-gnome (0 3) "Orgmode integration with the GNOME desktop" ((alert (1 2)) (telepathy (0 1)) (gnome-calendar (0 1))) single "melpa-stable" nil ((:keywords "org" "gnome")) nil])
  (org-if [cl-struct-package-desc org-if (0 2 0) "Interactive Fiction Authoring System for Org-Mode." nil tar "melpa-stable" nil nil nil])
  (org-link-travis [cl-struct-package-desc org-link-travis (0 0 1) "Insert/Export the link of Travis CI on org-mode" ((org (7))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/org-link-travis") (:keywords "org")) nil])
  (org-linkany [cl-struct-package-desc org-linkany (0 0 2) "Insert link using anything.el/helm.el on org-mode" ((log4e (0 2 0)) (yaxception (0 1))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/org-linkany") (:keywords "org" "completion")) nil])
  (org-multiple-keymap [cl-struct-package-desc org-multiple-keymap (0 2) "Set keymap to elements, such as timestamp and priority." ((org (8 2 4)) (emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/myuhe/org-multiple-keymap.el") (:keywords "convenience" "org-mode")) nil])
  (org-pdfview [cl-struct-package-desc org-pdfview (0 3) "Support for links to documents in pdfview mode" ((org (6 1)) (pdf-tools (0 4 0))) single "melpa-stable" nil ((:keywords "org" "pdf-view" "pdf-tools")) nil])
  (org-projectile [cl-struct-package-desc org-projectile (0 2 0) "Repository todo management for org-mode" ((projectile (0 11 0)) (dash (2 10 0))) single "melpa-stable" nil ((:url . "https://github.com/IvanMalison/org-projectile") (:keywords "org" "projectile" "todo")) nil])
  (org-repo-todo [cl-struct-package-desc org-repo-todo (0 0 2) "Simple repository todo management with org-mode" nil single "melpa-stable" nil ((:url . "https://github.com/waymondo/org-repo-todo") (:keywords "convenience")) nil])
  (org-sync [cl-struct-package-desc org-sync (0 3 0) "Synchronize Org documents with External Issue Trackers" ((cl-lib (0 5)) (org (8 2)) (emacs (24))) tar "melpa-stable" nil ((:url . "https://github.com/arbox/org-sync") (:keywords "org" "synchronization" "issue tracking" "github" "redmine")) nil])
  (org-table-comment [cl-struct-package-desc org-table-comment (0 2 0) "Org table comment modes." nil single "melpa-stable" nil ((:url . "http://github.com/mlf176f2/org-table-comment.el") (:keywords "org-mode" "orgtbl")) nil])
  (org-time-budgets [cl-struct-package-desc org-time-budgets (1 0 1) "Define time budgets and display clocked time." ((alert (0 5 10)) (cl-lib (0 5))) single "melpa-stable" nil nil nil])
  (org-tracktable [cl-struct-package-desc org-tracktable (0 1) "Track your writing progress in an org-table" ((emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/tty-tourist/org-tracktable") (:keywords "org" "writing")) nil])
  (org-transform-tree-table [cl-struct-package-desc org-transform-tree-table (0 1 2) "Transform org-mode tree with properties to a table, and the other way around" ((dash (2 10 0)) (s (1 3 0))) single "melpa-stable" nil ((:url . "https://github.com/jplindstrom/emacs-org-transform-tree-table") (:keywords "org-mode" "table" "org-table" "tree" "csv" "convert")) nil])
  (org2blog [cl-struct-package-desc org2blog (0 9 2) "Blog from Org mode to wordpress" ((org (8 1)) (xml-rpc (1 6 8)) (metaweblog (0 1))) tar "melpa-stable" nil nil nil])
  (org2jekyll [cl-struct-package-desc org2jekyll (0 1 8) "Minor mode to publish org-mode post to jekyll without specific yaml" ((dash-functional (2 11 0)) (s (1 9 0)) (deferred (0 3 1))) tar "melpa-stable" nil ((:url . "https://github.com/ardumont/org2jekyll") (:keywords "org-mode" "jekyll" "blog" "publish")) nil])
  (orgit [cl-struct-package-desc orgit (1 0 0) "support for Org links to Magit buffers" ((emacs (24 4)) (dash (2 12 0)) (magit (2 2 2)) (org (8 3))) single "melpa-stable" nil ((:url . "https://github.com/magit/orgit")) nil])
  (osx-dictionary [cl-struct-package-desc osx-dictionary (0 2 1) "Interface for OSX Dictionary.app" ((cl-lib (0 5)) (chinese-word-at-point (0 1))) tar "melpa-stable" nil ((:url . "https://github.com/xuchunyang/osx-dictionary.el") (:keywords "mac" "dictionary")) nil])
  (osx-trash [cl-struct-package-desc osx-trash (0 1 1) "System trash for OS X" ((emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/lunaryorn/osx-trash.el") (:keywords "files" "convenience" "tools" "unix")) nil])
  (ov [cl-struct-package-desc ov (1 0 6) "Overlay library for Emacs Lisp" ((emacs (24 3))) single "melpa-stable" nil ((:url . "https://github.com/ShingoFukuyama/ov.el") (:keywords "overlay")) nil])
  (overseer [cl-struct-package-desc overseer (0 3 0) "Ert-runner Integration Into Emacs" ((emacs (24)) (dash (2 10 0)) (pkg-info (0 4))) single "melpa-stable" nil ((:url . "http://www.github.com/tonini/overseer.el")) nil])
  (owdriver [cl-struct-package-desc owdriver (0 0 6) "Quickly perform various actions on other windows" ((smartrep (0 0 3)) (log4e (0 2 0)) (yaxception (0 2 0))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/owdriver") (:keywords "convenience")) nil])
  (ox-ioslide [cl-struct-package-desc ox-ioslide (0 2) "Export org-mode to Google I/O HTML5 slide." ((emacs (24 1)) (org (8 0)) (cl-lib (0 5)) (f (0 17 2))) tar "melpa-stable" nil ((:url . "http://github.com/coldnew/org-ioslide") (:keywords "html" "presentation")) nil])
  (ox-pandoc [cl-struct-package-desc ox-pandoc (1 150707) "org exporter for pandoc." ((org (8 2)) (emacs (24)) (dash (2 8)) (ht (2 0))) single "melpa-stable" nil ((:url . "https://github.com/kawabata/ox-pandoc") (:keywords "tools")) nil])
  (ox-twbs [cl-struct-package-desc ox-twbs (1 0 3) "Bootstrap compatible HTML Back-End for Org" nil single "melpa-stable" nil ((:url . "https://github.com/marsmining/ox-twbs") (:keywords "org" "html" "publish" "twitter" "bootstrap")) nil])
  (package+ [cl-struct-package-desc package+ (1 1 0) "Extensions for the package library." nil single "melpa-stable" nil ((:url . "TBA") (:keywords "extensions" "tools")) nil])
  (paper-theme [cl-struct-package-desc paper-theme (0 1 0) "No description available." nil single "melpa-stable" nil nil nil])
  (parenface [cl-struct-package-desc parenface (1 0 3) "Provide a face for parens in lispy modes." nil tar "melpa-stable" nil nil nil])
  (parsebib [cl-struct-package-desc parsebib (1 0 5) "A library for parsing bib files" ((emacs (24 3))) single "melpa-stable" nil ((:keywords "text" "bibtex")) nil])
  (pass [cl-struct-package-desc pass (1 1) "Major mode for password-store.el" ((emacs (24)) (password-store (0 1)) (f (0 17))) single "melpa-stable" nil ((:keywords "password-store" "password" "keychain")) nil])
  (pastelmac-theme [cl-struct-package-desc pastelmac-theme (1 0) "a soothing theme with a pastel color palette" ((emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/bmastenbrook/pastelmac-theme-el") (:keywords "themes")) nil])
  (paxedit [cl-struct-package-desc paxedit (1 1 6) "Structured, Context Driven LISP Editing and Refactoring" ((cl-lib (0 5)) (paredit (23))) single "melpa-stable" nil ((:url . "https://github.com/promethial/paxedit") (:keywords "lisp" "refactoring" "context")) nil])
  (pcomplete-extension [cl-struct-package-desc pcomplete-extension (1 0) "additional completion for pcomplete" ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/thierryvolpiatto/pcomplete-extension")) nil])
  (pcsv [cl-struct-package-desc pcsv (1 3 6) "Parser of csv" nil single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-pcsv/raw/master/pcsv.el") (:keywords "data")) nil])
  (pdf-tools [cl-struct-package-desc pdf-tools (0 70) "Support library for PDF documents." ((emacs (24 3)) (tablist (0 70)) (let-alist (1 0 4))) tar "melpa-stable" nil ((:keywords "files" "multimedia")) nil])
  (peg [cl-struct-package-desc peg (0 6) "Parsing Expression Grammars in Emacs Lisp" nil single "melpa-stable" nil nil nil])
  (per-buffer-theme [cl-struct-package-desc per-buffer-theme (1 3) "Change theme according to buffer name or major mode." ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://bitbucket.com/inigoserna/per-buffer-theme.el") (:keywords "themes")) nil])
  (persistent-scratch [cl-struct-package-desc persistent-scratch (0 2 2) "Preserve the scratch buffer across Emacs sessions" ((emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/Fanael/persistent-scratch")) nil])
  (persp-mode [cl-struct-package-desc persp-mode (1 1 5) "\"perspectives\" shared among frames + save/load - bugs." nil single "melpa-stable" nil ((:url . "https://github.com/Bad-ptr/persp-mode.el") (:keywords "perspectives" "session" "workspace" "persistence" "windows" "buffers" "convenience")) nil])
  (phpcbf [cl-struct-package-desc phpcbf (0 9 2) "Format PHP code in Emacs using PHP_CodeSniffer's phpcbf" ((s (1 9 0))) single "melpa-stable" nil ((:url . "https://github.com/nishimaki10/emacs-phpcbf") (:keywords "tools" "php")) nil])
  (pinyin-search [cl-struct-package-desc pinyin-search (1 1 0) "Search Chinese by Pinyin" nil single "melpa-stable" nil ((:url . "https://github.com/xuchunyang/pinyin-search.el") (:keywords "chinese" "search")) nil])
  (pixiv-novel-mode [cl-struct-package-desc pixiv-novel-mode (0 0 3) "Major mode for pixiv novel" nil single "melpa-stable" nil ((:keywords "novel" "pixiv")) nil])
  (plsense [cl-struct-package-desc plsense (0 4 7) "provide interface for PlSense that is a development tool for Perl." ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 2 0))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/emacs-plsense") (:keywords "perl" "completion")) nil])
  (plsense-direx [cl-struct-package-desc plsense-direx (0 2 0) "Perl Package Explorer" ((direx (0 1 -3)) (plsense (0 3 2)) (log4e (0 2 0)) (yaxception (0 3 2))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/plsense-direx") (:keywords "perl" "convenience")) nil])
  (pophint [cl-struct-package-desc pophint (0 9 3) "Provide navigation using pop-up tips, like Firefox's Vimperator Hint Mode" ((popup (0 5 0)) (log4e (0 2 0)) (yaxception (0 1))) tar "melpa-stable" nil ((:url . "https://github.com/aki2o/emacs-pophint") (:keywords "popup")) nil])
  (pos-tip [cl-struct-package-desc pos-tip (0 4 6) "Show tooltip at point" nil single "melpa-stable" nil ((:keywords "tooltip")) nil])
  (powershell [cl-struct-package-desc powershell (0 1) "No description available." nil single "melpa-stable" nil nil nil])
  (ppd-sr-speedbar [cl-struct-package-desc ppd-sr-speedbar (0 0 6) "Sr Speedbar adaptor for project-persist-drawer." ((sr-speedbar (20140914 2339)) (project-persist-drawer (0 0 4))) tar "melpa-stable" nil nil nil])
  (project-persist [cl-struct-package-desc project-persist (0 3 2) "A minor mode to allow loading and saving of project settings." nil tar "melpa-stable" nil nil nil])
  (project-persist-drawer [cl-struct-package-desc project-persist-drawer (0 0 4) "Use a project drawer with project-persist." ((project-persist (0 3))) tar "melpa-stable" nil nil nil])
  (projectile-rails [cl-struct-package-desc projectile-rails (0 6 7) "Minor mode for Rails projects based on projectile-mode" ((emacs (24 3)) (projectile (0 12 0)) (inflections (1 1)) (inf-ruby (2 2 6)) (f (0 13 0)) (rake (0 3 2))) single "melpa-stable" nil ((:url . "https://github.com/asok/projectile-rails") (:keywords "rails" "projectile")) nil])
  (projekt [cl-struct-package-desc projekt (0 1) "some kind of staging for CVS" ((emacs (24))) single "melpa-stable" nil nil nil])
  (prop-menu [cl-struct-package-desc prop-menu (0 1 2) "Create and display a context menu based on text and overlay properties" ((emacs (24 3)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/david-christiansen/prop-menu-el") (:keywords "convenience")) nil])
  (protobuf-mode [cl-struct-package-desc protobuf-mode (2 6 1) "major mode for editing protocol buffers." nil single "melpa-stable" nil ((:keywords "google" "protobuf" "languages")) nil])
  (psession [cl-struct-package-desc psession (1 1) "Persistent save of elisp objects." ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/thierryvolpiatto/psession")) nil])
  (pt [cl-struct-package-desc pt (0 0 3) "A front-end for pt, The Platinum Searcher." nil single "melpa-stable" nil ((:url . "https://github.com/bling/pt.el") (:keywords "pt" "ack" "ag" "grep" "search")) nil])
  (puml-mode [cl-struct-package-desc puml-mode (0 6 1) "Major mode for PlantUML" nil single "melpa-stable" nil ((:keywords "uml" "plantuml" "ascii")) nil])
  (py-autopep8 [cl-struct-package-desc py-autopep8 (0 7 0) "Use autopep8 to beautify a Python buffer" nil single "melpa-stable" nil ((:url . "http://paetzke.me/project/py-autopep8.el")) nil])
  (py-isort [cl-struct-package-desc py-isort (0 8) "Use isort to sort the imports in a Python buffer" nil single "melpa-stable" nil ((:url . "http://paetzke.me/project/py-isort.el")) nil])
  (py-yapf [cl-struct-package-desc py-yapf (0 2) "Use yapf to beautify a Python buffer" nil single "melpa-stable" nil ((:url . "https://github.com/paetzke/py-yapf.el")) nil])
  (pycarddavel [cl-struct-package-desc pycarddavel (1 0 1) "Integrate pycarddav" ((helm (1 7 0)) (emacs (24 0))) single "melpa-stable" nil ((:keywords "helm" "pyccarddav" "carddav" "message" "mu4e" "contacts")) nil])
  (pyenv-mode [cl-struct-package-desc pyenv-mode (0 1 0) "Integrate pyenv with python-mode" ((pythonic (0 1 0))) single "melpa-stable" nil ((:url . "https://github.com/proofit404/pyenv-mode")) nil])
  (python-x [cl-struct-package-desc python-x (1 0) "python.el extras for interactive evaluation" ((python (0 24)) (folding (0))) single "melpa-stable" nil ((:url . "https://github.com/wavexx/python-x.el") (:keywords "python" "eval" "folding")) nil])
  (pythonic [cl-struct-package-desc pythonic (0 1 0) "Utility functions for writing pythonic emacs package." ((emacs (24)) (cl-lib (0 5)) (dash (2 11)) (s (1 9)) (f (0 17 2))) single "melpa-stable" nil ((:url . "https://github.com/proofit404/pythonic")) nil])
  (quasi-monochrome-theme [cl-struct-package-desc quasi-monochrome-theme (1 0) "High contrast quasi monochrome color theme" nil single "melpa-stable" nil ((:url . "https://github.com/lbolla/emacs-quasi-monochrome") (:keywords "color-theme" "monochrome" "high contrast")) nil])
  (racer [cl-struct-package-desc racer (1 0 1) "Rust completion and code navigation via racer" ((emacs (24 3)) (rust-mode (0 2 0)) (dash (2 11 0)) (s (1 10 0))) single "melpa-stable" nil ((:url . "https://github.com/racer-rust/emacs-racer") (:keywords "abbrev" "convenience" "matching" "rust" "tools")) nil])
  (rainbow-blocks [cl-struct-package-desc rainbow-blocks (1 0 0) "Block syntax highlighting for lisp code" nil single "melpa-stable" nil ((:url . "https://github.com/istib/rainbow-blocks")) nil])
  (rake [cl-struct-package-desc rake (0 4 0) "Run rake commands" ((f (0 13 0)) (dash (1 5 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/asok/rake.el") (:keywords "rake" "ruby")) nil])
  (ranger [cl-struct-package-desc ranger (0 9 7) "Make dired more like ranger" ((emacs (24 4))) single "melpa-stable" nil ((:url . "https://github.com/ralesi/ranger") (:keywords "files" "convenience")) nil])
  (rcirc-styles [cl-struct-package-desc rcirc-styles (1 1) "support mIRC-style color and attribute codes" ((cl-lib (0 5))) single "melpa-stable" nil nil nil])
  (rdf-prefix [cl-struct-package-desc rdf-prefix (1 2) "Prefix lookup for RDF" nil single "melpa-stable" nil ((:keywords "convenience" "abbrev")) nil])
  (real-auto-save [cl-struct-package-desc real-auto-save (0 4) "enable real auto save" nil single "melpa-stable" nil nil nil])
  (realgud [cl-struct-package-desc realgud (1 2) "A modular front-end for interacting with external debuggers" ((load-relative (1 0)) (list-utils (0 4 2)) (loc-changes (1 1)) (test-simple (1 0))) tar "melpa-stable" nil ((:url . "http://github.com/rocky/emacs-dbgr")) nil])
  (recover-buffers [cl-struct-package-desc recover-buffers (1 0) "revisit all buffers from an auto-save file" nil tar "melpa-stable" nil nil nil])
  (rect+ [cl-struct-package-desc rect+ (1 0 10) "Extensions to rect.el" nil single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-rectplus") (:keywords "extensions" "data" "tools")) nil])
  (rectangle-utils [cl-struct-package-desc rectangle-utils (1 0) "Some useful rectangle functions." ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/thierryvolpiatto/rectangle-utils")) nil])
  (redpen-paragraph [cl-struct-package-desc redpen-paragraph (0 22) "RedPen interface." ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/karronoli/redpen-paragraph.el") (:keywords "document" "proofreading" "help")) nil])
  (repeatable-motion [cl-struct-package-desc repeatable-motion (0 1) "Make repeatable versions of motions" ((emacs (24))) tar "melpa-stable" nil ((:url . "https://github.com/willghatch/emacs-repeatable-motion") (:keywords "motion" "repeatable")) nil])
  (replace-symbol [cl-struct-package-desc replace-symbol (1 0) "Rename symbols in expressions or buffers" nil single "melpa-stable" nil ((:url . "https://github.com/bmastenbrook/replace-symbol-el")) nil])
  (requirejs [cl-struct-package-desc requirejs (1 1) "Requirejs import manipulation and source traversal." ((js2-mode (20150713)) (popup (0 5 3)) (s (1 9 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/requirejs-emacs") (:keywords "javascript" "requirejs")) nil])
  (resize-window [cl-struct-package-desc resize-window (0 1 0) "easily resize windows" ((emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/dpsutton/resize-mode") (:keywords "window" "resize")) nil])
  (restart-emacs [cl-struct-package-desc restart-emacs (0 1 1) "Restart emacs from within emacs" nil single "melpa-stable" nil ((:url . "https://github.com/iqbalansari/restart-emacs") (:keywords "convenience")) nil])
  (reveal-in-osx-finder [cl-struct-package-desc reveal-in-osx-finder (0 3 3) "Reveal file associated with buffer in OS X Finder" nil single "melpa-stable" nil ((:url . "https://github.com/kaz-yos/reveal-in-osx-finder") (:keywords "os x" "finder")) nil])
  (reverse-theme [cl-struct-package-desc reverse-theme (0 3) "Reverse theme for Emacs" nil single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-reverse-theme")) nil])
  (rigid-tabs [cl-struct-package-desc rigid-tabs (1 0) "Rigidify and adjust the visual alignment of TABs" ((emacs (24 3))) single "melpa-stable" nil ((:url . "https://github.com/wavexx/rigid-tabs.el") (:keywords "diff" "whitespace" "version control" "magit")) nil])
  (robe [cl-struct-package-desc robe (0 7 8) "Code navigation, documentation lookup and completion for Ruby" ((inf-ruby (2 3 0))) tar "melpa-stable" nil ((:url . "https://github.com/dgutov/robe") (:keywords "ruby" "convenience" "rails")) nil])
  (rope-read-mode [cl-struct-package-desc rope-read-mode (0 3 1) "Rearrange lines to read text smoothly" nil single "melpa-stable" nil ((:url . "https://github.com/marcowahl/rope-read-mode") (:keywords "reading" "convenience")) nil])
  (rubocop [cl-struct-package-desc rubocop (0 4 0) "An Emacs interface for RuboCop" ((dash (1 0 0)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/bbatsov/rubocop-emacs") (:keywords "project" "convenience")) nil])
  (sbt-mode [cl-struct-package-desc sbt-mode (0 1) "Major mode for sbt >= 0.12 with scala >= 2.9" ((scala-mode2 (0 22))) tar "melpa-stable" nil nil nil])
  (scala-mode2 [cl-struct-package-desc scala-mode2 (0 22) "Major mode for editing Scala >= 2.9" nil tar "melpa-stable" nil nil nil])
  (scala-outline-popup [cl-struct-package-desc scala-outline-popup (0 3 4) "scala file summary popup" ((dash (2 9 0)) (popup (0 5 2)) (scala-mode2 (0 22))) single "melpa-stable" nil ((:url . "https://github.com/ancane/scala-outline-popup.el") (:keywords "scala" "structure" "summary")) nil])
  (search-web [cl-struct-package-desc search-web (1 1) "Post web search queries using `browse-url'." nil single "melpa-stable" nil nil nil])
  (seq [cl-struct-package-desc seq (1 11) "Sequence manipulation functions" nil single "melpa-stable" nil ((:keywords "sequences")) nil])
  (sexp-move [cl-struct-package-desc sexp-move (0 2 6) "Improved S-Expression Movement" nil single "melpa-stable" nil ((:url . "https://gitlab.com/elzair/sexp-move") (:keywords "sexp")) nil])
  (shackle [cl-struct-package-desc shackle (0 7 0) "Enforce rules for popups" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/wasamasa/shackle") (:keywords "convenience")) nil])
  (shell-split-string [cl-struct-package-desc shell-split-string (0 1) "Split strings using shell-like syntax" nil single "melpa-stable" nil ((:url . "https://github.com/10sr/shell-split-string-el") (:keywords "utility" "library" "shell" "string")) nil])
  (shell-switcher [cl-struct-package-desc shell-switcher (1 0 1) "Provide fast switching between shell buffers." nil tar "melpa-stable" nil nil nil])
  (shell-toggle [cl-struct-package-desc shell-toggle (1 3 1) "Toggle to and from the shell buffer" nil single "melpa-stable" nil ((:url . "https://github.com/knu/shell-toggle.el") (:keywords "processes")) nil])
  (shelldoc [cl-struct-package-desc shelldoc (0 0 5) "shell command editing support with man page." ((cl-lib (0 3)) (s (1 9 0))) single "melpa-stable" nil ((:url . "http://github.com/mhayashi1120/Emacs-shelldoc/raw/master/shelldoc.el") (:keywords "applications")) nil])
  (shelltest-mode [cl-struct-package-desc shelltest-mode (1 1) "Major mode for shelltestrunner" nil single "melpa-stable" nil ((:url . "https://github.com/rtrn/shelltest-mode") (:keywords "languages")) nil])
  (shpec-mode [cl-struct-package-desc shpec-mode (0 1 0) "Minor mode for shpec specification" nil single "melpa-stable" nil ((:url . "http://github.com/shpec/shpec-mode") (:keywords "languages" "tools")) nil])
  (shrink-whitespace [cl-struct-package-desc shrink-whitespace (0 0 1) "Whitespace removal DWIM key" nil single "melpa-stable" nil ((:url . "https://github.com/jcpetkovich/shrink-whitespace.el") (:keywords "editing")) nil])
  (sift [cl-struct-package-desc sift (0 1 0) "A front-end for sift, a fast and powerful open source alternative to grep" nil tar "melpa-stable" nil ((:url . "https://github.com/nlamirault/sift.el") (:keywords "sift" "ack" "pt" "ag" "grep" "search")) nil])
  (simplenote2 [cl-struct-package-desc simplenote2 (2 2 2) "Interact with simple-note.appspot.com" ((request-deferred (0 2 0))) single "melpa-stable" nil ((:keywords "simplenote")) nil])
  (sly-company [cl-struct-package-desc sly-company (0 8) "sly completion backend for company mode" ((sly (1 0 0 -3)) (company (0 7)) (emacs (24 3))) single "melpa-stable" nil ((:keywords "convenience" "lisp" "abbrev")) nil])
  (smartparens [cl-struct-package-desc smartparens (1 6 3) "Automatic insertion, wrapping and paredit-like navigation with user defined pairs." ((cl-lib (0 3)) (dash (2 6 0))) tar "melpa-stable" nil nil nil])
  (smooth-scrolling [cl-struct-package-desc smooth-scrolling (1 0 4) "Make emacs scroll smoothly" nil single "melpa-stable" nil ((:url . "http://github.com/aspiers/smooth-scrolling/") (:keywords "convenience")) nil])
  (sos [cl-struct-package-desc sos (0 1) "StackOverflow Search" ((org (7))) single "melpa-stable" nil ((:url . "https://github.com/omouse/emacs-sos") (:keywords "tools" "search" "questions")) nil])
  (sotlisp [cl-struct-package-desc sotlisp (1 4 1) "Write lisp at the speed of thought." ((emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/Malabarba/speed-of-thought-lisp") (:keywords "convenience" "lisp")) nil])
  (sound-wav [cl-struct-package-desc sound-wav (0 1) "Play wav file" ((deferred (0 3 1)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-sound-wav")) nil])
  (spaceline [cl-struct-package-desc spaceline (1 0) "Modeline configuration library for powerline" ((emacs (24)) (cl-lib (0 5)) (powerline (2 3)) (dash (2 11 0)) (s (1 10 0))) tar "melpa-stable" nil ((:url . "https://github.com/TheBB/spaceline") (:keywords "mode-line" "powerline" "spacemacs")) nil])
  (sparkline [cl-struct-package-desc sparkline (1 0 2) "Make sparkline images from a list of numbers" ((cl-lib (0 3))) single "melpa-stable" nil ((:keywords "extensions")) nil])
  (speech-tagger [cl-struct-package-desc speech-tagger (0 0 0) "No description available." nil single "melpa-stable" nil nil nil])
  (sphinx-doc [cl-struct-package-desc sphinx-doc (0 1 0) "Sphinx friendly docstrings for Python functions" ((s (1 9 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/naiquevin/sphinx-doc.el") (:keywords "sphinx" "python")) nil])
  (splitjoin [cl-struct-package-desc splitjoin (0 1) "splitjoin" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-splitjoin")) nil])
  (spotify [cl-struct-package-desc spotify (0 3 2) "Control the spotify application from emacs" nil single "melpa-stable" nil ((:url . "https://github.com/remvee/spotify-el") (:keywords "convenience")) nil])
  (sqlup-mode [cl-struct-package-desc sqlup-mode (0 5 3) "Upcase SQL words for you" nil single "melpa-stable" nil ((:url . "https://github.com/trevoke/sqlup-mode.el") (:keywords "sql" "tools")) nil])
  (srefactor [cl-struct-package-desc srefactor (0 5) "A refactoring tool based on Semantic parser framework" ((emacs (24 4))) tar "melpa-stable" nil ((:url . "https://github.com/tuhdo/semantic-refactor") (:keywords "c" "languages" "tools")) nil])
  (stash [cl-struct-package-desc stash (0 4 1) "lightweight persistent caching" nil single "melpa-stable" nil ((:url . "https://www.github.com/vermiculus/stash.el/") (:keywords "extensions" "data" "internal" "lisp")) nil])
  (stylus-mode [cl-struct-package-desc stylus-mode (1 0 0) "Major mode for editing .jade files" ((sws-mode (0))) single "melpa-stable" nil ((:url . "https://github.com/brianc/jade-mode")) nil])
  (sweetgreen [cl-struct-package-desc sweetgreen (0 5) "Order Salads from sweetgreen.com" ((dash (2 12 1)) (helm (1 5 6)) (request (0 2 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://www.github.com/CestDiego/sweetgreen.el") (:keywords "salad" "food" "sweetgreen" "request")) nil])
  (swiper [cl-struct-package-desc swiper (0 6 0) "Isearch with an overview. Oh, man!" ((emacs (24 1))) tar "melpa-stable" nil ((:url . "https://github.com/abo-abo/swiper") (:keywords "matching")) nil])
  (swiper-helm [cl-struct-package-desc swiper-helm (0 1 0) "Helm version of Swiper." ((emacs (24 1)) (swiper (0 1 0)) (helm (1 5 3))) single "melpa-stable" nil ((:url . "https://github.com/abo-abo/swiper-helm") (:keywords "matching")) nil])
  (sws-mode [cl-struct-package-desc sws-mode (1 0 0) "(S)ignificant (W)hite(S)pace mode" nil single "melpa-stable" nil ((:url . "https://github.com/brianc/jade-mode")) nil])
  (sx [cl-struct-package-desc sx (0 4) "StackExchange client. Ask and answer questions on Stack Overflow, Super User, and the likes" ((emacs (24 1)) (cl-lib (0 5)) (json (1 3)) (markdown-mode (2 0)) (let-alist (1 0 3))) tar "melpa-stable" nil ((:url . "https://github.com/vermiculus/sx.el/") (:keywords "help" "hypermedia" "tools")) nil])
  (synosaurus [cl-struct-package-desc synosaurus (0 1 0) "An extensible thesaurus supporting lookup and substitution." ((cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/rootzlevel/synosaurus")) nil])
  (syntax-subword [cl-struct-package-desc syntax-subword (0 2) "make operations on words more fine-grained" nil single "melpa-stable" nil nil nil])
  (systemd [cl-struct-package-desc systemd (1 3 1) "Major mode for editing systemd units" ((emacs (24 4))) tar "melpa-stable" nil ((:keywords "tools" "unix")) nil])
  (ta [cl-struct-package-desc ta (1 5) "A tool to deal with Chinese homophonic characters" ((emacs (24 3)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "http://github.com/kuanyui/ta.el") (:keywords "tools")) nil])
  (tablist [cl-struct-package-desc tablist (0 60) "Extended tabulated-list-mode" ((emacs (24 3))) tar "melpa-stable" nil ((:keywords "extensions" "lisp")) nil])
  (tabulated-list [cl-struct-package-desc tabulated-list (0) "generic major mode for tabulated lists." nil single "melpa-stable" nil ((:keywords "extensions" "lisp")) nil])
  (telepathy [cl-struct-package-desc telepathy (1 0) "Access Telepathy from Emacs" nil single "melpa-stable" nil ((:keywords "telepathy" "tools")) nil])
  (telephone-line [cl-struct-package-desc telephone-line (0 3) "Rewrite of Powerline" ((emacs (24 3)) (cl-lib (0 5)) (eieio (1 4)) (s (1 9 0)) (seq (1 8))) tar "melpa-stable" nil ((:url . "https://github.com/dbordak/telephone-line") (:keywords "mode-line")) nil])
  (term-alert [cl-struct-package-desc term-alert (1 0) "Get notifications when commands complete in the Emacs terminal emulator" ((term-cmd (1 0)) (alert (1 1))) single "melpa-stable" nil ((:url . "https://github.com/CallumCameron/term-alert") (:keywords "notifications" "processes")) nil])
  (term-cmd [cl-struct-package-desc term-cmd (1 0) "Send commands to Emacs from programs running under term.el" nil single "melpa-stable" nil ((:url . "https://github.com/CallumCameron/term-cmd") (:keywords "processes")) nil])
  (term-run [cl-struct-package-desc term-run (0 1 4) "Run arbitrary command in terminal buffer" nil single "melpa-stable" nil ((:url . "https://github.com/10sr/term-run-el") (:keywords "utility" "shell" "command" "term-mode")) nil])
  (termbright-theme [cl-struct-package-desc termbright-theme (1 0) "a more usable theme for white-on-black terminals" ((emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/bmastenbrook/termbright-theme-el") (:keywords "themes")) nil])
  (tern-django [cl-struct-package-desc tern-django (0 1 0) "Create tern projects for django applications." ((emacs (24)) (tern (0 0 1)) (f (0 17 1))) tar "melpa-stable" nil ((:url . "https://github.com/proofit404/tern-django")) nil])
  (test-kitchen [cl-struct-package-desc test-kitchen (0 2 1) "Run test-kitchen inside of emacs" nil single "melpa-stable" nil ((:url . "http://github.com/jjasghar/test-kitchen-el") (:keywords "chef" "ruby" "test-kitchen")) nil])
  (test-simple [cl-struct-package-desc test-simple (1 0) "Simple Unit Test Framework for Emacs Lisp" nil single "melpa-stable" nil ((:url . "http://github.com/rocky/emacs-test-simple") (:keywords "unit-test")) nil])
  (timer-revert [cl-struct-package-desc timer-revert (0 1) "minor mode to revert buffer for a given time interval." nil single "melpa-stable" nil ((:url . "http://github.com/yyr/timer-revert") (:keywords "timer" "revert" "auto-revert.")) nil])
  (timesheet [cl-struct-package-desc timesheet (0 3 0) "Timesheet management add-on for org-mode" ((s (1)) (org (7)) (auctex (11))) tar "melpa-stable" nil ((:url . "https://github.com/tmarble/timesheet.el") (:keywords "org" "timesheet")) nil])
  (tox [cl-struct-package-desc tox (0 3) "Launch current python test with tox" nil single "melpa-stable" nil ((:url . "https://github.com/chmouel/tox.el") (:keywords "convenience" "tox" "python" "tests")) nil])
  (tracking [cl-struct-package-desc tracking (2 0) "Buffer modification tracking" nil tar "melpa-stable" nil ((:url . "https://github.com/jorgenschaefer/circe/wiki/Tracking")) nil])
  (transmission [cl-struct-package-desc transmission (0 6) "Interface to a Transmission session" ((emacs (24 4)) (let-alist (1 0 3))) single "melpa-stable" nil ((:keywords "comm" "tools")) nil])
  (travis [cl-struct-package-desc travis (0 6 0) "Emacs client for Travis" ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) tar "melpa-stable" nil ((:url . "https://github.com/nlamirault/emacs-travis") (:keywords "travis")) nil])
  (tss [cl-struct-package-desc tss (0 6 0) "provide a interface for auto-complete.el/flymake.el on typescript-mode." ((auto-complete (1 4 0)) (json-mode (1 1 0)) (log4e (0 2 0)) (yaxception (0 1))) tar "melpa-stable" nil ((:url . "https://github.com/aki2o/emacs-tss") (:keywords "typescript" "completion")) nil])
  (typed-clojure-mode [cl-struct-package-desc typed-clojure-mode (1 0 0) "Typed Clojure minor mode for Emacs" ((clojure-mode (2 1 1)) (cider (0 5 0))) single "melpa-stable" nil ((:url . "https://github.com/typedclojure/typed-clojure-mode")) nil])
  (ubuntu-theme [cl-struct-package-desc ubuntu-theme (4 2) "A theme inspired by the default terminal colors in Ubuntu" nil single "melpa-stable" nil ((:url . "http://github.com/rocher/ubuntu-theme")) nil])
  (unify-opening [cl-struct-package-desc unify-opening (1 1 0) "Make everything use the same mechanism to open files" ((emacs (24 4))) single "melpa-stable" nil ((:url . "https://github.com/DamienCassou/unify-opening") (:keywords "dired" "org" "mu4e" "open" "runner" "extension" "file")) nil])
  (unkillable-scratch [cl-struct-package-desc unkillable-scratch (0 1) "Disallow buffers from being killed by regexp -- default is *scratch* buffer" nil single "melpa-stable" nil ((:keywords "scratch")) nil])
  (vagrant [cl-struct-package-desc vagrant (0 5 2) "Manage a vagrant box from emacs" nil single "melpa-stable" nil ((:url . "https://github.com/ottbot/vagrant.el") (:keywords "vagrant" "chef")) nil])
  (vbasense [cl-struct-package-desc vbasense (0 1 1) "provide a environment like Visual Basic Editor." ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 1))) tar "melpa-stable" nil ((:url . "https://github.com/aki2o/emacs-vbasense") (:keywords "vba" "completion")) nil])
  (vimish-fold [cl-struct-package-desc vimish-fold (0 2 1) "Fold text like in Vim" ((emacs (24 4)) (cl-lib (0 5)) (f (0 18 0))) single "melpa-stable" nil ((:url . "https://github.com/mrkkrp/vimish-fold") (:keywords "convenience")) nil])
  (visual-fill-column [cl-struct-package-desc visual-fill-column (1 5) "fill-column for visual-line-mode" ((emacs (24 3))) single "melpa-stable" nil nil nil])
  (voca-builder [cl-struct-package-desc voca-builder (0 2 0) "No description available." nil single "melpa-stable" nil nil nil])
  (weather-metno [cl-struct-package-desc weather-metno (0 1 0) "Weather data from met.no in Emacs" ((emacs (24)) (cl-lib (0 3))) tar "melpa-stable" nil nil nil])
  (web-completion-data [cl-struct-package-desc web-completion-data (0 1) "Shared completion data for ac-html and company-web" nil tar "melpa-stable" nil ((:url . "https://github.com/osv/web-completion-data") (:keywords "html" "auto-complete" "company")) nil])
  (weibo [cl-struct-package-desc weibo (1 0) "No description available." nil tar "melpa-stable" nil nil nil])
  (which-key [cl-struct-package-desc which-key (0 7) "Display available keybindings in popup" ((emacs (24 3))) single "melpa-stable" nil ((:url . "https://github.com/justbur/emacs-which-key")) nil])
  (whitaker [cl-struct-package-desc whitaker (0 3) "Comint interface for Whitaker's Words" ((dash (2 10 0))) single "melpa-stable" nil ((:keywords "processes")) nil])
  (whole-line-or-region [cl-struct-package-desc whole-line-or-region (1 3 1) "operate on current line if region undefined" nil single "melpa-stable" nil ((:keywords "kill" "yank" "cut" "copy" "paste" "whole" "lines")) nil])
  (win-switch [cl-struct-package-desc win-switch (1 1) "fast, dynamic bindings for window-switching/resizing" nil single "melpa-stable" nil ((:url . "http://www.stat.cmu.edu/~genovese/emacs/win-switch/") (:keywords "window" "switch" "key bindings" "ergonomic" "efficient")) nil])
  (window-purpose [cl-struct-package-desc window-purpose (1 4) "Purpose-based window management for Emacs" ((emacs (24)) (cl-lib (0 5)) (let-alist (1 0 3)) (imenu-list (0 1))) tar "melpa-stable" nil ((:url . "https://github.com/bmag/emacs-purpose") (:keywords "frames")) nil])
  (with-editor [cl-struct-package-desc with-editor (2 3 1) "Use the Emacsclient as $EDITOR" ((emacs (24 4)) (async (1 5)) (dash (2 12 1))) tar "melpa-stable" nil ((:url . "https://github.com/magit/magit") (:keywords "tools")) nil])
  (wn-mode [cl-struct-package-desc wn-mode (1 4) "numeric window switching shortcuts" ((emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/luismbo/wn-mode") (:keywords "buffers" "windows" "switching-windows")) nil])
  (wordsmith-mode [cl-struct-package-desc wordsmith-mode (1 0 0) "Syntax analysis and NLP text-processing in Emacs (OSX-only)" nil single "melpa-stable" nil nil nil])
  (wsd-mode [cl-struct-package-desc wsd-mode (0 4 0) "Emacs major-mode for www.websequencediagrams.com" nil tar "melpa-stable" nil ((:url . "https://github.com/josteink/wsd-mode") (:keywords "wsd" "diagrams" "design" "process" "modelling" "uml")) nil])
  (x86-lookup [cl-struct-package-desc x86-lookup (1 0 0) "jump to x86 instruction documentation" ((emacs (24 3)) (cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/skeeto/x86-lookup")) nil])
  (xbm-life [cl-struct-package-desc xbm-life (0 1 1) "A XBM version of Conway's Game of Life" nil single "melpa-stable" nil ((:url . "https://github.com/wasamasa/xbm-life") (:keywords "games")) nil])
  (xtest [cl-struct-package-desc xtest (1 1 0) "Simple Testing with Emacs & ERT" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/promethial/xtest") (:keywords "testing" "ert")) nil])
  (yaml-mode [cl-struct-package-desc yaml-mode (0 0 12) "Major mode for editing YAML files" nil single "melpa-stable" nil ((:keywords "data" "yaml")) nil])
  (yatemplate [cl-struct-package-desc yatemplate (1 0) "File templates with yasnippet" ((yasnippet (0 8 1))) single "melpa-stable" nil ((:url . "https://github.com/mineo/yatemplate") (:keywords "files" "convenience")) nil])
  (yatex [cl-struct-package-desc yatex (0) "No description available." nil tar "melpa-stable" nil nil nil])
  (yaxception [cl-struct-package-desc yaxception (0 3 3) "Provide framework about exception like Java for Elisp" nil single "melpa-stable" nil ((:url . "https://github.com/aki2o/yaxception") (:keywords "exception" "error" "signal")) nil])
  (ycmd [cl-struct-package-desc ycmd (0 9) "emacs bindings to the ycmd completion server" ((emacs (24)) (f (0 17 1)) (dash (1 2 0)) (deferred (0 3 2)) (popup (0 5 0))) tar "melpa-stable" nil ((:url . "https://github.com/abingham/emacs-ycmd")) nil])
  (yesql-ghosts [cl-struct-package-desc yesql-ghosts (0 1 0) "Display ghostly yesql defqueries inline" ((s (1 9 0)) (dash (2 10 0)) (cider (0 8 0))) single "melpa-stable" nil nil nil])
  (youdao-dictionary [cl-struct-package-desc youdao-dictionary (0 3) "Youdao Dictionary interface for Emacs" ((popup (0 5 0)) (chinese-word-at-point (0 2)) (names (0 5)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/xuchunyang/youdao-dictionary.el") (:keywords "convenience" "chinese" "dictionary")) nil])
  (zerodark-theme [cl-struct-package-desc zerodark-theme (1 0) "A dark, medium contrast theme for Emacs" nil single "melpa-stable" nil ((:url . "https://github.com/NicolasPetton/zerodark-theme") (:keywords "themes")) nil])
  (zombie-trellys-mode [cl-struct-package-desc zombie-trellys-mode (0 2 1) "A minor mode for interaction with Zombie Trellys" ((emacs (24)) (cl-lib (0 5)) (haskell-mode (1 5))) single "melpa-stable" nil ((:keywords "languages")) nil])
  (zone-nyan [cl-struct-package-desc zone-nyan (0 2 1) "Zone out with nyan cat" ((esxml (0 3 1))) single "melpa-stable" nil ((:url . "https://github.com/wasamasa/zone-nyan") (:keywords "zone")) nil])
  (zoom-window [cl-struct-package-desc zoom-window (0 2) "Zoom window like tmux" nil single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-zoom-window")) nil])
  (zop-to-char [cl-struct-package-desc zop-to-char (1 0) "A replacement of zap-to-char." ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/thierryvolpiatto/zop-to-char")) nil])
  (zotelo [cl-struct-package-desc zotelo (1 3) "Manage Zotero collections from emacs" nil single "melpa-stable" nil ((:url . "https://github.com/vitoshka/zotelo") (:keywords "zotero" "emacs" "reftex" "bibtex" "mozrepl" "bibliography manager")) nil])
  (zzz-to-char [cl-struct-package-desc zzz-to-char (0 1 0) "Fancy version of `zap-to-char' command" ((emacs (24 4)) (cl-lib (0 5)) (avy (0 3 0))) single "melpa-stable" nil ((:url . "https://github.com/mrkkrp/zzz-to-char") (:keywords "convenience")) nil])
 )
