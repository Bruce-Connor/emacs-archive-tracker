'(
  (abc-mode [cl-struct-package-desc abc-mode (20140225 944) "Major mode for editing abc music files" nil single "melpa-stable" nil ((:keywords "local" "docs")) nil])
  (ac-alchemist [cl-struct-package-desc ac-alchemist (0 1) "auto-complete source for alchemist" ((auto-complete (1 5 0)) (alchemist (1 3 1)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-ac-alchemist")) nil])
  (ac-anaconda [cl-struct-package-desc ac-anaconda (0 1 0) "Anaconda sources for auto-complete-mode" ((auto-complete (1 4 0)) (anaconda-mode (0 1 1)) (dash (2 6 0))) single "melpa-stable" nil ((:url . "https://github.com/proofit404/ac-anaconda")) nil])
  (ac-cake [cl-struct-package-desc ac-cake (1 0 0) "CakePHP Minor Mode auto-complete.el source" ((cake (1 4 2)) (auto-complete (1 4))) single "melpa-stable" nil ((:url . "http://code.101000lab.org")) nil])
  (ac-cake2 [cl-struct-package-desc ac-cake2 (1 0 1) "CakePHP 2 Minor Mode auto-complete.el source" ((cake2 (1 1 2)) (auto-complete (1 4 0))) single "melpa-stable" nil ((:url . "http://code.101000lab.org")) nil])
  (ac-cider [cl-struct-package-desc ac-cider (0 2 1) "Clojure auto-complete sources using CIDER" ((cider (0 8 0)) (auto-complete (1 4)) (cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/clojure-emacs/ac-cider") (:keywords "languages" "clojure" "nrepl" "cider" "compliment")) nil])
  (ac-clang [cl-struct-package-desc ac-clang (1 6 0) "Auto Completion source by libclang for GNU Emacs" ((emacs (24)) (cl-lib (0 5)) (auto-complete (1 4 0)) (pos-tip (0 4 6)) (yasnippet (0 8 0))) tar "melpa-stable" nil ((:url . "https://github.com/yaruopooner/ac-clang") (:keywords "completion" "convenience" "intellisense")) nil])
  (ac-dcd [cl-struct-package-desc ac-dcd (0 4) "Auto Completion source for dcd for GNU Emacs" ((auto-complete (1 3 1)) (flycheck-dmd-dub (0 7))) single "melpa-stable" nil ((:url . "http://github.com/atilaneves/ac-dcd") (:keywords "languages")) nil])
  (ac-emoji [cl-struct-package-desc ac-emoji (0 2) "auto-complete source of Emoji" ((auto-complete (1 5 0)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-ac-emoji")) nil])
  (ac-etags [cl-struct-package-desc ac-etags (0 6) "etags/ctags completion source for auto-complete" ((auto-complete (1 4))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-ac-etags")) nil])
  (ac-geiser [cl-struct-package-desc ac-geiser (0 1) "Auto-complete backend for geiser" ((geiser (0 5)) (auto-complete (1 4))) tar "melpa-stable" nil nil nil])
  (ac-haskell-process [cl-struct-package-desc ac-haskell-process (0 7) "Haskell auto-complete source which uses the current haskell process" ((auto-complete (1 4)) (haskell-mode (13))) single "melpa-stable" nil ((:keywords "languages")) nil])
  (ac-helm [cl-struct-package-desc ac-helm (2 1) "Auto Complete with Helm" ((helm (20130328)) (auto-complete (1 4 0)) (popup (0 5 0))) single "melpa-stable" nil ((:keywords "completion" "convenience" "helm")) nil])
  (ac-html [cl-struct-package-desc ac-html (0 31) "auto complete source for html tags and attributes" ((auto-complete (1 4)) (web-completion-data (0 1))) tar "melpa-stable" nil ((:url . "https://github.com/cheunghy/ac-html") (:keywords "html" "auto-complete" "rails" "ruby")) nil])
  (ac-html-bootstrap [cl-struct-package-desc ac-html-bootstrap (0 9 3) "auto complete bootstrap3/fontawesome classes for `ac-html' and `company-web'" ((web-completion-data (0 1))) tar "melpa-stable" nil ((:url . "https://github.com/osv/ac-html-bootstrap") (:keywords "html" "auto-complete" "bootstrap" "cssx")) nil])
  (ac-html-csswatcher [cl-struct-package-desc ac-html-csswatcher (0 1 7) "css/less class/id completion with `ac-html' or `company-web'" ((web-completion-data (0 1))) single "melpa-stable" nil ((:url . "https://github.com/osv/ac-html-csswatcher") (:keywords "html" "css" "less" "auto-complete")) nil])
  (ac-inf-ruby [cl-struct-package-desc ac-inf-ruby (0 4) "Enable auto-complete in inf-ruby sessions" ((inf-ruby (2 3 2)) (auto-complete (1 4))) single "melpa-stable" nil ((:keywords "languages" "tools")) nil])
  (ac-ispell [cl-struct-package-desc ac-ispell (0 7) "ispell completion source for auto-complete" ((auto-complete (1 4)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-ac-ispell")) nil])
  (ac-mozc [cl-struct-package-desc ac-mozc (0 0 4) "auto-complete sources for Japanese input using Mozc" ((cl-lib (0 5)) (auto-complete (1 4)) (mozc (0))) single "melpa-stable" nil ((:url . "https://github.com/igjit/ac-mozc")) nil])
  (ac-octave [cl-struct-package-desc ac-octave (0 4) "An auto-complete source for Octave" ((auto-complete (1 4 0))) single "melpa-stable" nil ((:url . "https://github.com/coldnew/ac-octave") (:keywords "octave" "auto-complete" "completion")) nil])
  (ac-php [cl-struct-package-desc ac-php (1 5 1) "Auto Completion source for php for GNU Emacs" ((emacs (24)) (php-mode (1)) (auto-complete (1 4 0)) (yasnippet (0 8 0)) (xcscope (1)) (s (1)) (f (1))) tar "melpa-stable" nil ((:url . "https://github.com/xcwen/ac-php") (:keywords "completion" "convenience" "intellisense")) nil])
  (ac-racer [cl-struct-package-desc ac-racer (0 1) "auto-complete source of racer" ((auto-complete (1 5 0)) (racer (0 0 2)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-ac-racer")) nil])
  (ac-slime [cl-struct-package-desc ac-slime (0 8) "An auto-complete source using slime completions" ((auto-complete (1 4)) (slime (2 9)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/purcell/ac-slime")) nil])
  (ace-flyspell [cl-struct-package-desc ace-flyspell (0 1 2) "Jump to and correct spelling errors using `ace-jump-mode' and flyspell" ((ace-jump-mode (2 0))) single "melpa-stable" nil ((:url . "https://github.com/cute-jumper/ace-flyspell") (:keywords "extensions")) nil])
  (ace-isearch [cl-struct-package-desc ace-isearch (0 1 4) "A seamless bridge between isearch, ace-jump-mode, avy and helm-swoop" ((ace-jump-mode (2 0)) (avy (0 3)) (helm-swoop (1 4)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/tam17aki/ace-isearch")) nil])
  (ace-jump-buffer [cl-struct-package-desc ace-jump-buffer (0 3 1) "fast buffer switching extension to `ace-jump-mode'" ((ace-jump-mode (1 0)) (dash (2 4 0))) single "melpa-stable" nil ((:url . "https://github.com/waymondo/ace-jump-buffer")) nil])
  (ace-jump-helm-line [cl-struct-package-desc ace-jump-helm-line (0 3 3) "Ace-jump to a candidate in helm window" ((avy (0 2 0)) (helm (1 6 3))) single "melpa-stable" nil ((:url . "https://github.com/cute-jumper/ace-jump-helm-line") (:keywords "extensions")) nil])
  (ace-jump-mode [cl-struct-package-desc ace-jump-mode (2 0) "a quick cursor location minor mode for emacs" nil single "melpa-stable" nil ((:url . "https://github.com/winterTTr/ace-jump-mode/") (:keywords "motion" "location" "cursor")) nil])
  (ace-jump-zap [cl-struct-package-desc ace-jump-zap (0 1 1) "Character zapping, `ace-jump-mode` style" ((ace-jump-mode (1 0)) (dash (2 10 0))) single "melpa-stable" nil ((:url . "https://github.com/waymondo/ace-jump-zap") (:keywords "convenience" "tools" "extensions")) nil])
  (ace-link [cl-struct-package-desc ace-link (0 3 0) "Quickly follow links using `ace-jump-mode'" ((ace-jump-mode (2 0))) single "melpa-stable" nil ((:url . "https://github.com/abo-abo/ace-link") (:keywords "convenience" "links")) nil])
  (ace-pinyin [cl-struct-package-desc ace-pinyin (0 2 3) "Jump to Chinese characters using ace-jump-char-mode or avy-goto-char" ((ace-jump-mode (2 0)) (avy (0 2 0))) single "melpa-stable" nil ((:url . "https://github.com/cute-jumper/ace-pinyin") (:keywords "extensions")) nil])
  (ace-popup-menu [cl-struct-package-desc ace-popup-menu (0 1 1) "Replace GUI popup menu in Emacs with something more efficient" ((emacs (24 4)) (cl-lib (0 5)) (avy (0 3 0))) single "melpa-stable" nil ((:url . "https://github.com/mrkkrp/ace-popup-menu") (:keywords "convenience" "popup" "menu")) nil])
  (ace-window [cl-struct-package-desc ace-window (0 9 0) "Quickly switch windows." ((avy (0 2 0))) single "melpa-stable" nil ((:url . "https://github.com/abo-abo/ace-window") (:keywords "window" "location")) nil])
  (actionscript-mode [cl-struct-package-desc actionscript-mode (7 2 2) "A simple mode for editing Actionscript 3 files" nil single "melpa-stable" nil ((:keywords "language" "modes")) nil])
  (adoc-mode [cl-struct-package-desc adoc-mode (0 6 4) "a major-mode for editing AsciiDoc files in Emacs" ((markup-faces (1 0 0))) single "melpa-stable" nil ((:url . "https://github.com/sensorflo/adoc-mode/wiki") (:keywords "wp" "asciidoc")) nil])
  (aes [cl-struct-package-desc aes (0 8) "Implementation of AES" nil single "melpa-stable" nil ((:url . "https://github.com/Sauermann/emacs-aes") (:keywords "data" "tools")) nil])
  (ag [cl-struct-package-desc ag (0 46) "A front-end for ag ('the silver searcher'), the C ack replacement." ((dash (2 8 0)) (s (1 9 0)) (cl-lib (0 5))) single "melpa-stable" nil nil nil])
  (aggressive-indent [cl-struct-package-desc aggressive-indent (1 4) "Minor mode to aggressively keep your code always indented" ((emacs (24 1)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "http://github.com/Malabarba/aggressive-indent-mode") (:keywords "indent" "lisp" "maint" "tools")) nil])
  (ahk-mode [cl-struct-package-desc ahk-mode (1 5 5) "Major mode for editing AHK (AutoHotkey and AutoHotkey_L)" nil single "melpa-stable" nil ((:url . "https://github.com/ralesi/ahk-mode") (:keywords "ahk" "autohotkey" "hotkey" "keyboard shortcut" "automation")) nil])
  (airline-themes [cl-struct-package-desc airline-themes (1 2) "vim-airline themes for emacs powerline" ((powerline (2 3))) tar "melpa-stable" nil ((:url . "http://github.com/AnthonyDiGirolamo/airline-themes.el") (:keywords "evil" "mode-line" "powerline" "airline" "themes")) nil])
  (alchemist [cl-struct-package-desc alchemist (1 5 2) "Elixir tooling integration into Emacs" ((elixir-mode (2 2 5)) (dash (2 11 0)) (emacs (24 4)) (company (0 8 0)) (pkg-info (0 4))) tar "melpa-stable" nil ((:url . "http://www.github.com/tonini/alchemist.el") (:keywords "languages" "elixir" "elixirc" "mix" "hex" "alchemist")) nil])
  (alect-themes [cl-struct-package-desc alect-themes (0 7) "Configurable light, dark and black themes for Emacs 24 or later" ((emacs (24 0))) tar "melpa-stable" nil ((:url . "https://github.com/alezost/alect-themes") (:keywords "color" "theme")) nil])
  (alert [cl-struct-package-desc alert (1 2) "Growl-style notification system for Emacs" ((gntp (0 1)) (log4e (0 3 0))) single "melpa-stable" nil ((:url . "https://github.com/jwiegley/alert") (:keywords "notification" "emacs" "message")) nil])
  (amd-mode [cl-struct-package-desc amd-mode (0 5) "Minor mode for handling JavaScript AMD module requirements." ((projectile (0 10 0)) (s (1 9 0)) (f (0 16 2)) (dash (2 5 0)) (makey (0 3)) (js2-mode (20140114)) (js2-refactor (0 6 1))) single "melpa-stable" nil ((:keywords "javascript" "amd" "projectile")) nil])
  (anaconda-mode [cl-struct-package-desc anaconda-mode (0 1 1) "Code navigation, documentation lookup and completion for Python" ((emacs (24)) (pythonic (0 1 0)) (dash (2 6 0)) (s (1 9)) (f (0 16 2))) single "melpa-stable" nil ((:url . "https://github.com/proofit404/anaconda-mode")) nil])
  (anaphora [cl-struct-package-desc anaphora (1 0 0) "anaphoric macros providing implicit temp variables" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/anaphora") (:keywords "extensions")) nil])
  (android-mode [cl-struct-package-desc android-mode (0 4 0) "Minor mode for Android application development" nil single "melpa-stable" nil ((:url . "https://github.com/remvee/android-mode") (:keywords "tools" "processes")) nil])
  (angular-snippets [cl-struct-package-desc angular-snippets (0 2 3) "Yasnippets for AngularJS" ((s (1 4 0)) (dash (1 2 0))) tar "melpa-stable" nil nil nil])
  (angularjs-mode [cl-struct-package-desc angularjs-mode (1 0) "No description available." nil tar "melpa-stable" nil nil nil])
  (annotate [cl-struct-package-desc annotate (0 4 4) "annotate files without changing them" nil single "melpa-stable" nil ((:url . "https://github.com/bastibe/annotate.el")) nil])
  (ansi [cl-struct-package-desc ansi (0 4 1) "Turn string into ansi strings" ((s (1 6 1)) (dash (1 5 0))) single "melpa-stable" nil ((:url . "http://github.com/rejeep/ansi") (:keywords "color" "ansi")) nil])
  (ansible [cl-struct-package-desc ansible (0 0 3) "Ansible minor mode" ((s (1 9 0)) (f (0 16 2))) tar "melpa-stable" nil ((:url . "http://101000lab.org")) nil])
  (ansible-doc [cl-struct-package-desc ansible-doc (0 3) "Ansible documentation Minor Mode" ((emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/lunaryorn/ansible-doc.el") (:keywords "tools" "help")) nil])
  (anti-zenburn-theme [cl-struct-package-desc anti-zenburn-theme (2 3) "Low-contrast Zenburn-inverted theme" nil single "melpa-stable" nil ((:url . "https://github.com/m00natic/anti-zenburn-theme")) nil])
  (anyins [cl-struct-package-desc anyins (0 1 1) "Insert content at multiple places from shell command or kill-ring" nil single "melpa-stable" nil ((:url . "http://github.com/antham/anyins") (:keywords "insert" "rectangular")) nil])
  (anything [cl-struct-package-desc anything (1 3 9) "open anything / QuickSilver-like candidate-selection framework" nil tar "melpa-stable" nil ((:url . "http://repo.or.cz/w/anything-config.git") (:keywords "files" "frames" "help" "matching" "outlines")) nil])
  (anything-exuberant-ctags [cl-struct-package-desc anything-exuberant-ctags (0 1 2) "Exuberant ctags anything.el interface" ((anything (1 3 9))) single "melpa-stable" nil ((:url . "http://code.101000lab.org") (:keywords "anything" "exuberant ctags")) nil])
  (anything-replace-string [cl-struct-package-desc anything-replace-string (0 9 2) "`replace-string' and `query-replace' `anything.el' interface" ((anything (1 3 9))) single "melpa-stable" nil ((:url . "http://code.101000lab.org")) nil])
  (anything-sage [cl-struct-package-desc anything-sage (0 0 1) "An anything extension for sage-shell-mode." ((cl-lib (0 5)) (anything (1 3 9)) (sage-shell-mode (0 0 1))) single "melpa-stable" nil ((:url . "https://github.com/stakemori/anything-sage") (:keywords "sage" "math" "anything")) nil])
  (anzu [cl-struct-package-desc anzu (0 58) "Show number of matches in mode-line while searching" ((cl-lib (0 5)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-anzu")) nil])
  (apples-mode [cl-struct-package-desc apples-mode (0 0 2) "Major mode for editing and executing AppleScript code" nil tar "melpa-stable" nil ((:keywords "applescript" "languages")) nil])
  (aproject [cl-struct-package-desc aproject (0 3) "Basic project framework for Emacs" nil tar "melpa-stable" nil ((:url . "https://github.com/vietor/aproject") (:keywords "environment" "project")) nil])
  (artbollocks-mode [cl-struct-package-desc artbollocks-mode (1 1 2) "Improve your writing (especially about art)" nil single "melpa-stable" nil ((:url . "https://github.com/sachac/artbollocks-mode")) nil])
  (asilea [cl-struct-package-desc asilea (0 2 1) "Find best compiler options using simulated annealing" ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/Fanael/asilea")) nil])
  (async [cl-struct-package-desc async (1 5) "Asynchronous processing in Emacs" ((emacs (24)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/jwiegley/emacs-async")) nil])
  (aurel [cl-struct-package-desc aurel (0 7) "Search, get info, vote and download AUR packages" nil single "melpa-stable" nil ((:url . "https://github.com/alezost/aurel") (:keywords "tools")) nil])
  (aurora-config-mode [cl-struct-package-desc aurora-config-mode (0 0 2) "Major mode for Apache Aurora configuration files" nil single "melpa-stable" nil ((:url . "https://github.com/bdd/aurora-config.el") (:keywords "languages" "configuration")) nil])
  (auth-password-store [cl-struct-package-desc auth-password-store (1 0 2) "Integrate auth-source with password-store" ((emacs (24 4)) (password-store (0 1)) (seq (1 9)) (cl-lib (0 5))) single "melpa-stable" nil ((:keywords "pass" "password-store" "auth-source" "username" "password" "login")) nil])
  (auto-compile [cl-struct-package-desc auto-compile (1 2 4) "automatically compile Emacs Lisp libraries" ((emacs (24 3)) (dash (2 1)) (packed (0 3 5))) single "melpa-stable" nil ((:url . "https://github.com/tarsius/auto-compile") (:keywords "compile" "convenience" "lisp")) nil])
  (auto-complete [cl-struct-package-desc auto-complete (1 5 0) "Auto Completion for GNU Emacs" ((popup (0 5 0)) (cl-lib (0 5))) tar "melpa-stable" nil nil nil])
  (auto-complete-clang-async [cl-struct-package-desc auto-complete-clang-async (0 5) "Auto Completion source for clang for GNU Emacs" nil single "melpa-stable" nil ((:keywords "completion" "convenience")) nil])
  (auto-complete-exuberant-ctags [cl-struct-package-desc auto-complete-exuberant-ctags (0 0 7) "Exuberant ctags auto-complete.el source" ((auto-complete (1 4 0))) single "melpa-stable" nil ((:url . "http://code.101000lab.org") (:keywords "anto-complete" "exuberant ctags")) nil])
  (auto-complete-nxml [cl-struct-package-desc auto-complete-nxml (0 5 0) "do completion by auto-complete.el on nXML-mode" ((auto-complete (1 4))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/auto-complete-nxml") (:keywords "completion" "html" "xml")) nil])
  (auto-complete-pcmp [cl-struct-package-desc auto-complete-pcmp (0 0 2) "Provide auto-complete sources using pcomplete results" ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 1))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/auto-complete-pcmp") (:keywords "completion")) nil])
  (auto-complete-sage [cl-struct-package-desc auto-complete-sage (0 0 4 1) "An auto-complete source for sage-shell-mode." ((auto-complete (1 5 0)) (sage-shell-mode (0 0 8))) single "melpa-stable" nil ((:url . "https://github.com/stakemori/auto-complete-sage") (:keywords "sage" "math" "auto-complete")) nil])
  (auto-dictionary [cl-struct-package-desc auto-dictionary (1 1) "automatic dictionary switcher for flyspell" nil single "melpa-stable" nil ((:url . "http://nschum.de/src/emacs/auto-dictionary/") (:keywords "wp")) nil])
  (auto-indent-mode [cl-struct-package-desc auto-indent-mode (0 126) "Auto indent Minor mode" nil tar "melpa-stable" nil ((:url . "https://github.com/mlf176f2/auto-indent-mode.el/") (:keywords "auto" "indentation")) nil])
  (auto-package-update [cl-struct-package-desc auto-package-update (1 5) "Automatically update Emacs packages." ((emacs (24 4)) (dash (2 1 0))) single "melpa-stable" nil ((:url . "http://github.com/rranelli/auto-package-update.el") (:keywords "package" "update")) nil])
  (auto-shell-command [cl-struct-package-desc auto-shell-command (1 0 2) "Run the shell command asynchronously that you specified when you save the file." ((deferred (20130312)) (popwin (20130329))) single "melpa-stable" nil ((:keywords "shell" "save" "async" "deferred" "auto")) nil])
  (auto-yasnippet [cl-struct-package-desc auto-yasnippet (0 3 0) "Quickly create disposable yasnippets" ((yasnippet (0 8 0))) single "melpa-stable" nil ((:url . "https://github.com/abo-abo/auto-yasnippet")) nil])
  (autodisass-java-bytecode [cl-struct-package-desc autodisass-java-bytecode (1 3) "Automatically disassemble Java bytecode" nil tar "melpa-stable" nil nil nil])
  (autodisass-llvm-bitcode [cl-struct-package-desc autodisass-llvm-bitcode (1 1) "Automatically disassemble LLVM bitcode" nil tar "melpa-stable" nil nil nil])
  (autopair [cl-struct-package-desc autopair (0 6 1) "Automagically pair braces and quotes like TextMate" ((cl-lib (0 3))) single "melpa-stable" nil ((:url . "http://autopair.googlecode.com") (:keywords "convenience" "emulations")) nil])
  (avy [cl-struct-package-desc avy (0 3 0) "set-based completion" ((emacs (24 1)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/abo-abo/avy") (:keywords "point" "location")) nil])
  (avy-zap [cl-struct-package-desc avy-zap (0 1 3) "Zap to char using `avy'" ((avy (0 2 0))) single "melpa-stable" nil ((:url . "https://github.com/cute-jumper/avy-zap") (:keywords "extensions")) nil])
  (babel [cl-struct-package-desc babel (1 4) "interface to web translation services such as Babelfish" nil single "melpa-stable" nil ((:keywords "translation" "web")) nil])
  (back-button [cl-struct-package-desc back-button (0 6 6) "Visual navigation through mark rings" ((nav-flash (1 0 0)) (smartrep (0 0 3)) (ucs-utils (0 7 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/back-button") (:keywords "convenience" "navigation" "interface")) nil])
  (bash-completion [cl-struct-package-desc bash-completion (2 0 0) "BASH completion for the shell buffer" nil tar "melpa-stable" nil nil nil])
  (bbcode-mode [cl-struct-package-desc bbcode-mode (2 0 0) "Major mode for writing BBCode markup" nil single "melpa-stable" nil ((:url . "https://github.com/ejmr/bbcode-mode")) nil])
  (bbdb- [cl-struct-package-desc bbdb- (0 0 2) "provide interface for more easily search/choice than BBDB." ((bbdb (20140123 1541)) (log4e (0 2 0)) (yaxception (0 1))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/bbdb-") (:keywords "bbdb" "news" "mail")) nil])
  (bbdb-vcard [cl-struct-package-desc bbdb-vcard (0 3) "vCard import/export for BBDB" nil tar "melpa-stable" nil ((:url . "http://github.com/trebb/bbdb-vcard") (:keywords "data" "calendar" "mail" "news")) nil])
  (bbdb2erc [cl-struct-package-desc bbdb2erc (0 1 3) "make bbdb show if pal is online with ERC, click i to chat" ((bbdb (3 0))) single "melpa-stable" nil ((:keywords "irc" "contacts" "chat" "client" "internet")) nil])
  (beeminder [cl-struct-package-desc beeminder (1 0 0) "Emacs interface for Beeminder" nil single "melpa-stable" nil ((:keywords "beeminder")) nil])
  (beginend [cl-struct-package-desc beginend (1 0 0) "Redefine M-< and M-> for some modes" ((emacs (24 4))) single "melpa-stable" nil ((:keywords "dired" "message" "mu4e" "begin" "end" "beginning" "buffer")) nil])
  (better-defaults [cl-struct-package-desc better-defaults (0 1 2) "Fixing weird quirks and poor defaults" nil single "melpa-stable" nil ((:url . "https://github.com/technomancy/better-defaults") (:keywords "convenience")) nil])
  (bind-key [cl-struct-package-desc bind-key (2 1) "A simple way to manage personal keybindings" nil single "melpa-stable" nil ((:url . "https://github.com/jwiegley/use-package") (:keywords "keys" "keybinding" "config" "dotemacs")) nil])
  (bing-dict [cl-struct-package-desc bing-dict (0 2 1) "Minimalists' English-Chinese Bing dictionary" nil single "melpa-stable" nil ((:url . "https://github.com/cute-jumper/bing-dict.el") (:keywords "extensions")) nil])
  (birds-of-paradise-plus-theme [cl-struct-package-desc birds-of-paradise-plus-theme (0 1 1) "A brown/orange light-on-dark theme for Emacs 24 (deftheme)." nil single "melpa-stable" nil ((:url . "https://github.com/jimeh/birds-of-paradise-plus-theme.el") (:keywords "themes")) nil])
  (bog [cl-struct-package-desc bog (1 0 0) "Extensions for research notes in Org mode" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/kyleam/bog") (:keywords "bib" "outlines")) nil])
  (bongo [cl-struct-package-desc bongo (1 0) "play music with Emacs" nil tar "melpa-stable" nil nil nil])
  (boon [cl-struct-package-desc boon (0 2) "Ergonomic Command Mode for Emacs." ((emacs (24 5)) (expand-region (0 10 0))) tar "melpa-stable" nil nil nil])
  (boxquote [cl-struct-package-desc boxquote (1 22) "Quote text with a semi-box." nil single "melpa-stable" nil nil nil])
  (browse-kill-ring [cl-struct-package-desc browse-kill-ring (2 0 0) "interactively insert items from kill-ring" nil single "melpa-stable" nil ((:url . "https://github.com/browse-kill-ring/browse-kill-ring") (:keywords "convenience")) nil])
  (browse-url-dwim [cl-struct-package-desc browse-url-dwim (0 6 8) "Context-sensitive external browse URL or Internet search" ((string-utils (0 3 2))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/browse-url-dwim") (:keywords "hypermedia")) nil])
  (buffer-move [cl-struct-package-desc buffer-move (0 6 2) "" nil single "melpa-stable" nil ((:url . "https://github.com/lukhas/buffer-move") (:keywords "lisp" "convenience")) nil])
  (buffer-utils [cl-struct-package-desc buffer-utils (0 1 0) "Buffer-manipulation utility functions" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/buffer-utils") (:keywords "extensions")) nil])
  (bufshow [cl-struct-package-desc bufshow (0 1 0) "No description available." nil single "melpa-stable" nil nil nil])
  (bug-reference-github [cl-struct-package-desc bug-reference-github (0 2 0) "Automatically set `bug-reference-url-format' in Github repositories." nil single "melpa-stable" nil ((:url . "https://github.com/arnested/bug-reference-github") (:keywords "programming" "tools")) nil])
  (bundler [cl-struct-package-desc bundler (1 1 0) "Interact with Bundler from Emacs" ((inf-ruby (2 1))) single "melpa-stable" nil ((:url . "http://github.com/tobiassvn/") (:keywords "bundler" "ruby")) nil])
  (bury-successful-compilation [cl-struct-package-desc bury-successful-compilation (0 1) "Bury the *compilation* buffer after successful compilation" nil single "melpa-stable" nil ((:keywords "compilation")) nil])
  (butler [cl-struct-package-desc butler (0 2 4) "Emacs client for Jenkins" ((deferred (3 2)) (json (1 2)) (emacs (24))) tar "melpa-stable" nil nil nil])
  (buttercup [cl-struct-package-desc buttercup (1 1) "Behavior-Driven Emacs Lisp Testing" nil tar "melpa-stable" nil nil nil])
  (button-lock [cl-struct-package-desc button-lock (1 0 2) "Clickable text defined by regular expression" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/button-lock") (:keywords "mouse" "button" "hypermedia" "extensions")) nil])
  (cacoo [cl-struct-package-desc cacoo (2 1 2) "Minor mode for Cacoo : http://cacoo.com" ((concurrent (0 3 1))) tar "melpa-stable" nil nil nil])
  (cake [cl-struct-package-desc cake (1 4 3) "CakePHP Minor Mode" ((cake-inflector (1 1 0)) (historyf (0 0 8)) (anything (1 3 9))) tar "melpa-stable" nil ((:url . "https://github.com/k1LoW/emacs-cake")) nil])
  (cake-inflector [cl-struct-package-desc cake-inflector (1 1 1) "Lazy porting CakePHP infrector.php to el" ((s (1 9 0))) single "melpa-stable" nil ((:url . "https://github.com/k1LoW/emacs-cake-inflector")) nil])
  (cake2 [cl-struct-package-desc cake2 (2 1 0) "CakePHP2 Minor Mode" ((dash (2 6 0)) (s (1 9 0)) (f (0 16 2)) (ht (2 0)) (json (1 2)) (cake-inflector (1 1 0)) (historyf (0 0 8)) (anything (1 3 9))) tar "melpa-stable" nil ((:url . "http://code.101000lab.org")) nil])
  (calfw [cl-struct-package-desc calfw (1 5) "Calendar view framework on Emacs" ((google-maps (20130412 230))) tar "melpa-stable" nil ((:url . "https://github.com/kiwanami/emacs-calfw") (:keywords "calendar")) nil])
  (camcorder [cl-struct-package-desc camcorder (0 2) "Record screencasts in gif or other formats." ((emacs (24)) (names (20150000)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "http://github.com/Bruce-Connor/camcorder.el") (:keywords "multimedia" "screencast")) nil])
  (cask [cl-struct-package-desc cask (0 7 3) "Cask: Project management for Emacs package development" ((s (1 8 0)) (dash (2 2 0)) (f (0 16 0)) (epl (0 5)) (shut-up (0 1 0)) (cl-lib (0 3)) (package-build (0 1))) tar "melpa-stable" nil ((:url . "http://github.com/cask/cask") (:keywords "speed" "convenience")) nil])
  (cask-package-toolset [cl-struct-package-desc cask-package-toolset (0 6 5) "Toolsettize your package" ((emacs (24)) (cl-lib (0 3)) (s (1 6 1)) (dash (1 8 0)) (f (0 10 0)) (commander (0 2 0)) (ansi (0 1 0)) (shut-up (0 1 0))) tar "melpa-stable" nil ((:url . "http://github.com/AdrieanKhisbe/cask-package-toolset.el") (:keywords "convenience" "tools")) nil])
  (caskxy [cl-struct-package-desc caskxy (0 0 5) "Control Cask in Emacs" ((log4e (0 2 0)) (yaxception (0 1))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/caskxy") (:keywords "convenience")) nil])
  (cdlatex [cl-struct-package-desc cdlatex (4 7) "Fast input methods for LaTeX environments and math" nil single "melpa-stable" nil ((:keywords "tex")) nil])
  (celery [cl-struct-package-desc celery (0 0 3) "a minor mode to draw stats from celery and more?" ((emacs (24)) (dash-functional (2 11 0)) (s (1 9 0)) (deferred (0 3 2))) single "melpa-stable" nil ((:url . "https://github.com/ardumont/emacs-celery") (:keywords "celery" "convenience")) nil])
  (cerbere [cl-struct-package-desc cerbere (0 1 0) "Unit testing in Emacs for several programming languages" ((s (1 9 0)) (f (0 16 0)) (go-mode (20140409)) (pkg-info (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/nlamirault/cerbere") (:keywords "python" "go" "php" "tests" "tdd")) nil])
  (cfengine-code-style [cl-struct-package-desc cfengine-code-style (3 7 1) "C code style for CFEngine project." nil single "melpa-stable" nil ((:url . "https://github.com/cfengine/core")) nil])
  (charmap [cl-struct-package-desc charmap (0 0 1) "Unicode table for Emacs" nil single "melpa-stable" nil ((:url . "https://github.com/lateau/charmap") (:keywords "unicode" "character" "ucs")) nil])
  (checkbox [cl-struct-package-desc checkbox (0 2 1) "Quick manipulation of textual checkboxes" ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "http://github.com/camdez/checkbox.el") (:keywords "convenience")) nil])
  (chinese-word-at-point [cl-struct-package-desc chinese-word-at-point (0 2 3) "Add `chinese-word' thing to `thing-at-point'" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/xuchunyang/chinese-word-at-point.el") (:keywords "convenience" "chinese")) nil])
  (cider [cl-struct-package-desc cider (0 9 1) "Clojure Interactive Development Environment that Rocks" ((clojure-mode (4 0 0)) (dash (2 4 1)) (pkg-info (0 4)) (emacs (24 3)) (queue (0 1 1))) tar "melpa-stable" nil ((:url . "http://www.github.com/clojure-emacs/cider") (:keywords "languages" "clojure" "cider")) nil])
  (cider-eval-sexp-fu [cl-struct-package-desc cider-eval-sexp-fu (1 0) "Briefly highlights an evaluated sexps." ((emacs (24)) (highlight (0)) (eval-sexp-fu (0 4 0))) single "melpa-stable" nil ((:keywords "languages" "clojure" "cider")) nil])
  (cil-mode [cl-struct-package-desc cil-mode (0 3) "Common Intermediate Language mode" nil single "melpa-stable" nil ((:url . "https://github.com/ForNeVeR/cil-mode") (:keywords "languages")) nil])
  (circe [cl-struct-package-desc circe (2 0) "Client for IRC in Emacs" ((cl-lib (0 5))) tar "melpa-stable" nil nil nil])
  (cl-lib-highlight [cl-struct-package-desc cl-lib-highlight (1 0 0) "full cl-lib font-lock highlighting" ((cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/skeeto/cl-lib-highlight")) nil])
  (cliphist [cl-struct-package-desc cliphist (0 1 0) "Read clipboard history from Parcellite on Linux and Flycut on OS X" ((popup (0 5 0))) tar "melpa-stable" nil ((:url . "http://github.com/redguardtoo/cliphist") (:keywords "clipobard" "manager" "history")) nil])
  (clips-mode [cl-struct-package-desc clips-mode (0 7) "Major mode for editing CLIPS code and REPL" nil tar "melpa-stable" nil nil nil])
  (clj-refactor [cl-struct-package-desc clj-refactor (1 1 0) "A collection of clojure refactoring functions" ((emacs (24 3)) (s (1 8 0)) (dash (2 4 0)) (yasnippet (0 6 1)) (paredit (24)) (multiple-cursors (1 2 2)) (cider (0 9 1)) (edn (1 1 1))) tar "melpa-stable" nil ((:keywords "convenience" "clojure" "cider")) nil])
  (cljr-helm [cl-struct-package-desc cljr-helm (0 7) "Wraps clojure refactor commands with helm" ((clj-refactor (0 13 0)) (helm (1 5 6))) single "melpa-stable" nil ((:url . "https://github.com/philjackson/cljr-helm") (:keywords "helm" "clojure" "refactor")) nil])
  (clocker [cl-struct-package-desc clocker (0 0 10) "Note taker and clock-in enforcer" ((projectile (0 11 0)) (dash (2 10))) single "melpa-stable" nil ((:keywords "org")) nil])
  (clojure-cheatsheet [cl-struct-package-desc clojure-cheatsheet (0 4 0) "The Clojure Cheatsheet for Emacs" ((helm (1 7 7)) (cider (0 9 0))) single "melpa-stable" nil ((:url . "https://github.com/krisajenkins/clojure-cheatsheet") (:keywords "clojure" "nrepl" "cheatsheet" "helm")) nil])
  (clojure-mode [cl-struct-package-desc clojure-mode (4 1 0) "Major mode for Clojure code" ((emacs (24 3))) single "melpa-stable" nil ((:url . "http://github.com/clojure-emacs/clojure-mode") (:keywords "languages" "clojure" "clojurescript" "lisp")) nil])
  (clojure-mode-extra-font-locking [cl-struct-package-desc clojure-mode-extra-font-locking (4 1 0) "Extra font-locking for Clojure mode" ((clojure-mode (3 0))) single "melpa-stable" nil ((:url . "http://github.com/clojure-emacs/clojure-mode") (:keywords "languages" "lisp")) nil])
  (clojure-quick-repls [cl-struct-package-desc clojure-quick-repls (0 1 0) "Quickly create Clojure and ClojureScript repls for a project." ((cider (0 8 1)) (dash (2 9 0))) single "melpa-stable" nil ((:url . "https://github.com/symfrog/clojure-quick-repls") (:keywords "languages" "clojure" "cider" "clojurescript")) nil])
  (clojure-snippets [cl-struct-package-desc clojure-snippets (1 0 0) "Yasnippets for clojure" ((yasnippet (0 8 0))) tar "melpa-stable" nil nil nil])
  (cm-mode [cl-struct-package-desc cm-mode (1 1) "Minor mode for CriticMarkup" nil single "melpa-stable" nil ((:keywords "text" "markdown")) nil])
  (cmake-ide [cl-struct-package-desc cmake-ide (0 2) "No description available." nil single "melpa-stable" nil nil nil])
  (cmake-mode [cl-struct-package-desc cmake-mode (3 3 2) "major-mode for editing CMake sources" nil single "melpa-stable" nil nil nil])
  (cmake-project [cl-struct-package-desc cmake-project (0 7) "Integrates CMake build process with Emacs" nil single "melpa-stable" nil ((:url . "http://github.com/alamaison/emacs-cmake-project") (:keywords "c" "cmake" "languages" "tools")) nil])
  (codic [cl-struct-package-desc codic (0 3) "Search Codic (codic.jp) naming dictionaries" ((emacs (24)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-codic")) nil])
  (coffee-mode [cl-struct-package-desc coffee-mode (0 6 1) "Major mode to edit CoffeeScript files in Emacs" ((emacs (24 1)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "http://github.com/defunkt/coffee-mode") (:keywords "coffeescript" "major" "mode")) nil])
  (color-theme-sanityinc-solarized [cl-struct-package-desc color-theme-sanityinc-solarized (2 29) "A version of Ethan Schoonover's Solarized themes" nil tar "melpa-stable" nil nil nil])
  (color-theme-sanityinc-tomorrow [cl-struct-package-desc color-theme-sanityinc-tomorrow (1 16) "A version of Chris Kempson's various Tomorrow themes" nil tar "melpa-stable" nil nil nil])
  (colorsarenice-theme [cl-struct-package-desc colorsarenice-theme (1 0 20) "A colorful color theme." ((emacs (24))) tar "melpa-stable" nil nil nil])
  (commander [cl-struct-package-desc commander (0 7 0) "Emacs command line parser" ((s (1 6 0)) (dash (2 0 0)) (cl-lib (0 3)) (f (0 6 1))) single "melpa-stable" nil ((:url . "http://github.com/rejeep/commander.el") (:keywords "cli" "argv")) nil])
  (common-lisp-snippets [cl-struct-package-desc common-lisp-snippets (0 1 1) "Yasnippets for Common Lisp" ((yasnippet (0 8 0))) tar "melpa-stable" nil ((:url . "https://github.com/mrkkrp/common-lisp-snippets") (:keywords "snippets")) nil])
  (company [cl-struct-package-desc company (0 8 12) "Modular text completion framework" ((emacs (24 1)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "http://company-mode.github.io/") (:keywords "abbrev" "convenience" "matching")) nil])
  (company-anaconda [cl-struct-package-desc company-anaconda (0 1 0) "Anaconda backend for company-mode" ((company (0 8 0)) (anaconda-mode (0 1 1)) (cl-lib (0 5 0)) (dash (2 6 0)) (s (1 9))) single "melpa-stable" nil ((:url . "https://github.com/proofit404/anaconda-mode")) nil])
  (company-ansible [cl-struct-package-desc company-ansible (0 1 1) "A company back-end for ansible" ((emacs (24 4)) (company (0 8 12))) tar "melpa-stable" nil ((:url . "https://github.com/krzysztof-magosa/company-ansible") (:keywords "ansible")) nil])
  (company-cabal [cl-struct-package-desc company-cabal (0 1 1) "company-mode cabal backend" ((cl-lib (0 5)) (company (0 8 0)) (emacs (24))) tar "melpa-stable" nil ((:url . "https://github.com/iquiw/company-cabal")) nil])
  (company-emoji [cl-struct-package-desc company-emoji (2 2 0) "company-mode backend for emoji" ((cl-lib (0 5)) (company (0 8 0))) single "melpa-stable" nil ((:url . "https://github.com/dunn/company-emoji.git") (:keywords "emoji" "company" "honk")) nil])
  (company-ghc [cl-struct-package-desc company-ghc (1 0 0) "company-mode ghc-mod backend" ((cl-lib (0 5)) (company (0 8 0)) (ghc (5 1 0)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/iquiw/company-ghc") (:keywords "haskell" "completion")) nil])
  (company-go [cl-struct-package-desc company-go (20150303) "company-mode backend for Go (using gocode)" ((company (0 8 0))) single "melpa-stable" nil ((:keywords "languages")) nil])
  (company-irony [cl-struct-package-desc company-irony (0 1 0) "company-mode completion back-end for irony-mode" ((emacs (24 1)) (company (0 8 0)) (irony (0 1 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/Sarcasm/company-irony/") (:keywords "convenience")) nil])
  (company-jedi [cl-struct-package-desc company-jedi (0 3) "company-mode completion back-end for Python JEDI" ((emacs (24)) (cl-lib (0 5)) (company (0 8 11)) (jedi-core (0 2 5))) single "melpa-stable" nil nil nil])
  (company-nixos-options [cl-struct-package-desc company-nixos-options (0 0 1) "Company Backend for nixos-options" ((company (0 8 0)) (nixos-options (0 0 1)) (cl-lib (0 5 0))) single "melpa-stable" nil ((:url . "http://www.github.com/travisbhartwell/nix-emacs/") (:keywords "unix")) nil])
  (company-quickhelp [cl-struct-package-desc company-quickhelp (1 2 0) "Popup documentation for completion candidates" ((emacs (24 4)) (company (0 8 9)) (pos-tip (0 4 6))) single "melpa-stable" nil ((:url . "https://www.github.com/expez/company-quickhelp") (:keywords "company" "popup" "documentation" "quickhelp")) nil])
  (company-restclient [cl-struct-package-desc company-restclient (0 0 2) "company-mode completion back-end for restclient-mode" ((cl-lib (0 5)) (company (0 8 0)) (emacs (24)) (know-your-http-well (0 2 0))) single "melpa-stable" nil ((:url . "https://github.com/iquiw/company-restclient")) nil])
  (company-tern [cl-struct-package-desc company-tern (0 2 0) "Tern backend for company-mode" ((company (0 8 0)) (tern (0 0 1)) (dash (2 8 0)) (dash-functional (2 8 0)) (s (1 9 0)) (cl-lib (0 5 0))) single "melpa-stable" nil ((:url . "https://github.com/proofit404/company-tern")) nil])
  (company-web [cl-struct-package-desc company-web (0 9) "Company version of ac-html, complete for web,html,emmet,jade,slim modes" ((company (0 8 0)) (dash (2 8 0)) (cl-lib (0 5 0)) (web-completion-data (0 1 0))) tar "melpa-stable" nil ((:url . "https://github.com/osv/company-web") (:keywords "html" "company")) nil])
  (company-ycmd [cl-struct-package-desc company-ycmd (0 9) "company-mode backend for ycmd" ((ycmd (0 1)) (company (0 8 3)) (deferred (0 2 0)) (s (1 0 0))) single "melpa-stable" nil ((:url . "https://github.com/abingham/emacs-ycmd")) nil])
  (concurrent [cl-struct-package-desc concurrent (0 3 2) "Concurrent utility functions for emacs lisp" ((deferred (0 3 1))) single "melpa-stable" nil ((:url . "https://github.com/kiwanami/emacs-deferred/blob/master/README-concurrent.markdown") (:keywords "deferred" "async" "concurrent")) nil])
  (conkeror-minor-mode [cl-struct-package-desc conkeror-minor-mode (1 6 2) "Mode for editing conkeror javascript files." nil single "melpa-stable" nil ((:url . "http://github.com/Bruce-Connor/conkeror-minor-mode") (:keywords "programming" "tools")) nil])
  (connection [cl-struct-package-desc connection (1 10) "No description available." nil single "melpa-stable" nil nil nil])
  (corral [cl-struct-package-desc corral (0 2) "Incrementally wrap delimiters around s-expressions" nil single "melpa-stable" nil ((:url . "http://github.com/nivekuil/corral")) nil])
  (counsel [cl-struct-package-desc counsel (0 6 0) "Various completion functions using Ivy" ((emacs (24 1)) (swiper (0 4 0))) single "melpa-stable" nil ((:url . "https://github.com/abo-abo/swiper") (:keywords "completion" "matching")) nil])
  (cperl-mode [cl-struct-package-desc cperl-mode (6 3) "Perl code editing commands for Emacs" nil single "melpa-stable" nil ((:keywords "languages" "perl")) nil])
  (cpputils-cmake [cl-struct-package-desc cpputils-cmake (0 5 2) "Easy real time C++ syntax check and intellisense if you use CMake" nil tar "melpa-stable" nil nil nil])
  (creds [cl-struct-package-desc creds (0 0 6 1) "A parser credentials file library (not limited to credentials entries)" ((s (1 9 0)) (dash (2 5 0))) tar "melpa-stable" nil nil nil])
  (crm-custom [cl-struct-package-desc crm-custom (0 4) "Alternate `completing-read-multiple' that uses `completing-read'" nil single "melpa-stable" nil ((:url . "https://github.com/DarwinAwardWinner") (:keywords "completion" "minibuffer" "multiple elements")) nil])
  (cryptol-mode [cl-struct-package-desc cryptol-mode (0 1 0) "Cryptol major mode for Emacs" nil single "melpa-stable" nil ((:url . "http://github.com/thoughtpolice/cryptol-mode") (:keywords "cryptol" "cryptography")) nil])
  (csharp-mode [cl-struct-package-desc csharp-mode (0 8 10) "C# mode derived mode" nil single "melpa-stable" nil ((:url . "https://github.com/josteink/csharp-mode") (:keywords "c#" "languages" "oop" "mode")) nil])
  (ctable [cl-struct-package-desc ctable (0 1 2) "Table component for Emacs Lisp" nil single "melpa-stable" nil ((:url . "https://github.com/kiwanami/emacs-ctable") (:keywords "table")) nil])
  (ctags [cl-struct-package-desc ctags (1 1 1) "No description available." nil single "melpa-stable" nil nil nil])
  (ctags-update [cl-struct-package-desc ctags-update (0 2 0) "(auto) update TAGS in parent directory using exuberant-ctags" nil single "melpa-stable" nil ((:url . "https://github.com/jixiuf/helm-etags-plus") (:keywords "exuberant-ctags" "etags")) nil])
  (ctxmenu [cl-struct-package-desc ctxmenu (0 3 0) "Provide a context menu like right-click." ((popup (20140205 103)) (log4e (0 2 0)) (yaxception (0 1))) tar "melpa-stable" nil ((:url . "https://github.com/aki2o/emacs-ctxmenu") (:keywords "popup")) nil])
  (cuda-mode [cl-struct-package-desc cuda-mode (1 0 0) "NVIDIA CUDA Major Mode" nil single "melpa-stable" nil ((:keywords "c" "languages")) nil])
  (cyberpunk-theme [cl-struct-package-desc cyberpunk-theme (1 14) "Cyberpunk Color Theme" nil single "melpa-stable" nil ((:keywords "color" "theme" "cyberpunk")) nil])
  (cyphejor [cl-struct-package-desc cyphejor (0 1 0) "Shorten major mode names using user-defined rules" ((emacs (24 4))) single "melpa-stable" nil ((:url . "https://github.com/cyphejor") (:keywords "mode-line" "major-mode")) nil])
  (cython-mode [cl-struct-package-desc cython-mode (0 23 4) "Major mode for editing Cython files" nil single "melpa-stable" nil nil nil])
  (d-mode [cl-struct-package-desc d-mode (2 0 6) "D Programming Language mode for (X)Emacs" nil single "melpa-stable" nil ((:keywords "d" "programming" "language" "emacs" "cc-mode")) nil])
  (darcula-theme [cl-struct-package-desc darcula-theme (1 0) "Inspired by IntelliJ's Darcula theme" nil single "melpa-stable" nil ((:url . "https://github.com/fommil/darcula-theme-emacs") (:keywords "faces")) nil])
  (darktooth-theme [cl-struct-package-desc darktooth-theme (0 1 29) "Color theme for Emacs, when soothe and gruvbox collide" nil single "melpa-stable" nil ((:url . "http://github.com/emacsfodder/emacs-theme-darktooth")) nil])
  (dart-mode [cl-struct-package-desc dart-mode (0 14) "Major mode for editing Dart files" ((cl-lib (0 5)) (dash (2 10 0)) (flycheck (0 23))) single "melpa-stable" nil ((:url . "http://code.google.com/p/dart-mode") (:keywords "language")) nil])
  (dash [cl-struct-package-desc dash (2 12 0) "A modern list library for Emacs" nil single "melpa-stable" nil ((:keywords "lists")) nil])
  (dash-functional [cl-struct-package-desc dash-functional (2 12 0) "Collection of useful combinators for Emacs Lisp" ((dash (2 0 0)) (emacs (24))) single "melpa-stable" nil ((:keywords "lisp" "functions" "combinators")) nil])
  (date-at-point [cl-struct-package-desc date-at-point (0 1) "Add `date' to `thing-at-point' function" nil single "melpa-stable" nil ((:url . "https://gitorious.org/alezost-emacs/date-at-point") (:keywords "convenience")) nil])
  (date-field [cl-struct-package-desc date-field (0 0 1) "Date widget" ((dash (2 9 0)) (log4e (0 2 0)) (yaxception (0 3 2))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/emacs-date-field") (:keywords "widgets")) nil])
  (dedicated [cl-struct-package-desc dedicated (1 0 0) "A very simple minor mode for dedicated buffers" nil single "melpa-stable" nil ((:keywords "dedicated" "buffer")) nil])
  (default-text-scale [cl-struct-package-desc default-text-scale (0 1) "Easily adjust the font size in all frames" nil single "melpa-stable" nil ((:keywords "frames" "faces")) nil])
  (deferred [cl-struct-package-desc deferred (0 3 2) "Simple asynchronous functions for emacs lisp" nil single "melpa-stable" nil ((:url . "https://github.com/kiwanami/emacs-deferred") (:keywords "deferred" "async")) nil])
  (define-word [cl-struct-package-desc define-word (0 1 0) "display the definition of word at point." ((emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/abo-abo/define-word") (:keywords "dictionary" "convenience")) nil])
  (deft [cl-struct-package-desc deft (0 6) "quickly browse, filter, and edit plain text notes" nil single "melpa-stable" nil ((:url . "http://jblevins.org/projects/deft/") (:keywords "plain text" "notes" "simplenote" "notational velocity")) nil])
  (demangle-mode [cl-struct-package-desc demangle-mode (1 0 1) "Automatically demangle C++ symbols" ((emacs (24)) (cl-lib (0 1))) single "melpa-stable" nil ((:url . "https://github.com/liblit/demangle-mode") (:keywords "c" "tools")) nil])
  (desktop+ [cl-struct-package-desc desktop+ (0 1) "improved sessions" nil single "melpa-stable" nil nil nil])
  (desktop-registry [cl-struct-package-desc desktop-registry (1 2 0) "Keep a central registry of desktop files" nil single "melpa-stable" nil ((:url . "http://projects.ryuslash.org/desktop-registry/") (:keywords "convenience")) nil])
  (dictionary [cl-struct-package-desc dictionary (1 10) "No description available." nil single "melpa-stable" nil nil nil])
  (diffview [cl-struct-package-desc diffview (1 0) "View diffs in side-by-side format" nil single "melpa-stable" nil ((:url . "https://github.com/mgalgs/diffview-mode") (:keywords "convenience" "diff")) nil])
  (digistar-mode [cl-struct-package-desc digistar-mode (0 4) "major mode for Digistar scripts" nil single "melpa-stable" nil ((:keywords "languages")) nil])
  (dim-autoload [cl-struct-package-desc dim-autoload (1 1 4) "dim complete autoload cookie lines" nil single "melpa-stable" nil ((:url . "http://github.com/tarsius/dim-autoload") (:keywords "convenience")) nil])
  (diminish [cl-struct-package-desc diminish (0 44) "Diminished modes are minor modes with no modeline display" nil single "melpa-stable" nil ((:url . "http://www.eskimo.com/~seldon") (:keywords "extensions" "diminish" "minor" "codeprose")) nil])
  (dired-efap [cl-struct-package-desc dired-efap (0 8) "Edit Filename At Point in a dired buffer" nil single "melpa-stable" nil ((:keywords "dired" "environment" "files" "renaming")) nil])
  (dired-fdclone [cl-struct-package-desc dired-fdclone (1 5 2) "dired functions and settings to mimic FDclone" nil single "melpa-stable" nil ((:url . "https://github.com/knu/dired-fdclone.el") (:keywords "unix" "directories" "dired")) nil])
  (dired-imenu [cl-struct-package-desc dired-imenu (0 5 0) "imenu binding for dired mode" nil single "melpa-stable" nil ((:url . "https://github.com/DamienCassou/dired-imenu") (:keywords "dired" "imenu")) nil])
  (dired-k [cl-struct-package-desc dired-k (0 15) "highlight dired buffer by file size, modified time, git status" ((cl-lib (0 5)) (emacs (24))) tar "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-dired-k")) nil])
  (direx [cl-struct-package-desc direx (1 0 0) "Simple Directory Explorer" nil tar "melpa-stable" nil ((:keywords "convenience")) nil])
  (direx-grep [cl-struct-package-desc direx-grep (0 1 0) "Grep node of direx.el using incremental search like anything.el/helm.el" ((direx (0 1 -3))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/direx-grep") (:keywords "convenience")) nil])
  (discover [cl-struct-package-desc discover (0 3) "discover more of Emacs" ((makey (0 3))) single "melpa-stable" nil nil nil])
  (discover-my-major [cl-struct-package-desc discover-my-major (1 0) "Discover key bindings and their meaning for the current Emacs major mode" ((makey (0 2))) single "melpa-stable" nil ((:url . "https://github.com/steckerhalter/discover-my-major") (:keywords "discover" "help" "major-mode" "keys")) nil])
  (dispass [cl-struct-package-desc dispass (1 1 2) "Emacs wrapper for DisPass" nil single "melpa-stable" nil ((:url . "http://projects.ryuslash.org/dispass.el/") (:keywords "processes")) nil])
  (docker [cl-struct-package-desc docker (0 1 0) "Emacs interface to Docker" ((emacs (24 4)) (dash (1 5 0)) (magit-popup (2 0 50)) (s (1 9 0))) tar "melpa-stable" nil nil nil])
  (dockerfile-mode [cl-struct-package-desc dockerfile-mode (1 2) "Major mode for editing Docker's Dockerfiles" nil single "melpa-stable" nil nil nil])
  (downplay-mode [cl-struct-package-desc downplay-mode (0 1) "focus attention on a region of the buffer" nil single "melpa-stable" nil ((:url . "https://github.com/tobias/downplay-mode/")) nil])
  (drag-stuff [cl-struct-package-desc drag-stuff (0 1 0) "Drag stuff (lines, words, region, etc...) around" nil tar "melpa-stable" nil nil nil])
  (drupal-mode [cl-struct-package-desc drupal-mode (0 6 1) "Advanced minor mode for Drupal development" ((php-mode (1 5 0))) tar "melpa-stable" nil ((:url . "https://github.com/arnested/drupal-mode") (:keywords "programming" "php" "drupal")) nil])
  (drupal-spell [cl-struct-package-desc drupal-spell (0 2 2) "Aspell extra dictionary for Drupal" nil tar "melpa-stable" nil ((:url . "https://github.com/arnested/drupal-spell") (:keywords "wp")) nil])
  (ducpel [cl-struct-package-desc ducpel (0 1) "Logic game with sokoban elements" ((cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/alezost/ducpel") (:keywords "games")) nil])
  (dyalog-mode [cl-struct-package-desc dyalog-mode (0 3) "Major mode for editing Dyalog APL source code" nil single "melpa-stable" nil ((:url . "http://bitbucket.org/harsman/dyalog-mode") (:keywords "languages")) nil])
  (dynamic-fonts [cl-struct-package-desc dynamic-fonts (0 6 4) "Set faces based on available fonts" ((font-utils (0 7 0)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/dynamic-fonts") (:keywords "faces" "frames")) nil])
  (dynamic-ruler [cl-struct-package-desc dynamic-ruler (0 1 4) "Displays a dynamic ruler at point." nil single "melpa-stable" nil ((:url . "http://rocher.github.io/dynamic-ruler") (:keywords "ruler" "tools" "convenience")) nil])
  (e2wm [cl-struct-package-desc e2wm (1 3) "simple window manager for emacs" nil tar "melpa-stable" nil ((:keywords "tools" "window manager")) nil])
  (e2wm-R [cl-struct-package-desc e2wm-R (0 4) "some e2wm plugin and perspective for GNU R" ((e2wm (1 2))) single "melpa-stable" nil ((:keywords "window manager" "convenience" "e2wm")) nil])
  (e2wm-direx [cl-struct-package-desc e2wm-direx (0 0 5) "Plugin of e2wm.el for direx.el" ((e2wm (1 2)) (direx (0 1 -3))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/e2wm-direx") (:keywords "tools" "window manager" "convenience")) nil])
  (e2wm-pkgex4pl [cl-struct-package-desc e2wm-pkgex4pl (0 0 1) "Plugin of e2wm.el for package explorer of Perl" ((e2wm (1 2)) (plsense-direx (0 2 0))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/e2wm-pkgex4pl") (:keywords "tools" "window manager" "perl")) nil])
  (e2wm-sww [cl-struct-package-desc e2wm-sww (0 0 2) "Plugin of e2wm.el to switch plugin quickly" ((e2wm (1 2))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/e2wm-sww") (:keywords "tools" "window manager")) nil])
  (e2wm-term [cl-struct-package-desc e2wm-term (0 0 5) "Perspective of e2wm.el for work in terminal" ((e2wm (1 2)) (log4e (0 2 0)) (yaxception (0 3 2))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/e2wm-term") (:keywords "tools" "window manager")) nil])
  (easy-kill [cl-struct-package-desc easy-kill (0 9 3) "kill & mark things easily" ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/leoliu/easy-kill") (:keywords "killing" "convenience")) nil])
  (easy-kill-extras [cl-struct-package-desc easy-kill-extras (0 9 4) "Extra functions for easy-kill." ((easy-kill (0 9 4))) tar "melpa-stable" nil ((:url . "https://github.com/knu/easy-kill-extras.el") (:keywords "killing" "convenience")) nil])
  (easy-repeat [cl-struct-package-desc easy-repeat (0 2) "Repeat easily" ((emacs (24 4))) single "melpa-stable" nil ((:url . "https://github.com/xuchunyang/easy-repeat.el") (:keywords "repeat" "convenience")) nil])
  (ebal [cl-struct-package-desc ebal (0 1 2) "Emacs interface to Cabal" ((emacs (24 4)) (f (0 18 0)) (ido-completing-read+ (3 6))) single "melpa-stable" nil ((:url . "https://github.com/mrkkrp/ebal") (:keywords "convenience" "cabal" "haskell")) nil])
  (ebib [cl-struct-package-desc ebib (2 5 2) "a BibTeX database manager" ((dash (2 5 0)) (parsebib (1 0)) (emacs (24 3))) tar "melpa-stable" nil ((:keywords "text" "bibtex")) nil])
  (ecb [cl-struct-package-desc ecb (2 -3 24) "a code browser for Emacs" nil tar "melpa-stable" nil ((:keywords "browser" "code" "programming" "tools")) nil])
  (ecukes [cl-struct-package-desc ecukes (0 6 15) "Cucumber for Emacs." ((commander (0 6 1)) (espuds (0 2 2)) (ansi (0 3 0)) (dash (2 2 0)) (s (1 8 0)) (f (0 11 0))) tar "melpa-stable" nil nil nil])
  (edbi [cl-struct-package-desc edbi (0 1 2) "Emacs Database Interface" ((concurrent (0 3 1)) (ctable (0 1 1)) (epc (0 1 1))) tar "melpa-stable" nil nil nil])
  (edit-indirect [cl-struct-package-desc edit-indirect (0 1 2) "Edit regions in separate buffers" ((emacs (24 3))) single "melpa-stable" nil ((:url . "https://github.com/Fanael/edit-indirect")) nil])
  (edit-list [cl-struct-package-desc edit-list (0 3) "edit a single list" nil single "melpa-stable" nil ((:url . "http://mwolson.org/static/dist/elisp/edit-list.el")) nil])
  (edit-server [cl-struct-package-desc edit-server (1 13) "server that responds to edit requests from Chrome" nil single "melpa-stable" nil ((:url . "https://github.com/stsquad/emacs_chrome")) nil])
  (editorconfig [cl-struct-package-desc editorconfig (0 4) "EditorConfig Emacs extension" nil single "melpa-stable" nil ((:url . "http://github.com/editorconfig/editorconfig-emacs#readme")) nil])
  (editorconfig-fnmatch [cl-struct-package-desc editorconfig-fnmatch (0 1 1) "Glob pattern matching in Emacs lisp" nil single "melpa-stable" nil ((:url . "https://github.com/10sr/editorconfig-fnmatch-el") (:keywords "utility" "shell" "fnmatch" "glob" "wildcard")) nil])
  (edn [cl-struct-package-desc edn (1 1 2) "Support for reading and writing the edn data format from elisp" ((cl-lib (0 3)) (emacs (24 1)) (dash (2 10 0)) (peg (0 6)) (s (1 8 0))) single "melpa-stable" nil ((:url . "https://www.github.com/expez/edn.el") (:keywords "edn" "clojure")) nil])
  (edts [cl-struct-package-desc edts (0 1 0) "No description available." nil tar "melpa-stable" nil nil nil])
  (egg [cl-struct-package-desc egg (1 0 9) "Emacs Got Git - Emacs interface to Git" nil tar "melpa-stable" nil ((:keywords "git" "version control" "release management")) nil])
  (egison-mode [cl-struct-package-desc egison-mode (3 5 10) "Egison editing mode" nil single "melpa-stable" nil ((:url . "https://github.com/egisatoshi/egison3/blob/master/elisp/egison-mode.el")) nil])
  (eide [cl-struct-package-desc eide (2 1 0) "IDE interface" nil tar "melpa-stable" nil nil nil])
  (el-autoyas [cl-struct-package-desc el-autoyas (0 5) "Automatically create Emacs-Lisp Yasnippets" nil tar "melpa-stable" nil ((:url . "https://github.com/mlf176f2/el-autoyas.el") (:keywords "emacs" "lisp" "mode" "yasnippet")) nil])
  (el-get [cl-struct-package-desc el-get (5 1) "Manage the external elisp bits and pieces you depend upon" nil tar "melpa-stable" nil ((:url . "http://www.emacswiki.org/emacs/el-get") (:keywords "emacs" "package" "elisp" "install" "elpa" "git" "git-svn" "bzr" "cvs" "svn" "darcs" "hg" "apt-get" "fink" "pacman" "http" "http-tar" "emacswiki")) nil])
  (el-init [cl-struct-package-desc el-init (0 2 0) "A loader inspired by init-loader" ((emacs (24)) (cl-lib (0 5)) (anaphora (1 0 0))) single "melpa-stable" nil ((:url . "https://github.com/HKey/el-init")) nil])
  (el-init-viewer [cl-struct-package-desc el-init-viewer (0 1 0) "Record viewer for el-init" ((emacs (24)) (cl-lib (0 5)) (ctable (0 1 2)) (dash (2 10 0)) (anaphora (1 0 0)) (el-init (0 1 4))) single "melpa-stable" nil nil nil])
  (el-mock [cl-struct-package-desc el-mock (1 25 1) "Tiny Mock and Stub framework in Emacs Lisp" nil single "melpa-stable" nil ((:url . "http://github.com/rejeep/el-mock.el") (:keywords "lisp" "testing" "unittest")) nil])
  (el-spice [cl-struct-package-desc el-spice (0 2 2) "Extra spice for emacs lisp programming" ((thingatpt+ (0))) tar "melpa-stable" nil ((:url . "https://github.com/vedang/el-spice") (:keywords "configuration")) nil])
  (el-x [cl-struct-package-desc el-x (0 3 0) "main entry point for el-x package" nil tar "melpa-stable" nil ((:keywords "lisp")) nil])
  (eldoc-eval [cl-struct-package-desc eldoc-eval (1 1) "Enable eldoc support when minibuffer is in use." nil single "melpa-stable" nil nil nil])
  (electric-operator [cl-struct-package-desc electric-operator (0 1) "Automatically add spaces around operators" ((dash (2 10 0)) (names (20150618 0)) (emacs (24 4))) single "melpa-stable" nil ((:url . "https://github.com/davidshepherd7/electric-operator") (:keywords "electric")) nil])
  (elfeed [cl-struct-package-desc elfeed (1 2 0) "an Emacs Atom/RSS feed reader" ((emacs (24 3))) tar "melpa-stable" nil nil nil])
  (elfeed-web [cl-struct-package-desc elfeed-web (1 2 0) "web interface to Elfeed" ((simple-httpd (1 4 3)) (elfeed (1 0 1)) (emacs (24 1))) tar "melpa-stable" nil nil nil])
  (elisp-slime-nav [cl-struct-package-desc elisp-slime-nav (0 8) "Make M-. and M-, work in elisp like they do in slime" ((cl-lib (0 2))) single "melpa-stable" nil ((:url . "https://github.com/purcell/elisp-slime-nav") (:keywords "navigation" "slime" "elisp" "emacs-lisp")) nil])
  (elixir-mode [cl-struct-package-desc elixir-mode (2 2 7) "Major mode for editing Elixir files" ((emacs (24)) (pkg-info (0 4))) tar "melpa-stable" nil ((:url . "https://github.com/elixir-lang/emacs-elixir") (:keywords "languages" "elixir")) nil])
  (elixir-yasnippets [cl-struct-package-desc elixir-yasnippets (0 0 1) "Yasnippets for Elixir" ((yasnippet (0 8 0))) tar "melpa-stable" nil nil nil])
  (elmacro [cl-struct-package-desc elmacro (0 3 0) "Convert keyboard macros to elisp" ((s (1 9 0)) (dash (1 5 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/Silex/elmacro") (:keywords "macro" "elisp" "convenience")) nil])
  (elmine [cl-struct-package-desc elmine (0 3) "No description available." nil single "melpa-stable" nil nil nil])
  (elpa-audit [cl-struct-package-desc elpa-audit (0 4) "Handy functions for inspecting and comparing package archives" nil single "melpa-stable" nil ((:url . "https://github.com/purcell/elpa-audit") (:keywords "maint")) nil])
  (elpa-mirror [cl-struct-package-desc elpa-mirror (1 2 0) "ELPA mirror from locally installed packages is easy" nil tar "melpa-stable" nil nil nil])
  (elpy [cl-struct-package-desc elpy (1 9 0) "Emacs Python Development Environment" ((company (0 8 2)) (find-file-in-project (3 3)) (highlight-indentation (0 5 0)) (pyvenv (1 3)) (yasnippet (0 8 0))) tar "melpa-stable" nil nil nil])
  (elscreen-mew [cl-struct-package-desc elscreen-mew (1 0 1) "ElScreen Add-On for Mew" ((elscreen (20120413 807))) single "melpa-stable" nil ((:url . "https://github.com/masutaka/elscreen-mew")) nil])
  (elscreen-persist [cl-struct-package-desc elscreen-persist (0 1 1) "persist the elscreen across sessions" ((elscreen (1 4 6)) (revive (2 19))) single "melpa-stable" nil ((:keywords "elscreen" "frames")) nil])
  (elwm [cl-struct-package-desc elwm (0 0 2) "Minimalistic window manager for emacs" ((dash (1 1 0))) single "melpa-stable" nil ((:url . "https://github.com/Fuco1/elwm") (:keywords "docs")) nil])
  (elx [cl-struct-package-desc elx (0 10 0) "extract information from Emacs Lisp libraries" ((emacs (24 4))) single "melpa-stable" nil ((:url . "https://github.com/tarsius/elx") (:keywords "docs" "libraries" "packages")) nil])
  (emacs-eclim [cl-struct-package-desc emacs-eclim (0 3) "An interface to the Eclipse IDE." ((dash (2 11 0)) (json (1 2)) (popup (0 5 2)) (s (1 9 0))) tar "melpa-stable" nil nil nil])
  (emacs-setup [cl-struct-package-desc emacs-setup (1 0) "Package for maintaining your emacs configuration. Clean up your .emacs!" nil tar "melpa-stable" nil nil nil])
  (emacsagist [cl-struct-package-desc emacsagist (1 0 0) "Search Packagist.org packages without leaving Emacs" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools")) nil])
  (emacsc [cl-struct-package-desc emacsc (1 2 20131027) "helper for emacsc(1)" nil tar "melpa-stable" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil])
  (emacsql [cl-struct-package-desc emacsql (2 0 0) "high-level SQL database front-end" ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) tar "melpa-stable" nil ((:url . "https://github.com/skeeto/emacsql")) nil])
  (emacsql-mysql [cl-struct-package-desc emacsql-mysql (2 0 0) "back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa-stable" nil ((:url . "https://github.com/skeeto/emacsql")) nil])
  (emacsql-psql [cl-struct-package-desc emacsql-psql (2 0 0) "back-end for PostgreSQL via psql" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa-stable" nil ((:url . "https://github.com/skeeto/emacsql")) nil])
  (emacsql-sqlite [cl-struct-package-desc emacsql-sqlite (2 0 0) "No description available." nil tar "melpa-stable" nil nil nil])
  (emamux [cl-struct-package-desc emamux (0 13) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil])
  (emmet-mode [cl-struct-package-desc emmet-mode (1 0 8) "Unofficial Emmet's support for emacs" nil single "melpa-stable" nil ((:url . "https://github.com/smihica/emmet-mode") (:keywords "convenience")) nil])
  (emms-mode-line-cycle [cl-struct-package-desc emms-mode-line-cycle (0 2 4) "Display the emms mode line as a ticker" ((emacs (24)) (emms (4 0))) single "melpa-stable" nil ((:url . "https://github.com/momomo5717/emms-mode-line-cycle") (:keywords "emms" "mode-line")) nil])
  (emms-player-mpv [cl-struct-package-desc emms-player-mpv (0 0 5) "mpv support for EMMS" ((emms (0))) single "melpa-stable" nil ((:url . "https://github.com/dochang/emms-player-mpv/") (:keywords "emms" "mpv")) nil])
  (emms-player-simple-mpv [cl-struct-package-desc emms-player-simple-mpv (0 2 1) "An extension of emms-player-simple.el for mpv JSON IPC" ((emacs (24)) (cl-lib (0 5)) (emms (4 0))) tar "melpa-stable" nil ((:url . "https://github.com/momomo5717/emms-player-simple-mpv") (:keywords "emms" "mpv")) nil])
  (emoji-cheat-sheet-plus [cl-struct-package-desc emoji-cheat-sheet-plus (1 2 1) "emoji-cheat-sheet for emacs" ((emacs (24)) (helm (1 6 4))) tar "melpa-stable" nil ((:url . "https://github.com/syl20bnr/emacs-emoji-cheat-sheet-plus") (:keywords "emacs" "emoji")) nil])
  (engine-mode [cl-struct-package-desc engine-mode (1 0 0) "Define and query search engines from within Emacs." nil single "melpa-stable" nil ((:url . "https://github.com/hrs/engine-mode/engine-mode.el")) nil])
  (enlive [cl-struct-package-desc enlive (0 0 1) "query html document with css selectors" nil single "melpa-stable" nil ((:url . "http://github.com/zweifisch/enlive") (:keywords "css" "selector" "query")) nil])
  (enotify [cl-struct-package-desc enotify (0 1 3) "No description available." nil tar "melpa-stable" nil nil nil])
  (epc [cl-struct-package-desc epc (0 1 0) "A RPC stack for the Emacs Lisp" ((concurrent (0 3 1)) (ctable (0 1 0))) tar "melpa-stable" nil ((:url . "https://github.com/kiwanami/emacs-epc") (:keywords "lisp" "rpc")) nil])
  (epl [cl-struct-package-desc epl (71 4 8098) "Emacs Package Library" ((cl-lib (0 3))) single "melpa-stable" nil ((:url . "http://github.com/cask/epl") (:keywords "convenience")) nil])
  (erc-crypt [cl-struct-package-desc erc-crypt (1 0) "Symmetric Encryption for ERC" nil single "melpa-stable" nil ((:keywords "application")) nil])
  (erc-hl-nicks [cl-struct-package-desc erc-hl-nicks (1 3 0) "ERC nick highlighter that ignores uniquifying chars when colorizing" nil single "melpa-stable" nil ((:url . "http://www.github.com/leathekd/erc-hl-nicks")) nil])
  (erc-youtube [cl-struct-package-desc erc-youtube (0 -3) "Show received youtube urls in the ERC buffer" ((erc (5 3))) single "melpa-stable" nil ((:keywords "multimedia")) nil])
  (ercn [cl-struct-package-desc ercn (1 1 1) "Flexible ERC notifications" nil single "melpa-stable" nil ((:url . "http://www.github.com/leathekd/ercn")) nil])
  (erefactor [cl-struct-package-desc erefactor (0 7 0) "Emacs-Lisp refactoring utilities" ((cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-erefactor") (:keywords "extensions" "tools" "maint")) nil])
  (ergoemacs-mode [cl-struct-package-desc ergoemacs-mode (5 14 7 3 1) "Emacs mode based on common modern interface and ergonomics." ((emacs (24 1)) (undo-tree (0 6 5))) tar "melpa-stable" nil ((:url . "https://github.com/ergoemacs/ergoemacs-mode") (:keywords "convenience")) nil])
  (ert-async [cl-struct-package-desc ert-async (0 1 1) "Async support for ERT" nil single "melpa-stable" nil ((:url . "http://github.com/rejeep/ert-async.el") (:keywords "test")) nil])
  (ert-junit [cl-struct-package-desc ert-junit (0 1 1) "JUnit XML reports from ert results" ((ert (0))) single "melpa-stable" nil ((:url . "http://bitbucket.org/olanilsson/ert-junit") (:keywords "tools" "test" "unittest" "ert")) nil])
  (ert-runner [cl-struct-package-desc ert-runner (0 7 0) "Opinionated Ert testing workflow" ((s (1 6 1)) (dash (1 8 0)) (f (0 10 0)) (commander (0 2 0)) (ansi (0 1 0)) (shut-up (0 1 0))) tar "melpa-stable" nil ((:url . "http://github.com/rejeep/ert-runner.el") (:keywords "test")) nil])
  (es-lib [cl-struct-package-desc es-lib (0 4) "A collection of emacs utilities" ((cl-lib (0 3))) tar "melpa-stable" nil ((:url . "https://github.com/sabof/es-lib")) nil])
  (es-mode [cl-struct-package-desc es-mode (4 0 0) "A major mode for editing Elasticsearch queries" nil tar "melpa-stable" nil ((:url . "http://www.github.com/dakrone/es-mode") (:keywords "elasticsearch")) nil])
  (es-windows [cl-struct-package-desc es-windows (0 3) "Window-management utilities" ((cl-lib (0 3)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/sabof/es-windows")) nil])
  (eshell-autojump [cl-struct-package-desc eshell-autojump (0 2) "autojump command for Eshell" nil single "melpa-stable" nil ((:url . "http://github.com/coldnew/eshell-autojump")) nil])
  (eshell-z [cl-struct-package-desc eshell-z (0 2 1) "cd to frequent directory in eshell" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/xuchunyang/eshell-z") (:keywords "convenience")) nil])
  (espuds [cl-struct-package-desc espuds (0 3 2) "Ecukes step definitions" ((s (1 7 0)) (dash (2 2 0)) (f (0 12 1))) single "melpa-stable" nil ((:url . "http://github.com/ecukes/espuds") (:keywords "test")) nil])
  (ess [cl-struct-package-desc ess (15 9) "Emacs Speaks Statistics" ((julia-mode (0 3))) tar "melpa-stable" nil ((:url . "http://ess.r-project.org")) nil])
  (ess-R-data-view [cl-struct-package-desc ess-R-data-view (1 0) "Data viewer for GNU R" ((ctable (20130313 1743)) (popup (20130324 1305)) (ess (20130225 1754))) single "melpa-stable" nil ((:url . "https://github.com/myuhe/ess-R-data-view.el") (:keywords "convenience")) nil])
  (ess-R-object-popup [cl-struct-package-desc ess-R-object-popup (1 0) "popup description of R object" ((popup (20130117 1954)) (ess (20130225 1754))) single "melpa-stable" nil ((:url . "https://github.com/myuhe/ess-R-object-popup.el") (:keywords "convenience" "ess")) nil])
  (ess-smart-underscore [cl-struct-package-desc ess-smart-underscore (0 79) "Ess Smart Underscore" nil tar "melpa-stable" nil ((:url . "http://github.com/mlf176f2/ess-smart-underscore.el") (:keywords "ess" "underscore")) nil])
  (esup [cl-struct-package-desc esup (0 4) "the Emacs StartUp Profiler (ESUP)" nil single "melpa-stable" nil ((:url . "http://github.com/jschaf/esup") (:keywords "emacs-lisp" "elisp" "profile" "startup")) nil])
  (eval-in-repl [cl-struct-package-desc eval-in-repl (0 7 0) "Consistent ESS-like eval interface for various REPLs" ((dash (0 0 0)) (paredit (0 0 0))) tar "melpa-stable" nil ((:url . "https://github.com/kaz-yos/eval-in-repl/")) nil])
  (eval-sexp-fu [cl-struct-package-desc eval-sexp-fu (0 4 0) "Tiny functionality enhancements for evaluating sexps." nil single "melpa-stable" nil ((:keywords "lisp" "highlight" "convenience")) nil])
  (evil [cl-struct-package-desc evil (1 2 5) "Extensible Vi layer for Emacs." ((undo-tree (0 6 3)) (goto-chg (1 6))) tar "melpa-stable" nil nil nil])
  (evil-anzu [cl-struct-package-desc evil-anzu (0 3) "anzu for evil-mode" ((evil (1 0 0)) (anzu (0 46))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-evil-anzu")) nil])
  (evil-args [cl-struct-package-desc evil-args (1 0) "Motions and text objects for delimited arguments in Evil." ((evil (1 0 8))) single "melpa-stable" nil ((:url . "http://github.com/wcsmith/evil-args") (:keywords "evil" "vim-emulation")) nil])
  (evil-commentary [cl-struct-package-desc evil-commentary (1 0 2) "Comment stuff out. A port of vim-commentary." ((evil (1 0 0))) single "melpa-stable" nil ((:url . "http://github.com/linktohack/evil-commentary") (:keywords "evil" "comment" "commentary" "evil-commentary")) nil])
  (evil-escape [cl-struct-package-desc evil-escape (3 10) "Escape from anything with a customizable key sequence" ((emacs (24)) (evil (1 0 9)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syl20bnr/evil-escape") (:keywords "convenience" "editing" "evil")) nil])
  (evil-iedit-state [cl-struct-package-desc evil-iedit-state (1 0) "Evil states to interface iedit mode." ((evil (1 0 9)) (iedit (0 97))) single "melpa-stable" nil ((:url . "https://github.com/syl20bnr/evil-iedit-state") (:keywords "convenience" "editing" "evil" "iedit" "mnemonic")) nil])
  (evil-jumper [cl-struct-package-desc evil-jumper (0 2 0) "Jump like vimmers do!" ((evil (0))) single "melpa-stable" nil ((:url . "https://github.com/bling/evil-jumper") (:keywords "evil" "vim" "jumplist" "jump" "list")) nil])
  (evil-leader [cl-struct-package-desc evil-leader (0 4 3) "let there be <leader>" ((evil (0))) single "melpa-stable" nil ((:url . "http://github.com/cofi/evil-leader") (:keywords "evil" "vim-emulation" "leader")) nil])
  (evil-lisp-state [cl-struct-package-desc evil-lisp-state (7 1) "An evil state to edit Lisp code" ((evil (1 0 9)) (evil-leader (0 4 3)) (smartparens (1 6 1))) single "melpa-stable" nil ((:url . "https://github.com/syl20bnr/evil-lisp-state") (:keywords "convenience" "editing" "evil" "smartparens" "lisp" "mnemonic")) nil])
  (evil-mark-replace [cl-struct-package-desc evil-mark-replace (0 0 4) "replace the thing in marked area" ((evil (1 0 8))) single "melpa-stable" nil ((:url . "http://github.com/redguardtoo/evil-mark-replace") (:keywords "mark" "replace" "evil")) nil])
  (evil-matchit [cl-struct-package-desc evil-matchit (2 1 1) "Vim matchit ported into Emacs (requires EVIL)" nil tar "melpa-stable" nil nil nil])
  (evil-nerd-commenter [cl-struct-package-desc evil-nerd-commenter (2 0) "Comment/uncomment lines efficiently. Like Nerd Commenter in Vim" nil tar "melpa-stable" nil nil nil])
  (evil-numbers [cl-struct-package-desc evil-numbers (0 4) "increment/decrement numbers like in vim" nil single "melpa-stable" nil ((:url . "http://github.com/cofi/evil-numbers") (:keywords "numbers" "increment" "decrement" "octal" "hex" "binary")) nil])
  (evil-org [cl-struct-package-desc evil-org (0 1 1) "evil keybindings for org-mode" ((evil (0)) (org (0))) single "melpa-stable" nil ((:url . "https://github.com/edwtjo/evil-org-mode.git") (:keywords "evil" "vim-emulation" "org-mode" "key-bindings" "presets")) nil])
  (evil-quickscope [cl-struct-package-desc evil-quickscope (0 1 3) "Highlight unique characters in words for f,F,t,T navigation" ((evil (0))) single "melpa-stable" nil ((:url . "http://github.com/blorbx/evil-quickscope") (:keywords "faces" "emulation" "vim" "evil")) nil])
  (evil-rsi [cl-struct-package-desc evil-rsi (1 0 0) "Use emacs motion keys in evil, inspired by vim-rsi" ((evil (1 0 0))) single "melpa-stable" nil ((:url . "http://github.com/linktohack/evil-rsi") (:keywords "evil" "rsi" "evil-rsi")) nil])
  (evil-search-highlight-persist [cl-struct-package-desc evil-search-highlight-persist (1 6) "Persistent highlights after search" ((highlight (0))) single "melpa-stable" nil nil nil])
  (evil-smartparens [cl-struct-package-desc evil-smartparens (0 3 0) "Evil support for smartparens" ((evil (1 0)) (cl-lib (0 3)) (emacs (24 4)) (smartparens (1 6 3))) single "melpa-stable" nil ((:url . "https://www.github.com/expez/evil-smartparens") (:keywords "evil" "smartparens")) nil])
  (evil-snipe [cl-struct-package-desc evil-snipe (1 0) "emulate vim-sneak & vim-seek" nil single "melpa-stable" nil ((:url . "https://github.com/hlissner/evil-snipe") (:keywords "emulation" "vim" "evil" "sneak" "seek")) nil])
  (evil-space [cl-struct-package-desc evil-space (0 0 6) "Repeat motion in Evil. Correct the behaviour of what SPC should do." ((evil (1 0 0))) single "melpa-stable" nil ((:url . "http://github.com/linktohack/evil-space") (:keywords "space" "repeat" "motion")) nil])
  (evil-textobj-anyblock [cl-struct-package-desc evil-textobj-anyblock (0 1) "Textobject for the closest user-defined blocks." ((cl-lib (0 5)) (evil (1 1 0))) single "melpa-stable" nil ((:url . "https://github.com/noctuid/evil-textobj-anyblock") (:keywords "evil")) nil])
  (evil-tutor [cl-struct-package-desc evil-tutor (1 0) "Vimtutor adapted to Evil and wrapped in a major-mode" ((evil (1 0 9))) tar "melpa-stable" nil ((:url . "https://github.com/syl20bnr/evil-tutor") (:keywords "convenience" "editing" "evil")) nil])
  (evil-visual-mark-mode [cl-struct-package-desc evil-visual-mark-mode (0 0 3) "Display evil marks on buffer" ((evil (1 0 9)) (dash (2 10))) single "melpa-stable" nil ((:keywords "evil")) nil])
  (evil-visualstar [cl-struct-package-desc evil-visualstar (0 1 0) "Starts a * or # search from the visual selection" ((evil (0))) single "melpa-stable" nil ((:url . "https://github.com/bling/evil-visualstar") (:keywords "evil" "vim" "visualstar")) nil])
  (evm [cl-struct-package-desc evm (0 4 2) "Emacs Version Manager" ((dash (2 3 0)) (f (0 13 0))) single "melpa-stable" nil ((:url . "http://github.com/rejeep/evm")) nil])
  (eww-lnum [cl-struct-package-desc eww-lnum (1 1) "Conkeror-like functionality for eww" nil single "melpa-stable" nil ((:url . "https://github.com/m00natic/eww-lnum") (:keywords "eww" "browse" "conkeror")) nil])
  (exec-path-from-shell [cl-struct-package-desc exec-path-from-shell (1 10) "Get environment variables such as $PATH from the shell" nil single "melpa-stable" nil ((:url . "https://github.com/purcell/exec-path-from-shell") (:keywords "environment")) nil])
  (expand-region [cl-struct-package-desc expand-region (0 10 0) "Increase selected region by semantic units." nil tar "melpa-stable" nil nil nil])
  (express [cl-struct-package-desc express (0 6 0) "Alternatives to `message'" ((string-utils (0 3 2))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/express") (:keywords "extensions" "message" "interface")) nil])
  (extend-dnd [cl-struct-package-desc extend-dnd (0 5) "R drag and Drop" nil tar "melpa-stable" nil ((:url . "https://github.com/mlf176f2/extend-dnd") (:keywords "extend" "drag and drop")) nil])
  (eyebrowse [cl-struct-package-desc eyebrowse (0 6 6) "Easy window config switching" ((dash (2 7 0)) (emacs (24 3 1))) single "melpa-stable" nil ((:url . "https://github.com/wasamasa/eyebrowse") (:keywords "convenience")) nil])
  (f [cl-struct-package-desc f (0 18 0) "Modern API for working with files and directories" ((s (1 7 0)) (dash (2 2 0))) single "melpa-stable" nil ((:url . "http://github.com/rejeep/f.el") (:keywords "files" "directories")) nil])
  (fabric [cl-struct-package-desc fabric (0 2 0) "Launch Fabric using Emacs" nil tar "melpa-stable" nil ((:url . "https://github.com/nlamirault/fabric.el") (:keywords "python" "fabric")) nil])
  (factlog [cl-struct-package-desc factlog (0 0 1) "File activity logger" nil single "melpa-stable" nil nil nil])
  (fancy-battery [cl-struct-package-desc fancy-battery (0 2) "Fancy battery display" ((emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/lunaryorn/fancy-battery.el") (:keywords "convenience" "tools" "hardware")) nil])
  (fancy-narrow [cl-struct-package-desc fancy-narrow (0 9 4) "narrow-to-region with more eye candy." nil single "melpa-stable" nil ((:url . "http://github.com/Bruce-Connor/fancy-narrow-region") (:keywords "faces" "convenience")) nil])
  (fasm-mode [cl-struct-package-desc fasm-mode (0 1 11) "Fasm major mode" nil single "melpa-stable" nil ((:url . "https://github.com/Fanael/fasm-mode")) nil])
  (fastnav [cl-struct-package-desc fastnav (1 0 7) "Fast navigation and editing routines." nil single "melpa-stable" nil ((:keywords "nav" "fast" "fastnav" "navigation")) nil])
  (fcitx [cl-struct-package-desc fcitx (0 1 5) "Make fcitx better in Emacs" nil single "melpa-stable" nil ((:url . "https://github.com/cute-jumper/fcitx.el") (:keywords "extensions")) nil])
  (feature-mode [cl-struct-package-desc feature-mode (0 4) "Major mode for editing Gherkin (i.e. Cucumber) user stories" nil tar "melpa-stable" nil nil nil])
  (fill-column-indicator [cl-struct-package-desc fill-column-indicator (1 81) "Graphically indicate the fill column" nil tar "melpa-stable" nil ((:keywords "convenience")) nil])
  (finalize [cl-struct-package-desc finalize (1 0 0) "finalizers for Emacs Lisp" ((emacs (24 1)) (cl-lib (0 3)) (eieio (1 4))) tar "melpa-stable" nil nil nil])
  (find-by-pinyin-dired [cl-struct-package-desc find-by-pinyin-dired (0 0 2) "Find file by first Pinyin characters of Chinese Hanzi" nil tar "melpa-stable" nil nil nil])
  (find-file-in-project [cl-struct-package-desc find-file-in-project (3 5) "Find files in a project quickly." nil single "melpa-stable" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/FindFileInProject") (:keywords "project" "convenience")) nil])
  (find-file-in-repository [cl-struct-package-desc find-file-in-repository (1 2) "Quickly find files in a git, mercurial or other repository" nil single "melpa-stable" nil ((:url . "https://github.com/hoffstaetter/find-file-in-repository") (:keywords "files" "convenience" "repository" "project" "source control")) nil])
  (fiplr [cl-struct-package-desc fiplr (0 2 4) "Fuzzy Search for Files in Projects" ((grizzl (0 1 0))) tar "melpa-stable" nil nil nil])
  (firestarter [cl-struct-package-desc firestarter (0 2 3) "Execute (shell) commands on save" nil single "melpa-stable" nil ((:url . "https://github.com/wasamasa/firestarter") (:keywords "convenience")) nil])
  (fish-mode [cl-struct-package-desc fish-mode (0 1 1) "Major mode for fish shell scripts" ((emacs (24))) single "melpa-stable" nil ((:keywords "fish" "shell")) nil])
  (fix-word [cl-struct-package-desc fix-word (0 1 1) "Convenient word transformation" ((emacs (24 1)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/mrkkrp/fix-word") (:keywords "word" "convenience")) nil])
  (fixmee [cl-struct-package-desc fixmee (0 8 6) "Quickly navigate to FIXME notices in code" ((button-lock (1 0 2)) (nav-flash (1 0 0)) (back-button (0 6 0)) (smartrep (0 0 3)) (string-utils (0 3 2)) (tabulated-list (0))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/fixmee") (:keywords "navigation" "convenience")) nil])
  (floobits [cl-struct-package-desc floobits (1 6 0) "Floobits plugin for real-time collaborative editing" ((json (1 2)) (highlight (0))) tar "melpa-stable" nil ((:url . "http://github.com/Floobits/floobits-emacs") (:keywords "comm" "tools")) nil])
  (flx [cl-struct-package-desc flx (0 5) "fuzzy matching with good sorting" ((cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/lewang/flx")) nil])
  (flx-ido [cl-struct-package-desc flx-ido (0 5) "flx integration for ido" ((flx (0 1)) (cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/lewang/flx")) nil])
  (flycheck [cl-struct-package-desc flycheck (0 24) "On-the-fly syntax checking" ((dash (2 4 0)) (pkg-info (0 4)) (let-alist (1 0 1)) (cl-lib (0 3)) (emacs (24 3))) tar "melpa-stable" nil ((:url . "https://www.flycheck.org") (:keywords "convenience" "languages" "tools")) nil])
  (flycheck-cask [cl-struct-package-desc flycheck-cask (0 3) "Cask support in Flycheck" ((emacs (24 1)) (flycheck (0 14)) (dash (2 4 0))) single "melpa-stable" nil ((:url . "https://github.com/flycheck/flycheck-cask") (:keywords "tools" "convenience")) nil])
  (flycheck-clojure [cl-struct-package-desc flycheck-clojure (0 1 3) "Flycheck: Clojure support" ((cider (0 8 1)) (flycheck (0 22 -3 1)) (let-alist (1 0 1)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/clojure-emacs/squiggly-clojure")) nil])
  (flycheck-color-mode-line [cl-struct-package-desc flycheck-color-mode-line (0 3) "Change mode line color with Flycheck status" ((flycheck (0 15)) (dash (1 2)) (emacs (24 1))) single "melpa-stable" nil ((:keywords "convenience" "language" "tools")) nil])
  (flycheck-dmd-dub [cl-struct-package-desc flycheck-dmd-dub (0 9) "Sets flycheck-dmd-include-paths from dub package information" ((flycheck (0 24))) single "melpa-stable" nil ((:url . "http://github.com/atilaneves/flycheck-dmd-dub") (:keywords "languages")) nil])
  (flycheck-haskell [cl-struct-package-desc flycheck-haskell (0 7 2) "Flycheck: Cabal projects and sandboxes" ((emacs (24 1)) (flycheck (0 22)) (haskell-mode (13 7)) (dash (2 4 0)) (let-alist (1 0 1))) tar "melpa-stable" nil ((:url . "https://github.com/flycheck/flycheck-haskell") (:keywords "tools" "convenience")) nil])
  (flycheck-hdevtools [cl-struct-package-desc flycheck-hdevtools (0 3) "A flycheck checker for Haskell using hdevtools" ((flycheck (0 15))) single "melpa-stable" nil ((:url . "https://github.com/flycheck/flycheck-hdevtools") (:keywords "convenience" "languages" "tools")) nil])
  (flycheck-ledger [cl-struct-package-desc flycheck-ledger (0 4) "Flycheck integration for ledger files" ((flycheck (0 15))) single "melpa-stable" nil ((:keywords "convenience" "languages" "tools")) nil])
  (flycheck-ocaml [cl-struct-package-desc flycheck-ocaml (0 2) "Flycheck: OCaml support" ((emacs (24 1)) (flycheck (0 22 -3 1)) (merlin (2 0)) (let-alist (1 0 3))) single "melpa-stable" nil ((:url . "https://github.com/flycheck/flycheck-ocaml") (:keywords "convenience" "tools" "languages")) nil])
  (flycheck-package [cl-struct-package-desc flycheck-package (0 6) "A Flycheck checker for elisp package authors" ((cl-lib (0 5)) (flycheck (0 22)) (emacs (24))) single "melpa-stable" nil ((:keywords "lisp")) nil])
  (flycheck-status-emoji [cl-struct-package-desc flycheck-status-emoji (1 1) "Show flycheck status using cute, compact emoji" ((emacs (24)) (flycheck (0 20)) (let-alist (1 0))) single "melpa-stable" nil ((:url . "https://github.com/liblit/flycheck-status-emoji") (:keywords "convenience" "languages" "tools")) nil])
  (flycheck-tip [cl-struct-package-desc flycheck-tip (0 5 0) "Show flycheck/flymake errors by tooltip" ((flycheck (0 13)) (emacs (24 1)) (popup (0 5 0))) tar "melpa-stable" nil ((:url . "https://github.com/yuutayamada/flycheck-tip") (:keywords "flycheck")) nil])
  (flycheck-ycmd [cl-struct-package-desc flycheck-ycmd (0 9) "flycheck integration for ycmd" ((emacs (24)) (dash (1 2 0)) (flycheck (0 22)) (ycmd (20141217 453))) single "melpa-stable" nil ((:url . "https://github.com/abingham/emacs-ycmd")) nil])
  (flymake-coffee [cl-struct-package-desc flymake-coffee (0 12) "A flymake handler for coffee script" ((flymake-easy (0 1))) single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-coffee")) nil])
  (flymake-css [cl-struct-package-desc flymake-css (0 3) "Flymake support for css using csslint" ((flymake-easy (0 1))) single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-css")) nil])
  (flymake-easy [cl-struct-package-desc flymake-easy (0 10) "Helpers for easily building flymake checkers" nil single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-easy") (:keywords "convenience" "internal")) nil])
  (flymake-gjshint [cl-struct-package-desc flymake-gjshint (0 0 6) "A flymake handler for javascript using both jshint and gjslint" nil single "melpa-stable" nil ((:keywords "flymake" "javascript" "jshint" "gjslint")) nil])
  (flymake-haml [cl-struct-package-desc flymake-haml (0 8) "A flymake handler for haml files" ((flymake-easy (0 1))) single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-haml")) nil])
  (flymake-haskell-multi [cl-struct-package-desc flymake-haskell-multi (0 3) "Syntax-check haskell-mode using both ghc and hlint" ((flymake-easy (0 1))) tar "melpa-stable" nil nil nil])
  (flymake-hlint [cl-struct-package-desc flymake-hlint (0 2) "A flymake handler for haskell-mode files using hlint" ((flymake-easy (0 1))) single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-hlint")) nil])
  (flymake-jslint [cl-struct-package-desc flymake-jslint (0 23) "Flymake support for javascript using jslint" nil single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-jslint")) nil])
  (flymake-json [cl-struct-package-desc flymake-json (0 1) "A flymake handler for json using jsonlint" ((flymake-easy (0 1))) single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-json")) nil])
  (flymake-perlcritic [cl-struct-package-desc flymake-perlcritic (1 0 3) "Flymake handler for Perl to invoke Perl::Critic" ((flymake (0 3))) tar "melpa-stable" nil ((:url . "https://github.com/illusori/emacs-flymake-perlcritic")) nil])
  (flymake-php [cl-struct-package-desc flymake-php (0 5) "A flymake handler for php-mode files" ((flymake-easy (0 1))) single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-php")) nil])
  (flymake-python-pyflakes [cl-struct-package-desc flymake-python-pyflakes (0 9) "A flymake handler for python-mode files using pyflakes (or flake8)" ((flymake-easy (0 8))) single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-python-pyflakes")) nil])
  (flymake-ruby [cl-struct-package-desc flymake-ruby (0 8) "A flymake handler for ruby-mode files" ((flymake-easy (0 1))) single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-ruby")) nil])
  (flymake-sass [cl-struct-package-desc flymake-sass (0 6) "Flymake handler for sass files" ((flymake-easy (0 1))) single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-sass")) nil])
  (flymake-shell [cl-struct-package-desc flymake-shell (0 8) "A flymake syntax-checker for shell scripts" ((flymake-easy (0 1))) single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-shell")) nil])
  (flyspell-lazy [cl-struct-package-desc flyspell-lazy (0 6 10) "Improve flyspell responsiveness using idle timers" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/flyspell-lazy") (:keywords "spelling")) nil])
  (flyspell-popup [cl-struct-package-desc flyspell-popup (0 2) "Correcting words with Flyspell in popup menus" ((popup (0 5 0))) single "melpa-stable" nil ((:url . "https://github.com/xuchunyang/flyspell-popup") (:keywords "convenience")) nil])
  (fm [cl-struct-package-desc fm (1 0) "follow mode for compilation/output buffers" nil single "melpa-stable" nil ((:keywords "outlines")) nil])
  (fold-dwim [cl-struct-package-desc fold-dwim (1 2) "No description available." nil single "melpa-stable" nil nil nil])
  (fold-dwim-org [cl-struct-package-desc fold-dwim-org (0 6) "Fold DWIM bound to org key-strokes." ((fold-dwim (1 2))) single "melpa-stable" nil ((:url . "https://github.com/mlf176f2/fold-dwim-org") (:keywords "folding" "emacs" "org-mode")) nil])
  (fold-this [cl-struct-package-desc fold-this (0 3 0) "Just fold this region please" nil single "melpa-stable" nil ((:keywords "convenience")) nil])
  (font-utils [cl-struct-package-desc font-utils (0 7 8) "Utility functions for working with fonts" ((persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/font-utils") (:keywords "extensions")) nil])
  (fontawesome [cl-struct-package-desc fontawesome (0 2) "fontawesome utility" ((helm (1 7 2)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-fontawesome")) nil])
  (foreman-mode [cl-struct-package-desc foreman-mode (0 0 1) "View and manage Procfile-based applications" ((s (1 9 0)) (dash (2 10 0)) (dash-functional (1 2 0)) (f (0 17 2)) (emacs (24))) single "melpa-stable" nil ((:url . "http://github.com/zweifisch/foreman-mode") (:keywords "foreman")) nil])
  (form-feed [cl-struct-package-desc form-feed (0 2 2) "Display ^L glyphs as horizontal lines" nil single "melpa-stable" nil ((:url . "https://github.com/wasamasa/form-feed") (:keywords "faces")) nil])
  (format-sql [cl-struct-package-desc format-sql (0 4) "Use format-sql to make your SQL readable in directly Emacs." nil single "melpa-stable" nil ((:url . "https://github.com/paetzke/format-sql.el")) nil])
  (fountain-mode [cl-struct-package-desc fountain-mode (1 5 0) "Major mode for screenwriting in Fountain markup" ((s (1 9 0))) single "melpa-stable" nil ((:url . "https://github.com/rnkn/fountain-mode") (:keywords "wp")) nil])
  (frame-restore [cl-struct-package-desc frame-restore (0 5) "Restore Emacs frame" ((emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/lunaryorn/frame-restore.el") (:keywords "frames" "convenience")) nil])
  (fringe-helper [cl-struct-package-desc fringe-helper (1 0 1) "helper functions for fringe bitmaps" nil single "melpa-stable" nil ((:url . "http://nschum.de/src/emacs/fringe-helper/") (:keywords "lisp")) nil])
  (fsharp-mode [cl-struct-package-desc fsharp-mode (1 6 1) "F# mode for Emacs" ((auto-complete (1 4)) (popup (0 5)) (pos-tip (0 4 5)) (s (1 3 1)) (dash (1 1 0))) tar "melpa-stable" nil nil nil])
  (fuel [cl-struct-package-desc fuel (0 96) "No description available." nil tar "melpa-stable" nil nil nil])
  (full-ack [cl-struct-package-desc full-ack (1 0) "a front-end for ack" nil single "melpa-stable" nil ((:url . "http://nschum.de/src/emacs/full-ack/") (:keywords "tools" "matching")) nil])
  (fullframe [cl-struct-package-desc fullframe (0 1 0) "Generalized automatic execution in a single frame" ((cl-lib (0 5))) single "melpa-stable" nil ((:keywords "fullscreen")) nil])
  (fuzzy [cl-struct-package-desc fuzzy (0 1) "Fuzzy Matching" nil single "melpa-stable" nil ((:keywords "convenience")) nil])
  (fvwm-mode [cl-struct-package-desc fvwm-mode (1 6 4) "major mode for editing Fvwm configuration files" nil single "melpa-stable" nil ((:keywords "files")) nil])
  (fwb-cmds [cl-struct-package-desc fwb-cmds (0 4 0) "misc frame, window and buffer commands" nil single "melpa-stable" nil ((:url . "http://github.com/tarsius/fwb-cmds") (:keywords "convenience")) nil])
  (gather [cl-struct-package-desc gather (1 1 0) "Gather string in buffer." nil single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-gather/raw/master/gather.el") (:keywords "matching" "convenience" "tools")) nil])
  (geiser [cl-struct-package-desc geiser (0 7) "GNU Emacs and Scheme talk to each other" nil tar "melpa-stable" nil nil nil])
  (genrnc [cl-struct-package-desc genrnc (0 1 0) "generate RELAX NG Compact Schema from RELAX NG Schema, XML Schema and DTD." ((deferred (0 3 1)) (concurrent (0 3)) (log4e (0 2 0)) (yaxception (0 1))) tar "melpa-stable" nil ((:url . "https://github.com/aki2o/emacs-genrnc") (:keywords "xml")) nil])
  (german-holidays [cl-struct-package-desc german-holidays (0 1 1) "German holidays for Emacs calendar" nil single "melpa-stable" nil ((:url . "https://github.com/rudolfochrist/german-holidays")) nil])
  (ggo-mode [cl-struct-package-desc ggo-mode (20130521) "Gengetopt major mode" nil single "melpa-stable" nil ((:keywords "extensions" "convenience" "local")) nil])
  (ggtags [cl-struct-package-desc ggtags (0 8 10) "emacs frontend to GNU Global source code tagging system" ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/leoliu/ggtags") (:keywords "tools" "convenience")) nil])
  (gh [cl-struct-package-desc gh (0 9 2) "A GitHub library for Emacs" ((eieio (1 4)) (pcache (0 3 0)) (logito (0 1))) tar "melpa-stable" nil nil nil])
  (ghc [cl-struct-package-desc ghc (5 4 0 0) "Sub mode for Haskell mode" ((haskell-mode (13 0))) tar "melpa-stable" nil nil nil])
  (ghc-imported-from [cl-struct-package-desc ghc-imported-from (0 1 2) "Haskell documentation lookup with ghc-imported-from" ((emacs (24 1))) single "melpa-stable" nil ((:keywords "languages")) nil])
  (gist [cl-struct-package-desc gist (1 3 1) "Emacs integration for gist.github.com" ((emacs (24 1)) (gh (0 9 2))) single "melpa-stable" nil ((:url . "https://github.com/defunkt/gist.el") (:keywords "tools")) nil])
  (git [cl-struct-package-desc git (0 1 1) "An Elisp API for programmatically using Git" ((s (1 7 0)) (dash (2 2 0)) (f (0 10 0))) single "melpa-stable" nil ((:url . "http://github.com/rejeep/git.el") (:keywords "git")) nil])
  (git-auto-commit-mode [cl-struct-package-desc git-auto-commit-mode (4 4 0) "Emacs Minor mode to automatically commit and push" nil single "melpa-stable" nil ((:url . "http://projects.ryuslash.org/git-auto-commit-mode/") (:keywords "vc")) nil])
  (git-commit [cl-struct-package-desc git-commit (2 2 2) "Edit Git commit messages" ((emacs (24 4)) (dash (2 11 0)) (with-editor (2 2 2))) single "melpa-stable" nil ((:url . "https://github.com/magit/magit") (:keywords "git" "tools" "vc")) nil])
  (git-gutter [cl-struct-package-desc git-gutter (0 83) "Port of Sublime Text plugin GitGutter" ((cl-lib (0 5)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-git-gutter")) nil])
  (git-gutter+ [cl-struct-package-desc git-gutter+ (0 4) "Manage Git hunks straight from the buffer" ((git-commit (0))) single "melpa-stable" nil ((:url . "https://github.com/nonsequitur/git-gutter-plus") (:keywords "git" "vc")) nil])
  (git-gutter-fringe [cl-struct-package-desc git-gutter-fringe (0 22) "Fringe version of git-gutter.el" ((git-gutter (0 82)) (fringe-helper (0 1 1)) (cl-lib (0 5)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-git-gutter-fringe")) nil])
  (git-gutter-fringe+ [cl-struct-package-desc git-gutter-fringe+ (0 1) "Fringe version of git-gutter+.el" ((git-gutter+ (0 1)) (fringe-helper (20130519 1641))) single "melpa-stable" nil ((:url . "https://github.com/nonsequitur/git-gutter-fringe-plus")) nil])
  (git-lens [cl-struct-package-desc git-lens (0 4) "Show new, deleted or modified files in branch" ((emacs (24 4))) single "melpa-stable" nil ((:keywords "vc" "convenience")) nil])
  (git-link [cl-struct-package-desc git-link (0 3 0) "Get the GitHub/Bitbucket/Gitorious URL for a buffer location" nil single "melpa-stable" nil ((:url . "http://github.com/sshaw/git-link") (:keywords "git")) nil])
  (git-messenger [cl-struct-package-desc git-messenger (0 16) "Pop up last commit information of current line" ((popup (0 5 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-git-messenger")) nil])
  (git-ps1-mode [cl-struct-package-desc git-ps1-mode (0 1 1) "Global minor-mode to print __git_ps1" nil single "melpa-stable" nil ((:url . "https://github.com/10sr/git-ps1-mode-el") (:keywords "utility" "mode-line" "git")) nil])
  (git-timemachine [cl-struct-package-desc git-timemachine (2 7) "Walk through git revisions of a file" nil single "melpa-stable" nil ((:url . "https://github.com/pidu/git-timemachine") (:keywords "git")) nil])
  (git-wip-timemachine [cl-struct-package-desc git-wip-timemachine (1 0) "Walk through git-wip revisions of a file" ((s (1 9 0))) single "melpa-stable" nil ((:url . "https://github.com/itsjeyd/git-wip-timemachine") (:keywords "git")) nil])
  (gitattributes-mode [cl-struct-package-desc gitattributes-mode (1 2 0) "Major mode for editing .gitattributes files" nil single "melpa-stable" nil ((:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git")) nil])
  (gitconfig [cl-struct-package-desc gitconfig (1 0 0) "Emacs lisp interface to work with git-config variables" nil single "melpa-stable" nil ((:keywords "git" "gitconfig" "git-config")) nil])
  (gitconfig-mode [cl-struct-package-desc gitconfig-mode (1 2 0) "Major mode for editing .gitconfig files" nil single "melpa-stable" nil ((:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git")) nil])
  (github-clone [cl-struct-package-desc github-clone (0 2) "Fork and clone github repos" ((gh (0 7 2)) (magit (1 2 0)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/dgtized/github-clone.el") (:keywords "vc" "tools")) nil])
  (gitignore-mode [cl-struct-package-desc gitignore-mode (1 2 0) "Major mode for editing .gitignore files" nil single "melpa-stable" nil ((:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git")) nil])
  (gitlab [cl-struct-package-desc gitlab (0 6 0) "Emacs client for Gitlab" ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) tar "melpa-stable" nil ((:url . "https://github.com/nlamirault/emacs-gitlab") (:keywords "gitlab")) nil])
  (gmail-message-mode [cl-struct-package-desc gmail-message-mode (1 3 2) "A major-mode for editing gmail messages using markdown syntax." ((ham-mode (1 0))) single "melpa-stable" nil ((:url . "http://github.com/Bruce-Connor/gmail-message-mode") (:keywords "mail" "convenience" "emulation")) nil])
  (gmail2bbdb [cl-struct-package-desc gmail2bbdb (0 0 4) "import email and name into bbdb from vcard." nil single "melpa-stable" nil ((:url . "http://github.com/redguardtoo/gmail2bbdb") (:keywords "vcard" "bbdb" "email" "contact" "gmail")) nil])
  (gntp [cl-struct-package-desc gntp (0 1) "Growl Notification Protocol for Emacs" nil single "melpa-stable" nil nil nil])
  (gnuplot [cl-struct-package-desc gnuplot (0 7 0) "drive gnuplot from within emacs" nil tar "melpa-stable" nil ((:keywords "gnuplot" "plotting")) nil])
  (gnus-desktop-notify [cl-struct-package-desc gnus-desktop-notify (1 4) "Gnus Desktop Notification global minor mode" ((gnus (1 0))) single "melpa-stable" nil ((:url . "http://www.thregr.org/~wavexx/hacks/gnus-desktop-notify/")) nil])
  (gnus-x-gm-raw [cl-struct-package-desc gnus-x-gm-raw (0 0 1) "Search mail of Gmail using X-GM-RAW as web interface" ((log4e (0 2 0)) (yaxception (0 1))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/gnus-x-gm-raw") (:keywords "gnus")) nil])
  (go-autocomplete [cl-struct-package-desc go-autocomplete (20150303) "auto-complete-mode backend for go-mode" ((auto-complete (1 4 0))) single "melpa-stable" nil ((:keywords "languages")) nil])
  (go-direx [cl-struct-package-desc go-direx (0 4) "Tree style source code viewer for Go language" ((direx (1 0 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-go-direx")) nil])
  (go-eldoc [cl-struct-package-desc go-eldoc (0 26) "eldoc for go-mode" ((go-mode (1 0 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-go-eldoc")) nil])
  (go-errcheck [cl-struct-package-desc go-errcheck (1 1 2) "errcheck integration for go-mode" nil single "melpa-stable" nil nil nil])
  (go-mode [cl-struct-package-desc go-mode (1 3 1) "Major mode for the Go programming language" nil tar "melpa-stable" nil ((:url . "https://github.com/dominikh/go-mode.el") (:keywords "languages" "go")) nil])
  (go-scratch [cl-struct-package-desc go-scratch (0 0 1) "*scratch* buffer for Go" ((go-mode (1 3 1)) (emacs (24))) single "melpa-stable" nil ((:keywords "languages" "go")) nil])
  (golden-ratio [cl-struct-package-desc golden-ratio (1 0) "Automatic resizing of Emacs windows to the golden ratio" nil single "melpa-stable" nil ((:keywords "window" "resizing")) nil])
  (google-this [cl-struct-package-desc google-this (1 10) "A set of functions and bindings to google under point." ((emacs (24 1))) single "melpa-stable" nil ((:url . "http://github.com/Malabarba/emacs-google-this") (:keywords "convenience" "hypermedia")) nil])
  (google-translate [cl-struct-package-desc google-translate (0 11 1) "Emacs interface to Google Translate." nil tar "melpa-stable" nil nil nil])
  (gotest [cl-struct-package-desc gotest (0 5 0) "Launch GO unit tests" ((emacs (24 3)) (s (1 9 0)) (f (0 17 2)) (go-mode (1 0 0))) single "melpa-stable" nil ((:url . "https://github.com/nlamirault/gotest.el") (:keywords "languages" "go" "tests")) nil])
  (gotham-theme [cl-struct-package-desc gotham-theme (1 1 4) "A very dark Emacs color theme." nil single "melpa-stable" nil ((:url . "https://github.com/wasamasa/gotham-theme")) nil])
  (goto-gem [cl-struct-package-desc goto-gem (1 2) "Open dired in gem directory" ((s (1 9 0))) single "melpa-stable" nil ((:keywords "gemfile" "convenience")) nil])
  (goto-last-change [cl-struct-package-desc goto-last-change (1 2 1) "Move point through buffer-undo-list positions" nil single "melpa-stable" nil ((:url . "https://github.com/camdez/goto-last-change.el") (:keywords "convenience")) nil])
  (gradle-mode [cl-struct-package-desc gradle-mode (0 5 5) "Gradle integration with Emacs' compile" ((s (1 8 0))) single "melpa-stable" nil ((:url . "http://github.com/jacobono/emacs-gradle-mode") (:keywords "gradle")) nil])
  (grails-projectile-mode [cl-struct-package-desc grails-projectile-mode (1 1 1) "Grails mode with Projectile for projects management." ((projectile (0 10 0)) (emacs (24)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/yveszoundi/grails-projectile-mode") (:keywords "grails" "projectile")) nil])
  (grandshell-theme [cl-struct-package-desc grandshell-theme (1 0) "Dark color theme for Emacs > 24 with intensive colors." nil tar "melpa-stable" nil nil nil])
  (graphene [cl-struct-package-desc graphene (0 9 0) "Friendly Emacs defaults" ((dash (2 10 0)) (exec-path-from-shell (1 9)) (ppd-sr-speedbar (0 0 4)) (sr-speedbar (20140505)) (smex (3 0)) (web-mode (11 2)) (smartparens (1 6 3)) (flycheck (0 23)) (company (0 8 12))) tar "melpa-stable" nil nil nil])
  (graphviz-dot-mode [cl-struct-package-desc graphviz-dot-mode (0 4) "Mode for the dot-language used by graphviz (att)." nil single "melpa-stable" nil ((:url . "http://ppareit.github.com/graphviz-dot-mode/") (:keywords "mode" "dot" "dot-language" "dotlanguage" "graphviz" "graphs" "att")) nil])
  (grapnel [cl-struct-package-desc grapnel (0 5 3) "HTTP request lib with flexible callback dispatch" nil single "melpa-stable" nil ((:url . "http://www.github.com/leathekd/grapnel")) nil])
  (grass-mode [cl-struct-package-desc grass-mode (0 1) "Provides Emacs modes for interacting with the GRASS GIS program" ((cl-lib (0 2))) single "melpa-stable" nil ((:keywords "grass" "gis")) nil])
  (grin [cl-struct-package-desc grin (1 0) "run grin and grind (python replacements for grep and find) putting hits in a grep buffer" nil single "melpa-stable" nil ((:url . "http://bitbucket.org/dariusp686/emacs-grin") (:keywords "python" "grin" "grind" "grep" "find")) nil])
  (grizzl [cl-struct-package-desc grizzl (0 1 1) "Fuzzy Search Library & Completing Read" nil tar "melpa-stable" nil nil nil])
  (gruber-darker-theme [cl-struct-package-desc gruber-darker-theme (0 6) "Gruber Darker color theme for Emacs 24." nil single "melpa-stable" nil ((:url . "http://github.com/rexim/gruber-darker-theme")) nil])
  (grunt [cl-struct-package-desc grunt (1 3 1) "Some glue to stick Emacs and Gruntfiles together" ((dash (2 9 0)) (ansi-color (3 4 2))) single "melpa-stable" nil ((:url . "https://github.com/gempesaw/grunt.el") (:keywords "convenience" "grunt")) nil])
  (gscholar-bibtex [cl-struct-package-desc gscholar-bibtex (0 3) "Retrieve BibTeX from Google Scholar and other online sources(ACM, IEEE, DBLP)" nil single "melpa-stable" nil ((:keywords "extensions")) nil])
  (guide-key [cl-struct-package-desc guide-key (1 2 5) "Guide the following key bindings automatically and dynamically" ((popwin (0 3 0))) single "melpa-stable" nil ((:url . "https://github.com/kai2nenobu/guide-key") (:keywords "help" "convenience")) nil])
  (guide-key-tip [cl-struct-package-desc guide-key-tip (0 0 1) "Show guide-key.el hints using pos-tip.el" ((guide-key (1 2 3)) (pos-tip (0 4 5))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/guide-key-tip") (:keywords "help" "convenience" "tooltip")) nil])
  (guru-mode [cl-struct-package-desc guru-mode (0 2) "Become an Emacs guru" nil single "melpa-stable" nil ((:url . "https://github.com/bbatsov/guru-mode") (:keywords "convenience")) nil])
  (hackernews [cl-struct-package-desc hackernews (0 2) "Access the hackernews aggregator from Emacs" ((json (1 2))) tar "melpa-stable" nil nil nil])
  (ham-mode [cl-struct-package-desc ham-mode (1 1 2) "Html As Markdown. Transparently edit an html file using markdown" ((html-to-markdown (1 2)) (markdown-mode (2 0))) single "melpa-stable" nil ((:url . "http://github.com/Bruce-Connor/ham-mode") (:keywords "convenience" "emulation" "wp")) nil])
  (haml-mode [cl-struct-package-desc haml-mode (3 1 9) "Major mode for editing Haml files" ((ruby-mode (1 0))) single "melpa-stable" nil ((:url . "http://github.com/nex3/haml/tree/master") (:keywords "markup" "language" "html")) nil])
  (hardhat [cl-struct-package-desc hardhat (0 4 4) "Protect against clobbering user-writable files" ((ignoramus (0 7 0))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/hardhat") (:keywords "convenience")) nil])
  (haskell-emacs [cl-struct-package-desc haskell-emacs (3 1 2) "Write emacs extensions in haskell" nil tar "melpa-stable" nil ((:url . "https://github.com/knupfer/haskell-emacs") (:keywords "haskell" "emacs" "ffi")) nil])
  (haskell-emacs-base [cl-struct-package-desc haskell-emacs-base (3 1 2) "Haskell functions from Prelude" ((haskell-emacs (2 4 0))) tar "melpa-stable" nil ((:url . "https://github.com/knupfer/haskell-emacs/modules/base") (:keywords "haskell" "emacs" "ffi")) nil])
  (haskell-emacs-text [cl-struct-package-desc haskell-emacs-text (3 1 2) "Haskell functions from Data.Text" ((haskell-emacs (2 4 0))) tar "melpa-stable" nil ((:url . "https://github.com/knupfer/haskell-emacs/modules/text") (:keywords "haskell" "emacs" "ffi")) nil])
  (haskell-mode [cl-struct-package-desc haskell-mode (13 14 2) "A Haskell editing mode" ((cl-lib (0 5))) tar "melpa-stable" nil nil nil])
  (haskell-snippets [cl-struct-package-desc haskell-snippets (0 1 0) "Yasnippets for Haskell" ((yasnippet (0 8 0))) tar "melpa-stable" nil ((:url . "https://github.com/haskell/haskell-snippets") (:keywords "snippets" "haskell")) nil])
  (hcl-mode [cl-struct-package-desc hcl-mode (0 1) "Major mode for Hashicorp" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-hcl-mode")) nil])
  (helm [cl-struct-package-desc helm (1 7 9) "Helm is an Emacs incremental and narrowing framework" ((emacs (24)) (cl-lib (0 5)) (async (1 5)) (helm-core (1 7 9))) tar "melpa-stable" nil ((:url . "https://emacs-helm.github.io/helm/")) nil])
  (helm-ack [cl-struct-package-desc helm-ack (0 13) "Ack command with helm interface" ((helm (1 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-helm-ack")) nil])
  (helm-ag [cl-struct-package-desc helm-ag (0 46) "the silver searcher with helm interface" ((helm (1 7 7)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-helm-ag")) nil])
  (helm-aws [cl-struct-package-desc helm-aws (1 0 0) "Manage AWS EC2 server instances directly from Emacs" ((helm (1 5 3))) single "melpa-stable" nil ((:url . "https://github.com/istib/helm-aws")) nil])
  (helm-backup [cl-struct-package-desc helm-backup (0 2 0) "Backup each file change using git" ((helm (1 5 5)) (s (1 8 0))) single "melpa-stable" nil ((:url . "http://github.com/antham/helm-backup") (:keywords "backup")) nil])
  (helm-bundle-show [cl-struct-package-desc helm-bundle-show (1 1 1) "bundle show with helm interface" ((helm (1 7 6))) single "melpa-stable" nil ((:url . "https://github.com/masutaka/emacs-helm-bundle-show")) nil])
  (helm-c-yasnippet [cl-struct-package-desc helm-c-yasnippet (0 6 7) "helm source for yasnippet.el" ((helm-core (1 7 7)) (yasnippet (0 8 0)) (cl-lib (0 3))) single "melpa-stable" nil ((:keywords "convenience" "emulation")) nil])
  (helm-circe [cl-struct-package-desc helm-circe (0 3) "helm circe buffer management." ((emacs (24)) (helm (0 0)) (circe (0 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/lesharris/helm-circe") (:keywords "helm" "circe")) nil])
  (helm-commandlinefu [cl-struct-package-desc helm-commandlinefu (0 3) "Search and browse commandlinefu.com from helm" ((emacs (24 1)) (helm (1 7 0)) (json (1 3)) (let-alist (1 0 3))) single "melpa-stable" nil ((:url . "https://github.com/xuchunyang/helm-commandlinefu") (:keywords "commandlinefu.com")) nil])
  (helm-core [cl-struct-package-desc helm-core (1 7 9) "Development files for Helm" ((emacs (24)) (cl-lib (0 5)) (async (1 5))) tar "melpa-stable" nil ((:url . "https://emacs-helm.github.io/helm/")) nil])
  (helm-cscope [cl-struct-package-desc helm-cscope (0 1 1) "Helm interface for xcscope.el." ((xcscope (1 0)) (helm (1 6 7)) (cl-lib (0 5)) (emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/alpha22jp/helm-cscope.el") (:keywords "cscope" "helm")) nil])
  (helm-dash [cl-struct-package-desc helm-dash (1 1 0) "Helm extension to search dash docsets" ((helm (0 0 0))) single "melpa-stable" nil ((:url . "http://github.com/areina/helm-dash") (:keywords "docs")) nil])
  (helm-descbinds [cl-struct-package-desc helm-descbinds (1 7 1) "Yet Another `describe-bindings' with `helm'." nil single "melpa-stable" nil ((:keywords "helm" "help")) nil])
  (helm-firefox [cl-struct-package-desc helm-firefox (1 0) "Firefox bookmarks" ((helm (1 5)) (cl-lib (0 5)) (emacs (24 1))) single "melpa-stable" nil nil nil])
  (helm-ghc [cl-struct-package-desc helm-ghc (0 1 0) "A Helm datasource for ghc-mod errors" ((emacs (24)) (cl-lib (0 5)) (helm (1 6 4)) (ghc (5 2 1 0))) single "melpa-stable" nil ((:keywords "languages" "helm")) nil])
  (helm-ghq [cl-struct-package-desc helm-ghq (1 4 5) "ghq with helm interface" ((helm (1 7 6))) single "melpa-stable" nil ((:url . "https://github.com/masutaka/emacs-helm-ghq")) nil])
  (helm-github-stars [cl-struct-package-desc helm-github-stars (1 3 2) "Helm integration for your starred repositories on github" ((helm (1 6 8)) (emacs (24 4))) single "melpa-stable" nil ((:url . "https://github.com/Sliim/helm-github-stars") (:keywords "helm" "github" "stars")) nil])
  (helm-gitlab [cl-struct-package-desc helm-gitlab (0 6 0) "Helm interface to Gitlab" ((s (1 9 0)) (dash (2 9 0)) (helm (1 0)) (gitlab (0))) single "melpa-stable" nil ((:url . "https://github.com/nlamirault/emacs-gitlab") (:keywords "gitlab" "helm")) nil])
  (helm-gtags [cl-struct-package-desc helm-gtags (1 4 9) "GNU GLOBAL helm interface" ((helm (1 5 6)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-helm-gtags")) nil])
  (helm-hatena-bookmark [cl-struct-package-desc helm-hatena-bookmark (2 0 3) "Hatena::Bookmark with helm interface" ((helm (1 6 9))) single "melpa-stable" nil ((:url . "https://github.com/masutaka/emacs-helm-hatena-bookmark")) nil])
  (helm-hayoo [cl-struct-package-desc helm-hayoo (0 0 5) "Source and configured helm for searching hayoo" ((helm (1 6 0)) (json (1 2)) (haskell-mode (13 7))) single "melpa-stable" nil ((:keywords "helm")) nil])
  (helm-ls-git [cl-struct-package-desc helm-ls-git (1 7 8) "list git files." ((helm (1 7 8))) single "melpa-stable" nil nil nil])
  (helm-ls-hg [cl-struct-package-desc helm-ls-hg (1 7 8) "List hg files in hg project." ((helm (1 7 8))) single "melpa-stable" nil nil nil])
  (helm-make [cl-struct-package-desc helm-make (0 1 0) "Select a Makefile target with helm" ((helm (1 5 3)) (projectile (0 11 0))) single "melpa-stable" nil ((:url . "https://github.com/abo-abo/helm-make") (:keywords "makefile")) nil])
  (helm-migemo [cl-struct-package-desc helm-migemo (1 22) "Migemo plug-in for helm" ((helm-core (1 7 8)) (migemo (1 9)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/emacs-jp/helm-migemo") (:keywords "matching" "convenience" "tools" "i18n")) nil])
  (helm-mode-manager [cl-struct-package-desc helm-mode-manager (1 0 0) "Select and toggle major and minor modes with helm" ((helm (1 5 3))) single "melpa-stable" nil ((:url . "https://github.com/istib/helm-mode-manager")) nil])
  (helm-mt [cl-struct-package-desc helm-mt (0 6) "helm multi-term management." ((emacs (24)) (helm (0 0)) (multi-term (0 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/dfdeshom/helm-mt") (:keywords "helm" "multi-term")) nil])
  (helm-nixos-options [cl-struct-package-desc helm-nixos-options (0 0 1) "Helm Interface for nixos-options" ((nixos-options (0 0 1)) (helm (1 5 6))) single "melpa-stable" nil ((:url . "http://www.github.com/travisbhartwell/nix-emacs/") (:keywords "unix")) nil])
  (helm-open-github [cl-struct-package-desc helm-open-github (0 14) "Utilities of Opening Github Page" ((helm-core (1 7 7)) (gh (0 8 2)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-helm-open-github")) nil])
  (helm-orgcard [cl-struct-package-desc helm-orgcard (0 2) "browse the orgcard by helm" ((helm-core (1 7 7))) single "melpa-stable" nil ((:url . "https://github.com/emacs-jp/helm-orgcard") (:keywords "convenience" "helm" "org")) nil])
  (helm-package [cl-struct-package-desc helm-package (0 2) "Listing ELPA packages with helm interface" ((helm (1 0)) (cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-helm-package")) nil])
  (helm-pages [cl-struct-package-desc helm-pages (0 1 1) "Pages in current buffer as Helm datasource" ((helm (1 6 5)) (emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:keywords "convenience" "helm" "outlines")) nil])
  (helm-perldoc [cl-struct-package-desc helm-perldoc (0 7) "perldoc with helm interface" ((helm (1 0)) (deferred (0 3 1)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-helm-perldoc")) nil])
  (helm-proc [cl-struct-package-desc helm-proc (0 0 4) "Helm interface for managing system processes" ((helm (1 6 0))) tar "melpa-stable" nil nil nil])
  (helm-project-persist [cl-struct-package-desc helm-project-persist (1 0 0) "Helm integration for project-persist package" ((helm (1 5 2)) (project-persist (0 1 4))) single "melpa-stable" nil ((:keywords "project-persist" "project" "helm")) nil])
  (helm-projectile [cl-struct-package-desc helm-projectile (0 12 0) "Helm integration for Projectile" ((helm (1 4 0)) (projectile (0 12 0)) (dash (1 5 0)) (cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/bbatsov/projectile") (:keywords "project" "convenience")) nil])
  (helm-pt [cl-struct-package-desc helm-pt (0 2) "Helm interface to the platinum searcher" ((helm (1 5 6))) tar "melpa-stable" nil ((:keywords "helm" "platinum searcher")) nil])
  (helm-pydoc [cl-struct-package-desc helm-pydoc (0 7) "pydoc with helm interface" ((helm-core (1 7 4)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-helm-pydoc")) nil])
  (helm-robe [cl-struct-package-desc helm-robe (0 1) "completing read function for robe" ((helm (1 0))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-helm-robe")) nil])
  (helm-rubygems-org [cl-struct-package-desc helm-rubygems-org (0 0 1) "Use helm to search rubygems.org" ((emacs (24)) (helm (1 6 3)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/neomantic/helm-rubygems-org") (:keywords "ruby" "rubygems" "gemfile" "helm")) nil])
  (helm-sage [cl-struct-package-desc helm-sage (0 0 4) "A helm extension for sage-shell-mode." ((cl-lib (0 5)) (helm (1 5 6)) (sage-shell-mode (0 0 8))) single "melpa-stable" nil ((:url . "https://github.com/stakemori/helm-sage") (:keywords "sage" "math" "helm")) nil])
  (helm-spaces [cl-struct-package-desc helm-spaces (0 2) "helm sources for spaces" ((helm (1 0)) (spaces (0 1 0))) single "melpa-stable" nil ((:url . "https://github.com/yasuyk/helm-spaces") (:keywords "helm" "frames" "convenience")) nil])
  (helm-swoop [cl-struct-package-desc helm-swoop (1 5 1) "Efficiently hopping squeezed lines powered by helm interface" ((helm (1 0)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/ShingoFukuyama/helm-swoop") (:keywords "helm" "swoop" "inner" "buffer" "search")) nil])
  (helm-themes [cl-struct-package-desc helm-themes (0 5) "Color theme selection with helm interface" ((helm (1 0))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-helm-themes")) nil])
  (helm-unicode [cl-struct-package-desc helm-unicode (0 0 2) "Helm command for unicode characters." ((helm (1 6)) (emacs (24 4))) single "melpa-stable" nil nil nil])
  (helm-w32-launcher [cl-struct-package-desc helm-w32-launcher (0 1 6) "Start Menu entry launcher using Helm" ((emacs (24)) (helm (1 6 5)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/Fanael/helm-w32-launcher")) nil])
  (helm-zhihu-daily [cl-struct-package-desc helm-zhihu-daily (0 2) "Helm interface for 知乎日报 (http://daily.zhihu.com)" ((helm (1 0)) (cl-lib (0 5)) (emacs (24 4))) tar "melpa-stable" nil ((:url . "https://github.com/xuchunyang/helm-zhihu-daily")) nil])
  (hi2 [cl-struct-package-desc hi2 (1 0) "indentation module for Haskell Mode" nil single "melpa-stable" nil ((:url . "https://github.com/errge/hi2") (:keywords "indentation" "haskell")) nil])
  (highlight-blocks [cl-struct-package-desc highlight-blocks (0 1 15) "Highlight the blocks point is in" ((emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/Fanael/highlight-blocks")) nil])
  (highlight-defined [cl-struct-package-desc highlight-defined (0 1 5) "Syntax highlighting of known Elisp symbols" ((emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/Fanael/highlight-defined")) nil])
  (highlight-indentation [cl-struct-package-desc highlight-indentation (0 7 0) "Minor modes for highlighting indentation" nil single "melpa-stable" nil ((:url . "https://github.com/antonj/Highlight-Indentation-for-Emacs")) nil])
  (highlight-numbers [cl-struct-package-desc highlight-numbers (0 2 1) "Highlight numbers in source code" ((emacs (24)) (parent-mode (2 0))) single "melpa-stable" nil ((:url . "https://github.com/Fanael/highlight-numbers")) nil])
  (highlight-parentheses [cl-struct-package-desc highlight-parentheses (1 1 0) "highlight surrounding parentheses" nil single "melpa-stable" nil ((:url . "https://github.com/tsdh/highlight-parentheses.el") (:keywords "faces" "matching")) nil])
  (highlight-quoted [cl-struct-package-desc highlight-quoted (0 1) "Highlight Lisp quotes and quoted symbols" ((emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/Fanael/highlight-quoted")) nil])
  (highlight-symbol [cl-struct-package-desc highlight-symbol (1 3) "automatic and manual symbol highlighting" nil single "melpa-stable" nil ((:url . "http://nschum.de/src/emacs/highlight-symbol/") (:keywords "faces" "matching")) nil])
  (hindent [cl-struct-package-desc hindent (5 4 3) "Indent haskell code using the \"hindent\" program" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/chrisdone/hindent")) nil])
  (hippie-expand-slime [cl-struct-package-desc hippie-expand-slime (0 1) "Hook slime's completion into hippie-expand" nil single "melpa-stable" nil ((:url . "https://github.com/purcell/hippie-expand-slime")) nil])
  (hippie-namespace [cl-struct-package-desc hippie-namespace (0 5 8) "Special treatment for namespace prefixes in hippie-expand" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/hippie-namespace") (:keywords "convenience" "lisp" "tools" "completion")) nil])
  (history [cl-struct-package-desc history (1 0 0) "History utility for source code navigation" ((emacs (24 3))) tar "melpa-stable" nil ((:url . "https://github.com/boyw165/history")) nil])
  (historyf [cl-struct-package-desc historyf (0 0 8) "file history library like browser" nil single "melpa-stable" nil ((:url . "https://github.com/k1LoW/emacs-historyf")) nil])
  (hl-anything [cl-struct-package-desc hl-anything (0 0 9) "Highlight symbols, selections, enclosing parens and more." ((emacs (24 3))) tar "melpa-stable" nil nil nil])
  (hl-sentence [cl-struct-package-desc hl-sentence (3) "highlight a sentence based on customizable face" nil single "melpa-stable" nil ((:url . "http://github.com/milkypostman/hl-sentence") (:keywords "highlighting")) nil])
  (hl-sexp [cl-struct-package-desc hl-sexp (1 0 0) "highlight the current sexp" nil single "melpa-stable" nil ((:keywords "faces" "frames" "emulation")) nil])
  (hl-todo [cl-struct-package-desc hl-todo (1 4 4) "highlight TODO keywords" nil single "melpa-stable" nil ((:url . "http://github.com/tarsius/hl-todo") (:keywords "convenience")) nil])
  (hoa-pp-mode [cl-struct-package-desc hoa-pp-mode (0 2 1) "Major mode for Hoa PP grammars" ((emacs (24 1)) (names (20150723 0))) single "melpa-stable" nil ((:url . "https://github.com/hoaproject/Contributions-Emacs-Pp") (:keywords "php" "hoa")) nil])
  (homebrew-mode [cl-struct-package-desc homebrew-mode (1 3 1) "minor mode for editing Homebrew formulae" ((emacs (24 4)) (inf-ruby (2 4 0)) (dash (1 2 0))) single "melpa-stable" nil ((:url . "https://github.com/dunn/homebrew-mode") (:keywords "homebrew" "brew" "ruby")) nil])
  (hookify [cl-struct-package-desc hookify (0 2 1) "Interactive commands to create temporary hooks" ((s (1 9 0)) (dash (1 5 0))) single "melpa-stable" nil ((:url . "https://github.com/Silex/hookify") (:keywords "hook" "convenience")) nil])
  (ht [cl-struct-package-desc ht (2 0) "The missing hash table library for Emacs" nil single "melpa-stable" nil ((:keywords "hash table" "hash map" "hash")) nil])
  (html-to-markdown [cl-struct-package-desc html-to-markdown (1 5) "HTML to Markdown converter written in Emacs-lisp." nil single "melpa-stable" nil ((:url . "http://github.com/Bruce-Connor/html-to-markdown") (:keywords "tools" "wp" "languages")) nil])
  (httpcode [cl-struct-package-desc httpcode (0 1) "explains the meaning of an HTTP status code" nil single "melpa-stable" nil ((:url . "http://github.com/rspivak/httpcode.el")) nil])
  (httprepl [cl-struct-package-desc httprepl (1 1) "An HTTP REPL" ((s (1 9 0)) (dash (2 5 0)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/gregsexton/httprepl.el") (:keywords "http" "repl")) nil])
  (hyai [cl-struct-package-desc hyai (1 0 0) "Haskell Yet Another Indentation" ((cl-lib (0 5)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/iquiw/hyai")) nil])
  (hyde [cl-struct-package-desc hyde (0 2) "No description available." nil tar "melpa-stable" nil nil nil])
  (hydra [cl-struct-package-desc hydra (0 13 0) "Make bindings that stick around." ((cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/abo-abo/hydra") (:keywords "bindings")) nil])
  (ibuffer-projectile [cl-struct-package-desc ibuffer-projectile (0 2) "Group ibuffer's list by projectile root" ((projectile (0 11 0))) single "melpa-stable" nil ((:url . "http://github.com/purcell/ibuffer-projectile") (:keywords "themes")) nil])
  (ibuffer-vc [cl-struct-package-desc ibuffer-vc (0 10) "Group ibuffer's list by VC project, or show VC status" ((cl-lib (0 2))) single "melpa-stable" nil ((:url . "http://github.com/purcell/ibuffer-vc") (:keywords "themes")) nil])
  (identica-mode [cl-struct-package-desc identica-mode (1 3 1) "Major mode API client for status.net open microblogging" nil tar "melpa-stable" nil ((:url . "http://blog.gabrielsaldana.org/identica-mode-for-emacs/") (:keywords "identica" "web")) nil])
  (idle-highlight-mode [cl-struct-package-desc idle-highlight-mode (1 1 3) "highlight the word the point is on" nil single "melpa-stable" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/IdleHighlight") (:keywords "convenience")) nil])
  (ido-complete-space-or-hyphen [cl-struct-package-desc ido-complete-space-or-hyphen (1 1) "No description available." nil single "melpa-stable" nil nil nil])
  (ido-completing-read+ [cl-struct-package-desc ido-completing-read+ (3 7) "A completing-read-function using ido" ((emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/DarwinAwardWinner/ido-ubiquitous") (:keywords "ido" "completion" "convenience")) nil])
  (ido-describe-bindings [cl-struct-package-desc ido-describe-bindings (0 0 5) "Yet another `describe-bindings' with `ido'." ((ido-vertical-mode (1 0 0)) (dash (2 11 0))) single "melpa-stable" nil ((:url . "https://github.com/danil/ido-describe-bindings") (:keywords "help")) nil])
  (ido-load-library [cl-struct-package-desc ido-load-library (0 2 0) "Load-library alternative using ido-completing-read" ((persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/ido-load-library") (:keywords "maint" "completion")) nil])
  (ido-occur [cl-struct-package-desc ido-occur (0 1 0) "Yet another `occur' with `ido'." ((ido-vertical-mode (1 0 0)) (dash (2 11 0))) single "melpa-stable" nil ((:url . "https://github.com/danil/ido-occur") (:keywords "inner" "buffer" "search")) nil])
  (ido-ubiquitous [cl-struct-package-desc ido-ubiquitous (3 7) "Use ido (nearly) everywhere." ((emacs (24 1)) (ido-completing-read+ (3 0))) single "melpa-stable" nil ((:url . "https://github.com/DarwinAwardWinner/ido-ubiquitous") (:keywords "convenience" "completion" "ido")) nil])
  (ido-vertical-mode [cl-struct-package-desc ido-vertical-mode (0 1 6) "Makes ido-mode display vertically." nil single "melpa-stable" nil ((:url . "https://github.com/gempesaw/ido-vertical-mode.el") (:keywords "convenience")) nil])
  (ido-yes-or-no [cl-struct-package-desc ido-yes-or-no (1 2) "Use Ido to answer yes-or-no questions" nil single "melpa-stable" nil ((:url . "https://github.com/DarwinAwardWinner/ido-yes-or-no")) nil])
  (idomenu [cl-struct-package-desc idomenu (0 1) "imenu tag selection with ido" nil single "melpa-stable" nil ((:url . "https://github.com/birkenfeld/idomenu") (:keywords "extensions" "convenience")) nil])
  (idris-mode [cl-struct-package-desc idris-mode (0 9 19) "Major mode for editing Idris code" ((emacs (24)) (prop-menu (0 1)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/idris-hackers/idris-mode") (:keywords "languages")) nil])
  (iedit [cl-struct-package-desc iedit (0 9 9) "Edit multiple regions in the same way simultaneously." nil tar "melpa-stable" nil ((:url . "http://www.emacswiki.org/emacs/Iedit") (:keywords "occurrence" "region" "simultaneous" "refactoring")) nil])
  (iflipb [cl-struct-package-desc iflipb (1 3) "interactively flip between recently visited buffers" nil single "melpa-stable" nil ((:url . "http://git.rosdahl.net/?p=joel/iflipb.git")) nil])
  (ignoramus [cl-struct-package-desc ignoramus (0 7 0) "Ignore backups, build files, et al." nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/ignoramus") (:keywords "convenience" "tools")) nil])
  (image+ [cl-struct-package-desc image+ (0 6 2) "Image manipulate extensions for Emacs" ((cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-imagex") (:keywords "multimedia" "extensions")) nil])
  (image-archive [cl-struct-package-desc image-archive (0 0 7) "Image thumbnails in archive file with non-blocking" ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-image-archive/raw/master/image-archive.el") (:keywords "multimedia")) nil])
  (image-dired+ [cl-struct-package-desc image-dired+ (0 7 2) "Image-dired extensions" ((cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-image-diredx") (:keywords "extensions" "multimedia")) nil])
  (imenu-anywhere [cl-struct-package-desc imenu-anywhere (0 9 0) "ido/helm imenu tag selection across all buffers with the same mode" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/vitoshka/imenu-anywhere") (:keywords "ido" "imenu" "tags")) nil])
  (imenu-list [cl-struct-package-desc imenu-list (0 4) "Show imenu entries in a seperate buffer" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/bmag/imenu-list")) nil])
  (imenus [cl-struct-package-desc imenus (0 1) "Imenu for multiple buffers" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://gitorious.org/alezost-emacs/imenus") (:keywords "tools" "convenience")) nil])
  (imgix [cl-struct-package-desc imgix (1 0 0) "Major mode for editing images in emacs via imgix" ((json (1 2)) (ht (2 0)) (s (1 9 0)) (dash (2 9 0)) (cl-lib (0 5))) tar "melpa-stable" nil ((:keywords "images" "image processing" "image editing" "sepia" "blur")) nil])
  (immutant-server [cl-struct-package-desc immutant-server (1 2 0) "Run your Immutant server in Emacs" nil single "melpa-stable" nil ((:url . "http://www.github.com/leathekd/immutant-server.el")) nil])
  (import-popwin [cl-struct-package-desc import-popwin (0 9) "popwin buffer near by import statements with popwin" ((popwin (0 6)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-import-popwin")) nil])
  (inf-clojure [cl-struct-package-desc inf-clojure (1 2 0) "an inferior-clojure mode" ((emacs (24 1)) (clojure-mode (4 0))) single "melpa-stable" nil ((:url . "http://github.com/clojure-emacs/inf-clojure") (:keywords "processes" "clojure")) nil])
  (inf-ruby [cl-struct-package-desc inf-ruby (2 4 0) "Run a Ruby process in a buffer" nil single "melpa-stable" nil ((:url . "http://github.com/nonsequitur/inf-ruby") (:keywords "languages" "ruby")) nil])
  (inflections [cl-struct-package-desc inflections (2 3) "convert english words between singular and plural" nil single "melpa-stable" nil ((:url . "https://github.com/eschulte/jump.el") (:keywords "ruby" "rails" "languages" "oop")) nil])
  (init-loader [cl-struct-package-desc init-loader (0 2) "Loader for configuration files" nil single "melpa-stable" nil ((:url . "https://github.com/emacs-jp/init-loader/")) nil])
  (initsplit [cl-struct-package-desc initsplit (1 6) "No description available." nil single "melpa-stable" nil nil nil])
  (inline-crypt [cl-struct-package-desc inline-crypt (0 1 4) "Simple inline encryption via openssl" nil tar "melpa-stable" nil nil nil])
  (inlineR [cl-struct-package-desc inlineR (1 0) "insert Tag for inline image of R graphics" nil single "melpa-stable" nil ((:url . "https://github.com/myuhe/inlineR.el") (:keywords "convenience" "iimage.el" "cacoo.el")) nil])
  (insert-shebang [cl-struct-package-desc insert-shebang (0 9 4) "Insert shebang line automatically." nil single "melpa-stable" nil ((:url . "http://github.com/psachin/insert-shebang") (:keywords "shebang" "tool" "convenience")) nil])
  (instapaper [cl-struct-package-desc instapaper (0 9 5) "No description available." nil single "melpa-stable" nil nil nil])
  (interleave [cl-struct-package-desc interleave (1 0 0) "Interleaving text books since 2015" nil single "melpa-stable" nil ((:url . "https://github.com/rudolfochrist/interleave")) nil])
  (iplayer [cl-struct-package-desc iplayer (0 1) "Browse and download BBC TV/radio shows" nil single "melpa-stable" nil ((:url . "https://github.com/csrhodes/iplayer-el") (:keywords "multimedia" "bbc")) nil])
  (ir-black-theme [cl-struct-package-desc ir-black-theme (1 0 1) "Port of ir-black theme" nil single "melpa-stable" nil ((:keywords "faces")) nil])
  (irony [cl-struct-package-desc irony (0 1 2) "C/C++ minor mode powered by libclang" ((cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/Sarcasm/irony-mode") (:keywords "c" "convenience" "tools")) nil])
  (isgd [cl-struct-package-desc isgd (1 1) "Shorten URLs using the isgd.com shortener service" nil single "melpa-stable" nil ((:url . "https://github.com/chmouel/isgd.el")) nil])
  (ix [cl-struct-package-desc ix (0 7) "Emacs client for http://ix.io pastebin" ((grapnel (0 5 3))) single "melpa-stable" nil ((:url . "http://www.github.com/theanalyst/ix.el")) nil])
  (j-mode [cl-struct-package-desc j-mode (1 1 1) "Major mode for editing J programs" nil tar "melpa-stable" nil ((:url . "http://github.com/zellio/j-mode") (:keywords "j" "langauges")) nil])
  (jabber [cl-struct-package-desc jabber (0 8 92) "A Jabber client for Emacs." nil tar "melpa-stable" nil nil nil])
  (jade-mode [cl-struct-package-desc jade-mode (1 0 0) "Major mode for editing .jade files" nil single "melpa-stable" nil ((:url . "https://github.com/brianc/jade-mode")) nil])
  (jammer [cl-struct-package-desc jammer (0 1) "Punish yourself for using Emacs inefficiently" nil single "melpa-stable" nil ((:url . "https://github.com/wasamasa/jammer") (:keywords "games")) nil])
  (japanlaw [cl-struct-package-desc japanlaw (0 9 1) "Japan law from law.e-gov.go.jp" nil single "melpa-stable" nil ((:keywords "docs" "help")) nil])
  (jedi [cl-struct-package-desc jedi (0 2 5) "a Python auto-completion for Emacs" ((emacs (24)) (jedi-core (0 2 2)) (auto-complete (1 4))) single "melpa-stable" nil nil nil])
  (jedi-core [cl-struct-package-desc jedi-core (0 2 5) "Common code of jedi.el and company-jedi.el" ((emacs (24)) (epc (0 1 0)) (python-environment (0 0 2)) (cl-lib (0 5))) tar "melpa-stable" nil nil nil])
  (js2-closure [cl-struct-package-desc js2-closure (1 4) "Google Closure dependency manager" ((js2-mode (20140114))) single "melpa-stable" nil ((:url . "http://github.com/jart/js2-closure")) nil])
  (js2-highlight-vars [cl-struct-package-desc js2-highlight-vars (0 1 0) "highlight occurrences of the variable under cursor" ((js2-mode (20150909))) single "melpa-stable" nil ((:url . "http://mihai.bazon.net/projects/editing-javascript-with-emacs-js2-mode/js2-highlight-vars-mode")) nil])
  (js2-mode [cl-struct-package-desc js2-mode (20150909) "Improved JavaScript editing mode" ((emacs (24 1)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/mooz/js2-mode/") (:keywords "languages" "javascript")) nil])
  (js2-refactor [cl-struct-package-desc js2-refactor (0 7 0) "A JavaScript refactoring library for emacs." ((js2-mode (20101228)) (s (1 9 0)) (multiple-cursors (1 0 0)) (dash (1 0 0)) (s (1 0 0)) (yasnippet (20130218))) tar "melpa-stable" nil nil nil])
  (js3-mode [cl-struct-package-desc js3-mode (1 1 0) "An improved JavaScript editing mode" nil tar "melpa-stable" nil ((:keywords "javascript" "languages")) nil])
  (jsfmt [cl-struct-package-desc jsfmt (0 2 0) "No description available." nil single "melpa-stable" nil nil nil])
  (json-mode [cl-struct-package-desc json-mode (1 1 0) "Major mode for editing JSON files" nil single "melpa-stable" nil ((:url . "https://github.com/joshwnj/json-mode")) nil])
  (json-reformat [cl-struct-package-desc json-reformat (0 0 5) "Reformatting tool for JSON" nil single "melpa-stable" nil ((:url . "https://github.com/gongo/json-reformat") (:keywords "json")) nil])
  (jsx-mode [cl-struct-package-desc jsx-mode (0 1 10) "major mode for JSX" nil single "melpa-stable" nil ((:url . "https://github.com/jsx/jsx-mode.el")) nil])
  (julia-mode [cl-struct-package-desc julia-mode (0 4 0) "Major mode for editing Julia source code" nil single "melpa-stable" nil ((:url . "https://github.com/JuliaLang/julia") (:keywords "languages")) nil])
  (jump [cl-struct-package-desc jump (2 3) "build functions which contextually jump between files" ((findr (0 7)) (inflections (1 1))) single "melpa-stable" nil ((:url . "http://github.com/eschulte/jump.el/tree/master") (:keywords "project" "convenience" "navigation")) nil])
  (jump-to-line [cl-struct-package-desc jump-to-line (0 2 0) "Jump to line number at point." nil single "melpa-stable" nil ((:keywords "jump" "line" "back" "file" "ruby" "csharp" "python" "perl")) nil])
  (jvm-mode [cl-struct-package-desc jvm-mode (0 2 0) "Monitor and manage your JVMs" ((dash (2 6 0)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/martintrojer/jvm-mode.el") (:keywords "convenience")) nil])
  (kaesar [cl-struct-package-desc kaesar (0 9 0) "Another AES algorithm encrypt/decrypt string with password." ((cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-kaesar/raw/master/kaesar.el") (:keywords "data")) nil])
  (kaesar-file [cl-struct-package-desc kaesar-file (0 9 0) "Encrypt/Decrypt file by AES with password." ((kaesar (0 1 1))) single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-kaesar/raw/master/cipher/kaesar-file.el") (:keywords "data" "files")) nil])
  (kaesar-mode [cl-struct-package-desc kaesar-mode (0 9 0) "Encrypt/Decrypt buffer by AES with password." ((kaesar (0 1 4)) (cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-kaesar/raw/master/cipher/kaesar-mode.el") (:keywords "data" "convenience")) nil])
  (kakapo-mode [cl-struct-package-desc kakapo-mode (1 2) "TABS (hard or soft) for indentation (leading whitespace), and SPACES for alignment." ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/listx/kakapo-mode") (:keywords "indentation")) nil])
  (karma [cl-struct-package-desc karma (0 1 0) "Karma Test Runner Emacs Integration" nil single "melpa-stable" nil ((:url . "http://github.com/tonini/karma.el") (:keywords "javascript" "js" "karma" "testing")) nil])
  (key-combo [cl-struct-package-desc key-combo (1 6) "map key sequence to commands" nil single "melpa-stable" nil ((:url . "https://github.com/uk-ar/key-combo") (:keywords "keyboard" "input")) nil])
  (key-seq [cl-struct-package-desc key-seq (1 0 1) "map pairs of sequentially pressed keys to commands" ((key-chord (0 6))) single "melpa-stable" nil ((:url . "http://github.com/vlevit/key-seq.el") (:keywords "convenience" "keyboard" "keybindings")) nil])
  (keychain-environment [cl-struct-package-desc keychain-environment (2 2 0) "load keychain environment variables" nil single "melpa-stable" nil ((:url . "https://github.com/tarsius/keychain-environment") (:keywords "gnupg" "pgp" "ssh")) nil])
  (keydef [cl-struct-package-desc keydef (1 15) "a simpler way to define keys, with kbd syntax" nil single "melpa-stable" nil ((:keywords "convenience" "lisp" "customization" "keyboard" "keys")) nil])
  (keyfreq [cl-struct-package-desc keyfreq (1 7) "track command frequencies" nil single "melpa-stable" nil nil nil])
  (keymap-utils [cl-struct-package-desc keymap-utils (0 5 2) "keymap utilities" ((cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/tarsius/keymap-utils") (:keywords "convenience" "extensions")) nil])
  (keyset [cl-struct-package-desc keyset (0 1 2) "A small library for structuring key bindings." ((dash (2 8 0)) (cl-lib (0 5))) single "melpa-stable" nil nil nil])
  (kibit-helper [cl-struct-package-desc kibit-helper (0 1 1) "Conveniently use the Kibit Leiningen plugin from Emacs" ((s (0 8)) (emacs (24))) single "melpa-stable" nil ((:url . "http://www.github.com/brunchboy/kibit-helper") (:keywords "languages" "clojure" "kibit")) nil])
  (kill-or-bury-alive [cl-struct-package-desc kill-or-bury-alive (0 1 1) "Precise control over buffer killing in Emacs" ((emacs (24 4)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/mrkkrp/kill-or-bury-alive") (:keywords "buffer" "killing" "convenience")) nil])
  (kill-ring-search [cl-struct-package-desc kill-ring-search (1 1) "incremental search for the kill ring" nil single "melpa-stable" nil ((:url . "http://nschum.de/src/emacs/kill-ring-search/") (:keywords "convenience" "matching")) nil])
  (killer [cl-struct-package-desc killer (0 2 2) "kill and delete text" nil single "melpa-stable" nil ((:url . "http://github.com/tarsius/killer") (:keywords "convenience")) nil])
  (kivy-mode [cl-struct-package-desc kivy-mode (1 9 0) "Emacs major mode for editing Kivy files" nil single "melpa-stable" nil nil nil])
  (know-your-http-well [cl-struct-package-desc know-your-http-well (0 2 0) "Look up the meaning of HTTP headers, methods, relations, status codes" nil tar "melpa-stable" nil nil nil])
  (kurecolor [cl-struct-package-desc kurecolor (1 2 2) "color editing goodies for Emacs" ((emacs (24 1)) (s (1 0))) single "melpa-stable" nil nil nil])
  (langtool [cl-struct-package-desc langtool (1 5 0) "Grammar check utility using LanguageTool" ((cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-langtool") (:keywords "docs")) nil])
  (latex-extra [cl-struct-package-desc latex-extra (1 11) "Adds several useful functionalities to LaTeX-mode." ((auctex (11 86 1)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "http://github.com/Bruce-Connor/latex-extra") (:keywords "tex")) nil])
  (ledger-mode [cl-struct-package-desc ledger-mode (3 1) "Helper code for use with the \"ledger\" command-line tool" nil tar "melpa-stable" nil nil nil])
  (lentic [cl-struct-package-desc lentic (0 10) "One buffer as a view of another" ((emacs (24 4)) (m-buffer (0 13)) (dash (2 5 0)) (f (0 17 2)) (s (1 9 0))) tar "melpa-stable" nil nil nil])
  (less-css-mode [cl-struct-package-desc less-css-mode (0 20) "Major mode for editing LESS CSS files (lesscss.org)" nil single "melpa-stable" nil ((:url . "https://github.com/purcell/less-css-mode") (:keywords "less" "css" "mode")) nil])
  (letcheck [cl-struct-package-desc letcheck (0 4) "Check the erroneous assignments in let forms" nil single "melpa-stable" nil ((:url . "https://github.com/Fuco1/letcheck") (:keywords "convenience")) nil])
  (lfe-mode [cl-struct-package-desc lfe-mode (0 10 0) "Lisp Flavoured Erlang mode" nil tar "melpa-stable" nil nil nil])
  (lice [cl-struct-package-desc lice (0 2) "License And Header Template" nil tar "melpa-stable" nil ((:url . "https://github.com/buzztaiki/lice-el") (:keywords "template" "license" "tools")) nil])
  (lingr [cl-struct-package-desc lingr (0 2) "Lingr Client for GNU Emacs" nil single "melpa-stable" nil ((:url . "http://github.com/lugecy/lingr-el") (:keywords "chat" "client" "internet")) nil])
  (link [cl-struct-package-desc link (1 10) "No description available." nil single "melpa-stable" nil nil nil])
  (linum-relative [cl-struct-package-desc linum-relative (0 4) "display relative line number in emacs." nil single "melpa-stable" nil ((:url . "http://github.com/coldnew/linum-relative") (:keywords "converience")) nil])
  (lispy [cl-struct-package-desc lispy (0 26 0) "vi-like Paredit" ((emacs (24 1)) (ace-window (0 8 0)) (hydra (0 12 1)) (iedit (0 97)) (multiple-cursors (1 3 0)) (swiper (0 2 0))) tar "melpa-stable" nil nil nil])
  (lispyscript-mode [cl-struct-package-desc lispyscript-mode (0 3 5) "Major mode for LispyScript code." nil single "melpa-stable" nil ((:url . "https://github.com/krisajenkins/lispyscript-mode") (:keywords "lisp" "languages")) nil])
  (list-unicode-display [cl-struct-package-desc list-unicode-display (0 1) "Search for and list unicode characters by name" ((cl-lib (0 5))) single "melpa-stable" nil ((:keywords "convenience")) nil])
  (list-utils [cl-struct-package-desc list-utils (0 4 2) "List-manipulation utility functions" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/list-utils") (:keywords "extensions")) nil])
  (lit-mode [cl-struct-package-desc lit-mode (0 1 1) "Major mode for lit" nil single "melpa-stable" nil ((:keywords "languages" "tools")) nil])
  (literate-coffee-mode [cl-struct-package-desc literate-coffee-mode (0 4) "major-mode for Literate CoffeeScript" ((coffee-mode (0 5 0))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-literate-coffee-mode")) nil])
  (live-code-talks [cl-struct-package-desc live-code-talks (0 2 1) "Support for slides with live code in them" ((emacs (24)) (cl-lib (0 5)) (narrowed-page-navigation (0 1))) single "melpa-stable" nil ((:keywords "docs" "multimedia")) nil])
  (load-relative [cl-struct-package-desc load-relative (1 0) "relative file load (within a multi-file Emacs package)" nil tar "melpa-stable" nil ((:url . "http://github.com/rocky/emacs-load-relative") (:keywords "internal")) nil])
  (loc-changes [cl-struct-package-desc loc-changes (1 1) "Helps users and programs keep track of positions even after buffer changes." nil single "melpa-stable" nil ((:url . "http://github.com/rocky/emacs-loc-changes")) nil])
  (log4e [cl-struct-package-desc log4e (0 3 0) "provide logging framework for elisp" nil single "melpa-stable" nil ((:url . "https://github.com/aki2o/log4e") (:keywords "log")) nil])
  (log4j-mode [cl-struct-package-desc log4j-mode (1 3) "major mode for viewing log files" nil single "melpa-stable" nil ((:keywords "log" "log4j" "java")) nil])
  (logalimacs [cl-struct-package-desc logalimacs (1 0 0) "Front-end to logaling-command for Ruby gems" nil single "melpa-stable" nil ((:url . "https://github.com/logaling/logalimacs")) nil])
  (logito [cl-struct-package-desc logito (0 1) "logging library for Emacs" ((eieio (1 3))) single "melpa-stable" nil ((:keywords "lisp" "tool")) nil])
  (logview [cl-struct-package-desc logview (0 4 2) "Major mode for viewing log files" ((emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/doublep/logview") (:keywords "files" "tools")) nil])
  (love-minor-mode [cl-struct-package-desc love-minor-mode (1 1) "Minor mode for working on LÖVE projects" nil single "melpa-stable" nil ((:url . "https://github.com/ejmr/love-minor-mode")) nil])
  (lua-mode [cl-struct-package-desc lua-mode (20140514) "a major-mode for editing Lua scripts" nil single "melpa-stable" nil ((:url . "http://immerrr.github.com/lua-mode") (:keywords "languages" "processes" "tools")) nil])
  (m-buffer [cl-struct-package-desc m-buffer (0 12) "List-Oriented, Functional Buffer Manipulation" ((dash (2 8 0)) (emacs (24 3))) tar "melpa-stable" nil nil nil])
  (macro-math [cl-struct-package-desc macro-math (1 0) "in-buffer mathematical operations" nil single "melpa-stable" nil ((:url . "http://nschum.de/src/emacs/macro-math/") (:keywords "convenience")) nil])
  (macrostep [cl-struct-package-desc macrostep (0 8) "interactive macro stepper for Emacs Lisp" nil single "melpa-stable" nil ((:url . "https://github.com/joddie/macrostep") (:keywords "lisp" "languages" "macro" "debugging")) nil])
  (magit [cl-struct-package-desc magit (2 2 2) "A Git porcelain inside Emacs" ((emacs (24 4)) (async (1 4)) (dash (2 11 0)) (with-editor (2 2 2)) (git-commit (2 2 2)) (magit-popup (2 2 2))) tar "melpa-stable" nil ((:url . "https://github.com/magit/magit") (:keywords "git" "tools" "vc")) nil])
  (magit-annex [cl-struct-package-desc magit-annex (1 0 0) "Control git-annex from Magit" ((cl-lib (0 3)) (magit (1 2 0))) single "melpa-stable" nil ((:url . "https://github.com/kyleam/magit-annex") (:keywords "vc" "tools")) nil])
  (magit-filenotify [cl-struct-package-desc magit-filenotify (0 1) "Refresh status buffer when git tree changes" ((magit (1 3 0)) (emacs (24 4))) single "melpa-stable" nil ((:keywords "tools")) nil])
  (magit-find-file [cl-struct-package-desc magit-find-file (2 1 0) "completing-read over all files in Git" ((magit (2 1 0)) (dash (2 8 0))) single "melpa-stable" nil ((:url . "https://github.com/bradleywright/magit-find-file.el") (:keywords "git")) nil])
  (magit-gerrit [cl-struct-package-desc magit-gerrit (0 2) "Magit plugin for Gerrit Code Review" ((magit (2 1 0))) single "melpa-stable" nil ((:url . "https://github.com/terranpro/magit-gerrit")) nil])
  (magit-gh-pulls [cl-struct-package-desc magit-gh-pulls (0 5 2) "GitHub pull requests extension for Magit" ((emacs (24)) (gh (0 9 1)) (magit (2 1 0)) (pcache (0 2 3)) (s (1 6 1))) single "melpa-stable" nil ((:url . "https://github.com/sigma/magit-gh-pulls") (:keywords "git" "tools")) nil])
  (magit-gitflow [cl-struct-package-desc magit-gitflow (2 0 0) "gitflow extension for magit" ((magit (2 1 0))) single "melpa-stable" nil ((:url . "https://github.com/jtatarik/magit-gitflow") (:keywords "vc" "tools")) nil])
  (magit-popup [cl-struct-package-desc magit-popup (2 2 2) "Define prefix-infix-suffix command combos" ((emacs (24 4)) (async (1 4)) (dash (2 11 0))) tar "melpa-stable" nil ((:url . "https://github.com/magit/magit") (:keywords "bindings")) nil])
  (magit-stgit [cl-struct-package-desc magit-stgit (2 1 0) "StGit extension for Magit" ((cl-lib (0 5)) (magit (2 1 0))) single "melpa-stable" nil ((:keywords "vc" "tools")) nil])
  (magit-svn [cl-struct-package-desc magit-svn (2 1 0) "Git-Svn extension for Magit" ((cl-lib (0 5)) (magit (2 1 0))) single "melpa-stable" nil ((:keywords "vc" "tools")) nil])
  (magit-topgit [cl-struct-package-desc magit-topgit (2 1 0) "TopGit extension for Magit" ((cl-lib (0 5)) (magit (2 1 0))) single "melpa-stable" nil ((:keywords "vc" "tools")) nil])
  (magit-tramp [cl-struct-package-desc magit-tramp (0 1 0) "git method for TRAMP" ((magit (1 2 0))) single "melpa-stable" nil ((:url . "https://github.com/sigma/magit-tramp")) nil])
  (make-color [cl-struct-package-desc make-color (0 4) "Alternative to picking color - update fg/bg color by pressing r/g/b/... keys" nil single "melpa-stable" nil ((:url . "http://github.com/alezost/make-color.el") (:keywords "color")) nil])
  (makey [cl-struct-package-desc makey (0 3) "interactive commandline mode" ((cl-lib (0 2))) single "melpa-stable" nil nil nil])
  (malabar-mode [cl-struct-package-desc malabar-mode (20140303 946) "A better Java mode for Emacs" ((fringe-helper (1 0 1))) tar "melpa-stable" nil ((:url . "http://www.github.com/m0smith/malabar-mode") (:keywords "java" "maven" "language" "malabar")) nil])
  (malinka [cl-struct-package-desc malinka (0 3 1) "A C/C++ project configuration package for Emacs" ((s (1 9 0)) (dash (2 4 0)) (f (0 11 0)) (cl-lib (0 3)) (rtags (0 0)) (projectile (0 11 0))) single "melpa-stable" nil ((:url . "https://github.com/LefterisJP/malinka") (:keywords "c" "c++" "project-management")) nil])
  (mallard-mode [cl-struct-package-desc mallard-mode (0 3 0) "Major mode for editing Mallard files" nil tar "melpa-stable" nil ((:url . "https://github.com/jhradilek/emacs-mallard-mode") (:keywords "xml" "mallard")) nil])
  (map-progress [cl-struct-package-desc map-progress (0 5 0) "mapping macros that report progress" nil single "melpa-stable" nil ((:url . "https://github.com/tarsius/map-progress/") (:keywords "convenience")) nil])
  (map-regexp [cl-struct-package-desc map-regexp (0 3 0) "map over matches of a regular expression" ((cl-lib (0 2))) single "melpa-stable" nil ((:url . "https://github.com/tarsius/map-regexp") (:keywords "convenience")) nil])
  (marcopolo [cl-struct-package-desc marcopolo (0 3 0) "Emacs client for Docker API" ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) tar "melpa-stable" nil ((:url . "https://github.com/nlamirault/marcopolo") (:keywords "docker")) nil])
  (mark-tools [cl-struct-package-desc mark-tools (0 3) "Some simple tools to access the mark-ring in Emacs" nil single "melpa-stable" nil ((:url . "https://github.com/stsquad/emacs-mark-tools")) nil])
  (markdown-mode [cl-struct-package-desc markdown-mode (2 0) "Emacs Major mode for Markdown-formatted text files" nil single "melpa-stable" nil ((:url . "http://jblevins.org/projects/markdown-mode/") (:keywords "markdown" "github flavored markdown" "itex")) nil])
  (markdown-mode+ [cl-struct-package-desc markdown-mode+ (0 8) "extra functions for markdown-mode" ((markdown-mode (20111229))) tar "melpa-stable" nil ((:url . "http://github.com/milkypostman/markdown-mode+.el") (:keywords "markdown" "latex" "osx" "rtf")) nil])
  (markdown-toc [cl-struct-package-desc markdown-toc (0 0 8) "A simple TOC generator for markdown file" ((s (1 9 0)) (dash (2 11 0)) (markdown-mode (2 0))) tar "melpa-stable" nil nil nil])
  (markup-faces [cl-struct-package-desc markup-faces (1 0 0) "collection of faces for markup language modes" nil single "melpa-stable" nil ((:url . "https://github.com/sensorflo/markup-faces") (:keywords "wp" "faces")) nil])
  (marmalade [cl-struct-package-desc marmalade (0 0 4) "Elisp interface for the Emacs Lisp package server." ((furl (0 0 2))) single "melpa-stable" nil ((:url . "http://code.google.com/p/marmalade")) nil])
  (marshal [cl-struct-package-desc marshal (0 5 3) "eieio extension for automatic (un)marshalling" ((eieio (1 4)) (json (1 3))) single "melpa-stable" nil ((:url . "https://github.com/sigma/marshal.el") (:keywords "eieio")) nil])
  (maven-test-mode [cl-struct-package-desc maven-test-mode (0 1 5) "Utilities for navigating test files and running maven test tasks." ((s (1 9)) (emacs (24))) single "melpa-stable" nil ((:url . "http://github.com/rranelli/maven-test-mode") (:keywords "java" "maven" "test")) nil])
  (maxframe [cl-struct-package-desc maxframe (0 5) "No description available." nil single "melpa-stable" nil nil nil])
  (mbe [cl-struct-package-desc mbe (0 1) "Macros by Example" ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/ijp/mbe.el") (:keywords "tools" "macros")) nil])
  (mc-extras [cl-struct-package-desc mc-extras (1 2 1) "Extra functions for multiple-cursors mode." ((multiple-cursors (1 2 1))) tar "melpa-stable" nil ((:url . "https://github.com/knu/mc-extras.el") (:keywords "editing" "cursors")) nil])
  (mediawiki [cl-struct-package-desc mediawiki (2 2 5) "mediawiki frontend" nil single "melpa-stable" nil ((:url . "http://github.com/hexmode/mediawiki-el") (:keywords "mediawiki" "wikipedia" "network" "wiki")) nil])
  (mentor [cl-struct-package-desc mentor (0 1) "Control rtorrent from GNU Emacs" nil tar "melpa-stable" nil ((:keywords "bittorrent" "rtorrent")) nil])
  (merlin [cl-struct-package-desc merlin (2 2) "Mode for Merlin, an assistant for OCaml." nil tar "melpa-stable" nil ((:url . "http://github.com/the-lambda-church/merlin") (:keywords "ocaml" "languages")) nil])
  (metaweblog [cl-struct-package-desc metaweblog (0 1 1) "An emacs library to access metaweblog based weblogs" ((xml-rpc (1 6 8))) tar "melpa-stable" nil nil nil])
  (mew [cl-struct-package-desc mew (6 7) "Messaging in the Emacs World" nil tar "melpa-stable" nil nil nil])
  (mhc [cl-struct-package-desc mhc (1 0 4) "Message Harmonized Calendaring system." ((calfw (20150703))) tar "melpa-stable" nil ((:url . "http://www.quickhack.net/mhc") (:keywords "calendar")) nil])
  (migemo [cl-struct-package-desc migemo (1 9 1) "Japanese incremental search through dynamic pattern expansion" nil single "melpa-stable" nil ((:url . "https://github.com/emacs-jp/migemo")) nil])
  (milkode [cl-struct-package-desc milkode (0 4) "Command line search and direct jump with Milkode" nil single "melpa-stable" nil ((:keywords "milkode" "search" "grep" "jump" "keyword")) nil])
  (minibuffer-complete-cycle [cl-struct-package-desc minibuffer-complete-cycle (1 25 20130814) "Cycle through the *Completions* buffer" nil single "melpa-stable" nil ((:url . "https://github.com/knu/minibuffer-complete-cycle") (:keywords "completion")) nil])
  (minibuffer-cua [cl-struct-package-desc minibuffer-cua (1 0 0) "Make CUA mode's S-up/S-down work in minibuffer" nil single "melpa-stable" nil ((:url . "https://github.com/knu/minibuffer-cua.el") (:keywords "completion" "editing")) nil])
  (miniedit [cl-struct-package-desc miniedit (2 0) "Enhanced editing for minibuffer fields." nil single "melpa-stable" nil nil nil])
  (minimal-session-saver [cl-struct-package-desc minimal-session-saver (0 6 2) "Very lean session saver" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/minimal-session-saver") (:keywords "tools" "frames" "project")) nil])
  (minitest [cl-struct-package-desc minitest (0 8 0) "An Emacs mode for ruby minitest files" ((dash (1 0 0))) tar "melpa-stable" nil ((:url . "https://github.com/arthurnn/minitest-emacs")) nil])
  (mmm-mako [cl-struct-package-desc mmm-mako (1 1) "MMM submode class for Mako Templates" ((mmm-mode (0 4 8))) single "melpa-stable" nil ((:url . "https://bitbucket.org/pjenvey/mmm-mako")) nil])
  (mmm-mode [cl-struct-package-desc mmm-mode (0 5 4) "Allow Multiple Major Modes in a buffer" nil tar "melpa-stable" nil ((:url . "https://github.com/purcell/mmm-mode") (:keywords "convenience" "faces" "languages" "tools")) nil])
  (mmt [cl-struct-package-desc mmt (0 1 1) "Missing macro tools for Emacs Lisp" ((emacs (24 1)) (cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/mrkkrp/mmt") (:keywords "macro" "emacs-lisp")) nil])
  (mocker [cl-struct-package-desc mocker (0 3 1) "mocking framework for emacs" ((eieio (1 3)) (el-x (0 2 4))) single "melpa-stable" nil ((:keywords "lisp" "testing")) nil])
  (modalka [cl-struct-package-desc modalka (0 1 1) "Easily introduce native modal editing of your own design" ((emacs (24 4))) single "melpa-stable" nil ((:url . "https://github.com/mrkkrp/modalka") (:keywords "modal" "editing")) nil])
  (mode-icons [cl-struct-package-desc mode-icons (0 1 0) "Show icons for modes" nil tar "melpa-stable" nil ((:url . "http://ryuslash.org/projects/mode-icons.html") (:keywords "multimedia")) nil])
  (mode-line-debug [cl-struct-package-desc mode-line-debug (1 2 2) "show status of `debug-on-error' in the mode-line" nil single "melpa-stable" nil ((:url . "https://github.com/tarsius/mode-line-debug") (:keywords "convenience" "lisp")) nil])
  (monokai-theme [cl-struct-package-desc monokai-theme (1 0 0) "A fruity color theme for Emacs." nil single "melpa-stable" nil ((:url . "http://github.com/oneKelvinSmith/monokai-emacs")) nil])
  (monroe [cl-struct-package-desc monroe (0 2 0) "Yet another client for nREPL" nil single "melpa-stable" nil ((:url . "http://www.github.com/sanel/monroe") (:keywords "languages" "clojure" "nrepl" "lisp")) nil])
  (morlock [cl-struct-package-desc morlock (0 5 0) "more font-lock keywords for elisp" nil single "melpa-stable" nil ((:url . "http://github.com/tarsius/morlock") (:keywords "convenience")) nil])
  (move-dup [cl-struct-package-desc move-dup (0 2 1) "Eclipse-like moving and duplicating lines or rectangles." nil single "melpa-stable" nil ((:keywords "convenience" "wp")) nil])
  (mowedline [cl-struct-package-desc mowedline (0 2 8) "elisp utilities for using mowedline" nil single "melpa-stable" nil nil nil])
  (moz [cl-struct-package-desc moz (1 1 0) "Lets current buffer interact with inferior mozilla." nil single "melpa-stable" nil ((:url . "http://github.com/bard/mozrepl/raw/master/chrome/content/moz.el")) nil])
  (moz-controller [cl-struct-package-desc moz-controller (1 0) "Control Firefox from Emacs" ((moz (0))) single "melpa-stable" nil ((:url . "https://github.com/RenWenshan/emacs-moz-controller")) nil])
  (mpv [cl-struct-package-desc mpv (0 1 0) "control mpv for easy note-taking" ((cl-lib (0 5)) (emacs (24)) (json (1 3)) (names (0 5 4)) (org (8 0))) single "melpa-stable" nil ((:url . "https://github.com/kljohann/mpv.el") (:keywords "tools" "multimedia")) nil])
  (msvc [cl-struct-package-desc msvc (1 2 2) "Microsoft Visual C/C++ mode" ((emacs (24)) (cl-lib (0 5)) (cedet (1 0)) (ac-clang (1 2 0))) tar "melpa-stable" nil ((:url . "https://github.com/yaruopooner/msvc") (:keywords "languages" "completion" "syntax check" "mode" "intellisense")) nil])
  (mu4e-maildirs-extension [cl-struct-package-desc mu4e-maildirs-extension (0 8) "Show mu4e maildirs summary in mu4e-main-view" nil single "melpa-stable" nil ((:url . "http://github.com/agpchil/mu4e-maildirs-extension")) nil])
  (multi [cl-struct-package-desc multi (2 0 1) "Clojure-style multi-methods for emacs lisp" ((emacs (24))) single "melpa-stable" nil ((:url . "http://github.com/kurisuwhyte/emacs-multi") (:keywords "multimethod" "generic" "predicate" "dispatch")) nil])
  (multi-web-mode [cl-struct-package-desc multi-web-mode (0 2 1) "multiple major mode support for web editing" nil tar "melpa-stable" nil ((:keywords "convenience" "languages" "wp")) nil])
  (multiple-cursors [cl-struct-package-desc multiple-cursors (1 3 0) "Multiple cursors for Emacs." nil tar "melpa-stable" nil nil nil])
  (mustache-mode [cl-struct-package-desc mustache-mode (1 3) "A major mode for editing Mustache files." nil single "melpa-stable" nil nil nil])
  (mwim [cl-struct-package-desc mwim (0 2) "Move to the beginning/end of line or code" nil single "melpa-stable" nil ((:url . "https://github.com/alezost/mwim.el") (:keywords "convenience")) nil])
  (mykie [cl-struct-package-desc mykie (0 3 1) "Command multiplexer: Register multiple functions to a keybind" ((emacs (24 3)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/yuutayamada/mykie-el") (:keywords "emacs" "configuration" "keybind")) nil])
  (names [cl-struct-package-desc names (20150723 0) "Namespaces for emacs-lisp. Avoid name clobbering without hiding symbols." ((emacs (24 1)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "http://github.com/Bruce-Connor/names") (:keywords "extensions" "lisp")) nil])
  (narrow-reindent [cl-struct-package-desc narrow-reindent (0 2 0) "Defines a minor mode to left-align narrowed regions." ((emacs (24 4))) single "melpa-stable" nil ((:url . "https://github.com/emallson/narrow-reindent.el")) nil])
  (narrowed-page-navigation [cl-struct-package-desc narrowed-page-navigation (0 1 0) "A minor mode for showing one page at a time" ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:keywords "outlines")) nil])
  (nasm-mode [cl-struct-package-desc nasm-mode (1 0 1) "NASM x86 assembly major mode" ((emacs (24 3))) single "melpa-stable" nil ((:url . "https://github.com/skeeto/nasm-mode")) nil])
  (nav-flash [cl-struct-package-desc nav-flash (1 1 0) "Briefly highlight the current line" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/nav-flash") (:keywords "extensions" "navigation" "interface")) nil])
  (navi-mode [cl-struct-package-desc navi-mode (2 0) "major-mode for easy buffer-navigation" nil single "melpa-stable" nil ((:url . "https://github.com/tj64/navi")) nil])
  (navorski [cl-struct-package-desc navorski (0 2 7) "Helping you live in the terminal, like Viktor did." ((s (1 9 0)) (dash (1 5 0)) (multi-term (0 8 14))) single "melpa-stable" nil ((:keywords "terminal")) nil])
  (ncl-mode [cl-struct-package-desc ncl-mode (0 99 1) "Major Mode for editing NCL scripts and other goodies" ((emacs (24))) tar "melpa-stable" nil nil nil])
  (nemerle [cl-struct-package-desc nemerle (1 2) "major mode for editing nemerle programs" nil single "melpa-stable" nil ((:keywords "nemerle" "mode" "languages")) nil])
  (neotree [cl-struct-package-desc neotree (0 2 1) "A tree plugin like NerdTree for Vim" nil single "melpa-stable" nil ((:url . "https://github.com/jaypei/emacs-neotree")) nil])
  (nginx-mode [cl-struct-package-desc nginx-mode (1 1 4) "major mode for editing nginx config files" nil single "melpa-stable" nil ((:keywords "nginx")) nil])
  (ninja-mode [cl-struct-package-desc ninja-mode (1 6 0) "Major mode for editing .ninja files" ((emacs (24))) single "melpa-stable" nil nil nil])
  (nix-mode [cl-struct-package-desc nix-mode (1 10) "Major mode for editing Nix expressions" nil single "melpa-stable" nil ((:url . "https://github.com/NixOS/nix/tree/master/misc/emacs")) nil])
  (nixos-options [cl-struct-package-desc nixos-options (0 0 1) "Interface for browsing and completing NixOS options." ((emacs (24)) (json (1 4))) single "melpa-stable" nil ((:url . "http://www.github.com/travisbhartwell/nix-emacs/") (:keywords "unix")) nil])
  (nodejs-repl [cl-struct-package-desc nodejs-repl (0 0 2) "Run Node.js REPL" nil single "melpa-stable" nil nil nil])
  (nose [cl-struct-package-desc nose (0 1 1) "Easy Python test running in Emacs" nil single "melpa-stable" nil ((:keywords "nose" "python" "testing")) nil])
  (notmuch [cl-struct-package-desc notmuch (0 20 2) "No description available." nil tar "melpa-stable" nil nil nil])
  (notmuch-labeler [cl-struct-package-desc notmuch-labeler (0 1) "Improve notmuch way of displaying labels" ((notmuch (0))) tar "melpa-stable" nil ((:url . "https://github.com/DamienCassou/notmuch-labeler") (:keywords "emacs" "package" "elisp" "notmuch" "emails")) nil])
  (nrepl-sync [cl-struct-package-desc nrepl-sync (0 3 1) "connect to nrepl port and eval .sync.clj." ((cider (0 6))) single "melpa-stable" nil ((:url . "https://github.com/phillord/lein-sync")) nil])
  (nsis-mode [cl-struct-package-desc nsis-mode (0 44) "NSIS-mode" nil tar "melpa-stable" nil ((:url . "http://github.com/mlf176f2/nsis-mode") (:keywords "nsis")) nil])
  (nvm [cl-struct-package-desc nvm (0 2 0) "Manage Node versions within Emacs" ((s (1 8 0)) (dash (2 4 0)) (f (0 14 0)) (dash-functional (2 4 0))) single "melpa-stable" nil ((:url . "http://github.com/rejeep/nvm.el") (:keywords "node" "nvm")) nil])
  (o-blog [cl-struct-package-desc o-blog (2 0) "" nil tar "melpa-stable" nil ((:keywords "emacs")) nil])
  (ob-http [cl-struct-package-desc ob-http (0 0 1) "http request in org-mode babel" ((s (1 9 0))) tar "melpa-stable" nil ((:url . "http://github.com/zweifisch/ob-http")) nil])
  (ob-sml [cl-struct-package-desc ob-sml (0 2) "org-babel functions for template evaluation" ((sml-mode (6 4))) single "melpa-stable" nil ((:url . "http://orgmode.org") (:keywords "literate programming" "reproducible research")) nil])
  (ob-translate [cl-struct-package-desc ob-translate (0 1 2) "Translation of text blocks in org-mode." ((google-translate (0 4)) (org (8))) single "melpa-stable" nil ((:url . "https://github.com/krisajenkins/ob-translate") (:keywords "org" "babel" "translate" "translation")) nil])
  (ocodo-svg-modelines [cl-struct-package-desc ocodo-svg-modelines (0 1 4) "A collection of beautiful SVG modelines" ((svg-mode-line-themes (0))) tar "melpa-stable" nil nil nil])
  (ocp-indent [cl-struct-package-desc ocp-indent (1 5 1) "automatic indentation with ocp-indent" nil single "melpa-stable" nil ((:url . "http://www.typerex.org/ocp-indent.html") (:keywords "ocaml" "languages")) nil])
  (octicons [cl-struct-package-desc octicons (0 1) "octicons utility" ((cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-octicons")) nil])
  (octomacs [cl-struct-package-desc octomacs (0 0 1) "Octopress interface for Emacs" nil single "melpa-stable" nil ((:url . "http://technosorcery.net")) nil])
  (offlineimap [cl-struct-package-desc offlineimap (1) "Run OfflineIMAP from Emacs" nil single "melpa-stable" nil ((:url . "http://julien.danjou.info/offlineimap-el.html")) nil])
  (olivetti [cl-struct-package-desc olivetti (1 2 0) "Minor mode for a nice writing environment" nil single "melpa-stable" nil ((:keywords "wp")) nil])
  (omni-kill [cl-struct-package-desc omni-kill (0 2 3) "Kill all the things" nil single "melpa-stable" nil ((:keywords "convenience" "editing" "tools")) nil])
  (omni-log [cl-struct-package-desc omni-log (0 1 2) "Logging utilities" ((emacs (24)) (ht (2 0)) (s (1 6 1)) (dash (1 8 0))) tar "melpa-stable" nil ((:url . "https://github.com/AdrieanKhisbe/omni-log.el") (:keywords "convenience" "languages" "tools")) nil])
  (omni-scratch [cl-struct-package-desc omni-scratch (0 1 1) "Easy and mode-specific draft buffers" nil single "melpa-stable" nil ((:keywords "convenience" "languages" "tools")) nil])
  (omni-tags [cl-struct-package-desc omni-tags (0 1 2) "Highlight and Actions for 'Tags'" ((pcre2el (1 7)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "http://github.com/AdrieanKhisbe/omni-tags.el") (:keywords "convenience")) nil])
  (omnisharp [cl-struct-package-desc omnisharp (3 9) "Omnicompletion (intellisense) and more for C#" ((json (1 2)) (flycheck (0 21)) (dash (20141201 2206)) (auto-complete (1 4)) (popup (0 5 1)) (csharp-mode (0 8 7)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/sp3ctum/omnisharp-emacs") (:keywords "csharp" "c#" "ide" "auto-complete" "intellisense")) nil])
  (opam [cl-struct-package-desc opam (0 1) "OPAM tools" ((emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/lunaryorn/opam.el") (:keywords "convenience")) nil])
  (operate-on-number [cl-struct-package-desc operate-on-number (1 1 0) "Operate on number at point with arithmetic functions" nil single "melpa-stable" nil ((:url . "https://github.com/knu/operate-on-number.el") (:keywords "editing")) nil])
  (org-ac [cl-struct-package-desc org-ac (0 0 2) "Some auto-complete sources for org-mode" ((auto-complete-pcmp (0 0 1)) (log4e (0 2 0)) (yaxception (0 1))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/org-ac") (:keywords "org" "completion")) nil])
  (org-agenda-property [cl-struct-package-desc org-agenda-property (1 3 1) "Display org properties in the agenda buffer." ((emacs (24 2))) single "melpa-stable" nil ((:url . "http://github.com/Bruce-Connor/org-agenda-property") (:keywords "calendar")) nil])
  (org-autolist [cl-struct-package-desc org-autolist (0 12) "Improved list management in org-mode" nil single "melpa-stable" nil ((:url . "https://github.com/calvinwyoung/org-autolist") (:keywords "lists" "checklists" "org-mode")) nil])
  (org-bullets [cl-struct-package-desc org-bullets (0 2 4) "Show bullets in org-mode as UTF-8 characters" nil single "melpa-stable" nil ((:url . "https://github.com/sabof/org-bullets")) nil])
  (org-elisp-help [cl-struct-package-desc org-elisp-help (0 1 0) "org links to emacs-lisp documentation" ((cl-lib (0 2)) (org (8 0))) single "melpa-stable" nil ((:url . "http://tarsius.github.com/org-elisp-help") (:keywords "org" "remember" "lisp")) nil])
  (org-gcal [cl-struct-package-desc org-gcal (0 2) "Org sync with Google Calendar" ((request-deferred (0 2 0)) (alert (1 1)) (emacs (24)) (cl-lib (0 5)) (org (8 2 4))) single "melpa-stable" nil ((:url . "https://github.com/myuhe/org-gcal.el") (:keywords "convenience")) nil])
  (org-if [cl-struct-package-desc org-if (0 2 0) "Interactive Fiction Authoring System for Org-Mode." nil tar "melpa-stable" nil nil nil])
  (org-journal [cl-struct-package-desc org-journal (1 10 2) "a simple org-mode based journaling mode" nil single "melpa-stable" nil ((:url . "http://github.com/bastibe/org-journal")) nil])
  (org-link-travis [cl-struct-package-desc org-link-travis (0 0 1) "Insert/Export the link of Travis CI on org-mode" ((org (7))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/org-link-travis") (:keywords "org")) nil])
  (org-linkany [cl-struct-package-desc org-linkany (0 0 2) "Insert link using anything.el/helm.el on org-mode" ((log4e (0 2 0)) (yaxception (0 1))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/org-linkany") (:keywords "org" "completion")) nil])
  (org-mac-iCal [cl-struct-package-desc org-mac-iCal (7 9 3 5) "Imports events from iCal.app to the Emacs diary" nil single "melpa-stable" nil ((:keywords "outlines" "calendar")) nil])
  (org-multiple-keymap [cl-struct-package-desc org-multiple-keymap (0 2) "Set keymap to elements, such as timestamp and priority." ((org (8 2 4)) (emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/myuhe/org-multiple-keymap.el") (:keywords "convenience" "org-mode")) nil])
  (org-outlook [cl-struct-package-desc org-outlook (0 11) "Outlook org" nil tar "melpa-stable" nil ((:url . "https://github.com/mlf176f2/org-outlook.el") (:keywords "org-outlook")) nil])
  (org-page [cl-struct-package-desc org-page (0 41) "a static site generator based on org mode" ((ht (1 5)) (mustache (0 22)) (htmlize (1 47)) (org (8))) tar "melpa-stable" nil nil nil])
  (org-pdfview [cl-struct-package-desc org-pdfview (0 3) "Support for links to documents in pdfview mode" ((org (6 1)) (pdf-tools (0 4 0))) single "melpa-stable" nil ((:keywords "org" "pdf-view" "pdf-tools")) nil])
  (org-pomodoro [cl-struct-package-desc org-pomodoro (2 0 3) "Pomodoro implementation for org-mode." ((alert (0 5 10)) (cl-lib (0 5))) tar "melpa-stable" nil nil nil])
  (org-projectile [cl-struct-package-desc org-projectile (0 2 0) "Repository todo management for org-mode" ((projectile (0 11 0)) (dash (2 10 0))) single "melpa-stable" nil ((:url . "https://github.com/IvanMalison/org-projectile") (:keywords "org" "projectile" "todo")) nil])
  (org-protocol-jekyll [cl-struct-package-desc org-protocol-jekyll (0 1) "Jekyll's handler for org-protocol" nil single "melpa-stable" nil nil nil])
  (org-readme [cl-struct-package-desc org-readme (20130322 926) "Integrates Readme.org and Commentary/Change-logs." ((http-post-simple (1 0)) (yaoddmuse (0 1 1)) (header2 (21 0)) (lib-requires (21 0))) tar "melpa-stable" nil ((:url . "https://github.com/mlf176f2/org-readme") (:keywords "header2" "readme.org" "emacswiki" "git")) nil])
  (org-repo-todo [cl-struct-package-desc org-repo-todo (0 0 2) "Simple repository todo management with org-mode" nil single "melpa-stable" nil ((:url . "https://github.com/waymondo/org-repo-todo") (:keywords "convenience")) nil])
  (org-sync [cl-struct-package-desc org-sync (0 3 0) "Synchronize Org documents with External Issue Trackers" ((cl-lib (0 5)) (org (8 2)) (emacs (24))) tar "melpa-stable" nil ((:url . "https://github.com/arbox/org-sync") (:keywords "org" "synchronization" "issue tracking" "github" "redmine")) nil])
  (org-table-comment [cl-struct-package-desc org-table-comment (0 2 0) "Org table comment modes." nil single "melpa-stable" nil ((:url . "http://github.com/mlf176f2/org-table-comment.el") (:keywords "org-mode" "orgtbl")) nil])
  (org-toodledo [cl-struct-package-desc org-toodledo (2 1 0) "No description available." nil tar "melpa-stable" nil nil nil])
  (org-transform-tree-table [cl-struct-package-desc org-transform-tree-table (0 1 2) "Transform org-mode tree with properties to a table, and the other way around" ((dash (2 10 0)) (s (1 3 0))) single "melpa-stable" nil ((:url . "https://github.com/jplindstrom/emacs-org-transform-tree-table") (:keywords "org-mode" "table" "org-table" "tree" "csv" "convert")) nil])
  (org-trello [cl-struct-package-desc org-trello (0 7 5) "Minor mode to synchronize org-mode buffer and trello board" ((request-deferred (0 2 0)) (deferred (0 3 2)) (s (1 9 0)) (dash-functional (2 11 0)) (dash (2 11 0)) (emacs (24))) tar "melpa-stable" nil nil nil])
  (org2blog [cl-struct-package-desc org2blog (0 9 2) "Blog from Org mode to wordpress" ((org (8 1)) (xml-rpc (1 6 8)) (metaweblog (0 1))) tar "melpa-stable" nil nil nil])
  (org2jekyll [cl-struct-package-desc org2jekyll (0 1 8) "Minor mode to publish org-mode post to jekyll without specific yaml" ((dash-functional (2 11 0)) (s (1 9 0)) (deferred (0 3 1))) tar "melpa-stable" nil ((:url . "https://github.com/ardumont/org2jekyll") (:keywords "org-mode" "jekyll" "blog" "publish")) nil])
  (orgbox [cl-struct-package-desc orgbox (0 5 0) "Mailbox-like task scheduling Org." ((org (8 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/yasuhito/orgbox") (:keywords "org")) nil])
  (orglink [cl-struct-package-desc orglink (0 2 3) "use Org Mode links in other modes" ((dash (1 3 2)) (org (8 0))) single "melpa-stable" nil ((:url . "http://github.com/tarsius/orglink") (:keywords "hypertext")) nil])
  (osx-browse [cl-struct-package-desc osx-browse (0 8 8) "Web browsing helpers for OS X" ((string-utils (0 3 2)) (browse-url-dwim (0 6 6))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/osx-browse") (:keywords "hypermedia" "external")) nil])
  (osx-dictionary [cl-struct-package-desc osx-dictionary (0 2 1) "Interface for OSX Dictionary.app" ((cl-lib (0 5)) (chinese-word-at-point (0 1))) tar "melpa-stable" nil ((:url . "https://github.com/xuchunyang/osx-dictionary.el") (:keywords "mac" "dictionary")) nil])
  (osx-location [cl-struct-package-desc osx-location (0 4) "Watch and respond to changes in geographical location on OS X" nil tar "melpa-stable" nil nil nil])
  (osx-plist [cl-struct-package-desc osx-plist (1 0 0) "Apple plist file parser" nil single "melpa-stable" nil ((:keywords "convenience")) nil])
  (osx-trash [cl-struct-package-desc osx-trash (0 1 1) "System trash for OS X" ((emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/lunaryorn/osx-trash.el") (:keywords "files" "convenience" "tools" "unix")) nil])
  (outorg [cl-struct-package-desc outorg (2 0) "Org-style comment editing" nil single "melpa-stable" nil ((:url . "https://github.com/tj64/outorg")) nil])
  (outshine [cl-struct-package-desc outshine (2 0) "outline with outshine outshines outline" nil single "melpa-stable" nil ((:url . "https://github.com/tj64/outshine")) nil])
  (ov [cl-struct-package-desc ov (1 0 6) "Overlay library for Emacs Lisp" ((emacs (24 3))) single "melpa-stable" nil ((:url . "https://github.com/ShingoFukuyama/ov.el") (:keywords "overlay")) nil])
  (overseer [cl-struct-package-desc overseer (0 3 0) "Ert-runner Integration Into Emacs" ((emacs (24)) (dash (2 10 0)) (pkg-info (0 4))) single "melpa-stable" nil ((:url . "http://www.github.com/tonini/overseer.el")) nil])
  (owdriver [cl-struct-package-desc owdriver (0 0 6) "Quickly perform various actions on other windows" ((smartrep (0 0 3)) (log4e (0 2 0)) (yaxception (0 2 0))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/owdriver") (:keywords "convenience")) nil])
  (ox-ioslide [cl-struct-package-desc ox-ioslide (0 2) "Export org-mode to Google I/O HTML5 slide." ((emacs (24 1)) (org (8 0)) (cl-lib (0 5)) (f (0 17 2))) tar "melpa-stable" nil ((:url . "http://github.com/coldnew/org-ioslide") (:keywords "html" "presentation")) nil])
  (ox-pandoc [cl-struct-package-desc ox-pandoc (1 150707) "org exporter for pandoc." ((org (8 2)) (emacs (24)) (dash (2 8)) (ht (2 0))) single "melpa-stable" nil ((:url . "https://github.com/kawabata/ox-pandoc") (:keywords "tools")) nil])
  (ox-twbs [cl-struct-package-desc ox-twbs (1 0 3) "Bootstrap compatible HTML Back-End for Org" nil single "melpa-stable" nil ((:url . "https://github.com/marsmining/ox-twbs") (:keywords "org" "html" "publish" "twitter" "bootstrap")) nil])
  (pabbrev [cl-struct-package-desc pabbrev (4 1) "Predictive abbreviation expansion" nil single "melpa-stable" nil nil nil])
  (package+ [cl-struct-package-desc package+ (1 1 0) "Extensions for the package library." nil single "melpa-stable" nil ((:url . "TBA") (:keywords "extensions" "tools")) nil])
  (package-safe-delete [cl-struct-package-desc package-safe-delete (0 1 7) "Safely delete package.el packages" ((emacs (24)) (epl (0 7 -3))) single "melpa-stable" nil ((:url . "https://github.com/Fanael/package-safe-delete")) nil])
  (package-utils [cl-struct-package-desc package-utils (0 3 0) "Extensions for package.el" ((epl (0 7 -3))) single "melpa-stable" nil ((:url . "https://github.com/Silex/package-utils") (:keywords "package" "convenience")) nil])
  (packed [cl-struct-package-desc packed (0 5 0) "package manager agnostic Emacs Lisp package utilities" ((cl-lib (0 5)) (dash (2 10 0))) single "melpa-stable" nil ((:url . "https://github.com/tarsius/packed") (:keywords "compile" "convenience" "lisp" "package" "library")) nil])
  (page-break-lines [cl-struct-package-desc page-break-lines (0 10) "Display ugly ^L page breaks as tidy horizontal lines" nil single "melpa-stable" nil ((:url . "https://github.com/purcell/page-break-lines") (:keywords "convenience" "faces")) nil])
  (pallet [cl-struct-package-desc pallet (0 9 2) "A package management tool for Emacs, using Cask." ((dash (2 10 0)) (s (1 9 0)) (f (0 17 1)) (cask (0 7))) tar "melpa-stable" nil nil nil])
  (pandoc-mode [cl-struct-package-desc pandoc-mode (2 13 3) "Minor mode for interacting with Pandoc" ((hydra (0 10 0)) (dash (2 10 0))) tar "melpa-stable" nil ((:keywords "text" "pandoc")) nil])
  (pangu-spacing [cl-struct-package-desc pangu-spacing (0 4) "Minor-mode to add space between Chinese and English characters." nil single "melpa-stable" nil ((:url . "http://github.com/coldnew/pangu-spacing")) nil])
  (paradox [cl-struct-package-desc paradox (2 3 5) "A modern Packages Menu. Colored, with package ratings, and customizable." ((emacs (24 4)) (seq (1 7)) (cl-lib (0 5)) (json (1 3)) (let-alist (1 0 3)) (spinner (1 4))) tar "melpa-stable" nil ((:url . "http://github.com/Malabarba/paradox") (:keywords "package" "packages")) nil])
  (paredit [cl-struct-package-desc paredit (24) "minor mode for editing parentheses" nil single "melpa-stable" nil ((:keywords "lisp")) nil])
  (paredit-everywhere [cl-struct-package-desc paredit-everywhere (0 4) "Enable some paredit features in non-lisp buffers" ((paredit (22))) single "melpa-stable" nil ((:keywords "languages" "convenience")) nil])
  (paren-face [cl-struct-package-desc paren-face (0 2 0) "a face for parentheses in lisp modes" nil single "melpa-stable" nil ((:url . "http://github.com/tarsius/paren-face")) nil])
  (parenface [cl-struct-package-desc parenface (1 0 3) "Provide a face for parens in lispy modes." nil tar "melpa-stable" nil nil nil])
  (parent-mode [cl-struct-package-desc parent-mode (2 3) "get major mode's parent modes" nil single "melpa-stable" nil ((:url . "https://github.com/Fanael/parent-mode")) nil])
  (parsebib [cl-struct-package-desc parsebib (1 0 5) "A library for parsing bib files" ((emacs (24 3))) single "melpa-stable" nil ((:keywords "text" "bibtex")) nil])
  (pass [cl-struct-package-desc pass (1 0) "Major mode for password-store.el" ((emacs (24)) (password-store (0 1)) (f (0 17))) single "melpa-stable" nil ((:keywords "password-store" "password" "keychain")) nil])
  (passthword [cl-struct-package-desc passthword (1 4) "Simple password manager" ((cl-lib (0 5))) single "melpa-stable" nil nil nil])
  (password-store [cl-struct-package-desc password-store (1 6 5) "Password store (pass) support" ((dash (1 5 0)) (f (0 11 0)) (s (1 9 0))) single "melpa-stable" nil ((:keywords "pass")) nil])
  (pastehub [cl-struct-package-desc pastehub (0 5 2) "A client for the PasteHub cloud service" nil single "melpa-stable" nil ((:url . "https://github.com/kiyoka/pastehub")) nil])
  (paxedit [cl-struct-package-desc paxedit (1 1 6) "Structured, Context Driven LISP Editing and Refactoring" ((cl-lib (0 5)) (paredit (23))) single "melpa-stable" nil ((:url . "https://github.com/promethial/paxedit") (:keywords "lisp" "refactoring" "context")) nil])
  (pcache [cl-struct-package-desc pcache (0 3 1) "persistent caching for Emacs" ((eieio (1 3))) single "melpa-stable" nil nil nil])
  (pcomplete-extension [cl-struct-package-desc pcomplete-extension (1 0) "additional completion for pcomplete" ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/thierryvolpiatto/pcomplete-extension")) nil])
  (pcsv [cl-struct-package-desc pcsv (1 3 6) "Parser of csv" nil single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-pcsv/raw/master/pcsv.el") (:keywords "data")) nil])
  (pdf-tools [cl-struct-package-desc pdf-tools (0 60) "Support library for PDF documents." ((emacs (24 3)) (tablist (0 60))) tar "melpa-stable" nil ((:keywords "files" "multimedia")) nil])
  (peg [cl-struct-package-desc peg (0 6) "Parsing Expression Grammars in Emacs Lisp" nil single "melpa-stable" nil nil nil])
  (per-buffer-theme [cl-struct-package-desc per-buffer-theme (1 2) "Change theme according to buffer name or major mode." ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://bitbucket.com/inigoserna/per-buffer-theme.el") (:keywords "themes")) nil])
  (persistent-scratch [cl-struct-package-desc persistent-scratch (0 2 2) "Preserve the scratch buffer across Emacs sessions" ((emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/Fanael/persistent-scratch")) nil])
  (persistent-soft [cl-struct-package-desc persistent-soft (0 8 10) "Persistent storage, returning nil on failure" ((pcache (0 3 1)) (list-utils (0 4 2))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/persistent-soft") (:keywords "data" "extensions")) nil])
  (persp-mode [cl-struct-package-desc persp-mode (1 1 2) "\"perspectives\" shared among frames + save/load - bugs." nil single "melpa-stable" nil ((:url . "https://github.com/Bad-ptr/persp-mode.el") (:keywords "perspectives" "session" "workspace" "persistence" "windows" "buffers" "convenience")) nil])
  (persp-projectile [cl-struct-package-desc persp-projectile (0 12 0) "Perspective integration with Projectile" ((perspective (1 9)) (projectile (0 11 0)) (cl-lib (0 3))) single "melpa-stable" nil ((:keywords "project" "convenience")) nil])
  (perspective [cl-struct-package-desc perspective (1 12) "switch between named \"perspectives\" of the editor" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "http://github.com/nex3/perspective-el") (:keywords "workspace" "convenience" "frames")) nil])
  (ph [cl-struct-package-desc ph (0 1 0) "A global minor mode for managing multiple projects." ((emacs (24 3))) tar "melpa-stable" nil nil nil])
  (phi-search-mc [cl-struct-package-desc phi-search-mc (2 2 1) "multiple-cursors extension for phi-search" ((phi-search (2 0 0)) (multiple-cursors (1 2 1))) single "melpa-stable" nil ((:url . "https://github.com/knu/phi-search-mc.el") (:keywords "search" "cursors")) nil])
  (php-auto-yasnippets [cl-struct-package-desc php-auto-yasnippets (2 3 1) "Creates snippets for PHP functions" ((php-mode (1 11)) (yasnippet (0 8 0))) tar "melpa-stable" nil ((:url . "https://github.com/ejmr/php-auto-yasnippets")) nil])
  (php-mode [cl-struct-package-desc php-mode (1 17 0) "Major mode for editing PHP code" nil tar "melpa-stable" nil ((:url . "https://github.com/ejmr/php-mode")) nil])
  (phpcbf [cl-struct-package-desc phpcbf (0 9 2) "Format PHP code in Emacs using PHP_CodeSniffer's phpcbf" ((s (1 9 0))) single "melpa-stable" nil ((:url . "https://github.com/nishimaki10/emacs-phpcbf") (:keywords "tools" "php")) nil])
  (phpunit [cl-struct-package-desc phpunit (0 7 0) "Launch PHP unit tests using phpunit" ((s (1 9 0)) (f (0 16 0)) (pkg-info (0 5))) single "melpa-stable" nil ((:url . "https://github.com/nlamirault/phpunit.el") (:keywords "php" "tests" "phpunit")) nil])
  (pinyin-search [cl-struct-package-desc pinyin-search (1 1 0) "Search Chinese by Pinyin" nil single "melpa-stable" nil ((:url . "https://github.com/xuchunyang/pinyin-search.el") (:keywords "chinese" "search")) nil])
  (pip-requirements [cl-struct-package-desc pip-requirements (0 4) "A major mode for editing pip requirements files." ((dash (2 8 0))) single "melpa-stable" nil nil nil])
  (pixiv-novel-mode [cl-struct-package-desc pixiv-novel-mode (0 0 3) "Major mode for pixiv novel" nil single "melpa-stable" nil ((:keywords "novel" "pixiv")) nil])
  (pkg-info [cl-struct-package-desc pkg-info (0 6) "Information about packages" ((epl (0 8))) single "melpa-stable" nil ((:url . "https://github.com/lunaryorn/pkg-info.el") (:keywords "convenience")) nil])
  (pkgbuild-mode [cl-struct-package-desc pkgbuild-mode (0 14) "Interface to the ArchLinux package manager" nil single "melpa-stable" nil nil nil])
  (plenv [cl-struct-package-desc plenv (0 32) "A plenv wrapper for Emacs" nil single "melpa-stable" nil ((:keywords "emacs" "perl")) nil])
  (plsense [cl-struct-package-desc plsense (0 4 7) "provide interface for PlSense that is a development tool for Perl." ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 2 0))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/emacs-plsense") (:keywords "perl" "completion")) nil])
  (plsense-direx [cl-struct-package-desc plsense-direx (0 2 0) "Perl Package Explorer" ((direx (0 1 -3)) (plsense (0 3 2)) (log4e (0 2 0)) (yaxception (0 3 2))) single "melpa-stable" nil ((:url . "https://github.com/aki2o/plsense-direx") (:keywords "perl" "convenience")) nil])
  (pophint [cl-struct-package-desc pophint (0 9 3) "Provide navigation using pop-up tips, like Firefox's Vimperator Hint Mode" ((popup (0 5 0)) (log4e (0 2 0)) (yaxception (0 1))) tar "melpa-stable" nil ((:url . "https://github.com/aki2o/emacs-pophint") (:keywords "popup")) nil])
  (popup [cl-struct-package-desc popup (0 5 3) "Visual Popup User Interface" ((cl-lib (0 3))) single "melpa-stable" nil ((:keywords "lisp")) nil])
  (popup-complete [cl-struct-package-desc popup-complete (0 2) "completion with popup" ((popup (0 5 0))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-popup-complete")) nil])
  (popwin [cl-struct-package-desc popwin (1 0 0) "Popup Window Manager." nil single "melpa-stable" nil ((:keywords "convenience")) nil])
  (pos-tip [cl-struct-package-desc pos-tip (0 4 6) "Show tooltip at point" nil single "melpa-stable" nil ((:keywords "tooltip")) nil])
  (powerline [cl-struct-package-desc powerline (2 2) "Rewrite of Powerline" ((cl-lib (0 2))) tar "melpa-stable" nil ((:url . "http://github.com/milkypostman/powerline/") (:keywords "mode-line")) nil])
  (ppd-sr-speedbar [cl-struct-package-desc ppd-sr-speedbar (0 0 4) "Sr Speedbar adaptor for project-persist-drawer." ((sr-speedbar (20140914 2339)) (project-persist-drawer (0 0 3))) tar "melpa-stable" nil nil nil])
  (pretty-mode [cl-struct-package-desc pretty-mode (2 0 3) "Redisplay parts of the buffer as pretty symbols." nil single "melpa-stable" nil ((:url . "https://github.com/akatov/pretty-mode") (:keywords "pretty" "unicode" "symbols")) nil])
  (processing-mode [cl-struct-package-desc processing-mode (1 0) "Major mode for Processing 2.0" ((yasnippet (0 8 0))) single "melpa-stable" nil ((:keywords "languages" "snippets")) nil])
  (prodigy [cl-struct-package-desc prodigy (0 6 0) "Manage external services from within Emacs" ((s (1 8 0)) (dash (2 4 0)) (f (0 14 0)) (emacs (24))) single "melpa-stable" nil ((:url . "http://github.com/rejeep/prodigy.el")) nil])
  (project-explorer [cl-struct-package-desc project-explorer (0 14 3) "A project explorer sidebar" ((cl-lib (0 3)) (es-lib (0 3)) (es-windows (0 1)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/sabof/project-explorer")) nil])
  (project-persist [cl-struct-package-desc project-persist (0 3 2) "A minor mode to allow loading and saving of project settings." nil tar "melpa-stable" nil nil nil])
  (project-persist-drawer [cl-struct-package-desc project-persist-drawer (0 0 3) "Use a project drawer with project-persist." ((project-persist (0 3))) tar "melpa-stable" nil nil nil])
  (project-root [cl-struct-package-desc project-root (0 7) "Define a project root and take actions based upon it." nil single "melpa-stable" nil nil nil])
  (projectile [cl-struct-package-desc projectile (0 12 0) "Manage and navigate projects in Emacs easily" ((dash (1 5 0)) (pkg-info (0 4))) single "melpa-stable" nil ((:url . "https://github.com/bbatsov/projectile") (:keywords "project" "convenience")) nil])
  (projectile-rails [cl-struct-package-desc projectile-rails (0 6 3) "Minor mode for Rails projects based on projectile-mode" ((projectile (0 12 0)) (inflections (1 1)) (inf-ruby (2 2 6)) (f (0 13 0)) (rake (0 3 2))) single "melpa-stable" nil ((:url . "https://github.com/asok/projectile-rails") (:keywords "rails" "projectile")) nil])
  (projekt [cl-struct-package-desc projekt (0 1) "some kind of staging for CVS" ((emacs (24))) single "melpa-stable" nil nil nil])
  (prop-menu [cl-struct-package-desc prop-menu (0 1 2) "Create and display a context menu based on text and overlay properties" ((emacs (24 3)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/david-christiansen/prop-menu-el") (:keywords "convenience")) nil])
  (psci [cl-struct-package-desc psci (0 0 6) "Major mode for purescript repl psci" ((purescript-mode (13 10)) (dash (2 9 0)) (s (1 9 0)) (f (0 17 1)) (deferred (0 3 2))) tar "melpa-stable" nil ((:url . "https://github.com/ardumont/emacs-psci") (:keywords "purescript" "psci" "repl" "major" "mode")) nil])
  (psession [cl-struct-package-desc psession (1 1) "Persistent save of elisp objects." ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/thierryvolpiatto/psession")) nil])
  (pt [cl-struct-package-desc pt (0 0 3) "A front-end for pt, The Platinum Searcher." nil single "melpa-stable" nil ((:url . "https://github.com/bling/pt.el") (:keywords "pt" "ack" "ag" "grep" "search")) nil])
  (puml-mode [cl-struct-package-desc puml-mode (0 6 1) "Major mode for PlantUML" nil single "melpa-stable" nil ((:keywords "uml" "plantuml" "ascii")) nil])
  (punctuality-logger [cl-struct-package-desc punctuality-logger (0 8) "Punctuality logger for Emacs" nil single "melpa-stable" nil ((:url . "https://gitlab.com/elzair/punctuality-logger") (:keywords "reminder" "calendar")) nil])
  (pungi [cl-struct-package-desc pungi (1 1) "Integrates jedi with virtualenv and buildout python environments" ((jedi (0 2 0 -3 2)) (pyvenv (1 5))) single "melpa-stable" nil ((:keywords "convenience")) nil])
  (puppet-mode [cl-struct-package-desc puppet-mode (0 3) "Major mode for Puppet manifests" ((emacs (24 1)) (cl-lib (0 5)) (pkg-info (0 4))) single "melpa-stable" nil ((:url . "https://github.com/lunaryorn/puppet-mode") (:keywords "languages")) nil])
  (purescript-mode [cl-struct-package-desc purescript-mode (13 10) "No description available." nil tar "melpa-stable" nil nil nil])
  (pushbullet [cl-struct-package-desc pushbullet (0 5 2) "Emacs client for the PushBullet Android app" ((grapnel (0 5 2)) (json (1 2))) single "melpa-stable" nil ((:url . "http://www.github.com/theanalyst/revolver") (:keywords "convenience")) nil])
  (py-autopep8 [cl-struct-package-desc py-autopep8 (0 7 0) "Use autopep8 to beautify a Python buffer" nil single "melpa-stable" nil ((:url . "http://paetzke.me/project/py-autopep8.el")) nil])
  (py-isort [cl-struct-package-desc py-isort (0 8) "Use isort to sort the imports in a Python buffer" nil single "melpa-stable" nil ((:url . "http://paetzke.me/project/py-isort.el")) nil])
  (py-yapf [cl-struct-package-desc py-yapf (0 2) "Use yapf to beautify a Python buffer" nil single "melpa-stable" nil ((:url . "https://github.com/paetzke/py-yapf.el")) nil])
  (pycarddavel [cl-struct-package-desc pycarddavel (1 0 1) "Integrate pycarddav" ((helm (1 7 0)) (emacs (24 0))) single "melpa-stable" nil ((:keywords "helm" "pyccarddav" "carddav" "message" "mu4e" "contacts")) nil])
  (pyenv-mode [cl-struct-package-desc pyenv-mode (0 1 0) "Integrate pyenv with python-mode" ((pythonic (0 1 0))) single "melpa-stable" nil ((:url . "https://github.com/proofit404/pyenv-mode")) nil])
  (python-environment [cl-struct-package-desc python-environment (0 0 2) "virtualenv API for Emacs Lisp" ((deferred (0 3 1))) tar "melpa-stable" nil ((:keywords "applications" "tools")) nil])
  (python-x [cl-struct-package-desc python-x (1 0) "python.el extras for interactive evaluation" ((python (0 24)) (folding (0))) single "melpa-stable" nil ((:url . "https://github.com/wavexx/python-x.el") (:keywords "python" "eval" "folding")) nil])
  (pythonic [cl-struct-package-desc pythonic (0 1 0) "Utility functions for writing pythonic emacs package." ((emacs (24)) (cl-lib (0 5)) (dash (2 11)) (s (1 9)) (f (0 17 2))) single "melpa-stable" nil ((:url . "https://github.com/proofit404/pythonic")) nil])
  (pyvenv [cl-struct-package-desc pyvenv (1 7) "Python virtual environment interface" nil single "melpa-stable" nil ((:url . "http://github.com/jorgenschaefer/pyvenv") (:keywords "python" "virtualenv" "tools")) nil])
  (qiita [cl-struct-package-desc qiita (0 0 1) "No description available." nil single "melpa-stable" nil nil nil])
  (qml-mode [cl-struct-package-desc qml-mode (0 1) "Major mode for editing QT Declarative (QML) code." nil single "melpa-stable" nil ((:url . "https://github.com/coldnew/qml-mode") (:keywords "qml" "qt" "qt declarative")) nil])
  (quasi-monochrome-theme [cl-struct-package-desc quasi-monochrome-theme (1 0) "High contrast quasi monochrome color theme" nil single "melpa-stable" nil ((:url . "https://github.com/lbolla/emacs-quasi-monochrome") (:keywords "color-theme" "monochrome" "high contrast")) nil])
  (quickrun [cl-struct-package-desc quickrun (2 2 6) "Run commands quickly" ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-quickrun")) nil])
  (r-autoyas [cl-struct-package-desc r-autoyas (0 28) "Provides automatically created yasnippets for R function argument lists." nil tar "melpa-stable" nil ((:url . "https://github.com/mlf176f2/r-autoyas.el") (:keywords "r" "yasnippet")) nil])
  (racer [cl-struct-package-desc racer (1 0 0) "Rust completion via racer with company" ((emacs (24 3)) (company (0 8 0)) (rust-mode (0 2 0))) single "melpa-stable" nil ((:url . "https://github.com/phildawes/racer") (:keywords "abbrev" "convenience" "matching" "rust" "tools")) nil])
  (rainbow-blocks [cl-struct-package-desc rainbow-blocks (1 0 0) "Block syntax highlighting for lisp code" nil single "melpa-stable" nil ((:url . "https://github.com/istib/rainbow-blocks")) nil])
  (rainbow-delimiters [cl-struct-package-desc rainbow-delimiters (2 1 1) "Highlight brackets according to their depth" nil single "melpa-stable" nil ((:url . "https://github.com/Fanael/rainbow-delimiters") (:keywords "faces" "convenience" "lisp" "tools")) nil])
  (rainbow-identifiers [cl-struct-package-desc rainbow-identifiers (0 2 2) "Highlight identifiers according to their names" ((emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/Fanael/rainbow-identifiers")) nil])
  (rake [cl-struct-package-desc rake (0 4 0) "Run rake commands" ((f (0 13 0)) (dash (1 5 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/asok/rake.el") (:keywords "rake" "ruby")) nil])
  (ranger [cl-struct-package-desc ranger (0 9 7) "Make dired more like ranger" ((emacs (24 4)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/ralesi/ranger") (:keywords "files" "convenience")) nil])
  (rase [cl-struct-package-desc rase (1 1) "Run At Sun Event daemon" nil single "melpa-stable" nil ((:url . "https://github.com/m00natic/rase/") (:keywords "solar" "sunrise" "sunset" "midday" "midnight")) nil])
  (rbenv [cl-struct-package-desc rbenv (0 0 3) "Emacs integration for rbenv" nil single "melpa-stable" nil ((:url . "https://github.com/senny/rbenv.el") (:keywords "ruby" "rbenv")) nil])
  (rcirc-styles [cl-struct-package-desc rcirc-styles (1 1) "support mIRC-style color and attribute codes" ((cl-lib (0 5))) single "melpa-stable" nil nil nil])
  (rdf-prefix [cl-struct-package-desc rdf-prefix (1 1) "Prefix lookup for RDF" nil single "melpa-stable" nil ((:keywords "convenience" "abbrev")) nil])
  (real-auto-save [cl-struct-package-desc real-auto-save (0 4) "enable real auto save" nil single "melpa-stable" nil nil nil])
  (realgud [cl-struct-package-desc realgud (1 2) "A modular front-end for interacting with external debuggers" ((load-relative (1 0)) (list-utils (0 4 2)) (loc-changes (1 1)) (test-simple (1 0))) tar "melpa-stable" nil ((:url . "http://github.com/rocky/emacs-dbgr")) nil])
  (recover-buffers [cl-struct-package-desc recover-buffers (1 0) "revisit all buffers from an auto-save file" nil tar "melpa-stable" nil nil nil])
  (rect+ [cl-struct-package-desc rect+ (1 0 10) "Extensions to rect.el" nil single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-rectplus") (:keywords "extensions" "data" "tools")) nil])
  (rectangle-utils [cl-struct-package-desc rectangle-utils (1 0) "Some useful rectangle functions." ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/thierryvolpiatto/rectangle-utils")) nil])
  (redpen-paragraph [cl-struct-package-desc redpen-paragraph (0 22) "RedPen interface." ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/karronoli/redpen-paragraph.el") (:keywords "document" "proofreading" "help")) nil])
  (relative-line-numbers [cl-struct-package-desc relative-line-numbers (0 3 2) "Display relative line numbers on the margin" ((emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/Fanael/relative-line-numbers")) nil])
  (relax [cl-struct-package-desc relax (0 2) "For browsing and interacting with CouchDB" ((json (1 2))) single "melpa-stable" nil ((:url . "http://github.com/technomancy/relax.el") (:keywords "database" "http")) nil])
  (repeatable-motion [cl-struct-package-desc repeatable-motion (0 1) "Make repeatable versions of motions" ((emacs (24))) tar "melpa-stable" nil ((:url . "https://github.com/willghatch/emacs-repeatable-motion") (:keywords "motion" "repeatable")) nil])
  (req-package [cl-struct-package-desc req-package (0 9) "A use-package wrapper for package runtime dependencies management" ((use-package (1 0)) (dash (2 7 0)) (log4e (0 2 0))) single "melpa-stable" nil ((:url . "https://github.com/edvorg/req-package") (:keywords "dotemacs" "startup" "speed" "config" "package")) nil])
  (request [cl-struct-package-desc request (0 1 0) "Compatible layer for URL request in Emacs" nil single "melpa-stable" nil nil nil])
  (request-deferred [cl-struct-package-desc request-deferred (0 1 0) "Wrap request.el by deferred" nil single "melpa-stable" nil nil nil])
  (requirejs [cl-struct-package-desc requirejs (1 1) "Requirejs import manipulation and source traversal." ((js2-mode (20150713)) (popup (0 5 3)) (s (1 9 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/requirejs-emacs") (:keywords "javascript" "requirejs")) nil])
  (reveal-in-osx-finder [cl-struct-package-desc reveal-in-osx-finder (0 3 3) "Reveal file associated with buffer in OS X Finder" nil single "melpa-stable" nil ((:url . "https://github.com/kaz-yos/reveal-in-osx-finder") (:keywords "os x" "finder")) nil])
  (reverse-theme [cl-struct-package-desc reverse-theme (0 3) "Reverse theme for Emacs" nil single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-reverse-theme")) nil])
  (rich-minority [cl-struct-package-desc rich-minority (1 0) "Clean-up and Beautify the list of minor-modes." ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "http://github.com/Malabarba/rich-minority") (:keywords "mode-line" "faces")) nil])
  (rigid-tabs [cl-struct-package-desc rigid-tabs (1 0) "Rigidify and adjust the visual alignment of TABs" ((emacs (24 3))) single "melpa-stable" nil ((:url . "https://github.com/wavexx/rigid-tabs.el") (:keywords "diff" "whitespace" "version control" "magit")) nil])
  (rinari [cl-struct-package-desc rinari (2 11) "Rinari Is Not A Rails IDE" ((ruby-mode (1 0)) (inf-ruby (2 2 5)) (ruby-compilation (0 16)) (jump (2 0))) single "melpa-stable" nil ((:url . "https://github.com/eschulte/rinari") (:keywords "ruby" "rails" "project" "convenience" "web")) nil])
  (rnc-mode [cl-struct-package-desc rnc-mode (1 0 6) "A major mode for editing RELAX NG Compact syntax." nil single "melpa-stable" nil nil nil])
  (roguel-ike [cl-struct-package-desc roguel-ike (0 1 0) "A coffee-break roguelike" ((popup (0 5 0))) tar "melpa-stable" nil nil nil])
  (rope-read-mode [cl-struct-package-desc rope-read-mode (0 3 1) "Rearrange lines to read text smoothly" nil single "melpa-stable" nil ((:url . "https://github.com/marcowahl/rope-read-mode") (:keywords "reading" "convenience")) nil])
  (rsense [cl-struct-package-desc rsense (0 3) "RSense client for Emacs" nil single "melpa-stable" nil ((:keywords "convenience")) nil])
  (rspec-mode [cl-struct-package-desc rspec-mode (1 11) "Enhance ruby-mode for RSpec" ((ruby-mode (1 0)) (cl-lib (0 4))) tar "melpa-stable" nil ((:url . "http://github.com/pezra/rspec-mode") (:keywords "rspec" "ruby")) nil])
  (rtags [cl-struct-package-desc rtags (2 0) "No description available." nil tar "melpa-stable" nil nil nil])
  (ruby-compilation [cl-struct-package-desc ruby-compilation (2 11) "run a ruby process in a compilation buffer" ((inf-ruby (2 2 1))) single "melpa-stable" nil ((:url . "https://github.com/eschulte/rinari") (:keywords "test" "convenience")) nil])
  (ruby-end [cl-struct-package-desc ruby-end (0 4 1) "Automatic insertion of end blocks for Ruby" nil single "melpa-stable" nil ((:url . "http://github.com/rejeep/ruby-end") (:keywords "speed" "convenience" "ruby")) nil])
  (ruby-hash-syntax [cl-struct-package-desc ruby-hash-syntax (0 4) "Toggle ruby hash syntax between classic and 1.9 styles" nil single "melpa-stable" nil ((:url . "https://github.com/purcell/ruby-hash-syntax") (:keywords "languages")) nil])
  (ruby-test-mode [cl-struct-package-desc ruby-test-mode (1 0) "Minor mode for Behaviour and Test Driven" nil single "melpa-stable" nil ((:keywords "ruby" "unit" "test" "rspec")) nil])
  (ruby-tools [cl-struct-package-desc ruby-tools (0 1 2) "Collection of handy functions for ruby-mode." nil tar "melpa-stable" nil nil nil])
  (rvm [cl-struct-package-desc rvm (1 4 0) "Emacs integration for rvm" nil single "melpa-stable" nil ((:url . "http://www.emacswiki.org/emacs/RvmEl") (:keywords "ruby" "rvm")) nil])
  (s [cl-struct-package-desc s (1 10 0) "The long lost Emacs string manipulation library." nil single "melpa-stable" nil ((:keywords "strings")) nil])
  (sackspace [cl-struct-package-desc sackspace (0 8 2) "A better backspace" nil single "melpa-stable" nil ((:url . "http://github.com/cofi/sackspace.el") (:keywords "delete" "convenience")) nil])
  (sage-shell-mode [cl-struct-package-desc sage-shell-mode (0 0 8 9) "A front-end for Sage Math" ((cl-lib (0 5)) (deferred (0 3 1))) tar "melpa-stable" nil ((:url . "https://github.com/stakemori/sage-shell-mode") (:keywords "sage" "math")) nil])
  (sass-mode [cl-struct-package-desc sass-mode (3 0 18) "Major mode for editing Sass files" ((haml-mode (3 0 15))) single "melpa-stable" nil ((:url . "http://github.com/nex3/haml/tree/master") (:keywords "markup" "language" "css")) nil])
  (sauron [cl-struct-package-desc sauron (0 10) "Track (erc/org/dbus/...) events and react to them." nil tar "melpa-stable" nil nil nil])
  (save-sexp [cl-struct-package-desc save-sexp (0 2 0) "save variables in files using setter forms like `setq'" nil tar "melpa-stable" nil ((:url . "https://github.com/tarsius/save-sexp") (:keywords "convenience")) nil])
  (sbt-mode [cl-struct-package-desc sbt-mode (0 1) "Major mode for sbt >= 0.12 with scala >= 2.9" ((scala-mode2 (0 22))) tar "melpa-stable" nil nil nil])
  (scala-mode2 [cl-struct-package-desc scala-mode2 (0 22) "Major mode for editing Scala >= 2.9" nil tar "melpa-stable" nil nil nil])
  (scala-outline-popup [cl-struct-package-desc scala-outline-popup (0 3 4) "scala file summary popup" ((dash (2 9 0)) (popup (0 5 2)) (scala-mode2 (0 22))) single "melpa-stable" nil ((:url . "https://github.com/ancane/scala-outline-popup.el") (:keywords "scala" "structure" "summary")) nil])
  (scss-mode [cl-struct-package-desc scss-mode (0 5 0) "Major mode for editing SCSS files" nil single "melpa-stable" nil ((:url . "https://github.com/antonj/scss-mode") (:keywords "scss" "css" "mode")) nil])
  (search-web [cl-struct-package-desc search-web (1 1) "Post web search queries using `browse-url'." nil single "melpa-stable" nil nil nil])
  (sekka [cl-struct-package-desc sekka (1 6 4) "A client for Sekka IME server" ((cl-lib (0 3)) (concurrent (0 3 1)) (popup (0 5 2))) single "melpa-stable" nil ((:url . "https://github.com/kiyoka/sekka") (:keywords "ime" "skk" "japanese")) nil])
  (seq [cl-struct-package-desc seq (1 9) "Sequence manipulation functions" nil single "melpa-stable" nil ((:keywords "sequences")) nil])
  (servant [cl-struct-package-desc servant (0 3 0) "ELPA server written in Emacs Lisp" ((s (1 8 0)) (dash (2 2 0)) (f (0 11 0)) (ansi (0 3 0)) (commander (0 5 0)) (epl (0 2)) (shut-up (0 2 1)) (web-server (0 0 1))) tar "melpa-stable" nil ((:url . "http://github.com/rejeep/servant.el") (:keywords "elpa" "server")) nil])
  (serverspec [cl-struct-package-desc serverspec (0 0 7) "Serverspec minor mode" ((dash (2 6 0)) (s (1 9 0)) (f (0 16 2)) (helm (1 6 1))) tar "melpa-stable" nil ((:url . "http://101000lab.org")) nil])
  (session [cl-struct-package-desc session (2 3 1) "use variables, registers and buffer places across sessions" nil single "melpa-stable" nil ((:url . "http://emacs-session.sourceforge.net/") (:keywords "session" "session management" "desktop" "data" "tools")) nil])
  (sexp-move [cl-struct-package-desc sexp-move (0 2 6) "Improved S-Expression Movement" nil single "melpa-stable" nil ((:url . "https://gitlab.com/elzair/sexp-move") (:keywords "sexp")) nil])
  (shackle [cl-struct-package-desc shackle (0 7 0) "Enforce rules for popups" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/wasamasa/shackle") (:keywords "convenience")) nil])
  (shampoo [cl-struct-package-desc shampoo (0 0 1) "Shampoo, a remote Smalltalk developemnt" nil tar "melpa-stable" nil nil nil])
  (shell-pop [cl-struct-package-desc shell-pop (0 61) "helps you to use shell easily on Emacs. Only one key action to work." ((emacs (24))) single "melpa-stable" nil ((:url . "http://github.com/kyagi/shell-pop-el") (:keywords "shell" "terminal" "tools")) nil])
  (shell-split-string [cl-struct-package-desc shell-split-string (0 1) "Split strings using shell-like syntax" nil single "melpa-stable" nil ((:url . "https://github.com/10sr/shell-split-string-el") (:keywords "utility" "library" "shell" "string")) nil])
  (shell-switcher [cl-struct-package-desc shell-switcher (1 0 0) "Provide fast switching between shell buffers." ((names (20141119))) tar "melpa-stable" nil nil nil])
  (shell-toggle [cl-struct-package-desc shell-toggle (1 3 1) "Toggle to and from the shell buffer" nil single "melpa-stable" nil ((:url . "https://github.com/knu/shell-toggle.el") (:keywords "processes")) nil])
  (shelldoc [cl-struct-package-desc shelldoc (0 0 5) "shell command editing support with man page." ((cl-lib (0 3)) (s (1 9 0))) single "melpa-stable" nil ((:url . "http://github.com/mhayashi1120/Emacs-shelldoc/raw/master/shelldoc.el") (:keywords "applications")) nil])
  (shelltest-mode [cl-struct-package-desc shelltest-mode (1 1) "Major mode for shelltestrunner" nil single "melpa-stable" nil ((:url . "https://github.com/rtrn/shelltest-mode") (:keywords "languages")) nil])
  (shm [cl-struct-package-desc shm (1 0 20) "Structured Haskell Mode" nil tar "melpa-stable" nil ((:keywords "development" "haskell" "structured")) nil])
  (shpec-mode [cl-struct-package-desc shpec-mode (0 1 0) "Minor mode for shpec specification" nil single "melpa-stable" nil ((:url . "http://github.com/shpec/shpec-mode") (:keywords "languages" "tools")) nil])
  (shrink-whitespace [cl-struct-package-desc shrink-whitespace (0 0 1) "Whitespace removal DWIM key" nil single "melpa-stable" nil ((:url . "https://github.com/jcpetkovich/shrink-whitespace.el") (:keywords "editing")) nil])
  (shut-up [cl-struct-package-desc shut-up (0 3 2) "Shut up would you!" ((cl-lib (0 3)) (emacs (24))) single "melpa-stable" nil ((:url . "http://github.com/rejeep/shut-up.el")) nil])
  (simple-httpd [cl-struct-package-desc simple-httpd (1 4 6) "pure elisp HTTP server" ((cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/skeeto/emacs-http-server")) nil])
  (simpleclip [cl-struct-package-desc simpleclip (1 0 0) "Simplified access to the system clipboard" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/simpleclip") (:keywords "convenience")) nil])
  (simplenote2 [cl-struct-package-desc simplenote2 (2 2 2) "Interact with simple-note.appspot.com" ((request-deferred (0 2 0))) single "melpa-stable" nil ((:keywords "simplenote")) nil])
  (simplezen [cl-struct-package-desc simplezen (0 1 1) "A simple subset of zencoding-mode for Emacs." nil single "melpa-stable" nil nil nil])
  (skeletor [cl-struct-package-desc skeletor (1 5 1) "Provides project skeletons for Emacs" ((s (1 7 0)) (f (0 14 0)) (dash (2 2 0)) (cl-lib (0 3)) (let-alist (1 0 3)) (emacs (24 1))) tar "melpa-stable" nil nil nil])
  (skewer-less [cl-struct-package-desc skewer-less (0 2) "Skewer support for live LESS stylesheet updates" ((skewer-mode (1 5 3))) single "melpa-stable" nil ((:keywords "languages" "tools")) nil])
  (skewer-mode [cl-struct-package-desc skewer-mode (1 6 2) "live browser JavaScript, CSS, and HTML interaction" ((simple-httpd (1 4 0)) (js2-mode (20090723)) (emacs (24))) tar "melpa-stable" nil nil nil])
  (slamhound [cl-struct-package-desc slamhound (1 5 4) "Rip Clojure namespaces apart and rebuild them." nil single "melpa-stable" nil ((:url . "https://github.com/technomancy/slamhound") (:keywords "tools" "lisp")) nil])
  (slideview [cl-struct-package-desc slideview (0 6 1) "File slideshow" nil single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-slideview/raw/master/slideview.el") (:keywords "files")) nil])
  (slim-mode [cl-struct-package-desc slim-mode (1 1) "Major mode for editing Slim files" nil single "melpa-stable" nil ((:url . "http://github.com/minad/emacs-slim") (:keywords "markup" "language")) nil])
  (slime [cl-struct-package-desc slime (2 15) "Superior Lisp Interaction Mode for Emacs" ((cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/slime/slime") (:keywords "languages" "lisp" "slime")) nil])
  (slime-company [cl-struct-package-desc slime-company (0 9 1) "slime completion backend for company mode" ((slime (2 3 2)) (company (0 7))) single "melpa-stable" nil ((:keywords "convenience" "lisp" "abbrev")) nil])
  (slime-ritz [cl-struct-package-desc slime-ritz (0 6 0) "slime extensions for ritz" nil single "melpa-stable" nil ((:url . "https://github.com/pallet/ritz") (:keywords "languages" "lisp" "slime")) nil])
  (slime-volleyball [cl-struct-package-desc slime-volleyball (1 1) "An SVG Slime Volleyball Game" nil tar "melpa-stable" nil ((:keywords "games")) nil])
  (sly [cl-struct-package-desc sly (2 14) "No description available." nil tar "melpa-stable" nil nil nil])
  (sly-company [cl-struct-package-desc sly-company (0 8) "sly completion backend for company mode" ((sly (1 0 0 -3)) (company (0 7)) (emacs (24 3))) single "melpa-stable" nil ((:keywords "convenience" "lisp" "abbrev")) nil])
  (smart-mode-line [cl-struct-package-desc smart-mode-line (2 9) "A color coded smart mode-line." ((emacs (24 3)) (rich-minority (0 1 1))) tar "melpa-stable" nil ((:url . "http://github.com/Malabarba/smart-mode-line") (:keywords "mode-line" "faces" "themes")) nil])
  (smart-mode-line-powerline-theme [cl-struct-package-desc smart-mode-line-powerline-theme (2 9) "smart-mode-line theme that mimics the powerline appearance." ((emacs (24 3)) (powerline (2 2)) (smart-mode-line (2 5))) single "melpa-stable" nil ((:url . "http://github.com/Bruce-Connor/smart-mode-line") (:keywords "mode-line" "faces" "themes")) nil])
  (smart-tabs-mode [cl-struct-package-desc smart-tabs-mode (1 0) "Intelligently indent with tabs, align with spaces!" nil single "melpa-stable" nil ((:url . "http://www.emacswiki.org/emacs/SmartTabs") (:keywords "languages")) nil])
  (smartparens [cl-struct-package-desc smartparens (1 6 3) "Automatic insertion, wrapping and paredit-like navigation with user defined pairs." ((cl-lib (0 3)) (dash (2 6 0))) tar "melpa-stable" nil nil nil])
  (smartrep [cl-struct-package-desc smartrep (1 0 0) "Support sequential operation which omitted prefix keys." nil single "melpa-stable" nil ((:url . "https://github.com/myuhe/smartrep.el") (:keywords "convenience")) nil])
  (smartscan [cl-struct-package-desc smartscan (0 2) "Jumps between other symbols found at point" nil single "melpa-stable" nil ((:keywords "extensions")) nil])
  (smeargle [cl-struct-package-desc smeargle (0 2) "Highlighting region by last updated time" ((cl-lib (0 5)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-smeargle")) nil])
  (smex [cl-struct-package-desc smex (3 0) "M-x interface with Ido-style fuzzy matching." nil single "melpa-stable" nil ((:url . "http://github.com/nonsequitur/smex/") (:keywords "convenience" "usability")) nil])
  (smooth-scrolling [cl-struct-package-desc smooth-scrolling (1 0 4) "Make emacs scroll smoothly" nil single "melpa-stable" nil ((:url . "http://github.com/aspiers/smooth-scrolling/") (:keywords "convenience")) nil])
  (solarized-theme [cl-struct-package-desc solarized-theme (1 2 2) "The Solarized color theme, ported to Emacs." ((dash (2 6 0))) tar "melpa-stable" nil nil nil])
  (sos [cl-struct-package-desc sos (0 1) "StackOverflow Search" ((org (7))) single "melpa-stable" nil ((:url . "https://github.com/omouse/emacs-sos") (:keywords "tools" "search" "questions")) nil])
  (sotlisp [cl-struct-package-desc sotlisp (1 4) "Write lisp at the speed of thought." ((emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/Malabarba/speed-of-thought-lisp") (:keywords "convenience" "lisp")) nil])
  (sound-wav [cl-struct-package-desc sound-wav (0 1) "Play wav file" ((deferred (0 3 1)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-sound-wav")) nil])
  (sourcemap [cl-struct-package-desc sourcemap (0 2) "Sourcemap parser" ((cl-lib (0 5)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-sourcemap")) nil])
  (sourcetalk [cl-struct-package-desc sourcetalk (1 2 0) "SourceTalk (http://sourcetalk.net) plugin for Emacs" ((request (0 2 0))) single "melpa-stable" nil ((:url . "https://github.com/malroc/sourcetalk_emacs") (:keywords "sourcetalk" "code" "discussion")) nil])
  (sparkline [cl-struct-package-desc sparkline (1 0 2) "Make sparkline images from a list of numbers" ((cl-lib (0 3))) single "melpa-stable" nil ((:keywords "extensions")) nil])
  (sparql-mode [cl-struct-package-desc sparql-mode (0 10 1) "Edit and interactively evaluate SPARQL queries." ((cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/ljos/sparql-mode")) nil])
  (speech-tagger [cl-struct-package-desc speech-tagger (0 0 0) "No description available." nil single "melpa-stable" nil nil nil])
  (sphinx-doc [cl-struct-package-desc sphinx-doc (0 1 0) "Sphinx friendly docstrings for Python functions" ((s (1 9 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/naiquevin/sphinx-doc.el") (:keywords "sphinx" "python")) nil])
  (splitjoin [cl-struct-package-desc splitjoin (0 1) "splitjoin" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-splitjoin")) nil])
  (spotify [cl-struct-package-desc spotify (0 3 2) "Control the spotify application from emacs" nil single "melpa-stable" nil ((:url . "https://github.com/remvee/spotify-el") (:keywords "convenience")) nil])
  (sprintly-mode [cl-struct-package-desc sprintly-mode (0 0 4) "Major mode for dealing with sprint.ly" ((furl (0 0 2))) single "melpa-stable" nil ((:url . "https://github.com/sprintly/sprintly-mode")) nil])
  (sqlup-mode [cl-struct-package-desc sqlup-mode (0 5 3) "Upcase SQL words for you" nil single "melpa-stable" nil ((:url . "https://github.com/trevoke/sqlup-mode.el") (:keywords "sql" "tools")) nil])
  (srefactor [cl-struct-package-desc srefactor (0 5) "A refactoring tool based on Semantic parser framework" ((emacs (24 4))) tar "melpa-stable" nil ((:url . "https://github.com/tuhdo/semantic-refactor") (:keywords "c" "languages" "tools")) nil])
  (stan-mode [cl-struct-package-desc stan-mode (7 1 0) "Major mode for editing Stan files" nil tar "melpa-stable" nil ((:url . "http://github.com/stan-dev/stan-mode") (:keywords "languanges")) nil])
  (stan-snippets [cl-struct-package-desc stan-snippets (7 1 0) "Yasnippets for Stan" ((stan-mode (7 1 0)) (yasnippet (0 8 0))) tar "melpa-stable" nil ((:url . "http://github.com/stan-dev/stan-mode") (:keywords "snippets")) nil])
  (starter-kit [cl-struct-package-desc starter-kit (2 0 3) "Saner defaults and goodies." ((paredit (22)) (idle-highlight-mode (1 1 1)) (find-file-in-project (3 0)) (smex (1 1 1)) (ido-ubiquitous (0 3)) (magit (0 8 1))) tar "melpa-stable" nil nil nil])
  (starter-kit-bindings [cl-struct-package-desc starter-kit-bindings (2 0 3) "Saner defaults and goodies: bindings" ((starter-kit (2 0 2))) single "melpa-stable" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience")) nil])
  (starter-kit-eshell [cl-struct-package-desc starter-kit-eshell (2 0 3) "Saner defaults and goodies: eshell tweaks" nil single "melpa-stable" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience")) nil])
  (starter-kit-js [cl-struct-package-desc starter-kit-js (2 0 3) "Saner defaults and goodies for Javascript" ((starter-kit (2 0 1))) single "melpa-stable" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience")) nil])
  (starter-kit-lisp [cl-struct-package-desc starter-kit-lisp (2 0 3) "Saner defaults and goodies for lisp languages" ((starter-kit (2 0 2)) (elisp-slime-nav (0 1))) single "melpa-stable" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience")) nil])
  (starter-kit-perl [cl-struct-package-desc starter-kit-perl (2 0 3) "Some helpful Perl code" nil single "melpa-stable" nil nil nil])
  (starter-kit-ruby [cl-struct-package-desc starter-kit-ruby (2 0 3) "Saner defaults and goodies for Ruby" ((inf-ruby (2 2 1)) (starter-kit (2 0 1))) single "melpa-stable" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience")) nil])
  (stash [cl-struct-package-desc stash (0 4 1) "lightweight persistent caching" nil single "melpa-stable" nil ((:url . "https://www.github.com/vermiculus/stash.el/") (:keywords "extensions" "data" "internal" "lisp")) nil])
  (stekene-theme [cl-struct-package-desc stekene-theme (1 0 15) "Low-contrast (except for strings) theme, in light and dark versions." ((emacs (24))) tar "melpa-stable" nil nil nil])
  (stgit [cl-struct-package-desc stgit (0 17 1) "No description available." nil single "melpa-stable" nil nil nil])
  (string-edit [cl-struct-package-desc string-edit (0 1 0) "Avoid escape nightmares by editing string in separate buffer" ((dash (1 2 0))) single "melpa-stable" nil nil nil])
  (string-utils [cl-struct-package-desc string-utils (0 3 2) "String-manipulation utilities" ((list-utils (0 4 2))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/string-utils") (:keywords "extensions")) nil])
  (stripe-buffer [cl-struct-package-desc stripe-buffer (0 2 5) "Use a different background for even and odd lines" ((cl-lib (1 0))) single "melpa-stable" nil ((:url . "https://github.com/sabof/stripe-buffer")) nil])
  (stumpwm-mode [cl-struct-package-desc stumpwm-mode (0 9 8) "special lisp mode for evaluating code into running stumpwm" nil single "melpa-stable" nil ((:keywords "comm" "lisp" "tools")) nil])
  (stylus-mode [cl-struct-package-desc stylus-mode (1 0 0) "Major mode for editing .jade files" ((sws-mode (0))) single "melpa-stable" nil ((:url . "https://github.com/brianc/jade-mode")) nil])
  (subshell-proc [cl-struct-package-desc subshell-proc (0 1) "Functions for working with comints" nil single "melpa-stable" nil ((:url . "https://github.com/andrewmains12/subshell-proc")) nil])
  (sudden-death [cl-struct-package-desc sudden-death (0 2) "Totsuzen-no-Shi" nil single "melpa-stable" nil ((:url . "https://github.com/yewton/sudden-death.el")) nil])
  (suomalainen-kalenteri [cl-struct-package-desc suomalainen-kalenteri (2014 6 15) "Finnish national and Christian holidays for calendar" nil tar "melpa-stable" nil nil nil])
  (svg-mode-line-themes [cl-struct-package-desc svg-mode-line-themes (0 1 3) "SVG-based themes for mode-line" ((xmlgen (0 4))) tar "melpa-stable" nil ((:url . "https://github.com/sabof/svg-mode-line-themes")) nil])
  (swift-mode [cl-struct-package-desc swift-mode (0 3 0) "Major-mode for Apple's Swift programming language." ((emacs (24 1))) single "melpa-stable" nil ((:keywords "languages" "swift")) nil])
  (swiper [cl-struct-package-desc swiper (0 6 0) "Isearch with an overview. Oh, man!" ((emacs (24 1))) tar "melpa-stable" nil ((:url . "https://github.com/abo-abo/swiper") (:keywords "matching")) nil])
  (swiper-helm [cl-struct-package-desc swiper-helm (0 1 0) "Helm version of Swiper." ((emacs (24 1)) (swiper (0 1 0)) (helm (1 5 3))) single "melpa-stable" nil ((:url . "https://github.com/abo-abo/swiper-helm") (:keywords "matching")) nil])
  (sws-mode [cl-struct-package-desc sws-mode (1 0 0) "(S)ignificant (W)hite(S)pace mode" nil single "melpa-stable" nil ((:url . "https://github.com/brianc/jade-mode")) nil])
  (sx [cl-struct-package-desc sx (0 4) "StackExchange client. Ask and answer questions on Stack Overflow, Super User, and the likes" ((emacs (24 1)) (cl-lib (0 5)) (json (1 3)) (markdown-mode (2 0)) (let-alist (1 0 3))) tar "melpa-stable" nil ((:url . "https://github.com/vermiculus/sx.el/") (:keywords "help" "hypermedia" "tools")) nil])
  (synosaurus [cl-struct-package-desc synosaurus (0 1 0) "An extensible thesaurus supporting lookup and substitution." ((cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/rootzlevel/synosaurus")) nil])
  (syntactic-sugar [cl-struct-package-desc syntactic-sugar (0 9 4) "Effect-free forms such as if/then/else" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/syntactic-sugar") (:keywords "extensions")) nil])
  (syntax-subword [cl-struct-package-desc syntax-subword (0 2) "make operations on words more fine-grained" nil single "melpa-stable" nil nil nil])
  (system-specific-settings [cl-struct-package-desc system-specific-settings (0 2) "Apply settings only on certain systems" nil single "melpa-stable" nil ((:url . "https://github.com/DarwinAwardWinner/emacs-system-specific-settings") (:keywords "configuration")) nil])
  (systemd [cl-struct-package-desc systemd (1 3 1) "Major mode for editing systemd units" ((emacs (24 4))) tar "melpa-stable" nil ((:keywords "tools" "unix")) nil])
  (ta [cl-struct-package-desc ta (1 5) "A tool to deal with Chinese homophonic characters" ((emacs (24 3)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "http://github.com/kuanyui/ta.el") (:keywords "tools")) nil])
  (tabbar-ruler [cl-struct-package-desc tabbar-ruler (0 45) "Pretty tabbar, autohide, use both tabbar/ruler" ((tabbar (2 0 1))) tar "melpa-stable" nil ((:url . "http://github.com/mlf176f2/tabbar-ruler.el") (:keywords "tabbar" "ruler mode" "menu" "tool bar.")) nil])
  (tablist [cl-struct-package-desc tablist (0 60) "Extended tabulated-list-mode" ((emacs (24 3))) tar "melpa-stable" nil ((:keywords "extensions" "lisp")) nil])
  (tabulated-list [cl-struct-package-desc tabulated-list (0) "generic major mode for tabulated lists." nil single "melpa-stable" nil ((:keywords "extensions" "lisp")) nil])
  (tagedit [cl-struct-package-desc tagedit (1 4 0) "Some paredit-like features for html-mode" ((s (1 3 1)) (dash (1 0 3))) single "melpa-stable" nil ((:keywords "convenience")) nil])
  (telephone-line [cl-struct-package-desc telephone-line (0 2) "Rewrite of Powerline" ((emacs (24 3)) (cl-lib (0 5)) (memoize (1 0 1)) (names (0 5)) (s (1 9 0)) (seq (1 8))) tar "melpa-stable" nil ((:url . "https://github.com/dbordak/telephone-line") (:keywords "mode-line")) nil])
  (term-alert [cl-struct-package-desc term-alert (1 0) "Get notifications when commands complete in the Emacs terminal emulator" ((term-cmd (1 0)) (alert (1 1))) single "melpa-stable" nil ((:url . "https://github.com/CallumCameron/term-alert") (:keywords "notifications" "processes")) nil])
  (term-cmd [cl-struct-package-desc term-cmd (1 0) "Send commands to Emacs from programs running under term.el" nil single "melpa-stable" nil ((:url . "https://github.com/CallumCameron/term-cmd") (:keywords "processes")) nil])
  (term-run [cl-struct-package-desc term-run (0 1 4) "Run arbitrary command in terminal buffer" nil single "melpa-stable" nil ((:url . "https://github.com/10sr/term-run-el") (:keywords "utility" "shell" "command" "term-mode")) nil])
  (tern [cl-struct-package-desc tern (0 15 0) "Tern-powered JavaScript integration" ((json (1 2)) (cl-lib (0 5)) (emacs (24))) single "melpa-stable" nil ((:url . "http://ternjs.net/")) nil])
  (tern-auto-complete [cl-struct-package-desc tern-auto-complete (0 15 0) "Tern Completion by auto-complete.el" ((tern (0 0 1)) (auto-complete (1 4)) (cl-lib (0 5)) (emacs (24))) single "melpa-stable" nil nil nil])
  (tern-django [cl-struct-package-desc tern-django (0 1 0) "Create tern projects for django applications." ((emacs (24)) (tern (0 0 1)) (f (0 17 1))) tar "melpa-stable" nil ((:url . "https://github.com/proofit404/tern-django")) nil])
  (terraform-mode [cl-struct-package-desc terraform-mode (0 3) "Major mode for terraform configuration file" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-terraform-mode")) nil])
  (test-case-mode [cl-struct-package-desc test-case-mode (1 0) "unit test front-end" ((fringe-helper (0 1 1))) single "melpa-stable" nil ((:url . "http://nschum.de/src/emacs/test-case-mode/") (:keywords "tools")) nil])
  (test-simple [cl-struct-package-desc test-simple (1 0) "Simple Unit Test Framework for Emacs Lisp" nil single "melpa-stable" nil ((:url . "http://github.com/rocky/emacs-test-simple") (:keywords "unit-test")) nil])
  (textmate [cl-struct-package-desc textmate (1) "No description available." nil single "melpa-stable" nil nil nil])
  (textmate-to-yas [cl-struct-package-desc textmate-to-yas (0 21) "Import Textmate macros into yasnippet syntax" nil tar "melpa-stable" nil ((:url . "https://github.com/mlf176f2/textmate-to-yas.el/") (:keywords "yasnippet" "textmate")) nil])
  (theme-changer [cl-struct-package-desc theme-changer (2 1 0) "Sunrise/Sunset Theme Changer for Emacs" nil single "melpa-stable" nil ((:url . "https://github.com/hadronzoo/theme-changer") (:keywords "color-theme" "deftheme" "solar" "sunrise" "sunset")) nil])
  (thrift [cl-struct-package-desc thrift (0 9 2) "Major mode for Apache Thrift files" nil single "melpa-stable" nil ((:keywords "files")) nil])
  (timer-revert [cl-struct-package-desc timer-revert (0 1) "minor mode to revert buffer for a given time interval." nil single "melpa-stable" nil ((:url . "http://github.com/yyr/timer-revert") (:keywords "timer" "revert" "auto-revert.")) nil])
  (timesheet [cl-struct-package-desc timesheet (0 3 0) "Timesheet management add-on for org-mode" ((s (1)) (org (7)) (auctex (11))) tar "melpa-stable" nil ((:url . "https://github.com/tmarble/timesheet.el") (:keywords "org" "timesheet")) nil])
  (tox [cl-struct-package-desc tox (0 3) "Launch current python test with tox" nil single "melpa-stable" nil ((:url . "https://github.com/chmouel/tox.el") (:keywords "convenience" "tox" "python" "tests")) nil])
  (traad [cl-struct-package-desc traad (0 4) "emacs interface to the traad refactoring server." nil tar "melpa-stable" nil ((:url . "https://github.com/abingham/traad")) nil])
  (tracking [cl-struct-package-desc tracking (2 0) "Buffer modification tracking" nil tar "melpa-stable" nil ((:url . "https://github.com/jorgenschaefer/circe/wiki/Tracking")) nil])
  (transmission [cl-struct-package-desc transmission (0 5) "Interface to a Transmission session" ((emacs (24 4)) (let-alist (1 0 3)) (seq (1 5))) single "melpa-stable" nil ((:keywords "comm" "tools")) nil])
  (travis [cl-struct-package-desc travis (0 6 0) "Emacs client for Travis" ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) tar "melpa-stable" nil ((:url . "https://github.com/nlamirault/emacs-travis") (:keywords "travis")) nil])
  (truthy [cl-struct-package-desc truthy (0 2 8) "Test the content of a value" ((list-utils (0 4 2))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/truthy") (:keywords "extensions")) nil])
  (tss [cl-struct-package-desc tss (0 6 0) "provide a interface for auto-complete.el/flymake.el on typescript-mode." ((auto-complete (1 4 0)) (json-mode (1 1 0)) (log4e (0 2 0)) (yaxception (0 1))) tar "melpa-stable" nil ((:url . "https://github.com/aki2o/emacs-tss") (:keywords "typescript" "completion")) nil])
  (ttrss [cl-struct-package-desc ttrss (1 7 5) "Tiny Tiny RSS elisp bindings" ((emacs (23 1))) single "melpa-stable" nil ((:url . "https://github.com/pedros/ttrss.el") (:keywords "news" "local")) nil])
  (tuareg [cl-struct-package-desc tuareg (2 0 9) "OCaml mode for Emacs." ((caml (3 12 0 1))) tar "melpa-stable" nil ((:url . "https://github.com/ocaml/tuareg") (:keywords "ocaml" "languages")) nil])
  (tumble [cl-struct-package-desc tumble (1 5) "an Tumblr mode for Emacs" nil single "melpa-stable" nil ((:keywords "tumblr")) nil])
  (tup-mode [cl-struct-package-desc tup-mode (1 3 1) "Major mode for editing files for Tup" nil single "melpa-stable" nil ((:url . "https://github.com/ejmr/tup-mode")) nil])
  (twilight-anti-bright-theme [cl-struct-package-desc twilight-anti-bright-theme (0 3 0) "A soothing Emacs 24 light-on-dark theme" nil single "melpa-stable" nil ((:url . "https://github.com/jimeh/twilight-anti-bright-theme.el") (:keywords "themes")) nil])
  (twittering-mode [cl-struct-package-desc twittering-mode (3 0 0) "Major mode for Twitter" nil single "melpa-stable" nil ((:url . "http://twmode.sf.net/") (:keywords "twitter" "web")) nil])
  (typed-clojure-mode [cl-struct-package-desc typed-clojure-mode (1 0 0) "Typed Clojure minor mode for Emacs" ((clojure-mode (2 1 1)) (cider (0 5 0))) single "melpa-stable" nil ((:url . "https://github.com/typedclojure/typed-clojure-mode")) nil])
  (typo [cl-struct-package-desc typo (1 1) "Minor mode for typographic editing" nil single "melpa-stable" nil ((:url . "https://github.com/jorgenschaefer/typoel") (:keywords "convenience" "wp")) nil])
  (ubuntu-theme [cl-struct-package-desc ubuntu-theme (4 2) "A theme inspired by the default terminal colors in Ubuntu" nil single "melpa-stable" nil ((:url . "http://github.com/rocher/ubuntu-theme")) nil])
  (ucs-utils [cl-struct-package-desc ucs-utils (0 8 4) "Utilities for Unicode characters" ((persistent-soft (0 8 8)) (pcache (0 2 3)) (list-utils (0 4 2))) tar "melpa-stable" nil ((:url . "http://github.com/rolandwalker/ucs-utils") (:keywords "i18n" "extensions")) nil])
  (undercover [cl-struct-package-desc undercover (0 5 0) "Test coverage library for Emacs" ((emacs (24)) (dash (2 0 0)) (shut-up (0 3 2))) single "melpa-stable" nil ((:url . "https://github.com/sviridov/undercover.el") (:keywords "lisp" "tests" "coverage" "tools")) nil])
  (underwater-theme [cl-struct-package-desc underwater-theme (1 1 0) "A gentle, deep blue color theme" nil single "melpa-stable" nil ((:keywords "faces")) nil])
  (unfill [cl-struct-package-desc unfill (0 1) "The inverse of fill-paragraph and fill-region" nil single "melpa-stable" nil ((:keywords "utilities")) nil])
  (unicode-enbox [cl-struct-package-desc unicode-enbox (0 1 4) "Surround a string with box-drawing characters" ((string-utils (0 3 2)) (ucs-utils (0 7 6)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/unicode-enbox") (:keywords "extensions" "interface")) nil])
  (unicode-fonts [cl-struct-package-desc unicode-fonts (0 4 8) "Configure Unicode fonts" ((font-utils (0 7 8)) (ucs-utils (0 8 2)) (list-utils (0 4 2)) (persistent-soft (0 8 10)) (pcache (0 3 1))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/unicode-fonts") (:keywords "i18n" "faces" "frames" "wp" "interface")) nil])
  (unicode-progress-reporter [cl-struct-package-desc unicode-progress-reporter (0 5 4) "Progress-reporter with fancy characters" ((emacs (24 1 0)) (ucs-utils (0 7 6)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/unicode-progress-reporter") (:keywords "interface")) nil])
  (unicode-whitespace [cl-struct-package-desc unicode-whitespace (0 2 4) "teach whitespace-mode about fancy characters" ((ucs-utils (0 7 6)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/unicode-whitespace") (:keywords "faces" "wp" "interface")) nil])
  (unkillable-scratch [cl-struct-package-desc unkillable-scratch (0 1) "Disallow buffers from being killed by regexp -- default is *scratch* buffer" nil single "melpa-stable" nil ((:keywords "scratch")) nil])
  (use-package [cl-struct-package-desc use-package (2 1) "A use-package declaration for simplifying your .emacs" ((bind-key (1 0)) (diminish (0 44))) single "melpa-stable" nil ((:url . "https://github.com/jwiegley/use-package") (:keywords "dotemacs" "startup" "speed" "config" "package")) nil])
  (utop [cl-struct-package-desc utop (1 18) "Universal toplevel for OCaml" ((emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/diml/utop") (:keywords "ocaml" "languages")) nil])
  (uzumaki [cl-struct-package-desc uzumaki (0 1) "A simple buffer cycler" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "http://github.com/geyslan/uzumaki") (:keywords "buffer" "convenience")) nil])
  (vagrant [cl-struct-package-desc vagrant (0 5 2) "Manage a vagrant box from emacs" nil single "melpa-stable" nil ((:url . "https://github.com/ottbot/vagrant.el") (:keywords "vagrant" "chef")) nil])
  (vbasense [cl-struct-package-desc vbasense (0 1 1) "provide a environment like Visual Basic Editor." ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 1))) tar "melpa-stable" nil ((:url . "https://github.com/aki2o/emacs-vbasense") (:keywords "vba" "completion")) nil])
  (vcomp [cl-struct-package-desc vcomp (0 3 1) "compare version strings" nil single "melpa-stable" nil ((:url . "https://github.com/tarsius/vcomp") (:keywords "versions")) nil])
  (vector-utils [cl-struct-package-desc vector-utils (0 1 2) "Vector-manipulation utility functions" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/vector-utils") (:keywords "extensions")) nil])
  (vim-region [cl-struct-package-desc vim-region (0 3 0) "Select region as vim" ((expand-region (20140127))) single "melpa-stable" nil ((:url . "https://github.com/ongaeshi/emacs-vim-region")) nil])
  (vimgolf [cl-struct-package-desc vimgolf (0 10 0) "VimGolf interface for the One True Editor" nil single "melpa-stable" nil ((:keywords "games" "vimgolf" "vim")) nil])
  (vimish-fold [cl-struct-package-desc vimish-fold (0 2 0) "Fold text like in Vim" ((emacs (24 4)) (cl-lib (0 5)) (f (0 18 0))) single "melpa-stable" nil ((:url . "https://github.com/mrkkrp/vimish-fold") (:keywords "convenience")) nil])
  (visual-fill-column [cl-struct-package-desc visual-fill-column (1 5) "fill-column for visual-line-mode" ((emacs (24 3))) single "melpa-stable" nil nil nil])
  (vlf [cl-struct-package-desc vlf (1 7) "View Large Files" nil tar "melpa-stable" nil ((:url . "https://github.com/m00natic/vlfi") (:keywords "large files" "utilities")) nil])
  (voca-builder [cl-struct-package-desc voca-builder (0 2 0) "No description available." nil single "melpa-stable" nil nil nil])
  (wacspace [cl-struct-package-desc wacspace (0 4 2) "The WACky WorkSPACE manager for emACS" ((dash (1 2 0)) (cl-lib (0 2))) tar "melpa-stable" nil nil nil])
  (wc-goal-mode [cl-struct-package-desc wc-goal-mode (2 1) "Running word count with goals (minor mode)" nil single "melpa-stable" nil ((:url . "https://github.com/bnbeckwith/wc-goal-mode")) nil])
  (wcheck-mode [cl-struct-package-desc wcheck-mode (2014 6 21) "General interface for text checkers" nil tar "melpa-stable" nil nil nil])
  (weather-metno [cl-struct-package-desc weather-metno (0 1 0) "Weather data from met.no in Emacs" ((emacs (24)) (cl-lib (0 3))) tar "melpa-stable" nil nil nil])
  (web-completion-data [cl-struct-package-desc web-completion-data (0 1) "Shared completion data for ac-html and company-web" nil tar "melpa-stable" nil ((:url . "https://github.com/osv/web-completion-data") (:keywords "html" "auto-complete" "company")) nil])
  (web-mode [cl-struct-package-desc web-mode (12 3) "major mode for editing web templates" nil single "melpa-stable" nil ((:url . "http://web-mode.org") (:keywords "languages")) nil])
  (weechat [cl-struct-package-desc weechat (0 2 2) "Chat via WeeChat's relay protocol in Emacs" ((s (1 3 1)) (cl-lib (0 2)) (emacs (24)) (tracking (1 2))) tar "melpa-stable" nil nil nil])
  (weibo [cl-struct-package-desc weibo (1 0) "No description available." nil tar "melpa-stable" nil nil nil])
  (which-key [cl-struct-package-desc which-key (0 6 2) "Display available keybindings in popup" ((emacs (24 3)) (s (1 9 0)) (dash (2 11 0))) single "melpa-stable" nil ((:url . "https://github.com/justbur/emacs-which-key")) nil])
  (whitaker [cl-struct-package-desc whitaker (0 3) "Comint interface for Whitaker's Words" ((dash (2 10 0))) single "melpa-stable" nil ((:keywords "processes")) nil])
  (whitespace-cleanup-mode [cl-struct-package-desc whitespace-cleanup-mode (0 10) "Intelligently call whitespace-cleanup on save" nil single "melpa-stable" nil ((:url . "https://github.com/purcell/whitespace-cleanup-mode") (:keywords "convenience")) nil])
  (whole-line-or-region [cl-struct-package-desc whole-line-or-region (1 3 1) "operate on current line if region undefined" nil single "melpa-stable" nil ((:keywords "kill" "yank" "cut" "copy" "paste" "whole" "lines")) nil])
  (wiki-nav [cl-struct-package-desc wiki-nav (1 0 2) "Simple file navigation using [[WikiStrings]]" ((button-lock (1 0 2)) (nav-flash (1 0 0))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/button-lock") (:keywords "mouse" "button" "hypermedia" "navigation")) nil])
  (win-switch [cl-struct-package-desc win-switch (1 1) "fast, dynamic bindings for window-switching/resizing" nil single "melpa-stable" nil ((:url . "http://www.stat.cmu.edu/~genovese/emacs/win-switch/") (:keywords "window" "switch" "key bindings" "ergonomic" "efficient")) nil])
  (window-end-visible [cl-struct-package-desc window-end-visible (0 1 0) "Find the last visible point in a window" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/window-end-visible") (:keywords "extensions")) nil])
  (window-layout [cl-struct-package-desc window-layout (1 3) "window layout manager" nil single "melpa-stable" nil ((:keywords "window" "layout")) nil])
  (window-numbering [cl-struct-package-desc window-numbering (1 1 2) "No description available." nil single "melpa-stable" nil nil nil])
  (window-purpose [cl-struct-package-desc window-purpose (1 4) "Purpose-based window management for Emacs" ((emacs (24)) (cl-lib (0 5)) (let-alist (1 0 3)) (imenu-list (0 1))) tar "melpa-stable" nil ((:url . "https://github.com/bmag/emacs-purpose") (:keywords "frames")) nil])
  (windsize [cl-struct-package-desc windsize (0 1) "Simple, intuitive window resizing" nil single "melpa-stable" nil ((:url . "http://github.com/grammati/windsize") (:keywords "window" "resizing" "convenience")) nil])
  (wisp-mode [cl-struct-package-desc wisp-mode (0 9 0) "Tools for wisp: the Whitespace-to-Lisp preprocessor" nil single "melpa-stable" nil ((:keywords "languages" "lisp")) nil])
  (wispjs-mode [cl-struct-package-desc wispjs-mode (0 2 0) "Major mode for Wisp code." ((clojure-mode (0))) single "melpa-stable" nil ((:url . "https://github.com/krisajenkins/wispjs-mode")) nil])
  (with-editor [cl-struct-package-desc with-editor (2 2 2) "Use the Emacsclient as $EDITOR" ((emacs (24 4)) (async (1 4)) (dash (2 11 0))) tar "melpa-stable" nil ((:url . "https://github.com/magit/magit") (:keywords "tools")) nil])
  (wn-mode [cl-struct-package-desc wn-mode (1 4) "numeric window switching shortcuts" ((emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/luismbo/wn-mode") (:keywords "buffers" "windows" "switching-windows")) nil])
  (wonderland [cl-struct-package-desc wonderland (0 1 1) "declarative configuration for Emacsen" ((dash (2 0 0)) (dash-functional (1 0 0)) (multi (2 0 0)) (emacs (24))) single "melpa-stable" nil ((:url . "http://github.com/kurisuwhyte/emacs-wonderland") (:keywords "configuration" "profile" "wonderland")) nil])
  (wordsmith-mode [cl-struct-package-desc wordsmith-mode (1 0 0) "Syntax analysis and NLP text-processing in Emacs (OSX-only)" nil single "melpa-stable" nil nil nil])
  (wrap-region [cl-struct-package-desc wrap-region (0 7 3) "Wrap text with punctation or tag" ((dash (1 0 3))) single "melpa-stable" nil ((:url . "http://github.com/rejeep/wrap-region") (:keywords "speed" "convenience")) nil])
  (writegood-mode [cl-struct-package-desc writegood-mode (2 0 2) "Polish up poor writing on the fly" nil single "melpa-stable" nil ((:url . "http://github.com/bnbeckwith/writegood-mode") (:keywords "writing" "weasel-words" "grammar")) nil])
  (writeroom-mode [cl-struct-package-desc writeroom-mode (2 10) "Minor mode for distraction-free writing" ((emacs (24 1)) (visual-fill-column (1 4))) tar "melpa-stable" nil ((:keywords "text")) nil])
  (ws-butler [cl-struct-package-desc ws-butler (0 3) "Unobtrusively remove trailing whitespace." nil single "melpa-stable" nil ((:url . "https://github.com/lewang/ws-butler")) nil])
  (wsd-mode [cl-struct-package-desc wsd-mode (0 4 0) "Emacs major-mode for www.websequencediagrams.com" nil tar "melpa-stable" nil ((:url . "https://github.com/josteink/wsd-mode") (:keywords "wsd" "diagrams" "design" "process" "modelling" "uml")) nil])
  (xbm-life [cl-struct-package-desc xbm-life (0 1) "A XBM version of Conway's Game of Life" nil single "melpa-stable" nil ((:url . "https://github.com/wasamasa/xbm-life") (:keywords "games")) nil])
  (xcscope [cl-struct-package-desc xcscope (1 1) "cscope interface for (X)Emacs" nil single "melpa-stable" nil ((:url . "https://github.com/dkogan/xcscope.el") (:keywords "languages" "c")) nil])
  (xterm-color [cl-struct-package-desc xterm-color (1 0) "ANSI & XTERM 256 color support" nil single "melpa-stable" nil nil nil])
  (xtest [cl-struct-package-desc xtest (1 1 0) "Simple Testing with Emacs & ERT" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/promethial/xtest") (:keywords "testing" "ert")) nil])
  (yafolding [cl-struct-package-desc yafolding (0 1 4) "Yet another folding extension for Emacs" nil single "melpa-stable" nil ((:keywords "folding")) nil])
  (yagist [cl-struct-package-desc yagist (0 8 12) "Yet Another Emacs integration for gist.github.com" ((cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/yagist.el") (:keywords "tools")) nil])
  (yaml-mode [cl-struct-package-desc yaml-mode (0 0 12) "Major mode for editing YAML files" nil single "melpa-stable" nil ((:keywords "data" "yaml")) nil])
  (yascroll [cl-struct-package-desc yascroll (0 1) "Yet Another Scroll Bar Mode" nil single "melpa-stable" nil ((:keywords "convenience")) nil])
  (yasnippet [cl-struct-package-desc yasnippet (0 9 0 1) "Yet another snippet extension for Emacs." nil tar "melpa-stable" nil ((:url . "http://github.com/capitaomorte/yasnippet") (:keywords "convenience" "emulation")) nil])
  (yatemplate [cl-struct-package-desc yatemplate (1 0) "File templates with yasnippet" ((yasnippet (0 8 1))) single "melpa-stable" nil ((:url . "https://github.com/mineo/yatemplate") (:keywords "files" "convenience")) nil])
  (yatex [cl-struct-package-desc yatex (0) "No description available." nil tar "melpa-stable" nil nil nil])
  (yaxception [cl-struct-package-desc yaxception (0 3 3) "Provide framework about exception like Java for Elisp" nil single "melpa-stable" nil ((:url . "https://github.com/aki2o/yaxception") (:keywords "exception" "error" "signal")) nil])
  (ycmd [cl-struct-package-desc ycmd (0 9) "emacs bindings to the ycmd completion server" ((emacs (24)) (f (0 17 1)) (dash (1 2 0)) (deferred (0 3 2)) (popup (0 5 0))) tar "melpa-stable" nil ((:url . "https://github.com/abingham/emacs-ycmd")) nil])
  (yesql-ghosts [cl-struct-package-desc yesql-ghosts (0 1 0) "Display ghostly yesql defqueries inline" ((s (1 9 0)) (dash (2 10 0)) (cider (0 8 0))) single "melpa-stable" nil nil nil])
  (youdao-dictionary [cl-struct-package-desc youdao-dictionary (0 3) "Youdao Dictionary interface for Emacs" ((popup (0 5 0)) (chinese-word-at-point (0 2)) (names (0 5)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/xuchunyang/youdao-dictionary.el") (:keywords "convenience" "chinese" "dictionary")) nil])
  (zenburn-theme [cl-struct-package-desc zenburn-theme (2 2) "A low contrast color theme for Emacs." nil single "melpa-stable" nil ((:url . "http://github.com/bbatsov/zenburn-emacs")) nil])
  (zerodark-theme [cl-struct-package-desc zerodark-theme (0 1) "A dark, medium contrast theme for Emacs" nil single "melpa-stable" nil ((:url . "https://github.com/NicolasPetton/zerodark-theme") (:keywords "themes")) nil])
  (zombie-trellys-mode [cl-struct-package-desc zombie-trellys-mode (0 2 1) "A minor mode for interaction with Zombie Trellys" ((emacs (24)) (cl-lib (0 5)) (haskell-mode (1 5))) single "melpa-stable" nil ((:keywords "languages")) nil])
  (zop-to-char [cl-struct-package-desc zop-to-char (1 0) "A replacement of zap-to-char." ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/thierryvolpiatto/zop-to-char")) nil])
  (zotelo [cl-struct-package-desc zotelo (1 3) "Manage Zotero collections from emacs" nil single "melpa-stable" nil ((:url . "https://github.com/vitoshka/zotelo") (:keywords "zotero" "emacs" "reftex" "bibtex" "mozrepl" "bibliography manager")) nil])
  (zygospore [cl-struct-package-desc zygospore (0 0 3) "reversible C-x 1 (delete-other-windows)" nil single "melpa-stable" nil ((:url . "https://github.com/louiskottmann/zygospore.el")) nil])
  (zzz-to-char [cl-struct-package-desc zzz-to-char (0 1 0) "Fancy version of `zap-to-char' command" ((emacs (24 4)) (cl-lib (0 5)) (avy (0 3 0))) single "melpa-stable" nil ((:url . "https://github.com/mrkkrp/zzz-to-char") (:keywords "convenience")) nil])
 )
