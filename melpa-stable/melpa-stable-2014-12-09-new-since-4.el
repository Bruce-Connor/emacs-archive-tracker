'(
  (ace-jump-buffer . [(0 3 1) ((ace-jump-mode (1 0)) (dash (2 4 0))) "fast buffer switching extension to `ace-jump-mode'" single ((:url . "https://github.com/waymondo/ace-jump-buffer")) "melpa-stable"])
  (ace-jump-zap . [(0 0 3) ((ace-jump-mode (1 0))) "Character zapping, `ace-jump-mode` style" single ((:url . "https://github.com/waymondo/ace-jump-zap") (:keywords "convenience" "tools" "extensions")) "melpa-stable"])
  (ace-link . [(0 1 0) ((ace-jump-mode (2 0)) (noflet (0 0 10))) "Quickly follow links using `ace-jump-mode'" single ((:url . "https://github.com/abo-abo/ace-link") (:keywords "convenience" "links")) "melpa-stable"])
  (aggressive-indent . [(0 3 3) ((emacs (24 1)) (names (0 5)) (cl-lib (0 5))) "Minor mode to aggressively keep your code always indented" single ((:url . "http://github.com/Bruce-Connor/aggressive-indent-mode") (:keywords "indent" "lisp" "maint" "tools")) "melpa-stable"])
  (alert . [(1 1) ((gntp (0 1))) "Growl-style notification system for Emacs" single ((:url . "https://github.com/jwiegley/alert") (:keywords "notification" "emacs" "message")) "melpa-stable"])
  (android-mode . [(0 3 3) nil "Minor mode for Android application development" single ((:url . "https://github.com/remvee/android-mode") (:keywords "tools" "processes")) "melpa-stable"])
  (artbollocks-mode . [(1 1 1) nil "A minor mode to guide art writers." single ((:url . "https://github.com/sachac/artbollocks-mode")) "melpa-stable"])
  (auto-complete-nxml . [(0 5 0) ((auto-complete (1 4))) "do completion by auto-complete.el on nXML-mode" single ((:url . "https://github.com/aki2o/auto-complete-nxml") (:keywords "completion" "html" "xml")) "melpa-stable"])
  (auto-complete-pcmp . [(0 0 2) ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 1))) "Provide auto-complete sources using pcomplete results" single ((:url . "https://github.com/aki2o/auto-complete-pcmp") (:keywords "completion")) "melpa-stable"])
  (bbdb- . [(0 0 2) ((bbdb (20140123 1541)) (log4e (0 2 0)) (yaxception (0 1))) "provide interface for more easily search/choice than BBDB." single ((:url . "https://github.com/aki2o/bbdb-") (:keywords "bbdb" "news" "mail")) "melpa-stable"])
  (boon . [(0 1) ((emacs (24 3)) (expand-region (0 10 0))) "Ergonomic Command Mode for Emacs." tar nil "melpa-stable"])
  (boxquote . [(1 22) nil "Quote text with a semi-box." single nil "melpa-stable"])
  (caskxy . [(0 0 5) ((log4e (0 2 0)) (yaxception (0 1))) "Control Cask in Emacs" single ((:url . "https://github.com/aki2o/caskxy") (:keywords "convenience")) "melpa-stable"])
  (checkbox . [(0 2 1) ((emacs (24)) (cl-lib (0 5))) "Quick manipulation of textual checkboxes" single ((:url . "http://github.com/camdez/checkbox.el") (:keywords "convenience")) "melpa-stable"])
  (csharp-mode . [(0 8 8) nil "C# mode derived mode" tar ((:url . "https://github.com/josteink/csharp-mode") (:keywords "c#" "languages" "oop" "mode")) "melpa-stable"])
  (ctxmenu . [(0 3 0) ((popup (20140205 103)) (log4e (0 2 0)) (yaxception (0 1))) "Provide a context menu like right-click." tar ((:url . "https://github.com/aki2o/emacs-ctxmenu") (:keywords "popup")) "melpa-stable"])
  (dired-imenu . [(0 5 0) nil "imenu binding for dired mode" single ((:url . "https://github.com/DamienCassou/dired-imenu") (:keywords "dired" "imenu")) "melpa-stable"])
  (direx-grep . [(0 1 0) ((direx (0 1 -3))) "Grep node of direx.el using incremental search like anything.el/helm.el" single ((:url . "https://github.com/aki2o/direx-grep") (:keywords "convenience")) "melpa-stable"])
  (dockerfile-mode . [(1 0) nil "Major mode for editing Docker's Dockerfiles" single nil "melpa-stable"])
  (e2wm-direx . [(0 0 5) ((e2wm (1 2)) (direx (0 1 -3))) "Plugin of e2wm.el for direx.el" single ((:url . "https://github.com/aki2o/e2wm-direx") (:keywords "tools" "window manager" "convenience")) "melpa-stable"])
  (e2wm-pkgex4pl . [(0 0 1) ((e2wm (1 2)) (plsense-direx (0 2 0))) "Plugin of e2wm.el for package explorer of Perl" single ((:url . "https://github.com/aki2o/e2wm-pkgex4pl") (:keywords "tools" "window manager" "perl")) "melpa-stable"])
  (e2wm-sww . [(0 0 2) ((e2wm (1 2))) "Plugin of e2wm.el to switch plugin quickly" single ((:url . "https://github.com/aki2o/e2wm-sww") (:keywords "tools" "window manager")) "melpa-stable"])
  (e2wm-term . [(0 0 5) ((e2wm (1 2)) (log4e (0 2 0)) (yaxception (0 3 2))) "Perspective of e2wm.el for work in terminal" single ((:url . "https://github.com/aki2o/e2wm-term") (:keywords "tools" "window manager")) "melpa-stable"])
  (edit-indirect . [(0 1 1) ((emacs (24 3))) "Edit regions in separate buffers" single ((:url . "https://github.com/Fanael/edit-indirect")) "melpa-stable"])
  (elscreen-mew . [(1 0 1) ((elscreen (20120413 807))) "ElScreen Add-On for Mew" single ((:url . "https://github.com/masutaka/elscreen-mew")) "melpa-stable"])
  (elscreen-persist . [(0 1 1) ((elscreen (1 4 6)) (revive (2 1 9))) "persist the elscreen across sessions" single ((:keywords "elscreen" "frames")) "melpa-stable"])
  (erefactor . [(0 6 13) nil "Emacs-Lisp refactoring utilities" single ((:url . "https://github.com/mhayashi1120/Emacs-erefactor/raw/master/erefactor.el") (:keywords "extensions" "tools" "maint")) "melpa-stable"])
  (es-lib . [(0 4) ((cl-lib (0 3))) "A collection of emacs utilities" tar ((:url . "https://github.com/sabof/es-lib")) "melpa-stable"])
  (ess-R-data-view . [(1 0) ((ctable (20130313 1743)) (popup (20130324 1305)) (ess (20130225 1754))) "Data viewer for GNU R" single ((:url . "https://github.com/myuhe/ess-R-data-view.el") (:keywords "convenience")) "melpa-stable"])
  (ess-R-object-popup . [(1 0) ((popup (20130117 1954)) (ess (20130225 1754))) "popup description of R object" single ((:url . "https://github.com/myuhe/ess-R-object-popup.el") (:keywords "convenience" "ess")) "melpa-stable"])
  (eval-in-repl . [(0 4 0) ((dash (0 0 0)) (paredit (0 0 0))) "Consistent ESS-like eval interface for various REPLs" tar nil "melpa-stable"])
  (evil-escape . [(1 6 0) ((emacs (24)) (evil (1 0 9)) (key-chord (0 6))) "Customizable key sequence to escape from insert state and everything else." single ((:url . "https://github.com/syl20bnr/evil-escape") (:keywords "convenience" "editing" "evil")) "melpa-stable"])
  (feature-mode . [(0 4) nil "Major mode for editing Gherkin (i.e. Cucumber) user stories" tar nil "melpa-stable"])
  (flycheck-ocaml . [(0 1) ((emacs (24 1)) (flycheck (0 22 -3 1)) (merlin (2 0))) "Flycheck: OCaml support" single ((:url . "https://github.com/flycheck/flycheck-ocaml") (:keywords "convenience" "tools" "languages")) "melpa-stable"])
  (genrnc . [(0 1 0) ((deferred (0 3 1)) (concurrent (0 3)) (log4e (0 2 0)) (yaxception (0 1))) "generate RELAX NG Compact Schema from RELAX NG Schema, XML Schema and DTD." tar ((:url . "https://github.com/aki2o/emacs-genrnc") (:keywords "xml")) "melpa-stable"])
  (ghc-imported-from . [(0 1 2) ((emacs (24 1))) "Haskell documentation lookup with ghc-imported-from" single ((:keywords "languages")) "melpa-stable"])
  (gitlab . [(0 1 0) ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) "Emacs client for Gitlab" tar ((:url . "https://github.com/nlamirault/emacs-gitlab") (:keywords "gitlab")) "melpa-stable"])
  (gnus-x-gm-raw . [(0 0 1) ((log4e (0 2 0)) (yaxception (0 1))) "Search mail of Gmail using X-GM-RAW as web interface" single ((:url . "https://github.com/aki2o/gnus-x-gm-raw") (:keywords "gnus")) "melpa-stable"])
  (go-errcheck . [(1 0 0) nil "errcheck integration for go-mode" single nil "melpa-stable"])
  (go-mode . [(1 0 0) nil "Major mode for the Go programming language" tar ((:url . "https://github.com/dominikh/go-mode.el") (:keywords "languages" "go")) "melpa-stable"])
  (gotham-theme . [(1 0) nil "A very dark Emacs color theme." single ((:url . "https://github.com/wasamasa/gotham-theme")) "melpa-stable"])
  (graphviz-dot-mode . [(0 4) nil "Mode for the dot-language used by graphviz (att)." single ((:url . "http://ppareit.github.com/graphviz-dot-mode/") (:keywords "mode" "dot" "dot-language" "dotlanguage" "graphviz" "graphs" "att")) "melpa-stable"])
  (guide-key . [(1 2 5) ((popwin (0 3 0))) "Guide the following key bindings automatically and dynamically" single ((:url . "https://github.com/kai2nenobu/guide-key") (:keywords "help" "convenience")) "melpa-stable"])
  (guide-key-tip . [(0 0 1) ((guide-key (1 2 3)) (pos-tip (0 4 5))) "Show guide-key.el hints using pos-tip.el" single ((:url . "https://github.com/aki2o/guide-key-tip") (:keywords "help" "convenience" "tooltip")) "melpa-stable"])
  (helm-ghc . [(0 1 0) ((emacs (24)) (cl-lib (0 5)) (helm (1 6 4)) (ghc (5 2 1 0))) "A Helm datasource for ghc-mod errors" single ((:keywords "languages" "helm")) "melpa-stable"])
  (helm-gitlab . [(0 1 0) ((s (1 9 0)) (dash (2 9 0)) (helm (1 0)) (gitlab (0))) "Helm interface to Gitlab" single ((:url . "https://github.com/nlamirault/emacs-gitlab") (:keywords "gitlab" "helm")) "melpa-stable"])
  (helm-hatena-bookmark . [(1 0 2) ((helm (1 5 6))) "Hatena::Bookmark helm.el interface" single ((:url . "https://github.com/masutaka/emacs-helm-hatena-bookmark")) "melpa-stable"])
  (hl-anything . [(0 0 7) ((emacs (24 3))) "Highlight symbols, selections, enclosing parens and more." single nil "melpa-stable"])
  (idomenu . [(0 1) nil "imenu tag selection with ido" single ((:url . "https://github.com/birkenfeld/idomenu") (:keywords "extensions" "convenience")) "melpa-stable"])
  (image-dired+ . [(0 5 4) nil "Image-dired extensions" single ((:url . "http://github.com/mhayashi1120/Emacs-image-diredx/raw/master/image-dired+.el") (:keywords "image-dired" "extensions")) "melpa-stable"])
  (inlineR . [(1 0) nil "insert Tag for inline image of R graphics" single ((:url . "https://github.com/myuhe/inlineR.el") (:keywords "convenience" "iimage.el" "cacoo.el")) "melpa-stable"])
  (json-reformat . [(0 0 1) nil "Reformatting tool for JSON" single ((:url . "https://github.com/gongo/json-reformat") (:keywords "json")) "melpa-stable"])
  (kakapo-mode . [(0 2) ((cl-lib (0 5))) "TABS (hard or soft) for indentation (leading whitespace), and SPACES for alignment." single ((:url . "https://github.com/listx/kakapo-mode") (:keywords "indentation")) "melpa-stable"])
  (karma . [(0 1 0) nil "Karma Test Runner Emacs Integration" single ((:url . "http://github.com/tonini/karma.el") (:keywords "javascript" "js" "karma" "testing")) "melpa-stable"])
  (keyfreq . [(1 5) nil "track command frequencies" single nil "melpa-stable"])
  (keyset . [(0 1 1) ((dash (2 8 0)) (cl-lib (0 5))) "A small library for structuring key bindings." single nil "melpa-stable"])
  (kurecolor . [(1 1) ((emacs (24 1)) (s (1 0))) "color editing goodies for Emacs" single nil "melpa-stable"])
  (log4e . [(0 2 0) nil "provide logging framework for elisp" single ((:url . "https://github.com/aki2o/log4e") (:keywords "log")) "melpa-stable"])
  (maven-test-mode . [(0 1 4) nil "No description available." single nil "melpa-stable"])
  (mbe . [(0 1) ((emacs (24)) (cl-lib (0 5))) "Macros by Example" single ((:url . "https://github.com/ijp/mbe.el") (:keywords "tools" "macros")) "melpa-stable"])
  (metaweblog . [(0 1 1) ((xml-rpc (1 6 8))) "An emacs library to access metaweblog based weblogs" tar nil "melpa-stable"])
  (monokai-theme . [(1 0 0) nil "A fruity color theme for Emacs." single ((:url . "http://github.com/oneKelvinSmith/monokai-emacs")) "melpa-stable"])
  (omnisharp . [(3 7) ((json (1 2)) (flycheck (0 21)) (dash (20141201 2206)) (auto-complete (1 4)) (popup (0 5 1)) (csharp-mode (0 8 7))) "Omnicompletion (intellisense) and more for C#" tar ((:url . "https://github.com/sp3ctum/omnisharp-emacs") (:keywords "csharp" "c#" "ide" "auto-complete" "intellisense")) "melpa-stable"])
  (org-ac . [(0 0 2) ((auto-complete-pcmp (0 0 1)) (log4e (0 2 0)) (yaxception (0 1))) "Some auto-complete sources for org-mode" single ((:url . "https://github.com/aki2o/org-ac") (:keywords "org" "completion")) "melpa-stable"])
  (org-link-travis . [(0 0 1) ((org (7))) "Insert/Export the link of Travis CI on org-mode" single ((:url . "https://github.com/aki2o/org-link-travis") (:keywords "org")) "melpa-stable"])
  (org-linkany . [(0 0 2) ((log4e (0 2 0)) (yaxception (0 1))) "Insert link using anything.el/helm.el on org-mode" single ((:url . "https://github.com/aki2o/org-linkany") (:keywords "org" "completion")) "melpa-stable"])
  (org-repo-todo . [(0 0 2) nil "Simple repository todo management with org-mode" single ((:url . "https://github.com/waymondo/org-repo-todo") (:keywords "convenience")) "melpa-stable"])
  (org2blog . [(0 9 1) ((org (8 1)) (xml-rpc (1 6 8)) (metaweblog (0 1))) "Blog from Org mode to wordpress" tar nil "melpa-stable"])
  (owdriver . [(0 0 6) ((smartrep (0 0 3)) (log4e (0 2 0)) (yaxception (0 2 0))) "Quickly perform various actions on other windows" single ((:url . "https://github.com/aki2o/owdriver") (:keywords "convenience")) "melpa-stable"])
  (package+ . [(1 0 1) nil "Extensions for the package library." single ((:url . "TBA") (:keywords "extensions" "tools")) "melpa-stable"])
  (parenface . [(1 0 3) nil "Provide a face for parens in lispy modes." tar nil "melpa-stable"])
  (paxedit . [(1 1 4) ((cl-lib (0 5)) (paredit (23))) "Structured, Context Driven LISP Editing and Refactoring" single ((:url . "https://github.com/promethial/paxedit") (:keywords "lisp" "refactoring" "context")) "melpa-stable"])
  (pcsv . [(1 3 5) nil "Parser of csv" single ((:url . "https://github.com/mhayashi1120/Emacs-pcsv/raw/master/pcsv.el") (:keywords "data")) "melpa-stable"])
  (persp-mode . [(1 0) nil "\"perspectives\" + save/load + shared among frames - bugs." single ((:url . "https://github.com/Bad-ptr/persp-mode.el") (:keywords "perspectives" "session")) "melpa-stable"])
  (plsense . [(0 4 6) ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 2 0))) "provide interface for PlSense that is a development tool for Perl." single ((:url . "https://github.com/aki2o/emacs-plsense") (:keywords "perl" "completion")) "melpa-stable"])
  (plsense-direx . [(0 2 0) ((direx (0 1 -3)) (plsense (0 3 2)) (log4e (0 2 0)) (yaxception (0 3 2))) "Perl Package Explorer" single ((:url . "https://github.com/aki2o/plsense-direx") (:keywords "perl" "convenience")) "melpa-stable"])
  (pophint . [(0 9 3) ((popup (0 5 0)) (log4e (0 2 0)) (yaxception (0 1))) "Provide navigation using pop-up tips, like Firefox's Vimperator Hint Mode" tar ((:url . "https://github.com/aki2o/emacs-pophint") (:keywords "popup")) "melpa-stable"])
  (pos-tip . [(0 4 6) nil "Show tooltip at point" single ((:keywords "tooltip")) "melpa-stable"])
  (rect+ . [(1 0 7) nil "Extensions to rect.el" single ((:url . "https://github.com/mhayashi1120/Emacs-rectplus/raw/master/rect+.el") (:keywords "extensions" "data" "tools")) "melpa-stable"])
  (reverse-theme . [(0 3) nil "Reverse theme for Emacs" single ((:url . "https://github.com/syohex/emacs-reverse-theme")) "melpa-stable"])
  (scala-mode2 . [(0 22) nil "Major mode for editing Scala >= 2.9" tar nil "melpa-stable"])
  (scala-outline-popup . [(0 3 3) ((dash (2 9 0)) (popup (0 5 1)) (scala-mode2 (0 22))) "scala file summary popup" single ((:url . "https://github.com/ancane/scala-outline-popup.el") (:keywords "scala" "structure" "summary")) "melpa-stable"])
  (shackle . [(0 1 1) ((cl-lib (0 5))) "Enforce rules for popups" single ((:url . "https://github.com/wasamasa/shackle") (:keywords "convenience")) "melpa-stable"])
  (smartparens . [(1 6 2) ((cl-lib (0 3)) (dash (2 6 0))) "Automatic insertion, wrapping and paredit-like navigation with user defined pairs." tar nil "melpa-stable"])
  (smooth-scrolling . [(1 0 4) nil "Make emacs scroll smoothly" single ((:url . "http://github.com/aspiers/smooth-scrolling/") (:keywords "convenience")) "melpa-stable"])
  (sparkline . [(1 0 1) nil "Make sparkline images from a list of numbers" single ((:keywords "extensions")) "melpa-stable"])
  (term-alert . [(1 0) ((term-cmd (1 0)) (alert (1 1))) "Get notifications when commands complete in the Emacs terminal emulator" single ((:url . "https://github.com/CallumCameron/term-alert") (:keywords "notifications" "processes")) "melpa-stable"])
  (term-cmd . [(1 0) nil "Send commands to Emacs from programs running under term.el" single ((:url . "https://github.com/CallumCameron/term-cmd") (:keywords "processes")) "melpa-stable"])
  (tern-django . [(0 1 0) ((emacs (24)) (tern (0 0 1)) (f (0 17 1))) "Create tern projects for django applications." tar ((:url . "https://github.com/proofit404/tern-django")) "melpa-stable"])
  (travis . [(0 3 0) ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) "Emacs client for Travis" tar ((:url . "https://github.com/nlamirault/emacs-travis") (:keywords "travis")) "melpa-stable"])
  (tss . [(0 6 0) ((auto-complete (1 4 0)) (json-mode (1 1 0)) (log4e (0 2 0)) (yaxception (0 1))) "provide a interface for auto-complete.el/flymake.el on typescript-mode." tar ((:url . "https://github.com/aki2o/emacs-tss") (:keywords "typescript" "completion")) "melpa-stable"])
  (typed-clojure-mode . [(1 0 0) ((clojure-mode (2 1 1)) (cider (0 5 0))) "Typed Clojure minor mode for Emacs" single ((:url . "https://github.com/typedclojure/typed-clojure-mode")) "melpa-stable"])
  (vagrant . [(0 5 2) nil "Manage a vagrant box from emacs" single ((:url . "https://github.com/ottbot/vagrant.el") (:keywords "vagrant" "chef")) "melpa-stable"])
  (vbasense . [(0 1 1) ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 1))) "provide a environment like Visual Basic Editor." tar ((:url . "https://github.com/aki2o/emacs-vbasense") (:keywords "vba" "completion")) "melpa-stable"])
  (whole-line-or-region . [(1 3 1) nil "operate on current line if region undefined" single ((:keywords "kill" "yank" "cut" "copy" "paste" "whole" "lines")) "melpa-stable"])
  (wn-mode . [(1 1) nil "No description available." single nil "melpa-stable"])
  (xtest . [(1 1 0) ((cl-lib (0 5))) "Simple Testing with Emacs & ERT" single ((:url . "https://github.com/promethial/xtest") (:keywords "testing" "ert")) "melpa-stable"])
  (yaml-mode . [(0 0 11) nil "Major mode for editing YAML files" single ((:keywords "data" "yaml")) "melpa-stable"])
  (yaxception . [(0 3 2) nil "Provide framework about exception like Java for Elisp" single ((:url . "https://github.com/aki2o/yaxception") (:keywords "exception" "error" "signal")) "melpa-stable"])
 )
