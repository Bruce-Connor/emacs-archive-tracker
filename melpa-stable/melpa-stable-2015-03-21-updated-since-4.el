'(
  (abc-mode [cl-struct-package-desc abc-mode (20140225 944) "Major mode for editing abc music files" nil single "melpa-stable" nil ((:keywords "local" "docs")) nil])
  (ac-cake [cl-struct-package-desc ac-cake (1 0 0) "CakePHP Minor Mode auto-complete.el source" ((cake (1 4 2)) (auto-complete (1 4))) single "melpa-stable" nil ((:url . "http://code.101000lab.org")) nil])
  (ac-cake2 [cl-struct-package-desc ac-cake2 (1 0 1) "CakePHP 2 Minor Mode auto-complete.el source" ((cake2 (1 1 2)) (auto-complete (1 4 0))) single "melpa-stable" nil ((:url . "http://code.101000lab.org")) nil])
  (ac-cider [cl-struct-package-desc ac-cider (0 2 1) "Clojure auto-complete sources using CIDER" ((cider (0 8 0)) (auto-complete (1 4)) (cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/clojure-emacs/ac-cider") (:keywords "languages" "clojure" "nrepl" "cider" "compliment")) nil])
  (ac-dcd [cl-struct-package-desc ac-dcd (0 4) "Auto Completion source for dcd for GNU Emacs" ((auto-complete (1 3 1)) (flycheck-dmd-dub (0 7))) single "melpa-stable" nil ((:url . "http://github.com/atilaneves/ac-dcd") (:keywords "languages")) nil])
  (ac-etags [cl-struct-package-desc ac-etags (0 6) "etags/ctags completion source for auto-complete" ((auto-complete (1 4))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-ac-etags")) nil])
  (ac-geiser [cl-struct-package-desc ac-geiser (0 1) "Auto-complete backend for geiser" ((geiser (0 5)) (auto-complete (1 4))) tar "melpa-stable" nil nil nil])
  (ac-haskell-process [cl-struct-package-desc ac-haskell-process (0 5) "Haskell auto-complete source which uses the current haskell process" ((auto-complete (1 4)) (haskell-mode (13))) single "melpa-stable" nil ((:keywords "languages")) nil])
  (ac-helm [cl-struct-package-desc ac-helm (2 1) "Auto Complete with Helm" ((helm (20130328)) (auto-complete (1 4 0)) (popup (0 5 0))) single "melpa-stable" nil ((:keywords "completion" "convenience" "helm")) nil])
  (ac-inf-ruby [cl-struct-package-desc ac-inf-ruby (0 4) "Enable auto-complete in inf-ruby sessions" ((inf-ruby (2 3 2)) (auto-complete (1 4))) single "melpa-stable" nil ((:keywords "languages" "tools")) nil])
  (ac-ispell [cl-struct-package-desc ac-ispell (0 7) "ispell completion source for auto-complete" ((auto-complete (1 4)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-ac-ispell")) nil])
  (ac-octave [cl-struct-package-desc ac-octave (0 4) "An auto-complete source for Octave" ((auto-complete (1 4 0))) single "melpa-stable" nil ((:url . "https://github.com/coldnew/ac-octave") (:keywords "octave" "auto-complete" "completion")) nil])
  (ac-slime [cl-struct-package-desc ac-slime (0 7) "An auto-complete source using slime completions" ((auto-complete (1 4)) (slime (2 9)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/purcell/ac-slime")) nil])
  (ace-jump-mode [cl-struct-package-desc ace-jump-mode (2 0) "a quick cursor location minor mode for emacs" nil single "melpa-stable" nil ((:url . "https://github.com/winterTTr/ace-jump-mode/") (:keywords "motion" "location" "cursor")) nil])
  (ace-window [cl-struct-package-desc ace-window (0 7 1) "Quickly switch windows using `ace-jump-mode'." ((ace-jump-mode (2 0))) single "melpa-stable" nil ((:url . "https://github.com/abo-abo/ace-window") (:keywords "cursor" "window" "location")) nil])
  (actionscript-mode [cl-struct-package-desc actionscript-mode (7 2 2) "A simple mode for editing Actionscript 3 files" nil single "melpa-stable" nil ((:keywords "language" "modes")) nil])
  (adoc-mode [cl-struct-package-desc adoc-mode (0 6 2) "a major-mode for editing AsciiDoc files in Emacs" ((markup-faces (1 0 0))) single "melpa-stable" nil ((:url . "https://github.com/sensorflo/adoc-mode/wiki") (:keywords "wp" "asciidoc")) nil])
  (aes [cl-struct-package-desc aes (0 8) "Implementation of AES" nil single "melpa-stable" nil ((:url . "https://github.com/Sauermann/emacs-aes") (:keywords "data" "tools")) nil])
  (ag [cl-struct-package-desc ag (0 45) "A front-end for ag ('the silver searcher'), the C ack replacement." ((dash (2 8 0)) (s (1 9 0))) single "melpa-stable" nil nil nil])
  (alchemist [cl-struct-package-desc alchemist (0 13 1) "Elixir tooling integration into emacs" ((emacs (24))) tar "melpa-stable" nil ((:url . "http://www.github.com/tonini/alchemist.el") (:keywords "languages" "mix" "elixir" "elixirc" "hex")) nil])
  (alect-themes [cl-struct-package-desc alect-themes (0 6) "Configurable color themes (light, dark and black) for Emacs 24" nil tar "melpa-stable" nil nil nil])
  (anaconda-mode [cl-struct-package-desc anaconda-mode (0 1 0) "No description available." nil tar "melpa-stable" nil nil nil])
  (anaphora [cl-struct-package-desc anaphora (1 0 0) "anaphoric macros providing implicit temp variables" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/anaphora") (:keywords "extensions")) nil])
  (angular-snippets [cl-struct-package-desc angular-snippets (0 2 3) "Yasnippets for AngularJS" ((s (1 4 0)) (dash (1 2 0))) tar "melpa-stable" nil nil nil])
  (ansi [cl-struct-package-desc ansi (0 4 0) "Turn string into ansi strings" ((s (1 6 1)) (dash (1 5 0)) (noflet (0 0 11))) single "melpa-stable" nil ((:url . "http://github.com/rejeep/ansi") (:keywords "color" "ansi")) nil])
  (ansible [cl-struct-package-desc ansible (0 0 3) "Ansible minor mode" ((s (1 9 0)) (f (0 16 2))) tar "melpa-stable" nil ((:url . "http://101000lab.org")) nil])
  (ansible-doc [cl-struct-package-desc ansible-doc (0 3) "Ansible documentation Minor Mode" ((emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/lunaryorn/ansible-doc.el") (:keywords "tools" "help")) nil])
  (anti-zenburn-theme [cl-struct-package-desc anti-zenburn-theme (2 2) "Low-contrast Zenburn-inverted theme" nil single "melpa-stable" nil ((:url . "https://github.com/m00natic/anti-zenburn-theme")) nil])
  (anyins [cl-struct-package-desc anyins (0 1 1) "Insert content at multiple places from shell command or kill-ring" nil single "melpa-stable" nil ((:url . "http://github.com/antham/anyins") (:keywords "insert" "rectangular")) nil])
  (anything [cl-struct-package-desc anything (1 3 9) "open anything / QuickSilver-like candidate-selection framework" nil tar "melpa-stable" nil ((:url . "http://repo.or.cz/w/anything-config.git") (:keywords "files" "frames" "help" "matching" "outlines")) nil])
  (anything-exuberant-ctags [cl-struct-package-desc anything-exuberant-ctags (0 1 2) "Exuberant ctags anything.el interface" ((anything (1 3 9))) single "melpa-stable" nil ((:url . "http://code.101000lab.org") (:keywords "anything" "exuberant ctags")) nil])
  (anything-replace-string [cl-struct-package-desc anything-replace-string (0 9 2) "`replace-string' and `query-replace' `anything.el' interface" ((anything (1 3 9))) single "melpa-stable" nil ((:url . "http://code.101000lab.org")) nil])
  (anything-sage [cl-struct-package-desc anything-sage (0 0 1) "An anything extension for sage-shell-mode." ((cl-lib (0 5)) (anything (1 3 9)) (sage-shell-mode (0 0 1))) single "melpa-stable" nil ((:url . "https://github.com/stakemori/anything-sage") (:keywords "sage" "math" "anything")) nil])
  (anzu [cl-struct-package-desc anzu (0 52) "Show number of matches in mode-line while searching" ((cl-lib (0 5)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-anzu")) nil])
  (apples-mode [cl-struct-package-desc apples-mode (0 0 2) "Major mode for editing and executing AppleScript code" nil tar "melpa-stable" nil ((:keywords "applescript" "languages")) nil])
  (async [cl-struct-package-desc async (1 2) "Asynchronous processing in Emacs" nil tar "melpa-stable" nil nil nil])
  (aurel [cl-struct-package-desc aurel (0 6) "Search, get info, vote and download AUR packages" nil single "melpa-stable" nil ((:url . "https://github.com/alezost/aurel") (:keywords "tools")) nil])
  (auto-compile [cl-struct-package-desc auto-compile (1 2 2) "automatically compile Emacs Lisp libraries" ((cl-lib (0 5)) (packed (0 3 5))) single "melpa-stable" nil ((:url . "https://github.com/tarsius/auto-compile") (:keywords "compile" "convenience" "lisp")) nil])
  (auto-complete [cl-struct-package-desc auto-complete (1 5 0) "Auto Completion for GNU Emacs" ((popup (0 5 0)) (cl-lib (0 5))) tar "melpa-stable" nil nil nil])
  (auto-complete-clang-async [cl-struct-package-desc auto-complete-clang-async (0 5) "Auto Completion source for clang for GNU Emacs" nil single "melpa-stable" nil ((:keywords "completion" "convenience")) nil])
  (auto-complete-exuberant-ctags [cl-struct-package-desc auto-complete-exuberant-ctags (0 0 7) "Exuberant ctags auto-complete.el source" ((auto-complete (1 4 0))) single "melpa-stable" nil ((:url . "http://code.101000lab.org") (:keywords "anto-complete" "exuberant ctags")) nil])
  (auto-complete-sage [cl-struct-package-desc auto-complete-sage (0 0 2 1) "An auto-complete source for sage-shell-mode." ((auto-complete (1 4 0)) (sage-shell-mode (0 0 5))) single "melpa-stable" nil ((:url . "https://github.com/stakemori/auto-complete-sage") (:keywords "sage" "math" "auto-complete")) nil])
  (auto-dictionary [cl-struct-package-desc auto-dictionary (1 1) "automatic dictionary switcher for flyspell" nil single "melpa-stable" nil ((:url . "http://nschum.de/src/emacs/auto-dictionary/") (:keywords "wp")) nil])
  (auto-indent-mode [cl-struct-package-desc auto-indent-mode (0 126) "Auto indent Minor mode" nil tar "melpa-stable" nil ((:url . "https://github.com/mlf176f2/auto-indent-mode.el/") (:keywords "auto" "indentation")) nil])
  (auto-shell-command [cl-struct-package-desc auto-shell-command (1 0 0) "Run the shell command asynchronously that you specified when you save the file." ((deferred (20130312)) (popwin (20130329))) single "melpa-stable" nil ((:keywords "shell" "save" "async" "deferred" "auto")) nil])
  (autopair [cl-struct-package-desc autopair (0 6 1) "Automagically pair braces and quotes like TextMate" ((cl-lib (0 3))) single "melpa-stable" nil ((:url . "http://autopair.googlecode.com") (:keywords "convenience" "emulations")) nil])
  (babel [cl-struct-package-desc babel (1 4) "interface to web translation services such as Babelfish" nil single "melpa-stable" nil ((:keywords "translation" "web")) nil])
  (back-button [cl-struct-package-desc back-button (0 6 6) "Visual navigation through mark rings" ((nav-flash (1 0 0)) (smartrep (0 0 3)) (ucs-utils (0 7 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/back-button") (:keywords "convenience" "navigation" "interface")) nil])
  (bbcode-mode [cl-struct-package-desc bbcode-mode (2 0 0) "Major mode for writing BBCode markup" nil single "melpa-stable" nil ((:url . "https://github.com/ejmr/bbcode-mode")) nil])
  (bbdb-vcard [cl-struct-package-desc bbdb-vcard (0 3) "vCard import/export for BBDB" nil tar "melpa-stable" nil ((:url . "http://github.com/trebb/bbdb-vcard") (:keywords "data" "calendar" "mail" "news")) nil])
  (bbdb2erc [cl-struct-package-desc bbdb2erc (0 1 3) "make bbdb show if pal is online with ERC, click i to chat" ((bbdb (3 0))) single "melpa-stable" nil ((:keywords "irc" "contacts" "chat" "client" "internet")) nil])
  (beeminder [cl-struct-package-desc beeminder (1 0 0) "Emacs interface for Beeminder" nil single "melpa-stable" nil ((:keywords "beeminder")) nil])
  (bind-key [cl-struct-package-desc bind-key (20140601) "A simple way to manage personal keybindings" nil single "melpa-stable" nil ((:url . "https://github.com/jwiegley/use-package") (:keywords "keys" "keybinding" "config" "dotemacs")) nil])
  (birds-of-paradise-plus-theme [cl-struct-package-desc birds-of-paradise-plus-theme (0 1 1) "A brown/orange light-on-dark theme for Emacs 24 (deftheme)." nil single "melpa-stable" nil ((:url . "https://github.com/jimeh/birds-of-paradise-plus-theme.el") (:keywords "themes")) nil])
  (bog [cl-struct-package-desc bog (0 6 0) "Extensions for research notes in Org mode" ((org (8 0 0)) (dash (2 5 0))) single "melpa-stable" nil ((:url . "https://github.com/kyleam/bog") (:keywords "bibtex" "org-mode")) nil])
  (browse-kill-ring [cl-struct-package-desc browse-kill-ring (2 0 0) "interactively insert items from kill-ring" nil single "melpa-stable" nil ((:url . "https://github.com/browse-kill-ring/browse-kill-ring") (:keywords "convenience")) nil])
  (browse-url-dwim [cl-struct-package-desc browse-url-dwim (0 6 8) "Context-sensitive external browse URL or Internet search" ((string-utils (0 3 2))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/browse-url-dwim") (:keywords "hypermedia")) nil])
  (buffer-move [cl-struct-package-desc buffer-move (0 6 1) "" nil single "melpa-stable" nil ((:url . "https://github.com/lukhas/buffer-move") (:keywords "lisp" "convenience")) nil])
  (buffer-utils [cl-struct-package-desc buffer-utils (0 1 0) "Buffer-manipulation utility functions" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/buffer-utils") (:keywords "extensions")) nil])
  (bufshow [cl-struct-package-desc bufshow (0 1 0) "No description available." nil single "melpa-stable" nil nil nil])
  (bug-reference-github [cl-struct-package-desc bug-reference-github (0 2 0) "Automatically set `bug-reference-url-format' in Github repositories." nil single "melpa-stable" nil ((:url . "https://github.com/arnested/bug-reference-github") (:keywords "programming" "tools")) nil])
  (bundler [cl-struct-package-desc bundler (1 1 0) "Interact with Bundler from Emacs" ((inf-ruby (2 1))) single "melpa-stable" nil ((:url . "http://github.com/tobiassvn/") (:keywords "bundler" "ruby")) nil])
  (butler [cl-struct-package-desc butler (0 2 4) "Emacs client for Jenkins" ((deferred (3 2)) (json (1 2)) (emacs (24))) tar "melpa-stable" nil nil nil])
  (button-lock [cl-struct-package-desc button-lock (1 0 2) "Clickable text defined by regular expression" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/button-lock") (:keywords "mouse" "button" "hypermedia" "extensions")) nil])
  (cacoo [cl-struct-package-desc cacoo (2 1 2) "Minor mode for Cacoo : http://cacoo.com" ((concurrent (0 3 1))) tar "melpa-stable" nil nil nil])
  (cake [cl-struct-package-desc cake (1 4 3) "CakePHP Minor Mode" ((cake-inflector (1 1 0)) (historyf (0 0 8)) (anything (1 3 9))) tar "melpa-stable" nil ((:url . "https://github.com/k1LoW/emacs-cake")) nil])
  (cake-inflector [cl-struct-package-desc cake-inflector (1 1 1) "Lazy porting CakePHP infrector.php to el" ((s (1 9 0))) single "melpa-stable" nil ((:url . "https://github.com/k1LoW/emacs-cake-inflector")) nil])
  (cake2 [cl-struct-package-desc cake2 (2 1 0) "CakePHP2 Minor Mode" ((dash (2 6 0)) (s (1 9 0)) (f (0 16 2)) (ht (2 0)) (json (1 2)) (cake-inflector (1 1 0)) (historyf (0 0 8)) (anything (1 3 9))) tar "melpa-stable" nil ((:url . "http://code.101000lab.org")) nil])
  (calfw [cl-struct-package-desc calfw (1 4) "Calendar view framework on Emacs" nil tar "melpa-stable" nil ((:url . "https://github.com/kiwanami/emacs-calfw") (:keywords "calendar")) nil])
  (cask [cl-struct-package-desc cask (0 7 2) "Cask: Project management for Emacs package development" ((s (1 8 0)) (dash (2 2 0)) (f (0 16 0)) (epl (0 5)) (shut-up (0 1 0)) (cl-lib (0 3)) (package-build (0 1))) tar "melpa-stable" nil ((:url . "http://github.com/cask/cask") (:keywords "speed" "convenience")) nil])
  (cdlatex [cl-struct-package-desc cdlatex (4 7) "Fast input methods for LaTeX environments and math" nil single "melpa-stable" nil ((:keywords "tex")) nil])
  (cerbere [cl-struct-package-desc cerbere (0 1 0) "Unit testing in Emacs for several programming languages" ((s (1 9 0)) (f (0 16 0)) (go-mode (20140409)) (pkg-info (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/nlamirault/cerbere") (:keywords "python" "go" "php" "tests" "tdd")) nil])
  (cfengine-code-style [cl-struct-package-desc cfengine-code-style (3 6 5) "C code style for CFEngine project." nil single "melpa-stable" nil ((:url . "https://github.com/cfengine/core")) nil])
  (charmap [cl-struct-package-desc charmap (0 0 1) "Unicode table for Emacs" nil single "melpa-stable" nil ((:url . "https://github.com/lateau/charmap") (:keywords "unicode" "character" "ucs")) nil])
  (cider [cl-struct-package-desc cider (0 8 2) "Clojure Integrated Development Environment and REPL" ((clojure-mode (3 0 0)) (cl-lib (0 5)) (dash (2 4 1)) (pkg-info (0 4)) (emacs (24)) (queue (0 1 1))) tar "melpa-stable" nil ((:url . "http://www.github.com/clojure-emacs/cider") (:keywords "languages" "clojure" "cider")) nil])
  (cl-lib-highlight [cl-struct-package-desc cl-lib-highlight (1 0 0) "full cl-lib font-lock highlighting" ((cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/skeeto/cl-lib-highlight")) nil])
  (clips-mode [cl-struct-package-desc clips-mode (0 7) "Major mode for editing CLIPS code and REPL" nil tar "melpa-stable" nil nil nil])
  (clj-refactor [cl-struct-package-desc clj-refactor (0 13 0) "A collection of clojure refactoring functions" ((s (1 8 0)) (dash (2 4 0)) (yasnippet (0 6 1)) (paredit (22)) (multiple-cursors (1 2 2)) (cider (0 6 0))) single "melpa-stable" nil ((:keywords "convenience")) nil])
  (clojure-cheatsheet [cl-struct-package-desc clojure-cheatsheet (0 2 2) "The Clojure Cheatsheet for Emacs" ((helm (1 5 3)) (cider (0 1 8))) single "melpa-stable" nil ((:url . "https://github.com/krisajenkins/clojure-cheatsheet") (:keywords "clojure" "nrepl" "cheatsheet" "helm")) nil])
  (clojure-mode [cl-struct-package-desc clojure-mode (4 0 1) "Major mode for Clojure code" ((emacs (24 1))) single "melpa-stable" nil ((:url . "http://github.com/clojure-emacs/clojure-mode") (:keywords "languages" "clojure" "clojurescript" "lisp")) nil])
  (clojure-mode-extra-font-locking [cl-struct-package-desc clojure-mode-extra-font-locking (4 0 1) "Extra font-locking for Clojure mode" ((clojure-mode (3 0))) single "melpa-stable" nil ((:url . "http://github.com/clojure-emacs/clojure-mode") (:keywords "languages" "lisp")) nil])
  (clojure-snippets [cl-struct-package-desc clojure-snippets (1 0 0) "Yasnippets for clojure" ((yasnippet (0 8 0))) tar "melpa-stable" nil nil nil])
  (cm-mode [cl-struct-package-desc cm-mode (1 1) "Minor mode for CriticMarkup" nil single "melpa-stable" nil ((:keywords "text" "markdown")) nil])
  (cmake-ide [cl-struct-package-desc cmake-ide (0 2) "No description available." nil single "melpa-stable" nil nil nil])
  (cmake-mode [cl-struct-package-desc cmake-mode (3 2 1) "major-mode for editing CMake sources" nil single "melpa-stable" nil nil nil])
  (codic [cl-struct-package-desc codic (0 2) "Search Codic (codic.jp) naming dictionaries" ((cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-codic")) nil])
  (coffee-mode [cl-struct-package-desc coffee-mode (0 6 0) "Major mode to edit CoffeeScript files in Emacs" ((emacs (24 1)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "http://github.com/defunkt/coffee-mode") (:keywords "coffeescript" "major" "mode")) nil])
  (color-theme-sanityinc-solarized [cl-struct-package-desc color-theme-sanityinc-solarized (2 28) "A version of Ethan Schoonover's Solarized themes" nil tar "melpa-stable" nil nil nil])
  (color-theme-sanityinc-tomorrow [cl-struct-package-desc color-theme-sanityinc-tomorrow (1 15) "A version of Chris Kempson's various Tomorrow themes" nil tar "melpa-stable" nil nil nil])
  (colorsarenice-theme [cl-struct-package-desc colorsarenice-theme (1 0 19) "A colorful color theme." ((emacs (24))) tar "melpa-stable" nil nil nil])
  (commander [cl-struct-package-desc commander (0 7 0) "Emacs command line parser" ((s (1 6 0)) (dash (2 0 0)) (cl-lib (0 3)) (f (0 6 1))) single "melpa-stable" nil ((:url . "http://github.com/rejeep/commander.el") (:keywords "cli" "argv")) nil])
  (company [cl-struct-package-desc company (0 8 12) "Modular text completion framework" ((emacs (24 1)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "http://company-mode.github.io/") (:keywords "abbrev" "convenience" "matching")) nil])
  (company-ghc [cl-struct-package-desc company-ghc (0 1 10) "company-mode ghc-mod backend" ((cl-lib (0 5)) (company (0 8 0)) (ghc (4 1 1)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/iquiw/company-ghc") (:keywords "haskell" "completion")) nil])
  (company-tern [cl-struct-package-desc company-tern (0 2 0) "Tern backend for company-mode" ((company (0 8 0)) (tern (0 0 1)) (dash (2 8 0)) (dash-functional (2 8 0)) (s (1 9 0)) (cl-lib (0 5 0))) single "melpa-stable" nil ((:url . "https://github.com/proofit404/company-tern")) nil])
  (concurrent [cl-struct-package-desc concurrent (0 3 2) "Concurrent utility functions for emacs lisp" ((deferred (0 3 1))) single "melpa-stable" nil ((:url . "https://github.com/kiwanami/emacs-deferred/blob/master/README-concurrent.markdown") (:keywords "deferred" "async" "concurrent")) nil])
  (conkeror-minor-mode [cl-struct-package-desc conkeror-minor-mode (1 6 2) "Mode for editing conkeror javascript files." nil single "melpa-stable" nil ((:url . "http://github.com/Bruce-Connor/conkeror-minor-mode") (:keywords "programming" "tools")) nil])
  (connection [cl-struct-package-desc connection (1 10) "No description available." nil single "melpa-stable" nil nil nil])
  (cperl-mode [cl-struct-package-desc cperl-mode (6 3) "Perl code editing commands for Emacs" nil single "melpa-stable" nil ((:keywords "languages" "perl")) nil])
  (cpputils-cmake [cl-struct-package-desc cpputils-cmake (0 5 0) "Easy real time C++ syntax check and intellisense if you use CMake" nil tar "melpa-stable" nil nil nil])
  (creds [cl-struct-package-desc creds (0 0 6 1) "A parser credentials file library (not limited to credentials entries)" ((s (1 9 0)) (dash (2 5 0))) tar "melpa-stable" nil nil nil])
  (crm-custom [cl-struct-package-desc crm-custom (0 4) "Alternate `completing-read-multiple' that uses `completing-read'" nil single "melpa-stable" nil ((:url . "https://github.com/DarwinAwardWinner") (:keywords "completion" "minibuffer" "multiple elements")) nil])
  (cryptol-mode [cl-struct-package-desc cryptol-mode (0 1 0) "Cryptol major mode for Emacs" nil single "melpa-stable" nil ((:url . "http://github.com/thoughtpolice/cryptol-mode") (:keywords "cryptol" "cryptography")) nil])
  (ctable [cl-struct-package-desc ctable (0 1 2) "Table component for Emacs Lisp" nil single "melpa-stable" nil ((:url . "https://github.com/kiwanami/emacs-ctable") (:keywords "table")) nil])
  (ctags [cl-struct-package-desc ctags (1 1 1) "No description available." nil single "melpa-stable" nil nil nil])
  (ctags-update [cl-struct-package-desc ctags-update (0 2 0) "(auto) update TAGS in parent directory using exuberant-ctags" nil single "melpa-stable" nil ((:url . "https://github.com/jixiuf/helm-etags-plus") (:keywords "exuberant-ctags" "etags")) nil])
  (cuda-mode [cl-struct-package-desc cuda-mode (1 0 0) "NVIDIA CUDA Major Mode" nil single "melpa-stable" nil ((:keywords "c" "languages")) nil])
  (cyberpunk-theme [cl-struct-package-desc cyberpunk-theme (1 11) "Cyberpunk Color Theme" nil single "melpa-stable" nil ((:keywords "color" "theme" "cyberpunk")) nil])
  (cython-mode [cl-struct-package-desc cython-mode (0 22) "Major mode for editing Cython files" nil single "melpa-stable" nil nil nil])
  (d-mode [cl-struct-package-desc d-mode (2 0 6) "D Programming Language mode for (X)Emacs" nil single "melpa-stable" nil ((:keywords "d" "programming" "language" "emacs" "cc-mode")) nil])
  (dart-mode [cl-struct-package-desc dart-mode (0 9) "Major mode for editing Dart files" nil single "melpa-stable" nil ((:url . "http://code.google.com/p/dart-mode") (:keywords "language")) nil])
  (dash [cl-struct-package-desc dash (2 10 0) "A modern list library for Emacs" nil single "melpa-stable" nil ((:keywords "lists")) nil])
  (dash-functional [cl-struct-package-desc dash-functional (2 10 0) "Collection of useful combinators for Emacs Lisp" ((dash (2 0 0)) (emacs (24))) single "melpa-stable" nil ((:keywords "lisp" "functions" "combinators")) nil])
  (dedicated [cl-struct-package-desc dedicated (1 0 0) "A very simple minor mode for dedicated buffers" nil single "melpa-stable" nil ((:keywords "dedicated" "buffer")) nil])
  (deferred [cl-struct-package-desc deferred (0 3 2) "Simple asynchronous functions for emacs lisp" nil single "melpa-stable" nil ((:url . "https://github.com/kiwanami/emacs-deferred") (:keywords "deferred" "async")) nil])
  (deft [cl-struct-package-desc deft (0 5 1) "quickly browse, filter, and edit plain text notes" nil single "melpa-stable" nil ((:url . "http://jblevins.org/projects/deft/") (:keywords "plain text" "notes" "simplenote" "notational velocity")) nil])
  (demangle-mode [cl-struct-package-desc demangle-mode (1 0) "Automatically demangle C++ symbols" ((emacs (24)) (cl-lib (0 1))) single "melpa-stable" nil ((:keywords "c" "tools")) nil])
  (desktop-registry [cl-struct-package-desc desktop-registry (1 2 0) "Keep a central registry of desktop files" nil single "melpa-stable" nil ((:url . "http://projects.ryuslash.org/desktop-registry/") (:keywords "convenience")) nil])
  (dictionary [cl-struct-package-desc dictionary (1 10) "No description available." nil single "melpa-stable" nil nil nil])
  (digistar-mode [cl-struct-package-desc digistar-mode (0 4) "major mode for Digistar scripts" nil single "melpa-stable" nil ((:keywords "languages")) nil])
  (dim-autoload [cl-struct-package-desc dim-autoload (1 1 3) "dim complete autoload cookie lines" nil single "melpa-stable" nil ((:url . "http://github.com/tarsius/dim-autoload") (:keywords "convenience")) nil])
  (diminish [cl-struct-package-desc diminish (0 44) "Diminished modes are minor modes with no modeline display" nil single "melpa-stable" nil ((:url . "http://www.eskimo.com/~seldon") (:keywords "extensions" "diminish" "minor" "codeprose")) nil])
  (dired-efap [cl-struct-package-desc dired-efap (0 8) "Edit Filename At Point in a dired buffer" nil single "melpa-stable" nil ((:keywords "dired" "environment" "files" "renaming")) nil])
  (dired-k [cl-struct-package-desc dired-k (0 13) "highlight dired buffer by file size, modified time, git status" ((cl-lib (0 5)) (emacs (24))) tar "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-dired-k")) nil])
  (discover [cl-struct-package-desc discover (0 3) "discover more of Emacs" ((makey (0 3))) single "melpa-stable" nil nil nil])
  (dispass [cl-struct-package-desc dispass (1 1 2) "Emacs wrapper for DisPass" nil single "melpa-stable" nil ((:url . "http://projects.ryuslash.org/dispass.el/") (:keywords "processes")) nil])
  (drag-stuff [cl-struct-package-desc drag-stuff (0 1 0) "Drag stuff (lines, words, region, etc...) around" nil tar "melpa-stable" nil nil nil])
  (drupal-mode [cl-struct-package-desc drupal-mode (0 5 0) "Advanced minor mode for Drupal development" ((php-mode (1 5 0))) tar "melpa-stable" nil ((:url . "https://github.com/arnested/drupal-mode") (:keywords "programming" "php" "drupal")) nil])
  (drupal-spell [cl-struct-package-desc drupal-spell (0 2 2) "Aspell extra dictionary for Drupal" nil tar "melpa-stable" nil ((:url . "https://github.com/arnested/drupal-spell") (:keywords "wp")) nil])
  (ducpel [cl-struct-package-desc ducpel (0 1) "Logic game with sokoban elements" ((cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/alezost/ducpel") (:keywords "games")) nil])
  (dynamic-fonts [cl-struct-package-desc dynamic-fonts (0 6 4) "Set faces based on available fonts" ((font-utils (0 7 0)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/dynamic-fonts") (:keywords "faces" "frames")) nil])
  (e2wm [cl-struct-package-desc e2wm (1 3) "simple window manager for emacs" nil tar "melpa-stable" nil ((:keywords "tools" "window manager")) nil])
  (e2wm-R [cl-struct-package-desc e2wm-R (0 4) "some e2wm plugin and perspective for GNU R" ((e2wm (1 2))) single "melpa-stable" nil ((:keywords "window manager" "convenience" "e2wm")) nil])
  (easy-kill [cl-struct-package-desc easy-kill (0 9 3) "kill & mark things easily" ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/leoliu/easy-kill") (:keywords "killing" "convenience")) nil])
  (easy-kill-extras [cl-struct-package-desc easy-kill-extras (0 9 4) "Extra functions for easy-kill." ((easy-kill (0 9 4))) tar "melpa-stable" nil ((:url . "https://github.com/knu/easy-kill-extras.el") (:keywords "killing" "convenience")) nil])
  (ebib [cl-struct-package-desc ebib (2 3) "a BibTeX database manager" ((dash (2 5 0)) (parsebib (1 0)) (emacs (24 3))) tar "melpa-stable" nil ((:keywords "text" "bibtex")) nil])
  (ecb [cl-struct-package-desc ecb (2 -3 24) "a code browser for Emacs" nil tar "melpa-stable" nil ((:keywords "browser" "code" "programming" "tools")) nil])
  (ecukes [cl-struct-package-desc ecukes (0 6 15) "Cucumber for Emacs." ((commander (0 6 1)) (espuds (0 2 2)) (ansi (0 3 0)) (dash (2 2 0)) (s (1 8 0)) (f (0 11 0))) tar "melpa-stable" nil nil nil])
  (edbi [cl-struct-package-desc edbi (0 1 2) "Emacs Database Interface" ((concurrent (0 3 1)) (ctable (0 1 1)) (epc (0 1 1))) tar "melpa-stable" nil nil nil])
  (edit-list [cl-struct-package-desc edit-list (0 3) "edit a single list" nil single "melpa-stable" nil ((:url . "http://mwolson.org/static/dist/elisp/edit-list.el")) nil])
  (edit-server [cl-struct-package-desc edit-server (1 13) "server that responds to edit requests from Chrome" nil single "melpa-stable" nil ((:url . "https://github.com/stsquad/emacs_chrome")) nil])
  (editorconfig [cl-struct-package-desc editorconfig (0 4) "EditorConfig Emacs extension" nil single "melpa-stable" nil ((:url . "http://github.com/editorconfig/editorconfig-emacs#readme")) nil])
  (edts [cl-struct-package-desc edts (0 1 0) "No description available." nil tar "melpa-stable" nil nil nil])
  (egison-mode [cl-struct-package-desc egison-mode (3 5 6) "Egison editing mode" nil single "melpa-stable" nil ((:url . "https://github.com/egisatoshi/egison3/blob/master/elisp/egison-mode.el")) nil])
  (eide [cl-struct-package-desc eide (2 1 0) "IDE interface" nil tar "melpa-stable" nil nil nil])
  (ein [cl-struct-package-desc ein (0 2 0) "Emacs IPython Notebook" ((websocket (0 9)) (auto-complete (1 4))) tar "melpa-stable" nil nil nil])
  (el-autoyas [cl-struct-package-desc el-autoyas (0 5) "Automatically create Emacs-Lisp Yasnippets" nil tar "melpa-stable" nil ((:url . "https://github.com/mlf176f2/el-autoyas.el") (:keywords "emacs" "lisp" "mode" "yasnippet")) nil])
  (el-get [cl-struct-package-desc el-get (5 1) "Manage the external elisp bits and pieces you depend upon" nil tar "melpa-stable" nil ((:url . "http://www.emacswiki.org/emacs/el-get") (:keywords "emacs" "package" "elisp" "install" "elpa" "git" "git-svn" "bzr" "cvs" "svn" "darcs" "hg" "apt-get" "fink" "pacman" "http" "http-tar" "emacswiki")) nil])
  (el-mock [cl-struct-package-desc el-mock (1 25 0) "Tiny Mock and Stub framework in Emacs Lisp" nil single "melpa-stable" nil ((:url . "http://github.com/rejeep/el-mock.el") (:keywords "lisp" "testing" "unittest")) nil])
  (el-spice [cl-struct-package-desc el-spice (0 2 2) "Extra spice for emacs lisp programming" ((thingatpt+ (0))) tar "melpa-stable" nil ((:url . "https://github.com/vedang/el-spice") (:keywords "configuration")) nil])
  (el-x [cl-struct-package-desc el-x (0 3 0) "main entry point for el-x package" nil tar "melpa-stable" nil ((:keywords "lisp")) nil])
  (elfeed [cl-struct-package-desc elfeed (1 1 2) "an Emacs Atom/RSS feed reader" ((emacs (24 1))) tar "melpa-stable" nil nil nil])
  (elfeed-web [cl-struct-package-desc elfeed-web (1 1 2) "web interface to Elfeed" ((simple-httpd (1 4 3)) (elfeed (1 0 1)) (emacs (24 1))) tar "melpa-stable" nil nil nil])
  (elisp-slime-nav [cl-struct-package-desc elisp-slime-nav (0 8) "Make M-. and M-, work in elisp like they do in slime" ((cl-lib (0 2))) single "melpa-stable" nil ((:url . "https://github.com/purcell/elisp-slime-nav") (:keywords "navigation" "slime" "elisp" "emacs-lisp")) nil])
  (elixir-mode [cl-struct-package-desc elixir-mode (2 2 0) "Major mode for editing Elixir files" nil tar "melpa-stable" nil ((:url . "https://github.com/elixir-lang/emacs-elixir") (:keywords "languages" "elixir")) nil])
  (elmacro [cl-struct-package-desc elmacro (0 3 0) "Convert keyboard macros to elisp" ((s (1 9 0)) (dash (1 5 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/Silex/elmacro") (:keywords "macro" "elisp" "convenience")) nil])
  (elmine [cl-struct-package-desc elmine (0 3) "No description available." nil single "melpa-stable" nil nil nil])
  (elpa-audit [cl-struct-package-desc elpa-audit (0 4) "Handy functions for inspecting and comparing package archives" nil single "melpa-stable" nil ((:url . "https://github.com/purcell/elpa-audit") (:keywords "maint")) nil])
  (elpa-mirror [cl-struct-package-desc elpa-mirror (1 1 4) "ELPA mirror from locally installed packages is easy" nil tar "melpa-stable" nil nil nil])
  (elpy [cl-struct-package-desc elpy (1 7 1) "Emacs Python Development Environment" ((company (0 8 2)) (find-file-in-project (3 3)) (highlight-indentation (0 5 0)) (pyvenv (1 3)) (yasnippet (0 8 0))) tar "melpa-stable" nil nil nil])
  (elx [cl-struct-package-desc elx (0 10 0) "extract information from Emacs Lisp libraries" ((emacs (24 4))) single "melpa-stable" nil ((:url . "https://github.com/tarsius/elx") (:keywords "docs" "libraries" "packages")) nil])
  (emacs-eclim [cl-struct-package-desc emacs-eclim (0 2) "No description available." nil tar "melpa-stable" nil nil nil])
  (emacs-setup [cl-struct-package-desc emacs-setup (1 0) "Package for maintaining your emacs configuration. Clean up your .emacs!" nil tar "melpa-stable" nil nil nil])
  (emacsc [cl-struct-package-desc emacsc (1 2 20131027) "helper for emacsc(1)" nil tar "melpa-stable" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil])
  (emacsql [cl-struct-package-desc emacsql (1 0 2) "high-level SQL database front-end" ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) tar "melpa-stable" nil ((:url . "https://github.com/skeeto/emacsql")) nil])
  (emamux [cl-struct-package-desc emamux (0 13) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil])
  (emmet-mode [cl-struct-package-desc emmet-mode (1 0 8) "Unofficial Emmet's support for emacs" nil single "melpa-stable" nil ((:url . "https://github.com/smihica/emmet-mode") (:keywords "convenience")) nil])
  (enotify [cl-struct-package-desc enotify (0 1 3) "No description available." nil tar "melpa-stable" nil nil nil])
  (epc [cl-struct-package-desc epc (0 1 0) "A RPC stack for the Emacs Lisp" ((concurrent (0 3 1)) (ctable (0 1 0))) tar "melpa-stable" nil ((:url . "https://github.com/kiwanami/emacs-epc") (:keywords "lisp" "rpc")) nil])
  (epl [cl-struct-package-desc epl (0 7) "Emacs Package Library" ((cl-lib (0 3))) single "melpa-stable" nil ((:url . "http://github.com/cask/epl") (:keywords "convenience")) nil])
  (erc-crypt [cl-struct-package-desc erc-crypt (1 0) "Symmetric Encryption for ERC" nil single "melpa-stable" nil ((:keywords "application")) nil])
  (erc-hl-nicks [cl-struct-package-desc erc-hl-nicks (1 3 0) "ERC nick highlighter that ignores uniquifying chars when colorizing" nil single "melpa-stable" nil ((:url . "http://www.github.com/leathekd/erc-hl-nicks")) nil])
  (ercn [cl-struct-package-desc ercn (1 0 2) "Flexible ERC notifications" nil single "melpa-stable" nil ((:url . "http://www.github.com/leathekd/ercn")) nil])
  (ergoemacs-mode [cl-struct-package-desc ergoemacs-mode (5 14 7 3) "Emacs mode based on common modern interface and ergonomics." ((emacs (24 1)) (undo-tree (0 6 5))) tar "melpa-stable" nil ((:url . "https://github.com/ergoemacs/ergoemacs-mode") (:keywords "convenience")) nil])
  (ert-async [cl-struct-package-desc ert-async (0 1 1) "Async support for ERT" nil single "melpa-stable" nil ((:url . "http://github.com/rejeep/ert-async.el") (:keywords "test")) nil])
  (ert-junit [cl-struct-package-desc ert-junit (0 1 1) "JUnit XML reports from ert results" ((ert (0))) single "melpa-stable" nil ((:url . "http://bitbucket.org/olanilsson/ert-junit") (:keywords "tools" "test" "unittest" "ert")) nil])
  (ert-runner [cl-struct-package-desc ert-runner (0 6 4) "Opinionated Ert testing workflow" ((s (1 6 1)) (dash (1 8 0)) (f (0 10 0)) (commander (0 2 0)) (ansi (0 1 0)) (shut-up (0 1 0))) tar "melpa-stable" nil ((:url . "http://github.com/rejeep/ert-runner.el") (:keywords "test")) nil])
  (es-mode [cl-struct-package-desc es-mode (4 0 0) "A major mode for editing Elasticsearch queries" nil tar "melpa-stable" nil ((:url . "http://www.github.com/dakrone/es-mode") (:keywords "elasticsearch")) nil])
  (es-windows [cl-struct-package-desc es-windows (0 3) "Window-management utilities" ((cl-lib (0 3)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/sabof/es-windows")) nil])
  (espuds [cl-struct-package-desc espuds (0 2 6) "Ecukes step definitions" ((s (1 7 0)) (dash (2 2 0)) (noflet (0 0 10)) (f (0 12 1))) single "melpa-stable" nil ((:url . "http://github.com/ecukes/espuds") (:keywords "test")) nil])
  (ess [cl-struct-package-desc ess (14 9) "No description available." nil tar "melpa-stable" nil nil nil])
  (ess-smart-underscore [cl-struct-package-desc ess-smart-underscore (0 79) "Ess Smart Underscore" nil tar "melpa-stable" nil ((:url . "http://github.com/mlf176f2/ess-smart-underscore.el") (:keywords "ess" "underscore")) nil])
  (esup [cl-struct-package-desc esup (0 4) "the Emacs StartUp Profiler (ESUP)" nil single "melpa-stable" nil ((:url . "http://github.com/jschaf/esup") (:keywords "emacs-lisp" "elisp" "profile" "startup")) nil])
  (eval-sexp-fu [cl-struct-package-desc eval-sexp-fu (0 4 0) "Tiny functionality enhancements for evaluating sexps." nil single "melpa-stable" nil ((:keywords "lisp" "highlight" "convenience")) nil])
  (evil [cl-struct-package-desc evil (1 0 9) "Extensible Vi layer for Emacs." ((undo-tree (0 6 3)) (goto-last-change (1 2))) tar "melpa-stable" nil nil nil])
  (evil-args [cl-struct-package-desc evil-args (1 0) "Motions and text objects for delimited arguments in Evil." ((evil (1 0 8))) single "melpa-stable" nil ((:url . "http://github.com/wcsmith/evil-args") (:keywords "evil" "vim-emulation")) nil])
  (evil-jumper [cl-struct-package-desc evil-jumper (0 2 0) "Jump like vimmers do!" ((evil (0))) single "melpa-stable" nil ((:url . "https://github.com/bling/evil-jumper") (:keywords "evil" "vim" "jumplist" "jump" "list")) nil])
  (evil-leader [cl-struct-package-desc evil-leader (0 4 3) "let there be <leader>" ((evil (0))) single "melpa-stable" nil ((:url . "http://github.com/cofi/evil-leader") (:keywords "evil" "vim-emulation" "leader")) nil])
  (evil-matchit [cl-struct-package-desc evil-matchit (1 5 1) "Vim matchit ported into Emacs (requires EVIL)" nil tar "melpa-stable" nil nil nil])
  (evil-nerd-commenter [cl-struct-package-desc evil-nerd-commenter (1 5 12) "Comment/uncomment lines efficiently. Like Nerd Commenter in Vim" nil tar "melpa-stable" nil nil nil])
  (evil-numbers [cl-struct-package-desc evil-numbers (0 4) "increment/decrement numbers like in vim" nil single "melpa-stable" nil ((:url . "http://github.com/cofi/evil-numbers") (:keywords "numbers" "increment" "decrement" "octal" "hex" "binary")) nil])
  (evil-org [cl-struct-package-desc evil-org (0 1 1) "evil keybindings for org-mode" ((evil (0)) (org (0))) single "melpa-stable" nil ((:url . "https://github.com/edwtjo/evil-org-mode.git") (:keywords "evil" "vim-emulation" "org-mode" "key-bindings" "presets")) nil])
  (evil-search-highlight-persist [cl-struct-package-desc evil-search-highlight-persist (1 4) "Persistent highlights after search" ((highlight (0))) single "melpa-stable" nil nil nil])
  (evil-space [cl-struct-package-desc evil-space (0 0 3) "Repeat motion in Evil. Correct the behaviour of what SPC should do." ((evil (1 0 0))) single "melpa-stable" nil ((:url . "http://github.com/linktohack/evil-space") (:keywords "space" "repeat" "motion")) nil])
  (evil-visualstar [cl-struct-package-desc evil-visualstar (0 1 0) "Starts a * or # search from the visual selection" ((evil (0))) single "melpa-stable" nil ((:url . "https://github.com/bling/evil-visualstar") (:keywords "evil" "vim" "visualstar")) nil])
  (evm [cl-struct-package-desc evm (0 4 2) "Emacs Version Manager" ((dash (2 3 0)) (f (0 13 0))) single "melpa-stable" nil ((:url . "http://github.com/rejeep/evm")) nil])
  (eww-lnum [cl-struct-package-desc eww-lnum (1 1) "Conkeror-like functionality for eww" nil single "melpa-stable" nil ((:url . "https://github.com/m00natic/eww-lnum") (:keywords "eww" "browse" "conkeror")) nil])
  (exec-path-from-shell [cl-struct-package-desc exec-path-from-shell (1 9) "Get environment variables such as $PATH from the shell" nil single "melpa-stable" nil ((:url . "https://github.com/purcell/exec-path-from-shell") (:keywords "environment")) nil])
  (expand-region [cl-struct-package-desc expand-region (0 10 0) "Increase selected region by semantic units." nil tar "melpa-stable" nil nil nil])
  (express [cl-struct-package-desc express (0 6 0) "Alternatives to `message'" ((string-utils (0 3 2))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/express") (:keywords "extensions" "message" "interface")) nil])
  (extend-dnd [cl-struct-package-desc extend-dnd (0 5) "R drag and Drop" nil tar "melpa-stable" nil ((:url . "https://github.com/mlf176f2/extend-dnd") (:keywords "extend" "drag and drop")) nil])
  (eyebrowse [cl-struct-package-desc eyebrowse (0 3 2) "Easy window config switching" ((dash (2 7 0))) single "melpa-stable" nil ((:url . "https://github.com/wasamasa/eyebrowse") (:keywords "convenience")) nil])
  (f [cl-struct-package-desc f (0 17 2) "Modern API for working with files and directories" ((s (1 7 0)) (dash (2 2 0))) single "melpa-stable" nil ((:url . "http://github.com/rejeep/f.el") (:keywords "files" "directories")) nil])
  (fabric [cl-struct-package-desc fabric (0 2 0) "Launch Fabric using Emacs" nil tar "melpa-stable" nil ((:url . "https://github.com/nlamirault/fabric.el") (:keywords "python" "fabric")) nil])
  (factlog [cl-struct-package-desc factlog (0 0 1) "File activity logger" nil single "melpa-stable" nil nil nil])
  (fancy-battery [cl-struct-package-desc fancy-battery (0 2) "Fancy battery display" ((emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/lunaryorn/fancy-battery.el") (:keywords "convenience" "tools" "hardware")) nil])
  (fancy-narrow [cl-struct-package-desc fancy-narrow (0 9 4) "narrow-to-region with more eye candy." nil single "melpa-stable" nil ((:url . "http://github.com/Bruce-Connor/fancy-narrow-region") (:keywords "faces" "convenience")) nil])
  (fasm-mode [cl-struct-package-desc fasm-mode (0 1 11) "Fasm major mode" nil single "melpa-stable" nil ((:url . "https://github.com/Fanael/fasm-mode")) nil])
  (fastnav [cl-struct-package-desc fastnav (1 0 7) "Fast navigation and editing routines." nil single "melpa-stable" nil ((:keywords "nav" "fast" "fastnav" "navigation")) nil])
  (fill-column-indicator [cl-struct-package-desc fill-column-indicator (1 81) "Graphically indicate the fill column" nil tar "melpa-stable" nil ((:keywords "convenience")) nil])
  (finalize [cl-struct-package-desc finalize (1 0 0) "finalizers for Emacs Lisp" ((emacs (24 1)) (cl-lib (0 3)) (eieio (1 4))) tar "melpa-stable" nil nil nil])
  (find-file-in-project [cl-struct-package-desc find-file-in-project (3 3) "Find files in a project quickly." nil single "melpa-stable" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/FindFileInProject") (:keywords "project" "convenience")) nil])
  (find-file-in-repository [cl-struct-package-desc find-file-in-repository (1 2) "Quickly find files in a git, mercurial or other repository" nil single "melpa-stable" nil ((:url . "https://github.com/hoffstaetter/find-file-in-repository") (:keywords "files" "convenience" "repository" "project" "source control")) nil])
  (fiplr [cl-struct-package-desc fiplr (0 2 4) "Fuzzy Search for Files in Projects" ((grizzl (0 1 0))) tar "melpa-stable" nil nil nil])
  (fixmee [cl-struct-package-desc fixmee (0 8 6) "Quickly navigate to FIXME notices in code" ((button-lock (1 0 2)) (nav-flash (1 0 0)) (back-button (0 6 0)) (smartrep (0 0 3)) (string-utils (0 3 2)) (tabulated-list (0))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/fixmee") (:keywords "navigation" "convenience")) nil])
  (floobits [cl-struct-package-desc floobits (1 5 21) "Floobits plugin for real-time collaborative editing" ((json (1 2)) (highlight (0))) tar "melpa-stable" nil ((:url . "http://github.com/Floobits/floobits-emacs") (:keywords "comm" "tools")) nil])
  (flx [cl-struct-package-desc flx (0 5) "fuzzy matching with good sorting" ((cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/lewang/flx")) nil])
  (flx-ido [cl-struct-package-desc flx-ido (0 5) "flx integration for ido" ((flx (0 1)) (cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/lewang/flx")) nil])
  (flycheck [cl-struct-package-desc flycheck (0 22) "Modern on-the-fly syntax checking for GNU Emacs" ((dash (2 4 0)) (pkg-info (0 4)) (let-alist (1 0 1)) (cl-lib (0 3)) (emacs (24 1))) tar "melpa-stable" nil ((:url . "https://www.flycheck.org") (:keywords "convenience" "languages" "tools")) nil])
  (flycheck-cask [cl-struct-package-desc flycheck-cask (0 2 1) "Cask support in Flycheck" ((emacs (24 1)) (flycheck (0 14)) (dash (2 4 0))) single "melpa-stable" nil ((:url . "https://github.com/flycheck/flycheck-cask") (:keywords "tools" "convenience")) nil])
  (flycheck-color-mode-line [cl-struct-package-desc flycheck-color-mode-line (0 3) "Change mode line color with Flycheck status" ((flycheck (0 15)) (dash (1 2)) (emacs (24 1))) single "melpa-stable" nil ((:keywords "convenience" "language" "tools")) nil])
  (flycheck-dmd-dub [cl-struct-package-desc flycheck-dmd-dub (0 7) "Sets flycheck-dmd-include-paths from dub package information" ((flycheck (0 17))) single "melpa-stable" nil ((:url . "http://github.com/atilaneves/flycheck-dmd-dub") (:keywords "languages")) nil])
  (flycheck-haskell [cl-struct-package-desc flycheck-haskell (0 5 1) "Flycheck: Cabal projects and sandboxes" ((flycheck (0 19 -3)) (haskell-mode (13 7)) (dash (2 4 0)) (let-alist (1 0 1))) tar "melpa-stable" nil ((:url . "https://github.com/flycheck/flycheck-haskell") (:keywords "tools" "convenience")) nil])
  (flycheck-hdevtools [cl-struct-package-desc flycheck-hdevtools (0 3) "A flycheck checker for Haskell using hdevtools" ((flycheck (0 15))) single "melpa-stable" nil ((:url . "https://github.com/flycheck/flycheck-hdevtools") (:keywords "convenience" "languages" "tools")) nil])
  (flycheck-ledger [cl-struct-package-desc flycheck-ledger (0 4) "Flycheck integration for ledger files" ((flycheck (0 15))) single "melpa-stable" nil ((:keywords "convenience" "languages" "tools")) nil])
  (flymake-coffee [cl-struct-package-desc flymake-coffee (0 12) "A flymake handler for coffee script" ((flymake-easy (0 1))) single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-coffee")) nil])
  (flymake-css [cl-struct-package-desc flymake-css (0 3) "Flymake support for css using csslint" ((flymake-easy (0 1))) single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-css")) nil])
  (flymake-easy [cl-struct-package-desc flymake-easy (0 10) "Helpers for easily building flymake checkers" nil single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-easy") (:keywords "convenience" "internal")) nil])
  (flymake-gjshint [cl-struct-package-desc flymake-gjshint (0 0 6) "A flymake handler for javascript using both jshint and gjslint" nil single "melpa-stable" nil ((:keywords "flymake" "javascript" "jshint" "gjslint")) nil])
  (flymake-haml [cl-struct-package-desc flymake-haml (0 8) "A flymake handler for haml files" ((flymake-easy (0 1))) single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-haml")) nil])
  (flymake-haskell-multi [cl-struct-package-desc flymake-haskell-multi (0 3) "Syntax-check haskell-mode using both ghc and hlint" ((flymake-easy (0 1))) tar "melpa-stable" nil nil nil])
  (flymake-hlint [cl-struct-package-desc flymake-hlint (0 2) "A flymake handler for haskell-mode files using hlint" ((flymake-easy (0 1))) single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-hlint")) nil])
  (flymake-jslint [cl-struct-package-desc flymake-jslint (0 23) "Flymake support for javascript using jslint" nil single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-jslint")) nil])
  (flymake-json [cl-struct-package-desc flymake-json (0 1) "A flymake handler for json using jsonlint" ((flymake-easy (0 1))) single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-json")) nil])
  (flymake-perlcritic [cl-struct-package-desc flymake-perlcritic (1 0 3) "Flymake handler for Perl to invoke Perl::Critic" ((flymake (0 3))) tar "melpa-stable" nil ((:url . "https://github.com/illusori/emacs-flymake-perlcritic")) nil])
  (flymake-php [cl-struct-package-desc flymake-php (0 5) "A flymake handler for php-mode files" ((flymake-easy (0 1))) single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-php")) nil])
  (flymake-python-pyflakes [cl-struct-package-desc flymake-python-pyflakes (0 9) "A flymake handler for python-mode files using pyflakes (or flake8)" ((flymake-easy (0 8))) single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-python-pyflakes")) nil])
  (flymake-ruby [cl-struct-package-desc flymake-ruby (0 8) "A flymake handler for ruby-mode files" ((flymake-easy (0 1))) single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-ruby")) nil])
  (flymake-sass [cl-struct-package-desc flymake-sass (0 6) "Flymake handler for sass files" ((flymake-easy (0 1))) single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-sass")) nil])
  (flymake-shell [cl-struct-package-desc flymake-shell (0 8) "A flymake syntax-checker for shell scripts" ((flymake-easy (0 1))) single "melpa-stable" nil ((:url . "https://github.com/purcell/flymake-shell")) nil])
  (flyspell-lazy [cl-struct-package-desc flyspell-lazy (0 6 10) "Improve flyspell responsiveness using idle timers" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/flyspell-lazy") (:keywords "spelling")) nil])
  (fm [cl-struct-package-desc fm (1 0) "follow mode for compilation/output buffers" nil single "melpa-stable" nil ((:keywords "outlines")) nil])
  (fold-dwim [cl-struct-package-desc fold-dwim (1 2) "No description available." nil single "melpa-stable" nil nil nil])
  (fold-dwim-org [cl-struct-package-desc fold-dwim-org (0 6) "Fold DWIM bound to org key-strokes." ((fold-dwim (1 2))) single "melpa-stable" nil ((:url . "https://github.com/mlf176f2/fold-dwim-org") (:keywords "folding" "emacs" "org-mode")) nil])
  (fold-this [cl-struct-package-desc fold-this (0 2 0) "Just fold this region please" nil single "melpa-stable" nil ((:keywords "convenience")) nil])
  (font-utils [cl-struct-package-desc font-utils (0 7 2) "Utility functions for working with fonts" ((persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/font-utils") (:keywords "extensions")) nil])
  (fountain-mode [cl-struct-package-desc fountain-mode (1 4 5) "Major mode for screenwriting in Fountain markup" ((s (1 9 0))) single "melpa-stable" nil ((:url . "https://github.com/rnkn/fountain-mode") (:keywords "wp")) nil])
  (frame-restore [cl-struct-package-desc frame-restore (0 5) "Restore Emacs frame" ((emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/lunaryorn/frame-restore.el") (:keywords "frames" "convenience")) nil])
  (fringe-helper [cl-struct-package-desc fringe-helper (1 0 1) "helper functions for fringe bitmaps" nil single "melpa-stable" nil ((:url . "http://nschum.de/src/emacs/fringe-helper/") (:keywords "lisp")) nil])
  (fsharp-mode [cl-struct-package-desc fsharp-mode (1 5 2) "F# mode for Emacs" ((auto-complete (1 4)) (popup (0 5)) (pos-tip (0 4 5)) (s (1 3 1)) (dash (1 1 0))) tar "melpa-stable" nil nil nil])
  (fuel [cl-struct-package-desc fuel (0 96) "No description available." nil tar "melpa-stable" nil nil nil])
  (full-ack [cl-struct-package-desc full-ack (1 0) "a front-end for ack" nil single "melpa-stable" nil ((:url . "http://nschum.de/src/emacs/full-ack/") (:keywords "tools" "matching")) nil])
  (fuzzy [cl-struct-package-desc fuzzy (0 1) "Fuzzy Matching" nil single "melpa-stable" nil ((:keywords "convenience")) nil])
  (fvwm-mode [cl-struct-package-desc fvwm-mode (1 6 4) "major mode for editing Fvwm configuration files" nil single "melpa-stable" nil ((:keywords "files")) nil])
  (fwb-cmds [cl-struct-package-desc fwb-cmds (0 4 0) "misc frame, window and buffer commands" nil single "melpa-stable" nil ((:url . "http://github.com/tarsius/fwb-cmds") (:keywords "convenience")) nil])
  (gather [cl-struct-package-desc gather (1 1 0) "Gather string in buffer." nil single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-gather/raw/master/gather.el") (:keywords "matching" "convenience" "tools")) nil])
  (geiser [cl-struct-package-desc geiser (0 7) "GNU Emacs and Scheme talk to each other" nil tar "melpa-stable" nil nil nil])
  (ggo-mode [cl-struct-package-desc ggo-mode (20130521) "Gengetopt major mode" nil single "melpa-stable" nil ((:keywords "extensions" "convenience" "local")) nil])
  (ggtags [cl-struct-package-desc ggtags (0 8 9) "emacs frontend to GNU Global source code tagging system" ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/leoliu/ggtags") (:keywords "tools" "convenience")) nil])
  (gh [cl-struct-package-desc gh (0 9 2) "A GitHub library for Emacs" ((eieio (1 4)) (pcache (0 3 0)) (logito (0 1))) tar "melpa-stable" nil nil nil])
  (ghc [cl-struct-package-desc ghc (5 2 1 2) "Sub mode for Haskell mode" nil tar "melpa-stable" nil nil nil])
  (gist [cl-struct-package-desc gist (1 2 1) "Emacs integration for gist.github.com" ((eieio (1 4)) (gh (0 8 1)) (tabulated-list (0))) single "melpa-stable" nil ((:keywords "gist" "git" "github" "paste" "pastie" "pastebin")) nil])
  (git [cl-struct-package-desc git (0 1 1) "An Elisp API for programmatically using Git" ((s (1 7 0)) (dash (2 2 0)) (f (0 10 0))) single "melpa-stable" nil ((:url . "http://github.com/rejeep/git.el") (:keywords "git")) nil])
  (git-auto-commit-mode [cl-struct-package-desc git-auto-commit-mode (4 3 2) "Emacs Minor mode to automatically commit and push" nil single "melpa-stable" nil ((:url . "http://ryuslash.org/projects/git-auto-commit-mode/") (:keywords "vc")) nil])
  (git-commit-mode [cl-struct-package-desc git-commit-mode (0 15 0) "Major mode for editing git commit messages" nil single "melpa-stable" nil ((:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git")) nil])
  (git-gutter+ [cl-struct-package-desc git-gutter+ (0 2) "Manage Git hunks straight from the buffer" nil single "melpa-stable" nil ((:url . "https://github.com/nonsequitur/git-gutter-plus")) nil])
  (git-gutter [cl-struct-package-desc git-gutter (0 80) "Port of Sublime Text plugin GitGutter" ((cl-lib (0 5)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-git-gutter")) nil])
  (git-gutter-fringe+ [cl-struct-package-desc git-gutter-fringe+ (0 1) "Fringe version of git-gutter+.el" ((git-gutter+ (0 1)) (fringe-helper (20130519 1641))) single "melpa-stable" nil ((:url . "https://github.com/nonsequitur/git-gutter-fringe-plus")) nil])
  (git-gutter-fringe [cl-struct-package-desc git-gutter-fringe (0 21) "Fringe version of git-gutter.el" ((git-gutter (0 73)) (fringe-helper (0 1 1)) (cl-lib (0 5)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-git-gutter-fringe")) nil])
  (git-link [cl-struct-package-desc git-link (0 1 0) "Get the GitHub/Bitbucket/Gitorious URL for a buffer location" nil single "melpa-stable" nil ((:url . "http://github.com/sshaw/git-link") (:keywords "git")) nil])
  (git-messenger [cl-struct-package-desc git-messenger (0 16) "Pop up last commit information of current line" ((popup (0 5 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-git-messenger")) nil])
  (git-rebase-mode [cl-struct-package-desc git-rebase-mode (0 15 0) "Major mode for editing git rebase files" nil single "melpa-stable" nil ((:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git")) nil])
  (git-timemachine [cl-struct-package-desc git-timemachine (2 0) "Walk through git revisions of a file" nil single "melpa-stable" nil ((:url . "https://github.com/pidu/git-timemachine") (:keywords "git")) nil])
  (gitattributes-mode [cl-struct-package-desc gitattributes-mode (0 15 0) "Major mode for editing .gitattributes files" nil single "melpa-stable" nil ((:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git")) nil])
  (gitconfig [cl-struct-package-desc gitconfig (1 0 0) "Emacs lisp interface to work with git-config variables" nil single "melpa-stable" nil ((:keywords "git" "gitconfig" "git-config")) nil])
  (gitconfig-mode [cl-struct-package-desc gitconfig-mode (0 15 0) "Major mode for editing .gitconfig files" nil single "melpa-stable" nil ((:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git")) nil])
  (github-clone [cl-struct-package-desc github-clone (0 2) "Fork and clone github repos" ((gh (0 7 2)) (magit (1 2 0)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/dgtized/github-clone.el") (:keywords "vc" "tools")) nil])
  (gitignore-mode [cl-struct-package-desc gitignore-mode (0 15 0) "Major mode for editing .gitignore files" nil single "melpa-stable" nil ((:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git")) nil])
  (gmail-message-mode [cl-struct-package-desc gmail-message-mode (1 3 2) "A major-mode for editing gmail messages using markdown syntax." ((ham-mode (1 0))) single "melpa-stable" nil ((:url . "http://github.com/Bruce-Connor/gmail-message-mode") (:keywords "mail" "convenience" "emulation")) nil])
  (gnuplot [cl-struct-package-desc gnuplot (0 7 0) "drive gnuplot from within emacs" nil tar "melpa-stable" nil ((:keywords "gnuplot" "plotting")) nil])
  (gnus-desktop-notify [cl-struct-package-desc gnus-desktop-notify (1 4) "Gnus Desktop Notification global minor mode" ((gnus (1 0))) single "melpa-stable" nil ((:url . "http://www.thregr.org/~wavexx/hacks/gnus-desktop-notify/")) nil])
  (go-direx [cl-struct-package-desc go-direx (0 4) "Tree style source code viewer for Go language" ((direx (1 0 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-go-direx")) nil])
  (go-eldoc [cl-struct-package-desc go-eldoc (0 22) "eldoc for go-mode" ((go-mode (1 0 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-go-eldoc")) nil])
  (golden-ratio [cl-struct-package-desc golden-ratio (0 0 4) "Automatic resizing of Emacs windows to the golden ratio" nil single "melpa-stable" nil ((:keywords "window" "resizing")) nil])
  (google-this [cl-struct-package-desc google-this (1 9) "A set of functions and bindings to google under point." ((emacs (24 1))) single "melpa-stable" nil ((:url . "http://github.com/Bruce-Connor/emacs-google-this") (:keywords "convenience" "hypermedia")) nil])
  (google-translate [cl-struct-package-desc google-translate (0 10 6) "Emacs interface to Google Translate." nil tar "melpa-stable" nil nil nil])
  (gotest [cl-struct-package-desc gotest (0 3 0) "Launch GO unit tests" ((s (1 9 0)) (f (0 17 2)) (go-mode (1 0 0))) single "melpa-stable" nil ((:url . "https://github.com/nlamirault/gotest.el") (:keywords "languages" "go" "tests")) nil])
  (goto-gem [cl-struct-package-desc goto-gem (1 2) "Open dired in gem directory" ((s (1 9 0))) single "melpa-stable" nil ((:keywords "gemfile" "convenience")) nil])
  (gradle-mode [cl-struct-package-desc gradle-mode (0 5 5) "Gradle integration with Emacs' compile" ((s (1 8 0))) single "melpa-stable" nil ((:url . "http://github.com/jacobono/emacs-gradle-mode") (:keywords "gradle")) nil])
  (grails-projectile-mode [cl-struct-package-desc grails-projectile-mode (1 1 1) "Grails mode with Projectile for projects management." ((projectile (0 10 0)) (emacs (24)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/yveszoundi/grails-projectile-mode") (:keywords "grails" "projectile")) nil])
  (grapnel [cl-struct-package-desc grapnel (0 5 3) "HTTP request lib with flexible callback dispatch" nil single "melpa-stable" nil ((:url . "http://www.github.com/leathekd/grapnel")) nil])
  (grass-mode [cl-struct-package-desc grass-mode (0 1) "Provides Emacs modes for interacting with the GRASS GIS program" ((cl-lib (0 2))) single "melpa-stable" nil ((:keywords "grass" "gis")) nil])
  (grin [cl-struct-package-desc grin (1 0) "run grin and grind (python replacements for grep and find) putting hits in a grep buffer" nil single "melpa-stable" nil ((:url . "http://bitbucket.org/dariusp686/emacs-grin") (:keywords "python" "grin" "grind" "grep" "find")) nil])
  (grizzl [cl-struct-package-desc grizzl (0 1 1) "Fuzzy Search Library & Completing Read" nil tar "melpa-stable" nil nil nil])
  (groovy-mode [cl-struct-package-desc groovy-mode (201311291207) "Groovy mode derived mode" nil tar "melpa-stable" nil nil nil])
  (gruber-darker-theme [cl-struct-package-desc gruber-darker-theme (0 6) "Gruber Darker color theme for Emacs 24." nil single "melpa-stable" nil ((:url . "http://github.com/rexim/gruber-darker-theme")) nil])
  (guru-mode [cl-struct-package-desc guru-mode (0 2) "Become an Emacs guru" nil single "melpa-stable" nil ((:url . "https://github.com/bbatsov/guru-mode") (:keywords "convenience")) nil])
  (hackernews [cl-struct-package-desc hackernews (0 2) "Access the hackernews aggregator from Emacs" ((json (1 2))) tar "melpa-stable" nil nil nil])
  (ham-mode [cl-struct-package-desc ham-mode (1 1 1) "Html As Markdown. Transparently edit an html file using markdown." ((html-to-markdown (1 2)) (markdown-mode (2 0))) single "melpa-stable" nil ((:url . "http://github.com/Bruce-Connor/ham-mode") (:keywords "convenience" "emulation" "wp")) nil])
  (haml-mode [cl-struct-package-desc haml-mode (3 1 8) "Major mode for editing Haml files" ((ruby-mode (1 0))) single "melpa-stable" nil ((:url . "http://github.com/nex3/haml/tree/master") (:keywords "markup" "language" "html")) nil])
  (hardhat [cl-struct-package-desc hardhat (0 4 4) "Protect against clobbering user-writable files" ((ignoramus (0 7 0))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/hardhat") (:keywords "convenience")) nil])
  (haskell-mode [cl-struct-package-desc haskell-mode (13 12) "A Haskell editing mode" ((cl-lib (0 5))) tar "melpa-stable" nil nil nil])
  (helm [cl-struct-package-desc helm (1 6 8) "Helm is an Emacs incremental and narrowing framework" ((emacs (24)) (cl-lib (0 5)) (async (1 2))) tar "melpa-stable" nil ((:url . "http://github.com/emacs-helm/helm")) nil])
  (helm-ack [cl-struct-package-desc helm-ack (0 13) "Ack command with helm interface" ((helm (1 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-helm-ack")) nil])
  (helm-ag [cl-struct-package-desc helm-ag (0 37) "the silver searcher with helm interface" ((helm (1 5 6)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-helm-ag")) nil])
  (helm-backup [cl-struct-package-desc helm-backup (0 2 0) "Backup each file change using git" ((helm (1 5 5)) (s (1 8 0))) single "melpa-stable" nil ((:url . "http://github.com/antham/helm-backup") (:keywords "backup")) nil])
  (helm-dash [cl-struct-package-desc helm-dash (1 1 0) "Helm extension to search dash docsets" ((helm (0 0 0))) single "melpa-stable" nil ((:url . "http://github.com/areina/helm-dash") (:keywords "docs")) nil])
  (helm-descbinds [cl-struct-package-desc helm-descbinds (1 7 1) "Yet Another `describe-bindings' with `helm'." nil single "melpa-stable" nil ((:keywords "helm" "help")) nil])
  (helm-ghq [cl-struct-package-desc helm-ghq (1 4 2) "ghq with helm interface" ((helm (1 6 5))) single "melpa-stable" nil ((:url . "https://github.com/masutaka/emacs-helm-ghq")) nil])
  (helm-github-stars [cl-struct-package-desc helm-github-stars (1 1 2) "Helm integration for your starred repositories on github" ((helm (1 6 8))) single "melpa-stable" nil ((:url . "https://github.com/Sliim/helm-github-stars") (:keywords "helm" "github" "stars")) nil])
  (helm-gtags [cl-struct-package-desc helm-gtags (1 4 6) "GNU GLOBAL helm interface" ((helm (1 5 6)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-helm-gtags")) nil])
  (helm-hayoo [cl-struct-package-desc helm-hayoo (0 0 5) "Source and configured helm for searching hayoo" ((helm (1 6 0)) (json (1 2)) (haskell-mode (13 7))) single "melpa-stable" nil ((:keywords "helm")) nil])
  (helm-open-github [cl-struct-package-desc helm-open-github (0 13) "Utilities of Opening Github Page" ((helm (1 0)) (gh (0 8 2)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-helm-open-github")) nil])
  (helm-package [cl-struct-package-desc helm-package (0 2) "Listing ELPA packages with helm interface" ((helm (1 0)) (cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-helm-package")) nil])
  (helm-perldoc [cl-struct-package-desc helm-perldoc (0 7) "perldoc with helm interface" ((helm (1 0)) (deferred (0 3 1)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-helm-perldoc")) nil])
  (helm-proc [cl-struct-package-desc helm-proc (0 0 4) "Helm interface for managing system processes" ((helm (1 6 0))) tar "melpa-stable" nil nil nil])
  (helm-projectile [cl-struct-package-desc helm-projectile (0 11 0) "Helm integration for Projectile" ((helm (1 4 0)) (projectile (0 11 0)) (cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/bbatsov/projectile") (:keywords "project" "convenience")) nil])
  (helm-pydoc [cl-struct-package-desc helm-pydoc (0 6) "pydoc with helm interface" ((helm (1 0)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-helm-pydoc")) nil])
  (helm-robe [cl-struct-package-desc helm-robe (0 1) "completing read function for robe" ((helm (1 0))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-helm-robe")) nil])
  (helm-rubygems-org [cl-struct-package-desc helm-rubygems-org (0 0 1) "Use helm to search rubygems.org" ((emacs (24)) (helm (1 6 3)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/neomantic/helm-rubygems-org") (:keywords "ruby" "rubygems" "gemfile" "helm")) nil])
  (helm-sage [cl-struct-package-desc helm-sage (0 0 2) "A helm extension for sage-shell-mode." ((cl-lib (0 5)) (helm (1 5 6)) (sage-shell-mode (0 0 1))) single "melpa-stable" nil ((:url . "https://github.com/stakemori/helm-sage") (:keywords "sage" "math" "helm")) nil])
  (helm-spaces [cl-struct-package-desc helm-spaces (0 2) "helm sources for spaces" ((helm (1 0)) (spaces (0 1 0))) single "melpa-stable" nil ((:url . "https://github.com/yasuyk/helm-spaces") (:keywords "helm" "frames" "convenience")) nil])
  (helm-themes [cl-struct-package-desc helm-themes (0 5) "Color theme selection with helm interface" ((helm (1 0))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-helm-themes")) nil])
  (highlight-blocks [cl-struct-package-desc highlight-blocks (0 1 13) "Highlight the blocks point is in" ((emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/Fanael/highlight-blocks")) nil])
  (highlight-defined [cl-struct-package-desc highlight-defined (0 1 5) "Syntax highlighting of known Elisp symbols" ((emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/Fanael/highlight-defined")) nil])
  (highlight-numbers [cl-struct-package-desc highlight-numbers (0 2) "Highlight numbers in source code" ((emacs (24)) (parent-mode (2 0))) single "melpa-stable" nil ((:url . "https://github.com/Fanael/highlight-numbers")) nil])
  (highlight-parentheses [cl-struct-package-desc highlight-parentheses (1 0 2) "highlight surrounding parentheses" nil single "melpa-stable" nil ((:url . "http://nschum.de/src/emacs/highlight-parentheses/") (:keywords "faces" "matching")) nil])
  (highlight-quoted [cl-struct-package-desc highlight-quoted (0 1) "Highlight Lisp quotes and quoted symbols" ((emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/Fanael/highlight-quoted")) nil])
  (highlight-symbol [cl-struct-package-desc highlight-symbol (1 2) "automatic and manual symbol highlighting" nil single "melpa-stable" nil ((:url . "http://nschum.de/src/emacs/highlight-symbol/") (:keywords "faces" "matching")) nil])
  (hippie-expand-slime [cl-struct-package-desc hippie-expand-slime (0 1) "Hook slime's completion into hippie-expand" nil single "melpa-stable" nil ((:url . "https://github.com/purcell/hippie-expand-slime")) nil])
  (hippie-namespace [cl-struct-package-desc hippie-namespace (0 5 8) "Special treatment for namespace prefixes in hippie-expand" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/hippie-namespace") (:keywords "convenience" "lisp" "tools" "completion")) nil])
  (historyf [cl-struct-package-desc historyf (0 0 8) "file history library like browser" nil single "melpa-stable" nil ((:url . "https://github.com/k1LoW/emacs-historyf")) nil])
  (hl-sentence [cl-struct-package-desc hl-sentence (3) "highlight a sentence based on customizable face" nil single "melpa-stable" nil ((:url . "http://github.com/milkypostman/hl-sentence") (:keywords "highlighting")) nil])
  (hl-sexp [cl-struct-package-desc hl-sexp (1 0 0) "highlight the current sexp" nil single "melpa-stable" nil ((:keywords "faces" "frames" "emulation")) nil])
  (hl-todo [cl-struct-package-desc hl-todo (1 4 0) "highlight TODO keywords" nil single "melpa-stable" nil ((:url . "http://github.com/tarsius/hl-todo") (:keywords "convenience")) nil])
  (hookify [cl-struct-package-desc hookify (0 2 1) "Interactive commands to create temporary hooks" ((s (1 9 0)) (dash (1 5 0))) single "melpa-stable" nil ((:url . "https://github.com/Silex/hookify") (:keywords "hook" "convenience")) nil])
  (html-to-markdown [cl-struct-package-desc html-to-markdown (1 5) "HTML to Markdown converter written in Emacs-lisp." nil single "melpa-stable" nil ((:url . "http://github.com/Bruce-Connor/html-to-markdown") (:keywords "tools" "wp" "languages")) nil])
  (httpcode [cl-struct-package-desc httpcode (0 1) "explains the meaning of an HTTP status code" nil single "melpa-stable" nil ((:url . "http://github.com/rspivak/httpcode.el")) nil])
  (httprepl [cl-struct-package-desc httprepl (1 1) "An HTTP REPL" ((s (1 9 0)) (dash (2 5 0)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/gregsexton/httprepl.el") (:keywords "http" "repl")) nil])
  (hyde [cl-struct-package-desc hyde (0 2) "No description available." nil tar "melpa-stable" nil nil nil])
  (ibuffer-vc [cl-struct-package-desc ibuffer-vc (0 9) "Group ibuffer's list by VC project, or show VC status" ((cl-lib (0 2))) single "melpa-stable" nil ((:url . "http://github.com/purcell/ibuffer-vc") (:keywords "themes")) nil])
  (identica-mode [cl-struct-package-desc identica-mode (1 3 1) "Major mode API client for status.net open microblogging" nil tar "melpa-stable" nil ((:url . "http://blog.gabrielsaldana.org/identica-mode-for-emacs/") (:keywords "identica" "web")) nil])
  (idle-highlight-mode [cl-struct-package-desc idle-highlight-mode (1 1 3) "highlight the word the point is on" nil single "melpa-stable" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/IdleHighlight") (:keywords "convenience")) nil])
  (ido-complete-space-or-hyphen [cl-struct-package-desc ido-complete-space-or-hyphen (1 1) "No description available." nil single "melpa-stable" nil nil nil])
  (ido-load-library [cl-struct-package-desc ido-load-library (0 2 0) "Load-library alternative using ido-completing-read" ((persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/ido-load-library") (:keywords "maint" "completion")) nil])
  (ido-ubiquitous [cl-struct-package-desc ido-ubiquitous (2 17) "Use ido (nearly) everywhere." ((emacs (24 1))) single "melpa-stable" nil ((:url . "https://github.com/DarwinAwardWinner/ido-ubiquitous") (:keywords "convenience" "completion" "ido")) nil])
  (ido-vertical-mode [cl-struct-package-desc ido-vertical-mode (0 1 6) "Makes ido-mode display vertically." nil single "melpa-stable" nil ((:url . "https://github.com/gempesaw/ido-vertical-mode.el") (:keywords "convenience")) nil])
  (idris-mode [cl-struct-package-desc idris-mode (0 9 16) "Major mode for editing Idris code" ((emacs (24))) tar "melpa-stable" nil ((:url . "https://github.com/idris-hackers/idris-mode") (:keywords "languages")) nil])
  (iflipb [cl-struct-package-desc iflipb (1 2) "interactively flip between recently visited buffers" nil single "melpa-stable" nil ((:url . "http://hg.rosdahl.net/iflipb")) nil])
  (ignoramus [cl-struct-package-desc ignoramus (0 7 0) "Ignore backups, build files, et al." nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/ignoramus") (:keywords "convenience" "tools")) nil])
  (immutant-server [cl-struct-package-desc immutant-server (1 2 0) "Run your Immutant server in Emacs" nil single "melpa-stable" nil ((:url . "http://www.github.com/leathekd/immutant-server.el")) nil])
  (import-popwin [cl-struct-package-desc import-popwin (0 8) "popwin buffer near by import statements with popwin" ((popwin (0 6)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-import-popwin")) nil])
  (inf-ruby [cl-struct-package-desc inf-ruby (2 4 0) "Run a Ruby process in a buffer" nil single "melpa-stable" nil ((:url . "http://github.com/nonsequitur/inf-ruby") (:keywords "languages" "ruby")) nil])
  (inflections [cl-struct-package-desc inflections (2 3) "convert english words between singular and plural" nil single "melpa-stable" nil ((:url . "https://github.com/eschulte/jump.el") (:keywords "ruby" "rails" "languages" "oop")) nil])
  (init-loader [cl-struct-package-desc init-loader (0 2) "Loader for configuration files" nil single "melpa-stable" nil ((:url . "https://github.com/emacs-jp/init-loader/")) nil])
  (initsplit [cl-struct-package-desc initsplit (1 6) "No description available." nil single "melpa-stable" nil nil nil])
  (inline-crypt [cl-struct-package-desc inline-crypt (0 1 4) "Simple inline encryption via openssl" nil tar "melpa-stable" nil nil nil])
  (insert-shebang [cl-struct-package-desc insert-shebang (0 9 4) "Insert shebang line automatically." nil single "melpa-stable" nil ((:url . "http://github.com/psachin/insert-shebang") (:keywords "shebang" "tool" "convenience")) nil])
  (instapaper [cl-struct-package-desc instapaper (0 9 5) "No description available." nil single "melpa-stable" nil nil nil])
  (ir-black-theme [cl-struct-package-desc ir-black-theme (1 0 1) "Port of ir-black theme" nil single "melpa-stable" nil ((:keywords "faces")) nil])
  (irony [cl-struct-package-desc irony (0 1 2) "C/C++ minor mode powered by libclang" ((cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/Sarcasm/irony-mode") (:keywords "c" "convenience" "tools")) nil])
  (ix [cl-struct-package-desc ix (0 7) "Emacs client for http://ix.io pastebin" ((grapnel (0 5 3))) single "melpa-stable" nil ((:url . "http://www.github.com/theanalyst/ix.el")) nil])
  (j-mode [cl-struct-package-desc j-mode (1 1 1) "Major mode for editing J programs" nil tar "melpa-stable" nil ((:url . "http://github.com/zellio/j-mode") (:keywords "j" "langauges")) nil])
  (jabber [cl-struct-package-desc jabber (0 8 92) "A Jabber client for Emacs." nil tar "melpa-stable" nil nil nil])
  (jedi [cl-struct-package-desc jedi (0 2 2) "a Python auto-completion for Emacs" ((emacs (24)) (jedi-core (0 2 2)) (auto-complete (1 4))) single "melpa-stable" nil nil nil])
  (js2-closure [cl-struct-package-desc js2-closure (1 4) "Google Closure dependency manager" ((js2-mode (20140114))) single "melpa-stable" nil ((:url . "http://github.com/jart/js2-closure")) nil])
  (js2-mode [cl-struct-package-desc js2-mode (20141118) "Improved JavaScript editing mode" ((emacs (24 1))) tar "melpa-stable" nil ((:url . "https://github.com/mooz/js2-mode/") (:keywords "languages" "javascript")) nil])
  (js2-refactor [cl-struct-package-desc js2-refactor (0 6 1) "A JavaScript refactoring library for emacs." ((js2-mode (20101228)) (multiple-cursors (1 0 0)) (dash (1 0 0)) (s (1 0 0)) (yasnippet (20130218))) tar "melpa-stable" nil nil nil])
  (js3-mode [cl-struct-package-desc js3-mode (1 1 0) "An improved JavaScript editing mode" nil tar "melpa-stable" nil ((:keywords "javascript" "languages")) nil])
  (json-mode [cl-struct-package-desc json-mode (1 1 0) "Major mode for editing JSON files" nil single "melpa-stable" nil ((:url . "https://github.com/joshwnj/json-mode")) nil])
  (jsx-mode [cl-struct-package-desc jsx-mode (0 1 10) "major mode for JSX" nil single "melpa-stable" nil ((:url . "https://github.com/jsx/jsx-mode.el")) nil])
  (julia-mode [cl-struct-package-desc julia-mode (0 3 6) "No description available." nil single "melpa-stable" nil nil nil])
  (jump [cl-struct-package-desc jump (2 3) "build functions which contextually jump between files" ((findr (0 7)) (inflections (1 1))) single "melpa-stable" nil ((:url . "http://github.com/eschulte/jump.el/tree/master") (:keywords "project" "convenience" "navigation")) nil])
  (jump-to-line [cl-struct-package-desc jump-to-line (0 2 0) "Jump to line number at point." nil single "melpa-stable" nil ((:keywords "jump" "line" "back" "file" "ruby" "csharp" "python" "perl")) nil])
  (key-combo [cl-struct-package-desc key-combo (1 2) "map key sequence to commands" nil tar "melpa-stable" nil ((:url . "https://github.com/uk-ar/key-combo") (:keywords "keyboard" "input")) nil])
  (keychain-environment [cl-struct-package-desc keychain-environment (2 2 0) "load keychain environment variables" nil single "melpa-stable" nil ((:url . "https://github.com/tarsius/keychain-environment") (:keywords "gnupg" "pgp" "ssh")) nil])
  (keydef [cl-struct-package-desc keydef (1 15) "a simpler way to define keys, with kbd syntax" nil single "melpa-stable" nil ((:keywords "convenience" "lisp" "customization" "keyboard" "keys")) nil])
  (keymap-utils [cl-struct-package-desc keymap-utils (0 4 4) "Keymap utilities" ((cl-lib (0 2))) tar "melpa-stable" nil nil nil])
  (kill-ring-search [cl-struct-package-desc kill-ring-search (1 1) "incremental search for the kill ring" nil single "melpa-stable" nil ((:url . "http://nschum.de/src/emacs/kill-ring-search/") (:keywords "convenience" "matching")) nil])
  (killer [cl-struct-package-desc killer (0 2 2) "kill and delete text" nil single "melpa-stable" nil ((:url . "http://github.com/tarsius/killer") (:keywords "convenience")) nil])
  (kivy-mode [cl-struct-package-desc kivy-mode (1 8 0) "Emacs major mode for editing Kivy files" nil single "melpa-stable" nil nil nil])
  (know-your-http-well [cl-struct-package-desc know-your-http-well (0 2 0) "Look up the meaning of HTTP headers, methods, relations, status codes" nil tar "melpa-stable" nil nil nil])
  (langtool [cl-struct-package-desc langtool (1 2 3) "Grammar check utility using LanguageTool" nil single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-langtool/raw/master/langtool.el") (:keywords "docs")) nil])
  (latex-extra [cl-struct-package-desc latex-extra (1 8 1) "Adds several useful functionalities to LaTeX-mode." ((auctex (11 86 1)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "http://github.com/Bruce-Connor/latex-extra") (:keywords "tex")) nil])
  (ledger-mode [cl-struct-package-desc ledger-mode (3 1) "Helper code for use with the \"ledger\" command-line tool" nil tar "melpa-stable" nil nil nil])
  (less-css-mode [cl-struct-package-desc less-css-mode (0 19) "Major mode for editing LESS CSS files (lesscss.org)" nil single "melpa-stable" nil ((:url . "https://github.com/purcell/less-css-mode") (:keywords "less" "css" "mode")) nil])
  (lfe-mode [cl-struct-package-desc lfe-mode (0 9 1) "Lisp Flavoured Erlang mode" nil tar "melpa-stable" nil nil nil])
  (lingr [cl-struct-package-desc lingr (0 2) "Lingr Client for GNU Emacs" nil single "melpa-stable" nil ((:url . "http://github.com/lugecy/lingr-el") (:keywords "chat" "client" "internet")) nil])
  (link [cl-struct-package-desc link (1 10) "No description available." nil single "melpa-stable" nil nil nil])
  (linum-relative [cl-struct-package-desc linum-relative (0 4) "display relative line number in emacs." nil single "melpa-stable" nil ((:url . "http://github.com/coldnew/linum-relative") (:keywords "converience")) nil])
  (lispy [cl-struct-package-desc lispy (0 24 0) "vi-like Paredit" ((helm (1 5 3)) (ace-jump-mode (2 0)) (s (1 4 0)) (multiple-cursors (1 3 0)) (iedit (0 97)) (highlight (0)) (hydra (0 4 1)) (ace-window (0 7 0))) tar "melpa-stable" nil nil nil])
  (lispyscript-mode [cl-struct-package-desc lispyscript-mode (0 3 5) "Major mode for LispyScript code." nil single "melpa-stable" nil ((:url . "https://github.com/krisajenkins/lispyscript-mode") (:keywords "lisp" "languages")) nil])
  (list-utils [cl-struct-package-desc list-utils (0 4 2) "List-manipulation utility functions" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/list-utils") (:keywords "extensions")) nil])
  (literate-coffee-mode [cl-struct-package-desc literate-coffee-mode (0 4) "major-mode for Literate CoffeeScript" ((coffee-mode (0 5 0))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-literate-coffee-mode")) nil])
  (log4j-mode [cl-struct-package-desc log4j-mode (1 3) "major mode for viewing log files" nil single "melpa-stable" nil ((:keywords "log" "log4j" "java")) nil])
  (logalimacs [cl-struct-package-desc logalimacs (1 0 0) "Front-end to logaling-command for Ruby gems" nil single "melpa-stable" nil ((:url . "https://github.com/logaling/logalimacs")) nil])
  (logito [cl-struct-package-desc logito (0 1) "logging library for Emacs" ((eieio (1 3))) single "melpa-stable" nil ((:keywords "lisp" "tool")) nil])
  (love-minor-mode [cl-struct-package-desc love-minor-mode (1 1) "Minor mode for working on L\303\226VE projects" nil single "melpa-stable" nil ((:url . "https://github.com/ejmr/love-minor-mode")) nil])
  (lua-mode [cl-struct-package-desc lua-mode (20140514) "a major-mode for editing Lua scripts" nil single "melpa-stable" nil ((:url . "http://immerrr.github.com/lua-mode") (:keywords "languages" "processes" "tools")) nil])
  (m-buffer [cl-struct-package-desc m-buffer (0 10) "List-Oriented, Functional Buffer Manipulation" ((dash (2 8 0)) (emacs (24 3))) tar "melpa-stable" nil nil nil])
  (macro-math [cl-struct-package-desc macro-math (1 0) "in-buffer mathematical operations" nil single "melpa-stable" nil ((:url . "http://nschum.de/src/emacs/macro-math/") (:keywords "convenience")) nil])
  (macrostep [cl-struct-package-desc macrostep (0 8) "interactive macro stepper for Emacs Lisp" nil single "melpa-stable" nil ((:url . "https://github.com/joddie/macrostep") (:keywords "lisp" "languages" "macro" "debugging")) nil])
  (magit [cl-struct-package-desc magit (90150116) "control Git from Emacs" ((cl-lib (0 3)) (git-commit-mode (0 14 0)) (git-rebase-mode (0 14 0))) tar "melpa-stable" nil ((:keywords "vc" "tools")) nil])
  (magit-annex [cl-struct-package-desc magit-annex (0 10 0) "Use git annex within magit" ((cl-lib (0 3)) (magit (1 2 0))) single "melpa-stable" nil ((:url . "https://github.com/kyleam/magit-annex") (:keywords "magit" "git-annex")) nil])
  (magit-find-file [cl-struct-package-desc magit-find-file (2 0 0) "completing-read over all files in Git" ((magit (1 2 0)) (dash (2 8 0))) single "melpa-stable" nil ((:url . "https://github.com/bradleywright/magit-find-file.el") (:keywords "git")) nil])
  (magit-gh-pulls [cl-struct-package-desc magit-gh-pulls (0 3) "GitHub pull requests extension for Magit" ((gh (0 4 3)) (magit (1 1 0))) single "melpa-stable" nil ((:keywords "tools")) nil])
  (magit-gitflow [cl-struct-package-desc magit-gitflow (1 0 0) "gitflow extension for magit" ((magit (1 3 0))) single "melpa-stable" nil ((:url . "https://github.com/jtatarik/magit-gitflow") (:keywords "vc" "tools")) nil])
  (magit-push-remote [cl-struct-package-desc magit-push-remote (0 5 0) "push remote support for Magit" ((magit (1 3 0))) single "melpa-stable" nil ((:url . "https://github.com/tarsius/magit-push-remote") (:keywords "convenience")) nil])
  (magit-stgit [cl-struct-package-desc magit-stgit (90150116) "StGit plug-in for Magit" ((cl-lib (0 3)) (magit (1 3 0))) single "melpa-stable" nil ((:keywords "vc" "tools")) nil])
  (magit-svn [cl-struct-package-desc magit-svn (90150116) "git-svn plug-in for Magit" ((cl-lib (0 3)) (magit (1 3 0))) single "melpa-stable" nil ((:keywords "vc" "tools")) nil])
  (magit-topgit [cl-struct-package-desc magit-topgit (90150116) "topgit plug-in for Magit" ((cl-lib (0 3)) (magit (1 3 0))) single "melpa-stable" nil ((:keywords "vc" "tools")) nil])
  (magit-tramp [cl-struct-package-desc magit-tramp (0 1 0) "git method for TRAMP" ((magit (1 2 0))) single "melpa-stable" nil ((:url . "https://github.com/sigma/magit-tramp")) nil])
  (make-color [cl-struct-package-desc make-color (0 4) "Alternative to picking color - update fg/bg color by pressing r/g/b/... keys" nil single "melpa-stable" nil ((:url . "http://github.com/alezost/make-color.el") (:keywords "color")) nil])
  (makey [cl-struct-package-desc makey (0 3) "interactive commandline mode" ((cl-lib (0 2))) single "melpa-stable" nil nil nil])
  (malabar-mode [cl-struct-package-desc malabar-mode (20140303 946) "A better Java mode for Emacs" ((fringe-helper (1 0 1))) tar "melpa-stable" nil ((:url . "http://www.github.com/m0smith/malabar-mode") (:keywords "java" "maven" "language" "malabar")) nil])
  (malinka [cl-struct-package-desc malinka (0 3 1) "A C/C++ project configuration package for Emacs" ((s (1 9 0)) (dash (2 4 0)) (f (0 11 0)) (cl-lib (0 3)) (rtags (0 0)) (projectile (0 11 0))) single "melpa-stable" nil ((:url . "https://github.com/LefterisJP/malinka") (:keywords "c" "c++" "project-management")) nil])
  (mallard-mode [cl-struct-package-desc mallard-mode (0 3 0) "Major mode for editing Mallard files" nil tar "melpa-stable" nil ((:url . "https://github.com/jhradilek/emacs-mallard-mode") (:keywords "xml" "mallard")) nil])
  (map-progress [cl-struct-package-desc map-progress (0 5 0) "mapping macros that report progress" nil single "melpa-stable" nil ((:url . "https://github.com/tarsius/map-progress/") (:keywords "convenience")) nil])
  (map-regexp [cl-struct-package-desc map-regexp (0 3 0) "map over matches of a regular expression" ((cl-lib (0 2))) single "melpa-stable" nil ((:url . "https://github.com/tarsius/map-regexp") (:keywords "convenience")) nil])
  (mark-tools [cl-struct-package-desc mark-tools (0 3) "Some simple tools to access the mark-ring in Emacs" nil single "melpa-stable" nil ((:url . "https://github.com/stsquad/emacs-mark-tools")) nil])
  (markdown-mode [cl-struct-package-desc markdown-mode (2 0) "Emacs Major mode for Markdown-formatted text files" nil single "melpa-stable" nil ((:url . "http://jblevins.org/projects/markdown-mode/") (:keywords "markdown" "github flavored markdown" "itex")) nil])
  (markdown-toc [cl-struct-package-desc markdown-toc (0 0 7) "A simple TOC generator for markdown file" ((s (1 7 0)) (dash (2 5 0)) (markdown-mode (2 0))) tar "melpa-stable" nil nil nil])
  (marmalade [cl-struct-package-desc marmalade (0 0 4) "Elisp interface for the Emacs Lisp package server." ((furl (0 0 2))) single "melpa-stable" nil ((:url . "http://code.google.com/p/marmalade")) nil])
  (maxframe [cl-struct-package-desc maxframe (0 5) "No description available." nil single "melpa-stable" nil nil nil])
  (mc-extras [cl-struct-package-desc mc-extras (1 2 1) "Extra functions for multiple-cursors mode." ((multiple-cursors (1 2 1))) tar "melpa-stable" nil ((:url . "https://github.com/knu/mc-extras.el") (:keywords "editing" "cursors")) nil])
  (mentor [cl-struct-package-desc mentor (0 1) "Control rtorrent from GNU Emacs" nil tar "melpa-stable" nil ((:keywords "bittorrent" "rtorrent")) nil])
  (merlin [cl-struct-package-desc merlin (2 1 2) "Mode for Merlin, an assistant for OCaml." nil tar "melpa-stable" nil ((:url . "http://github.com/the-lambda-church/merlin") (:keywords "ocaml" "languages")) nil])
  (mew [cl-struct-package-desc mew (6 6) "Messaging in the Emacs World" nil tar "melpa-stable" nil nil nil])
  (migemo [cl-struct-package-desc migemo (1 9 1) "Japanese incremental search through dynamic pattern expansion" nil single "melpa-stable" nil ((:url . "https://github.com/emacs-jp/migemo")) nil])
  (milkode [cl-struct-package-desc milkode (0 4) "Command line search and direct jump with Milkode" nil single "melpa-stable" nil ((:keywords "milkode" "search" "grep" "jump" "keyword")) nil])
  (minibuffer-complete-cycle [cl-struct-package-desc minibuffer-complete-cycle (1 25 20130814) "Cycle through the *Completions* buffer" nil single "melpa-stable" nil ((:url . "https://github.com/knu/minibuffer-complete-cycle") (:keywords "completion")) nil])
  (minibuffer-cua [cl-struct-package-desc minibuffer-cua (1 0 0) "Make CUA mode's S-up/S-down work in minibuffer" nil single "melpa-stable" nil ((:url . "https://github.com/knu/minibuffer-cua.el") (:keywords "completion" "editing")) nil])
  (miniedit [cl-struct-package-desc miniedit (2 0) "Enhanced editing for minibuffer fields." nil single "melpa-stable" nil nil nil])
  (minimal-session-saver [cl-struct-package-desc minimal-session-saver (0 6 2) "Very lean session saver" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/minimal-session-saver") (:keywords "tools" "frames" "project")) nil])
  (minitest [cl-struct-package-desc minitest (0 8 0) "An Emacs mode for ruby minitest files" ((dash (1 0 0))) tar "melpa-stable" nil ((:url . "https://github.com/arthurnn/minitest-emacs")) nil])
  (mmm-mako [cl-struct-package-desc mmm-mako (1 1) "MMM submode class for Mako Templates" ((mmm-mode (0 4 8))) single "melpa-stable" nil ((:url . "https://bitbucket.org/pjenvey/mmm-mako")) nil])
  (mmm-mode [cl-struct-package-desc mmm-mode (0 5 2) "Allow Multiple Major Modes in a buffer" nil tar "melpa-stable" nil ((:url . "https://github.com/purcell/mmm-mode") (:keywords "convenience" "faces" "languages" "tools")) nil])
  (mocker [cl-struct-package-desc mocker (0 3 0) "mocking framework for emacs" ((eieio (1 3)) (el-x (0 2 4))) single "melpa-stable" nil ((:keywords "lisp" "testing")) nil])
  (mode-icons [cl-struct-package-desc mode-icons (0 1 0) "Show icons for modes" nil tar "melpa-stable" nil ((:url . "http://ryuslash.org/projects/mode-icons.html") (:keywords "multimedia")) nil])
  (mode-line-debug [cl-struct-package-desc mode-line-debug (1 2 2) "show status of `debug-on-error' in the mode-line" nil single "melpa-stable" nil ((:url . "https://github.com/tarsius/mode-line-debug") (:keywords "convenience" "lisp")) nil])
  (monroe [cl-struct-package-desc monroe (0 2 0) "Yet another client for nREPL" nil single "melpa-stable" nil ((:url . "http://www.github.com/sanel/monroe") (:keywords "languages" "clojure" "nrepl" "lisp")) nil])
  (morlock [cl-struct-package-desc morlock (0 4 0) "more font-lock keywords for elisp" nil single "melpa-stable" nil ((:url . "http://github.com/tarsius/morlock") (:keywords "convenience")) nil])
  (move-dup [cl-struct-package-desc move-dup (0 2 1) "Eclipse-like moving and duplicating lines or rectangles." nil single "melpa-stable" nil ((:keywords "convenience" "wp")) nil])
  (moz [cl-struct-package-desc moz (1 1 0) "Lets current buffer interact with inferior mozilla." nil single "melpa-stable" nil ((:url . "http://github.com/bard/mozrepl/raw/master/chrome/content/moz.el")) nil])
  (multi [cl-struct-package-desc multi (2 0 1) "Clojure-style multi-methods for emacs lisp" ((emacs (24))) single "melpa-stable" nil ((:url . "http://github.com/kurisuwhyte/emacs-multi") (:keywords "multimethod" "generic" "predicate" "dispatch")) nil])
  (multi-web-mode [cl-struct-package-desc multi-web-mode (0 2 1) "multiple major mode support for web editing" nil tar "melpa-stable" nil ((:keywords "convenience" "languages" "wp")) nil])
  (multiple-cursors [cl-struct-package-desc multiple-cursors (1 3 0) "Multiple cursors for Emacs." nil tar "melpa-stable" nil nil nil])
  (mustache-mode [cl-struct-package-desc mustache-mode (1 3) "A major mode for editing Mustache files." nil single "melpa-stable" nil nil nil])
  (mykie [cl-struct-package-desc mykie (0 2 1) "Command multiplexer: Register multiple functions to a keybind" nil tar "melpa-stable" nil ((:url . "https://github.com/yuutayamada/mykie-el") (:keywords "emacs" "configuration" "keybind")) nil])
  (names [cl-struct-package-desc names (0 5 4) "Namespaces for emacs-lisp. Works like C++ namespaces to avoid name clobbering." ((emacs (24 1)) (cl-lib (0 5))) tar "melpa-stable" nil ((:url . "http://github.com/Bruce-Connor/names") (:keywords "extensions" "lisp")) nil])
  (nav-flash [cl-struct-package-desc nav-flash (1 1 0) "Briefly highlight the current line" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/nav-flash") (:keywords "extensions" "navigation" "interface")) nil])
  (navi-mode [cl-struct-package-desc navi-mode (2 0) "major-mode for easy buffer-navigation" nil single "melpa-stable" nil ((:url . "https://github.com/tj64/navi")) nil])
  (navorski [cl-struct-package-desc navorski (0 2 7) "Helping you live in the terminal, like Viktor did." ((s (1 9 0)) (dash (1 5 0)) (multi-term (0 8 14))) single "melpa-stable" nil ((:keywords "terminal")) nil])
  (ncl-mode [cl-struct-package-desc ncl-mode (0 99 1) "Major Mode for editing NCL scripts and other goodies" ((emacs (24))) tar "melpa-stable" nil nil nil])
  (nemerle [cl-struct-package-desc nemerle (1 2) "major mode for editing nemerle programs" nil single "melpa-stable" nil ((:keywords "nemerle" "mode" "languages")) nil])
  (neotree [cl-struct-package-desc neotree (0 2 1) "A tree plugin like NerdTree for Vim" nil single "melpa-stable" nil ((:url . "https://github.com/jaypei/emacs-neotree")) nil])
  (ninja-mode [cl-struct-package-desc ninja-mode (1 5 3) "Major mode for editing .ninja files" ((emacs (24))) single "melpa-stable" nil nil nil])
  (nix-mode [cl-struct-package-desc nix-mode (1 8) "Major mode for editing Nix expressions" nil single "melpa-stable" nil ((:url . "https://github.com/NixOS/nix/tree/master/misc/emacs")) nil])
  (nodejs-repl [cl-struct-package-desc nodejs-repl (0 0 2) "Run Node.js REPL" nil single "melpa-stable" nil nil nil])
  (nose [cl-struct-package-desc nose (0 1 1) "Easy Python test running in Emacs" nil single "melpa-stable" nil ((:keywords "nose" "python" "testing")) nil])
  (notmuch [cl-struct-package-desc notmuch (0 19) "No description available." nil tar "melpa-stable" nil nil nil])
  (nrepl-ritz [cl-struct-package-desc nrepl-ritz (0 6 0) "nrepl extensions for ritz" ((nrepl (0 1 5))) single "melpa-stable" nil ((:url . "https://github.com/pallet/ritz") (:keywords "languages" "lisp" "nrepl")) nil])
  (nrepl-sync [cl-struct-package-desc nrepl-sync (0 3 1) "connect to nrepl port and eval .sync.clj." ((cider (0 6))) single "melpa-stable" nil ((:url . "https://github.com/phillord/lein-sync")) nil])
  (nsis-mode [cl-struct-package-desc nsis-mode (0 44) "NSIS-mode" nil tar "melpa-stable" nil ((:url . "http://github.com/mlf176f2/nsis-mode") (:keywords "nsis")) nil])
  (nvm [cl-struct-package-desc nvm (0 0 3) "Manage Node versions within Emacs" ((s (1 8 0)) (dash (2 4 0)) (f (0 14 0))) single "melpa-stable" nil ((:url . "http://github.com/rejeep/nvm.el") (:keywords "node" "nvm")) nil])
  (o-blog [cl-struct-package-desc o-blog (2 0) "" nil tar "melpa-stable" nil ((:keywords "emacs")) nil])
  (ob-sml [cl-struct-package-desc ob-sml (0 2) "org-babel functions for template evaluation" ((sml-mode (6 4))) single "melpa-stable" nil ((:url . "http://orgmode.org") (:keywords "literate programming" "reproducible research")) nil])
  (ob-translate [cl-struct-package-desc ob-translate (0 1 2) "Translation of text blocks in org-mode." ((google-translate (0 4)) (org (8))) single "melpa-stable" nil ((:url . "https://github.com/krisajenkins/ob-translate") (:keywords "org" "babel" "translate" "translation")) nil])
  (ocp-indent [cl-struct-package-desc ocp-indent (1 5) "automatic indentation with ocp-indent" nil single "melpa-stable" nil ((:url . "http://www.typerex.org/ocp-indent.html") (:keywords "ocaml" "languages")) nil])
  (octomacs [cl-struct-package-desc octomacs (0 0 1) "Octopress interface for Emacs" nil single "melpa-stable" nil ((:url . "http://technosorcery.net")) nil])
  (olivetti [cl-struct-package-desc olivetti (1 0 1) "Minor mode for a nice writing environment" nil single "melpa-stable" nil ((:keywords "wp")) nil])
  (operate-on-number [cl-struct-package-desc operate-on-number (1 1 0) "Operate on number at point with arithmetic functions" nil single "melpa-stable" nil ((:url . "https://github.com/knu/operate-on-number.el") (:keywords "editing")) nil])
  (org-agenda-property [cl-struct-package-desc org-agenda-property (1 3 1) "Display org properties in the agenda buffer." ((emacs (24 2))) single "melpa-stable" nil ((:url . "http://github.com/Bruce-Connor/org-agenda-property") (:keywords "calendar")) nil])
  (org-bullets [cl-struct-package-desc org-bullets (0 2 4) "Show bullets in org-mode as UTF-8 characters" nil single "melpa-stable" nil ((:url . "https://github.com/sabof/org-bullets")) nil])
  (org-elisp-help [cl-struct-package-desc org-elisp-help (0 1 0) "org links to emacs-lisp documentation" ((cl-lib (0 2)) (org (8 0))) single "melpa-stable" nil ((:url . "http://tarsius.github.com/org-elisp-help") (:keywords "org" "remember" "lisp")) nil])
  (org-journal [cl-struct-package-desc org-journal (1 7 0) "a simple org-mode based journaling mode" nil single "melpa-stable" nil ((:url . "http://github.com/bastibe/org-journal")) nil])
  (org-mac-iCal [cl-struct-package-desc org-mac-iCal (7 9 3 5) "Imports events from iCal.app to the Emacs diary" nil single "melpa-stable" nil ((:keywords "outlines" "calendar")) nil])
  (org-magit [cl-struct-package-desc org-magit (0 2 2) "basic support for magit links" ((magit (1 2 0)) (org (6 1))) single "melpa-stable" nil ((:keywords "git" "magit" "outlines")) nil])
  (org-outlook [cl-struct-package-desc org-outlook (0 11) "Outlook org" nil tar "melpa-stable" nil ((:url . "https://github.com/mlf176f2/org-outlook.el") (:keywords "org-outlook")) nil])
  (org-page [cl-struct-package-desc org-page (0 41) "a static site generator based on org mode" ((ht (1 5)) (mustache (0 22)) (htmlize (1 47)) (org (8))) tar "melpa-stable" nil nil nil])
  (org-pomodoro [cl-struct-package-desc org-pomodoro (1 7 1) "Pomodoro implementation for org-mode." ((alert (0 5 10)) (cl-lib (0 5))) tar "melpa-stable" nil nil nil])
  (org-protocol-jekyll [cl-struct-package-desc org-protocol-jekyll (0 1) "Jekyll's handler for org-protocol" nil single "melpa-stable" nil nil nil])
  (org-readme [cl-struct-package-desc org-readme (20130322 926) "Integrates Readme.org and Commentary/Change-logs." ((http-post-simple (1 0)) (yaoddmuse (0 1 1)) (header2 (21 0)) (lib-requires (21 0))) tar "melpa-stable" nil ((:url . "https://github.com/mlf176f2/org-readme") (:keywords "header2" "readme.org" "emacswiki" "git")) nil])
  (org-toodledo [cl-struct-package-desc org-toodledo (2 16) "Toodledo integration for Emacs Org mode" nil tar "melpa-stable" nil ((:keywords "outlines" "data")) nil])
  (org-trello [cl-struct-package-desc org-trello (0 6 9 3) "Minor mode to synchronize org-mode buffer and trello board" ((request-deferred (0 2 0)) (deferred (0 3 2)) (s (1 9 0)) (dash (2 8 0)) (emacs (24))) tar "melpa-stable" nil nil nil])
  (orgbox [cl-struct-package-desc orgbox (0 5 0) "Mailbox-like task scheduling Org." ((org (8 0)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/yasuhito/orgbox") (:keywords "org")) nil])
  (orglink [cl-struct-package-desc orglink (0 2 2) "use Org Mode links in other modes" ((dash (1 3 2)) (org (8 0))) single "melpa-stable" nil ((:url . "http://github.com/tarsius/orglink") (:keywords "hypertext")) nil])
  (osx-browse [cl-struct-package-desc osx-browse (0 8 8) "Web browsing helpers for OS X" ((string-utils (0 3 2)) (browse-url-dwim (0 6 6))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/osx-browse") (:keywords "hypermedia" "external")) nil])
  (osx-location [cl-struct-package-desc osx-location (0 1) "Watch and respond to changes in geographical location on OS X" nil tar "melpa-stable" nil nil nil])
  (osx-plist [cl-struct-package-desc osx-plist (1 0 0) "Apple plist file parser" nil single "melpa-stable" nil ((:keywords "convenience")) nil])
  (outorg [cl-struct-package-desc outorg (2 0) "Org-style comment editing" nil single "melpa-stable" nil ((:url . "https://github.com/tj64/outorg")) nil])
  (outshine [cl-struct-package-desc outshine (2 0) "outline with outshine outshines outline" nil single "melpa-stable" nil ((:url . "https://github.com/tj64/outshine")) nil])
  (pabbrev [cl-struct-package-desc pabbrev (4 1) "Predictive abbreviation expansion" nil single "melpa-stable" nil nil nil])
  (package-utils [cl-struct-package-desc package-utils (0 3 0) "Extensions for package.el" ((epl (0 7 -3))) single "melpa-stable" nil ((:url . "https://github.com/Silex/package-utils") (:keywords "package" "convenience")) nil])
  (packed [cl-struct-package-desc packed (0 4 0) "package manager agnostic Emacs Lisp package utilities" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/tarsius/packed") (:keywords "compile" "convenience" "lisp" "package" "library")) nil])
  (page-break-lines [cl-struct-package-desc page-break-lines (0 10) "Display ugly ^L page breaks as tidy horizontal lines" nil single "melpa-stable" nil ((:url . "https://github.com/purcell/page-break-lines") (:keywords "convenience" "faces")) nil])
  (pallet [cl-struct-package-desc pallet (0 9 1) "A package management tool for Emacs, using Cask." ((s (1 9 0)) (f (0 17 1)) (cask (0 7))) tar "melpa-stable" nil nil nil])
  (pandoc-mode [cl-struct-package-desc pandoc-mode (2 11) "Minor mode for interacting with Pandoc" nil tar "melpa-stable" nil ((:keywords "text" "pandoc")) nil])
  (pangu-spacing [cl-struct-package-desc pangu-spacing (0 4) "Minor-mode to add space between Chinese and English characters." nil single "melpa-stable" nil ((:url . "http://github.com/coldnew/pangu-spacing")) nil])
  (paradox [cl-struct-package-desc paradox (2 0) "A modern Packages Menu. Colored, with package ratings, and customizable." ((emacs (24 4)) (dash (2 6 0)) (cl-lib (0 5)) (json (1 3)) (let-alist (1 0 3))) tar "melpa-stable" nil ((:url . "http://github.com/Bruce-Connor/paradox") (:keywords "package" "packages" "mode-line")) nil])
  (paredit [cl-struct-package-desc paredit (24) "minor mode for editing parentheses" nil single "melpa-stable" nil ((:keywords "lisp")) nil])
  (paredit-everywhere [cl-struct-package-desc paredit-everywhere (0 4) "Enable some paredit features in non-lisp buffers" ((paredit (22))) single "melpa-stable" nil ((:keywords "languages" "convenience")) nil])
  (paren-face [cl-struct-package-desc paren-face (0 1 1) "a face for parentheses in lisp modes" nil single "melpa-stable" nil ((:url . "http://github.com/tarsius/paren-face")) nil])
  (parent-mode [cl-struct-package-desc parent-mode (2 1) "get major mode's parent modes" nil single "melpa-stable" nil ((:url . "https://github.com/Fanael/parent-mode")) nil])
  (passthword [cl-struct-package-desc passthword (1 4) "Simple password manager" ((cl-lib (0 5))) single "melpa-stable" nil nil nil])
  (password-store [cl-struct-package-desc password-store (1 6 5) "Password store (pass) support" ((dash (1 5 0)) (f (0 11 0)) (s (1 9 0))) single "melpa-stable" nil ((:keywords "pass")) nil])
  (pastehub [cl-struct-package-desc pastehub (0 5 2) "A client for the PasteHub cloud service" nil single "melpa-stable" nil ((:url . "https://github.com/kiyoka/pastehub")) nil])
  (pcache [cl-struct-package-desc pcache (0 3 1) "persistent caching for Emacs" ((eieio (1 3))) single "melpa-stable" nil nil nil])
  (persistent-soft [cl-struct-package-desc persistent-soft (0 8 10) "Persistent storage, returning nil on failure" ((pcache (0 3 1)) (list-utils (0 4 2))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/persistent-soft") (:keywords "data" "extensions")) nil])
  (persp-projectile [cl-struct-package-desc persp-projectile (0 11 0) "Perspective integration with Projectile" ((perspective (1 9)) (projectile (0 11 0)) (cl-lib (0 3))) single "melpa-stable" nil ((:keywords "project" "convenience")) nil])
  (perspective [cl-struct-package-desc perspective (1 10) "switch between named \"perspectives\" of the editor" nil single "melpa-stable" nil ((:url . "http://github.com/nex3/perspective-el") (:keywords "workspace" "convenience" "frames")) nil])
  (ph [cl-struct-package-desc ph (0 1 0) "A global minor mode for managing multiple projects." ((emacs (24 3))) tar "melpa-stable" nil nil nil])
  (phi-search-mc [cl-struct-package-desc phi-search-mc (2 2 1) "multiple-cursors extension for phi-search" ((phi-search (2 0 0)) (multiple-cursors (1 2 1))) single "melpa-stable" nil ((:url . "https://github.com/knu/phi-search-mc.el") (:keywords "search" "cursors")) nil])
  (php-auto-yasnippets [cl-struct-package-desc php-auto-yasnippets (2 3 1) "Creates snippets for PHP functions" ((php-mode (1 11)) (yasnippet (0 8 0))) tar "melpa-stable" nil ((:url . "https://github.com/ejmr/php-auto-yasnippets")) nil])
  (php-mode [cl-struct-package-desc php-mode (1 15 3) "Major mode for editing PHP code" nil single "melpa-stable" nil ((:url . "https://github.com/ejmr/php-mode")) nil])
  (phpunit [cl-struct-package-desc phpunit (0 4 0) "Launch PHP unit tests using phpunit" ((s (1 9 0)) (f (0 16 0)) (pkg-info (0 5))) single "melpa-stable" nil ((:url . "https://github.com/nlamirault/phpunit.el") (:keywords "php" "tests" "phpunit")) nil])
  (pip-requirements [cl-struct-package-desc pip-requirements (0 4) "A major mode for editing pip requirements files." ((dash (2 8 0))) single "melpa-stable" nil nil nil])
  (pkg-info [cl-struct-package-desc pkg-info (0 5) "Information about packages" ((dash (1 6 0)) (epl (0 4))) single "melpa-stable" nil ((:url . "https://github.com/lunaryorn/pkg-info.el") (:keywords "convenience")) nil])
  (pkgbuild-mode [cl-struct-package-desc pkgbuild-mode (0 13) "Interface to the ArchLinux package manager" nil single "melpa-stable" nil nil nil])
  (plenv [cl-struct-package-desc plenv (0 32) "A plenv wrapper for Emacs" nil single "melpa-stable" nil ((:keywords "emacs" "perl")) nil])
  (popup [cl-struct-package-desc popup (0 5 2) "Visual Popup User Interface" ((cl-lib (0 3))) single "melpa-stable" nil ((:keywords "lisp")) nil])
  (popup-complete [cl-struct-package-desc popup-complete (0 2) "completion with popup" ((popup (0 5 0))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-popup-complete")) nil])
  (popwin [cl-struct-package-desc popwin (1 0 0) "Popup Window Manager." nil single "melpa-stable" nil ((:keywords "convenience")) nil])
  (pov-mode [cl-struct-package-desc pov-mode (3 3) "Major mode for editing POV-Ray scene files." nil tar "melpa-stable" nil nil nil])
  (powerline [cl-struct-package-desc powerline (2 2) "Rewrite of Powerline" ((cl-lib (0 2))) tar "melpa-stable" nil ((:url . "http://github.com/milkypostman/powerline/") (:keywords "mode-line")) nil])
  (pretty-mode [cl-struct-package-desc pretty-mode (2 0 3) "Redisplay parts of the buffer as pretty symbols." nil single "melpa-stable" nil ((:url . "https://github.com/akatov/pretty-mode") (:keywords "pretty" "unicode" "symbols")) nil])
  (processing-mode [cl-struct-package-desc processing-mode (1 0) "Major mode for Processing 2.0" ((yasnippet (0 8 0))) single "melpa-stable" nil ((:keywords "languages" "snippets")) nil])
  (prodigy [cl-struct-package-desc prodigy (0 6 0) "Manage external services from within Emacs" ((s (1 8 0)) (dash (2 4 0)) (f (0 14 0)) (emacs (24))) single "melpa-stable" nil ((:url . "http://github.com/rejeep/prodigy.el")) nil])
  (project-explorer [cl-struct-package-desc project-explorer (0 13 6) "A project explorer sidebar" ((cl-lib (0 3)) (es-lib (0 3)) (es-windows (0 1)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/sabof/project-explorer")) nil])
  (project-root [cl-struct-package-desc project-root (0 7) "Define a project root and take actions based upon it." nil single "melpa-stable" nil nil nil])
  (projectile [cl-struct-package-desc projectile (0 11 0) "Manage and navigate projects in Emacs easily" ((s (1 6 0)) (dash (1 5 0)) (pkg-info (0 4))) single "melpa-stable" nil ((:url . "https://github.com/bbatsov/projectile") (:keywords "project" "convenience")) nil])
  (psci [cl-struct-package-desc psci (0 0 6) "Major mode for purescript repl psci" ((purescript-mode (13 10)) (dash (2 9 0)) (s (1 9 0)) (f (0 17 1)) (deferred (0 3 2))) tar "melpa-stable" nil ((:url . "https://github.com/ardumont/emacs-psci") (:keywords "purescript" "psci" "repl" "major" "mode")) nil])
  (punctuality-logger [cl-struct-package-desc punctuality-logger (0 8) "Punctuality logger for Emacs" nil single "melpa-stable" nil ((:url . "https://gitlab.com/elzair/punctuality-logger") (:keywords "reminder" "calendar")) nil])
  (pungi [cl-struct-package-desc pungi (1 1) "Integrates jedi with virtualenv and buildout python environments" ((jedi (0 2 0 -3 2)) (pyvenv (1 5))) single "melpa-stable" nil ((:keywords "convenience")) nil])
  (puppet-mode [cl-struct-package-desc puppet-mode (0 3) "Major mode for Puppet manifests" ((emacs (24 1)) (cl-lib (0 5)) (pkg-info (0 4))) single "melpa-stable" nil ((:url . "https://github.com/lunaryorn/puppet-mode") (:keywords "languages")) nil])
  (purescript-mode [cl-struct-package-desc purescript-mode (13 10) "No description available." nil tar "melpa-stable" nil nil nil])
  (pushbullet [cl-struct-package-desc pushbullet (0 5 2) "Emacs client for the PushBullet Android app" ((grapnel (0 5 2)) (json (1 2))) single "melpa-stable" nil ((:url . "http://www.github.com/theanalyst/revolver") (:keywords "convenience")) nil])
  (python-environment [cl-struct-package-desc python-environment (0 0 2) "virtualenv API for Emacs Lisp" ((deferred (0 3 1))) tar "melpa-stable" nil ((:keywords "applications" "tools")) nil])
  (pyvenv [cl-struct-package-desc pyvenv (1 6) "Python virtual environment interface" nil single "melpa-stable" nil ((:url . "http://github.com/jorgenschaefer/pyvenv") (:keywords "python" "virtualenv" "tools")) nil])
  (qiita [cl-struct-package-desc qiita (0 0 1) "No description available." nil single "melpa-stable" nil nil nil])
  (qml-mode [cl-struct-package-desc qml-mode (0 1) "Major mode for editing QT Declarative (QML) code." nil single "melpa-stable" nil ((:url . "https://github.com/coldnew/qml-mode") (:keywords "qml" "qt" "qt declarative")) nil])
  (quickrun [cl-struct-package-desc quickrun (2 2 3) "Run commands quickly" ((emacs (24)) (cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-quickrun")) nil])
  (r-autoyas [cl-struct-package-desc r-autoyas (0 28) "Provides automatically created yasnippets for R function argument lists." nil tar "melpa-stable" nil ((:url . "https://github.com/mlf176f2/r-autoyas.el") (:keywords "r" "yasnippet")) nil])
  (rainbow-delimiters [cl-struct-package-desc rainbow-delimiters (2 1 1) "Highlight brackets according to their depth" nil single "melpa-stable" nil ((:url . "https://github.com/Fanael/rainbow-delimiters") (:keywords "faces" "convenience" "lisp" "tools")) nil])
  (rainbow-identifiers [cl-struct-package-desc rainbow-identifiers (0 2 2) "Highlight identifiers according to their names" ((emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/Fanael/rainbow-identifiers")) nil])
  (rase [cl-struct-package-desc rase (1 1) "Run At Sun Event daemon" nil single "melpa-stable" nil ((:url . "https://github.com/m00natic/rase/") (:keywords "solar" "sunrise" "sunset" "midday" "midnight")) nil])
  (rbenv [cl-struct-package-desc rbenv (0 0 3) "Emacs integration for rbenv" nil single "melpa-stable" nil ((:url . "https://github.com/senny/rbenv.el") (:keywords "ruby" "rbenv")) nil])
  (relative-line-numbers [cl-struct-package-desc relative-line-numbers (0 3 1) "Display relative line numbers on the margin" ((emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/Fanael/relative-line-numbers")) nil])
  (relax [cl-struct-package-desc relax (0 2) "For browsing and interacting with CouchDB" ((json (1 2))) single "melpa-stable" nil ((:url . "http://github.com/technomancy/relax.el") (:keywords "database" "http")) nil])
  (req-package [cl-struct-package-desc req-package (0 9) "A use-package wrapper for package runtime dependencies management" ((use-package (1 0)) (dash (2 7 0)) (log4e (0 2 0))) single "melpa-stable" nil ((:url . "https://github.com/edvorg/req-package") (:keywords "dotemacs" "startup" "speed" "config" "package")) nil])
  (request [cl-struct-package-desc request (0 1 0) "Compatible layer for URL request in Emacs" nil single "melpa-stable" nil nil nil])
  (request-deferred [cl-struct-package-desc request-deferred (0 1 0) "Wrap request.el by deferred" nil single "melpa-stable" nil nil nil])
  (reveal-in-finder [cl-struct-package-desc reveal-in-finder (0 3 1) "Reveal the file associated with the buffer in the OS X Finder" nil single "melpa-stable" nil ((:url . "https://github.com/kaz-yos/elisp") (:keywords "os x" "finder")) nil])
  (rich-minority [cl-struct-package-desc rich-minority (0 1 1) "Clean-up and Beautify the list of minor-modes." ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "http://github.com/Bruce-Connor/rich-minority") (:keywords "mode-line" "faces")) nil])
  (rinari [cl-struct-package-desc rinari (2 11) "Rinari Is Not A Rails IDE" ((ruby-mode (1 0)) (inf-ruby (2 2 5)) (ruby-compilation (0 16)) (jump (2 0))) single "melpa-stable" nil ((:url . "https://github.com/eschulte/rinari") (:keywords "ruby" "rails" "project" "convenience" "web")) nil])
  (rnc-mode [cl-struct-package-desc rnc-mode (1 0 6) "A major mode for editing RELAX NG Compact syntax." nil single "melpa-stable" nil nil nil])
  (roguel-ike [cl-struct-package-desc roguel-ike (0 1 0) "A coffee-break roguelike" ((popup (0 5 0))) tar "melpa-stable" nil nil nil])
  (rsense [cl-struct-package-desc rsense (0 3) "RSense client for Emacs" nil single "melpa-stable" nil ((:keywords "convenience")) nil])
  (rspec-mode [cl-struct-package-desc rspec-mode (1 11) "Enhance ruby-mode for RSpec" ((ruby-mode (1 0)) (cl-lib (0 4))) tar "melpa-stable" nil ((:url . "http://github.com/pezra/rspec-mode") (:keywords "rspec" "ruby")) nil])
  (rtags [cl-struct-package-desc rtags (2 0) "No description available." nil tar "melpa-stable" nil nil nil])
  (ruby-compilation [cl-struct-package-desc ruby-compilation (2 11) "run a ruby process in a compilation buffer" ((inf-ruby (2 2 1))) single "melpa-stable" nil ((:url . "https://github.com/eschulte/rinari") (:keywords "test" "convenience")) nil])
  (ruby-end [cl-struct-package-desc ruby-end (0 4 1) "Automatic insertion of end blocks for Ruby" nil single "melpa-stable" nil ((:url . "http://github.com/rejeep/ruby-end") (:keywords "speed" "convenience" "ruby")) nil])
  (ruby-hash-syntax [cl-struct-package-desc ruby-hash-syntax (0 4) "Toggle ruby hash syntax between classic and 1.9 styles" nil single "melpa-stable" nil ((:url . "https://github.com/purcell/ruby-hash-syntax") (:keywords "languages")) nil])
  (ruby-test-mode [cl-struct-package-desc ruby-test-mode (1 0) "Minor mode for Behaviour and Test Driven" nil single "melpa-stable" nil ((:keywords "ruby" "unit" "test" "rspec")) nil])
  (ruby-tools [cl-struct-package-desc ruby-tools (0 1 2) "Collection of handy functions for ruby-mode." nil tar "melpa-stable" nil nil nil])
  (rust-mode [cl-struct-package-desc rust-mode (1 0 0 -3) "A major emacs mode for editing Rust source code" nil single "melpa-stable" nil ((:url . "https://github.com/rust-lang/rust") (:keywords "languages")) nil])
  (rvm [cl-struct-package-desc rvm (1 3 0) "Emacs integration for rvm" nil single "melpa-stable" nil ((:url . "http://www.emacswiki.org/emacs/RvmEl") (:keywords "ruby" "rvm")) nil])
  (s [cl-struct-package-desc s (1 9 0) "The long lost Emacs string manipulation library." nil single "melpa-stable" nil ((:keywords "strings")) nil])
  (sackspace [cl-struct-package-desc sackspace (0 8 2) "A better backspace" nil single "melpa-stable" nil ((:url . "http://github.com/cofi/sackspace.el") (:keywords "delete" "convenience")) nil])
  (sage-shell-mode [cl-struct-package-desc sage-shell-mode (0 0 5 5) "A front-end for Sage Math" ((cl-lib (0 5)) (deferred (0 3 1))) tar "melpa-stable" nil ((:url . "https://github.com/stakemori/sage-shell-mode") (:keywords "sage" "math")) nil])
  (sass-mode [cl-struct-package-desc sass-mode (3 0 18) "Major mode for editing Sass files" ((haml-mode (3 0 15))) single "melpa-stable" nil ((:url . "http://github.com/nex3/haml/tree/master") (:keywords "markup" "language" "css")) nil])
  (sauron [cl-struct-package-desc sauron (0 10) "Track (erc/org/dbus/...) events and react to them." nil tar "melpa-stable" nil nil nil])
  (save-sexp [cl-struct-package-desc save-sexp (0 2 0) "save variables in files using setter forms like `setq'" nil tar "melpa-stable" nil ((:url . "https://github.com/tarsius/save-sexp") (:keywords "convenience")) nil])
  (scala-mode [cl-struct-package-desc scala-mode (2 11 4) "Major mode for editing Scala code." nil tar "melpa-stable" nil ((:keywords "scala" "languages" "oop")) nil])
  (scss-mode [cl-struct-package-desc scss-mode (0 5 0) "Major mode for editing SCSS files" nil single "melpa-stable" nil ((:url . "https://github.com/antonj/scss-mode") (:keywords "scss" "css" "mode")) nil])
  (sekka [cl-struct-package-desc sekka (1 6 0) "A client for Sekka IME server" ((cl-lib (0 3)) (concurrent (0 3 1)) (popup (0 5 0))) single "melpa-stable" nil ((:url . "https://github.com/kiyoka/sekka") (:keywords "ime" "skk" "japanese")) nil])
  (servant [cl-struct-package-desc servant (0 3 0) "ELPA server written in Emacs Lisp" ((s (1 8 0)) (dash (2 2 0)) (f (0 11 0)) (ansi (0 3 0)) (commander (0 5 0)) (epl (0 2)) (shut-up (0 2 1)) (web-server (0 0 1))) tar "melpa-stable" nil ((:url . "http://github.com/rejeep/servant.el") (:keywords "elpa" "server")) nil])
  (serverspec [cl-struct-package-desc serverspec (0 0 6) "Serverspec minor mode" ((dash (2 6 0)) (s (1 9 0)) (f (0 16 2)) (helm (1 6 1))) tar "melpa-stable" nil ((:url . "http://101000lab.org")) nil])
  (session [cl-struct-package-desc session (2 3 1) "use variables, registers and buffer places across sessions" nil single "melpa-stable" nil ((:url . "http://emacs-session.sourceforge.net/") (:keywords "session" "session management" "desktop" "data" "tools")) nil])
  (shampoo [cl-struct-package-desc shampoo (0 0 1) "Shampoo, a remote Smalltalk developemnt" nil tar "melpa-stable" nil nil nil])
  (shell-pop [cl-struct-package-desc shell-pop (0 3) "helps you to use shell easily on Emacs. Only one key action to work." nil single "melpa-stable" nil ((:url . "http://github.com/kyagi/shell-pop-el") (:keywords "shell" "terminal" "tools")) nil])
  (shm [cl-struct-package-desc shm (1 0 20) "Structured Haskell Mode" nil tar "melpa-stable" nil ((:keywords "development" "haskell" "structured")) nil])
  (shut-up [cl-struct-package-desc shut-up (0 3 2) "Shut up would you!" ((cl-lib (0 3)) (emacs (24))) single "melpa-stable" nil ((:url . "http://github.com/rejeep/shut-up.el")) nil])
  (simple-httpd [cl-struct-package-desc simple-httpd (1 4 5) "pure elisp HTTP server" ((cl-lib (0 3))) single "melpa-stable" nil ((:url . "https://github.com/skeeto/emacs-http-server")) nil])
  (simpleclip [cl-struct-package-desc simpleclip (1 0 0) "Simplified access to the system clipboard" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/simpleclip") (:keywords "convenience")) nil])
  (simplezen [cl-struct-package-desc simplezen (0 1 1) "A simple subset of zencoding-mode for Emacs." nil single "melpa-stable" nil nil nil])
  (skeletor [cl-struct-package-desc skeletor (1 5 1) "Provides project skeletons for Emacs" ((s (1 7 0)) (f (0 14 0)) (dash (2 2 0)) (cl-lib (0 3)) (let-alist (1 0 3)) (emacs (24 1))) tar "melpa-stable" nil nil nil])
  (skewer-less [cl-struct-package-desc skewer-less (0 2) "Skewer support for live LESS stylesheet updates" ((skewer-mode (1 5 3))) single "melpa-stable" nil ((:keywords "languages" "tools")) nil])
  (skewer-mode [cl-struct-package-desc skewer-mode (1 6 1) "live browser JavaScript, CSS, and HTML interaction" ((simple-httpd (1 4 0)) (js2-mode (20090723)) (emacs (24))) tar "melpa-stable" nil nil nil])
  (slamhound [cl-struct-package-desc slamhound (1 5 4) "Rip Clojure namespaces apart and rebuild them." nil single "melpa-stable" nil ((:url . "https://github.com/technomancy/slamhound") (:keywords "tools" "lisp")) nil])
  (slideview [cl-struct-package-desc slideview (0 6 1) "File slideshow" nil single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/Emacs-slideview/raw/master/slideview.el") (:keywords "files")) nil])
  (slim-mode [cl-struct-package-desc slim-mode (1 1) "Major mode for editing Slim files" nil single "melpa-stable" nil ((:url . "http://github.com/minad/emacs-slim") (:keywords "markup" "language")) nil])
  (slime [cl-struct-package-desc slime (2 13) "Superior Lisp Interaction Mode for Emacs" ((cl-lib (0 5))) tar "melpa-stable" nil ((:url . "https://github.com/slime/slime") (:keywords "languages" "lisp" "slime")) nil])
  (slime-company [cl-struct-package-desc slime-company (0 8) "slime completion backend for company mode" ((slime (2 3 2)) (company (0 7))) single "melpa-stable" nil ((:keywords "convenience" "lisp" "abbrev")) nil])
  (slime-ritz [cl-struct-package-desc slime-ritz (0 6 0) "slime extensions for ritz" nil single "melpa-stable" nil ((:url . "https://github.com/pallet/ritz") (:keywords "languages" "lisp" "slime")) nil])
  (slime-volleyball [cl-struct-package-desc slime-volleyball (1 1) "An SVG Slime Volleyball Game" nil tar "melpa-stable" nil ((:keywords "games")) nil])
  (sly [cl-struct-package-desc sly (2 9) "No description available." nil tar "melpa-stable" nil nil nil])
  (smart-mode-line [cl-struct-package-desc smart-mode-line (2 8) "A color coded smart mode-line." ((emacs (24 3)) (dash (2 2 0)) (rich-minority (0 1))) tar "melpa-stable" nil ((:url . "http://github.com/Bruce-Connor/smart-mode-line") (:keywords "mode-line" "faces" "theme" "themes")) nil])
  (smart-mode-line-powerline-theme [cl-struct-package-desc smart-mode-line-powerline-theme (2 8) "smart-mode-line theme that mimics the powerline appearance." ((emacs (24 3)) (powerline (2 2)) (smart-mode-line (2 5))) single "melpa-stable" nil ((:url . "http://github.com/Bruce-Connor/smart-mode-line")) nil])
  (smart-tabs-mode [cl-struct-package-desc smart-tabs-mode (1 0) "Intelligently indent with tabs, align with spaces!" nil single "melpa-stable" nil ((:url . "http://www.emacswiki.org/emacs/SmartTabs") (:keywords "languages")) nil])
  (smartrep [cl-struct-package-desc smartrep (1 0 0) "Support sequential operation which omitted prefix keys." nil single "melpa-stable" nil ((:url . "https://github.com/myuhe/smartrep.el") (:keywords "convenience")) nil])
  (smartscan [cl-struct-package-desc smartscan (0 2) "Jumps between other symbols found at point" nil single "melpa-stable" nil ((:keywords "extensions")) nil])
  (smeargle [cl-struct-package-desc smeargle (0 2) "Highlighting region by last updated time" ((cl-lib (0 5)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-smeargle")) nil])
  (smex [cl-struct-package-desc smex (3 0) "M-x interface with Ido-style fuzzy matching." nil single "melpa-stable" nil ((:url . "http://github.com/nonsequitur/smex/") (:keywords "convenience" "usability")) nil])
  (solarized-theme [cl-struct-package-desc solarized-theme (1 2 1) "The Solarized color theme, ported to Emacs." ((dash (2 6 0))) tar "melpa-stable" nil nil nil])
  (sourcemap [cl-struct-package-desc sourcemap (0 2) "Sourcemap parser" ((cl-lib (0 5)) (emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-sourcemap")) nil])
  (sourcetalk [cl-struct-package-desc sourcetalk (1 2 0) "SourceTalk (http://sourcetalk.net) plugin for Emacs" ((request (0 2 0))) single "melpa-stable" nil ((:url . "https://github.com/malroc/sourcetalk_emacs") (:keywords "sourcetalk" "code" "discussion")) nil])
  (sparql-mode [cl-struct-package-desc sparql-mode (0 10 0) "Edit and interactively evaluate SPARQL queries." nil tar "melpa-stable" nil ((:url . "https://github.com/ljos/sparql-mode")) nil])
  (sprintly-mode [cl-struct-package-desc sprintly-mode (0 0 4) "Major mode for dealing with sprint.ly" ((furl (0 0 2))) single "melpa-stable" nil ((:url . "https://github.com/sprintly/sprintly-mode")) nil])
  (stan-mode [cl-struct-package-desc stan-mode (4 0 0) "Major mode for editing Stan files" ((auto-complete (1 4 0))) tar "melpa-stable" nil ((:url . "http://github.com/stan-dev/stan-mode") (:keywords "languanges")) nil])
  (stan-snippets [cl-struct-package-desc stan-snippets (4 0 0) "Yasnippets for Stan" ((yasnippet (0 8 0)) (stan-mode (4 0 0))) tar "melpa-stable" nil ((:url . "http://github.com/stan-dev/stan-mode") (:keywords "languages")) nil])
  (starter-kit [cl-struct-package-desc starter-kit (2 0 3) "Saner defaults and goodies." ((paredit (22)) (idle-highlight-mode (1 1 1)) (find-file-in-project (3 0)) (smex (1 1 1)) (ido-ubiquitous (0 3)) (magit (0 8 1))) tar "melpa-stable" nil nil nil])
  (starter-kit-bindings [cl-struct-package-desc starter-kit-bindings (2 0 3) "Saner defaults and goodies: bindings" ((starter-kit (2 0 2))) single "melpa-stable" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience")) nil])
  (starter-kit-eshell [cl-struct-package-desc starter-kit-eshell (2 0 3) "Saner defaults and goodies: eshell tweaks" nil single "melpa-stable" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience")) nil])
  (starter-kit-js [cl-struct-package-desc starter-kit-js (2 0 3) "Saner defaults and goodies for Javascript" ((starter-kit (2 0 1))) single "melpa-stable" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience")) nil])
  (starter-kit-lisp [cl-struct-package-desc starter-kit-lisp (2 0 3) "Saner defaults and goodies for lisp languages" ((starter-kit (2 0 2)) (elisp-slime-nav (0 1))) single "melpa-stable" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience")) nil])
  (starter-kit-perl [cl-struct-package-desc starter-kit-perl (2 0 3) "Some helpful Perl code" nil single "melpa-stable" nil nil nil])
  (starter-kit-ruby [cl-struct-package-desc starter-kit-ruby (2 0 3) "Saner defaults and goodies for Ruby" ((inf-ruby (2 2 1)) (starter-kit (2 0 1))) single "melpa-stable" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience")) nil])
  (stekene-theme [cl-struct-package-desc stekene-theme (1 0 15) "Low-contrast (except for strings) theme, in light and dark versions." ((emacs (24))) tar "melpa-stable" nil nil nil])
  (stgit [cl-struct-package-desc stgit (0 17 1) "No description available." nil single "melpa-stable" nil nil nil])
  (string-edit [cl-struct-package-desc string-edit (0 1 0) "Avoid escape nightmares by editing string in separate buffer" ((dash (1 2 0))) single "melpa-stable" nil nil nil])
  (string-utils [cl-struct-package-desc string-utils (0 3 2) "String-manipulation utilities" ((list-utils (0 4 2))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/string-utils") (:keywords "extensions")) nil])
  (stripe-buffer [cl-struct-package-desc stripe-buffer (0 2 5) "Use a different background for even and odd lines" ((cl-lib (1 0))) single "melpa-stable" nil ((:url . "https://github.com/sabof/stripe-buffer")) nil])
  (stumpwm-mode [cl-struct-package-desc stumpwm-mode (0 9 8) "special lisp mode for evaluating code into running stumpwm" nil single "melpa-stable" nil ((:keywords "comm" "lisp" "tools")) nil])
  (subshell-proc [cl-struct-package-desc subshell-proc (0 1) "Functions for working with comints" nil single "melpa-stable" nil ((:url . "https://github.com/andrewmains12/subshell-proc")) nil])
  (sudden-death [cl-struct-package-desc sudden-death (0 2) "Totsuzen-no-Shi" nil single "melpa-stable" nil ((:url . "https://github.com/yewton/sudden-death.el")) nil])
  (suomalainen-kalenteri [cl-struct-package-desc suomalainen-kalenteri (2014 6 15) "Finnish national and Christian holidays for calendar" nil tar "melpa-stable" nil nil nil])
  (svg-mode-line-themes [cl-struct-package-desc svg-mode-line-themes (0 1 1) "SVG-based themes for mode-line" ((xmlgen (0 4))) tar "melpa-stable" nil ((:url . "https://github.com/sabof/svg-mode-line-themes")) nil])
  (swift-mode [cl-struct-package-desc swift-mode (0 3 0) "Major-mode for Apple's Swift programming language." ((emacs (24 1))) single "melpa-stable" nil ((:keywords "languages" "swift")) nil])
  (syntactic-sugar [cl-struct-package-desc syntactic-sugar (0 9 4) "Effect-free forms such as if/then/else" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/syntactic-sugar") (:keywords "extensions")) nil])
  (system-specific-settings [cl-struct-package-desc system-specific-settings (0 2) "Apply settings only on certain systems" nil single "melpa-stable" nil ((:url . "https://github.com/DarwinAwardWinner/emacs-system-specific-settings") (:keywords "configuration")) nil])
  (tabbar-ruler [cl-struct-package-desc tabbar-ruler (0 40) "Pretty tabbar, autohide, use both tabbar/ruler" ((tabbar (2 0 1))) tar "melpa-stable" nil ((:url . "http://github.com/mlf176f2/tabbar-ruler.el") (:keywords "tabbar" "ruler mode" "menu" "tool bar.")) nil])
  (tagedit [cl-struct-package-desc tagedit (1 4 0) "Some paredit-like features for html-mode" ((s (1 3 1)) (dash (1 0 3))) single "melpa-stable" nil ((:keywords "convenience")) nil])
  (tempbuf [cl-struct-package-desc tempbuf (1 4) "kill unused buffers in the background" nil single "melpa-stable" nil ((:keywords "convenience")) nil])
  (tern [cl-struct-package-desc tern (0 9 0) "Tern-powered JavaScript integration" ((json (1 2)) (cl-lib (0 5)) (emacs (24))) single "melpa-stable" nil ((:url . "http://ternjs.net/")) nil])
  (tern-auto-complete [cl-struct-package-desc tern-auto-complete (0 9 0) "Tern Completion by auto-complete.el" ((tern (0 0 1)) (auto-complete (1 4)) (cl-lib (0 5)) (emacs (24))) single "melpa-stable" nil nil nil])
  (terraform-mode [cl-struct-package-desc terraform-mode (0 2) "Major mode for terraform configuration file" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "https://github.com/syohex/emacs-terraform-mode")) nil])
  (test-case-mode [cl-struct-package-desc test-case-mode (0 1 9) "unit test front-end" nil single "melpa-stable" nil ((:url . "http://nschum.de/src/emacs/test-case-mode/") (:keywords "tools")) nil])
  (textmate [cl-struct-package-desc textmate (1) "No description available." nil single "melpa-stable" nil nil nil])
  (textmate-to-yas [cl-struct-package-desc textmate-to-yas (0 21) "Import Textmate macros into yasnippet syntax" nil tar "melpa-stable" nil ((:url . "https://github.com/mlf176f2/textmate-to-yas.el/") (:keywords "yasnippet" "textmate")) nil])
  (theme-changer [cl-struct-package-desc theme-changer (2 1 0) "Sunrise/Sunset Theme Changer for Emacs" nil single "melpa-stable" nil ((:url . "https://github.com/hadronzoo/theme-changer") (:keywords "color-theme" "deftheme" "solar" "sunrise" "sunset")) nil])
  (thrift [cl-struct-package-desc thrift (0 9 2) "Major mode for Apache Thrift files" nil single "melpa-stable" nil ((:keywords "files")) nil])
  (traad [cl-struct-package-desc traad (0 4) "emacs interface to the traad refactoring server." nil tar "melpa-stable" nil ((:url . "https://github.com/abingham/traad")) nil])
  (truthy [cl-struct-package-desc truthy (0 2 8) "Test the content of a value" ((list-utils (0 4 2))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/truthy") (:keywords "extensions")) nil])
  (ttrss [cl-struct-package-desc ttrss (1 7 5) "Tiny Tiny RSS elisp bindings" ((emacs (23 1))) single "melpa-stable" nil ((:url . "https://github.com/pedros/ttrss.el") (:keywords "news" "local")) nil])
  (tuareg [cl-struct-package-desc tuareg (2 0 9) "OCaml mode for Emacs." ((caml (3 12 0 1))) tar "melpa-stable" nil ((:url . "https://github.com/ocaml/tuareg") (:keywords "ocaml" "languages")) nil])
  (tumble [cl-struct-package-desc tumble (1 5) "an Tumblr mode for Emacs" nil single "melpa-stable" nil ((:keywords "tumblr")) nil])
  (tup-mode [cl-struct-package-desc tup-mode (1 3 1) "Major mode for editing files for Tup" nil single "melpa-stable" nil ((:url . "https://github.com/ejmr/tup-mode")) nil])
  (twilight-anti-bright-theme [cl-struct-package-desc twilight-anti-bright-theme (0 3 0) "A soothing Emacs 24 light-on-dark theme" nil single "melpa-stable" nil ((:url . "https://github.com/jimeh/twilight-anti-bright-theme.el") (:keywords "themes")) nil])
  (twittering-mode [cl-struct-package-desc twittering-mode (2 0 0) "Major mode for Twitter" nil single "melpa-stable" nil ((:url . "http://twmode.sf.net/") (:keywords "twitter" "web")) nil])
  (typo [cl-struct-package-desc typo (1 1) "Minor mode for typographic editing" nil single "melpa-stable" nil ((:url . "https://github.com/jorgenschaefer/typoel") (:keywords "convenience" "wp")) nil])
  (ucs-utils [cl-struct-package-desc ucs-utils (0 8 0) "Utilities for Unicode characters" ((persistent-soft (0 8 8)) (pcache (0 2 3)) (list-utils (0 4 2))) tar "melpa-stable" nil ((:url . "http://github.com/rolandwalker/ucs-utils") (:keywords "i18n" "extensions")) nil])
  (undercover [cl-struct-package-desc undercover (0 4 0) "Test coverage library for Emacs" ((emacs (24)) (dash (2 0 0)) (shut-up (0 3 2))) single "melpa-stable" nil ((:url . "https://github.com/sviridov/undercover.el") (:keywords "lisp" "tests" "coverage" "tools")) nil])
  (underwater-theme [cl-struct-package-desc underwater-theme (1 1 0) "A gentle, deep blue color theme" nil single "melpa-stable" nil ((:keywords "faces")) nil])
  (unfill [cl-struct-package-desc unfill (0 1) "The inverse of fill-paragraph and fill-region" nil single "melpa-stable" nil ((:keywords "utilities")) nil])
  (unicode-enbox [cl-struct-package-desc unicode-enbox (0 1 4) "Surround a string with box-drawing characters" ((string-utils (0 3 2)) (ucs-utils (0 7 6)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/unicode-enbox") (:keywords "extensions" "interface")) nil])
  (unicode-fonts [cl-struct-package-desc unicode-fonts (0 4 4) "Configure Unicode fonts" ((font-utils (0 7 2)) (ucs-utils (0 8 0)) (list-utils (0 4 2)) (persistent-soft (0 8 10)) (pcache (0 3 1))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/unicode-fonts") (:keywords "i18n" "faces" "frames" "wp" "interface")) nil])
  (unicode-progress-reporter [cl-struct-package-desc unicode-progress-reporter (0 5 4) "Progress-reporter with fancy characters" ((emacs (24 1 0)) (ucs-utils (0 7 6)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/unicode-progress-reporter") (:keywords "interface")) nil])
  (unicode-whitespace [cl-struct-package-desc unicode-whitespace (0 2 4) "teach whitespace-mode about fancy characters" ((ucs-utils (0 7 6)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/unicode-whitespace") (:keywords "faces" "wp" "interface")) nil])
  (use-package [cl-struct-package-desc use-package (20140601) "A use-package declaration for simplifying your .emacs" ((bind-key (1 0)) (diminish (0 44))) single "melpa-stable" nil ((:url . "https://github.com/jwiegley/use-package") (:keywords "dotemacs" "startup" "speed" "config" "package")) nil])
  (utop [cl-struct-package-desc utop (1 17) "Universal toplevel for OCaml" ((emacs (24))) single "melpa-stable" nil ((:url . "https://github.com/diml/utop") (:keywords "ocaml" "languages")) nil])
  (uzumaki [cl-struct-package-desc uzumaki (0 1) "A simple buffer cycler" ((cl-lib (0 5))) single "melpa-stable" nil ((:url . "http://github.com/geyslan/uzumaki") (:keywords "buffer" "convenience")) nil])
  (vcomp [cl-struct-package-desc vcomp (0 3 1) "compare version strings" nil single "melpa-stable" nil ((:url . "https://github.com/tarsius/vcomp") (:keywords "versions")) nil])
  (vector-utils [cl-struct-package-desc vector-utils (0 1 2) "Vector-manipulation utility functions" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/vector-utils") (:keywords "extensions")) nil])
  (vim-region [cl-struct-package-desc vim-region (0 3 0) "Select region as vim" ((expand-region (20140127))) single "melpa-stable" nil ((:url . "https://github.com/ongaeshi/emacs-vim-region")) nil])
  (vimgolf [cl-struct-package-desc vimgolf (0 10 0) "VimGolf interface for the One True Editor" nil single "melpa-stable" nil ((:keywords "games" "vimgolf" "vim")) nil])
  (vlf [cl-struct-package-desc vlf (1 7) "View Large Files" nil tar "melpa-stable" nil ((:url . "https://github.com/m00natic/vlfi") (:keywords "large files" "utilities")) nil])
  (wacspace [cl-struct-package-desc wacspace (0 4 2) "The WACky WorkSPACE manager for emACS" ((dash (1 2 0)) (cl-lib (0 2))) tar "melpa-stable" nil nil nil])
  (wc-goal-mode [cl-struct-package-desc wc-goal-mode (2 1) "Running word count with goals (minor mode)" nil single "melpa-stable" nil ((:url . "https://github.com/bnbeckwith/wc-goal-mode")) nil])
  (wcheck-mode [cl-struct-package-desc wcheck-mode (2014 6 21) "General interface for text checkers" nil tar "melpa-stable" nil nil nil])
  (web-mode [cl-struct-package-desc web-mode (11) "major mode for editing web templates" nil single "melpa-stable" nil ((:url . "http://web-mode.org") (:keywords "languages")) nil])
  (weechat [cl-struct-package-desc weechat (0 2) "Chat via WeeChat's relay protocol in Emacs" ((s (1 3 1)) (cl-lib (0 2)) (emacs (24)) (tracking (1 2))) tar "melpa-stable" nil nil nil])
  (whitespace-cleanup-mode [cl-struct-package-desc whitespace-cleanup-mode (0 10) "Intelligently call whitespace-cleanup on save" nil single "melpa-stable" nil ((:url . "https://github.com/purcell/whitespace-cleanup-mode") (:keywords "convenience")) nil])
  (wiki-nav [cl-struct-package-desc wiki-nav (1 0 2) "Simple file navigation using [[WikiStrings]]" ((button-lock (1 0 2)) (nav-flash (1 0 0))) single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/button-lock") (:keywords "mouse" "button" "hypermedia" "navigation")) nil])
  (window-end-visible [cl-struct-package-desc window-end-visible (0 1 0) "Find the last visible point in a window" nil single "melpa-stable" nil ((:url . "http://github.com/rolandwalker/window-end-visible") (:keywords "extensions")) nil])
  (window-layout [cl-struct-package-desc window-layout (1 2) "window layout manager" nil single "melpa-stable" nil ((:keywords "window" "layout")) nil])
  (window-numbering [cl-struct-package-desc window-numbering (1 1 2) "No description available." nil single "melpa-stable" nil nil nil])
  (windsize [cl-struct-package-desc windsize (0 1) "Simple, intuitive window resizing" nil single "melpa-stable" nil ((:url . "http://github.com/grammati/windsize") (:keywords "window" "resizing" "convenience")) nil])
  (wisp-mode [cl-struct-package-desc wisp-mode (0 8 2) "Tools for wisp: the Whitespace-to-Lisp preprocessor" nil single "melpa-stable" nil ((:keywords "languages" "lisp")) nil])
  (wispjs-mode [cl-struct-package-desc wispjs-mode (0 2 0) "Major mode for Wisp code." ((clojure-mode (0))) single "melpa-stable" nil ((:url . "https://github.com/krisajenkins/wispjs-mode")) nil])
  (wonderland [cl-struct-package-desc wonderland (0 1 1) "declarative configuration for Emacsen" ((dash (2 0 0)) (dash-functional (1 0 0)) (multi (2 0 0)) (emacs (24))) single "melpa-stable" nil ((:url . "http://github.com/kurisuwhyte/emacs-wonderland") (:keywords "configuration" "profile" "wonderland")) nil])
  (wrap-region [cl-struct-package-desc wrap-region (0 7 3) "Wrap text with punctation or tag" ((dash (1 0 3))) single "melpa-stable" nil ((:url . "http://github.com/rejeep/wrap-region") (:keywords "speed" "convenience")) nil])
  (writegood-mode [cl-struct-package-desc writegood-mode (2 0) "Polish up poor writing on the fly" nil single "melpa-stable" nil ((:url . "http://github.com/bnbeckwith/writegood-mode") (:keywords "writing" "weasel-words" "grammar")) nil])
  (writeroom-mode [cl-struct-package-desc writeroom-mode (2 9) "Minor mode for distraction-free writing" ((emacs (24 1)) (visual-fill-column (1 4))) tar "melpa-stable" nil ((:keywords "text")) nil])
  (ws-butler [cl-struct-package-desc ws-butler (0 3) "Unobtrusively remove trailing whitespace." nil single "melpa-stable" nil ((:url . "https://github.com/lewang/ws-butler")) nil])
  (xcscope [cl-struct-package-desc xcscope (1 1) "cscope interface for (X)Emacs" nil single "melpa-stable" nil ((:url . "https://github.com/dkogan/xcscope.el") (:keywords "languages" "c")) nil])
  (xterm-color [cl-struct-package-desc xterm-color (1 0) "ANSI & XTERM 256 color support" nil single "melpa-stable" nil nil nil])
  (yafolding [cl-struct-package-desc yafolding (0 1 4) "Yet another folding extension for Emacs" nil single "melpa-stable" nil ((:keywords "folding")) nil])
  (yagist [cl-struct-package-desc yagist (0 8 11) "Yet Another Emacs integration for gist.github.com" ((json (1 2 0))) single "melpa-stable" nil ((:url . "https://github.com/mhayashi1120/yagist.el/raw/master/yagist.el") (:keywords "gist" "git" "github" "paste" "pastie" "pastebin")) nil])
  (yascroll [cl-struct-package-desc yascroll (0 1) "Yet Another Scroll Bar Mode" nil single "melpa-stable" nil ((:keywords "convenience")) nil])
  (yasnippet [cl-struct-package-desc yasnippet (0 9 0 1) "Yet another snippet extension for Emacs." nil tar "melpa-stable" nil ((:url . "http://github.com/capitaomorte/yasnippet") (:keywords "convenience" "emulation")) nil])
  (zenburn-theme [cl-struct-package-desc zenburn-theme (2 2) "A low contrast color theme for Emacs." nil single "melpa-stable" nil ((:url . "http://github.com/bbatsov/zenburn-emacs")) nil])
  (zygospore [cl-struct-package-desc zygospore (0 0 3) "reversible C-x 1 (delete-other-windows)" nil single "melpa-stable" nil ((:url . "https://github.com/louiskottmann/zygospore.el")) nil])
 )
