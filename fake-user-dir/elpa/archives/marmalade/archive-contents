(1
 (znc .
      [(0 0 2)
       ((cl
	 (2 2))
	(erc
	 (5 3)))
       "ZNC + ERC" single])
 (zjl-hl .
	 [(20121028 1901)
	  ((highlight
	    (21 0))
	   (region-list-edit
	    (20100530 808)))
	  "Highlight variable and function call and others in c/emacs, make life easy." single])
 (zencoding-mode .
		 [(0 5 1)
		  nil "Unfold CSS-selector-like expressions to markup" single])
 (zenburn-theme .
		[(2 0)
		 nil "A low contrast color theme for Emacs." single])
 (zen-mode .
	   [(20120627)
	    nil "remove/restore Emacs distractions quickly" tar])
 (zen-and-art-theme .
		    [(1 0 1)
		     nil "zen and art color theme for GNU Emacs 24" single])
 (zeitgeist .
	    [(0 1)
	     nil "integrates Emacs with Zeitgeist." single])
 (yasnippet-bundle .
		   [(0 6 1)
		    nil "Yet another snippet extension (Auto compiled bundle)" single])
 (yasnippet .
	    [(0 6 1)
	     nil "Yasnippet template engine" tar])
 (yascroll .
	   [(0 2 0)
	    nil "Yet Another Scroll Bar Mode" single])
 (yas-jit .
	  [(0 8 3)
	   nil "Loads Yasnippets on demand (makes start up faster)" single])
 (yari .
       [(0 6)
	nil "Yet Another RI interface for Emacs" single])
 (yaoddmuse .
	    [(0 1 1)
	     nil "Yet another oddmuse for Emacs" single])
 (yaml-mode .
	    [(0 0 7)
	     nil "Major mode for editing YAML files" single])
 (yagist .
	 [(0 8 3)
	  ((json
	    (1 2 0)))
	  "Yet Another Emacs integration for gist.github.com" single])
 (xml-rpc .
	  [(1 6 8)
	   nil "An elisp implementation of clientside XML-RPC" single])
 (xml-gen .
	  [(0 4)
	   nil "A DSL for generating XML." single])
 (xlicense .
	   [(1 1)
	    nil "Insert pre-defined license text" tar])
 (xahk-mode .
	    [(1 2 1)
	     nil "Major mode for editing AHK (Autohotkey) scripts." single])
 (wxwidgets-help .
		 [(0 0 3)
		  nil "Look up wxWidgets API by using local html manual." tar])
 (ws-trim .
	  [(1 4)
	   nil "Tools and minor mode to trim whitespace on text lines" single])
 (writegood-mode .
		 [(1 2)
		  nil "Polish up poor writing on the fly" single])
 (wrap-region .
	      [(0 7 1)
	       nil "Wrap text with punctation or tag" single])
 (world-time-mode .
		  [(0 0 2)
		   nil "show whole days of world-time diffs" single])
 (workspaces .
	     [(0 1)
	      nil "Workspaces for Emacsen" single])
 (workgroups .
	     [(0 2 0)
	      nil "workgroups for windows (for Emacs)" single])
 (with-namespace .
   [(1 1)
    nil "Poor-man's namespaces for elisp" single])
 (winpoint .
	   [(1 4)
	    nil "Remember buffer positions per-window, not per buffer" single])
 (windsize .
	   [(0 1)
	    nil "Simple, intuitive window resizing" single])
 (window-number .
		[(1 0 1)
		 nil "Jump to a window by number" single])
 (window-end-visible .
		     [(0 0 3)
		      nil "Find the last visible point in a window" single])
 (win-switch .
	     [(1 0 8)
	      nil "fast, dynamic bindings for window-switching/resizing" single])
 (wikidoc .
	  [(0 8 1)
	   nil "use elisp doc strings to make other documentation" single])
 (wiki-nav .
	   [(0 11)
	    ((button-lock
	      (0 8)))
	    "simple file navigation using [[WikiStrings]]" single])
 (whole-line-or-region .
		       [(1 3 1)
			nil "operate on current line if region undefined" single])
 (wgrep-helm .
	     [(0 1 0)
	      ((wgrep
		(2 1 1)))
	      "Writable helm-grep-mode buffer and apply the changes to files" single])
 (wgrep-ack .
	    [(0 1 1)
	     ((wgrep
	       (2 1 1)))
	     "Writable ack-and-a-half buffer and apply the changes to files" single])
 (wgrep .
	[(2 1 3)
	 nil "Writable grep buffer and apply the changes to files" single])
 (wget .
       [(1 94)
	nil "Emacs-wget is an interface program of GNU wget on Emacs." tar])
 (weechat .
	  [(0 2)
	   ((s
	     (1 3 1))
	    (cl-lib
	     (0 2))
	    (emacs
	     (24))
	    (tracking
	     (1 2)))
	   "Chat via WeeChat's relay protocol in Emacs" tar])
 (websocket .
	    [(1 0)
	     nil "Emacs WebSocket client and server" single])
 (web .
      [(0 3 7)
       nil "useful HTTP client" single])
 (weather-metno .
		[(20121023)
		 nil "Weather data from met.no in Emacs" tar])
 (weather .
	  [(2012 3 27 2)
	   nil "Get weather reports via worldweatheronline.com" single])
 (wcheck-mode .
	      [(2013 6 13)
	       nil "General interface for text checkers" tar])
 (wc-mode .
	  [(1 1)
	   nil "Running word count with goals (minor mode)" single])
 (watch-buffer .
	       [(1 0 1)
		nil "run a shell command when saving a buffer" single])
 (wacspace .
	   [(0 4)
	    ((dash
	      (1 2 0))
	     (cl-lib
	      (0 2)))
	    "The WACky WorkSPACE manager for emACS" single])
 (w32-browser .
	      [(21 0)
	       nil "Run Windows application associated with a file." single])
 (volatile-highlights .
		      [(1 10)
		       nil "Minor mode for visual feedback on some operations." single])
 (vline .
	[(1 10)
	 nil "show vertical line (column highlighting) mode." single])
 (visible-color-code .
		     [(0 0 1)
		      nil "color code strings in current buffer, this elisp show you one as real color." single])
 (virtualenv .
	     [(1 2)
	      nil "Virtualenv for Python" single])
 (viper-in-more-modes .
		      [(0 1 3)
		       nil "vi-like keybindings for various Emacs modes" single])
 (vimrc-mode .
	     [(0 3 1)
	      nil "Major mode for vimrc files" single])
 (vimpulse .
	   [(0 5)
	    nil "emulates Vim's most useful features" single])
 (vimgolf .
	  [(0 9 2)
	   nil "VimGolf interface for the One True Editor" single])
 (vertica .
	  [(0 1 0)
	   ((sql
	     (3 0)))
	   "Vertica SQL mode extension" single])
 (vector-utils .
	       [(0 1 0)
		nil "Vector-manipulation utility functions" single])
 (vcard .
	[(0 1)
	 nil "vcard parsing and display routines" single])
 (vc-darcs .
	   [(1 12)
	    nil "a VC backend for darcs" single])
 (uuid .
       [(0 0 3)
	nil "UUID's for EmacsLisp" single])
 (unicode-whitespace .
		     [(0 2 3)
		      ((ucs-utils
			(0 7 2))
		       (persistent-soft
			(0 8 6))
		       (pcache
			(0 2 3)))
		      "teach whitespace-mode about fancy characters" single])
 (unicode-progress-reporter .
			    [(0 5 3)
			     ((emacs
			       (24 1 0))
			      (ucs-utils
			       (0 7 2))
			      (persistent-soft
			       (0 8 6))
			      (pcache
			       (0 2 3)))
			     "Progress-reporter with fancy characters" single])
 (unicode-fonts .
		[(0 3 4)
		 ((font-utils
		   (0 6 8))
		  (ucs-utils
		   (0 7 2))
		  (persistent-soft
		   (0 8 6))
		  (pcache
		   (0 2 3)))
		 "Configure Unicode fonts" single])
 (unicode-enbox .
		[(0 1 3)
		 ((string-utils
		   (0 0 1))
		  (ucs-utils
		   (0 7 2))
		  (persistent-soft
		   (0 8 6))
		  (pcache
		   (0 2 3)))
		 "Surround a string with box-drawing characters" single])
 (unfill .
	 [(0 1)
	  nil "The inverse of fill-paragraph and fill-region" single])
 (undo-tree .
	    [(0 3 1)
	     nil "Treat undo history as a tree" single])
 (unbound .
	  [(0 1)
	   nil "find convenient unbound keystrokes" single])
 (ujelly-theme .
	       [(1 0 20)
		nil "Ujelly theme for GNU Emacs 24 (deftheme)" single])
 (ucs-utils .
	    [(0 7 2)
	     ((persistent-soft
	       (0 8 6))
	      (pcache
	       (0 2 3)))
	     "Utilities for Unicode characters" single])
 (uci-mode .
	   [(1 0 0)
	    nil "Major mode for UCI configuration files" single])
 (typopunct .
	    [(1 0)
	     nil "Automatic typographical punctuation marks" single])
 (typo .
       [(1 1)
	nil "Minor mode for typographic editing" single])
 (typing-practice .
		  [(0 1)
		   nil "Typing practice" single])
 (typing .
	 [(1 1 4)
	  nil "A game for fast typers, inspired by The Typing Of The Dead." single])
 (twittering-mode .
		  [(2 0 0)
		   nil "Major mode for Twitter" single])
 (twilight-theme .
		 [(1 0 0)
		  nil "Twilight theme for GNU Emacs 24 (deftheme)" single])
 (tup-mode .
	   [(1 2)
	    nil "Major mode for editing files for Tup" single])
 (tumblesocks .
	      [(0 0 6)
	       ((htmlize
		 (1 39))
		(oauth
		 (1 0 3))
		(markdown-mode
		 (1 8 1)))
	       "An Emacs tumblr client." tar])
 (tumble .
	 [(1 5)
	  nil "an Tumblr mode for Emacs" single])
 (tuareg .
	 [(2 0 5)
	  ((caml
	    (3 12 0 1)))
	  "OCaml mode for Emacs." tar])
 (ttrss .
	[(1 7 5)
	 ((emacs
	   (23 1)))
	 "Tiny Tiny RSS elisp bindings" single])
 (ttl-mode .
	   [(0 1)
	    nil "mode for Turtle(RDF)" single])
 (tt-mode .
	  [(20121117 2045)
	   nil "Emacs major mode for editing Template Toolkit files." tar])
 (truthy .
	 [(0 2 6)
	  ((list-utils
	    (0 1 2)))
	  "Test the content of a value" single])
 (tron-theme .
	     [(12)
	      nil "A theme loosely based on Tron: Legacy colors" single])
 (tracking .
	   [(1 3)
	    ((shorten
	      (0 2)))
	    "Buffer modification tracking" single])
 (track-closed-files .
		     [(0 1)
		      nil "Keep track of recently closed files" single])
 (toxi-theme .
	     [(0 1 0)
	      nil "REQUIRES EMACS 24" single])
 (toml-mode .
	    [(0 1 3)
	     nil "Mojor mode for editing TOML files" single])
 (todotxt .
	  [(0 2 3)
	   nil "A major mode for editing todo.txt files" single])
 (tintin-mode .
	      [(1 0 0)
	       nil "Mayor mode for editing tintin++ scripts" single])
 (tidy .
       [(2 12)
	nil "Interface to the HTML Tidy program" single])
 (thumb-through .
		[(0 3)
		 nil "Plain text reader of HTML documents" single])
 (thread-dump .
	      [(1 0)
	       nil "java thread dump viewer" single])
 (theme-park-mode .
		  [(0 1 2)
		   nil "Take your themes for a ride!" single])
 (theme-changer .
		[(2 0 0)
		 nil "Sunrise/Sunset Theme Changer for Emacs" single])
 (tfs .
      [(0 2 7)
       nil "MS Team Foundation Server commands for Emacs." single])
 (textmate-to-yas .
		  [(0 21)
		   nil "Import Textmate macros into yasnippet syntax" single])
 (textmate .
	   [(5)
	    nil "TextMate minor mode for Emacs" single])
 (text-language .
		[(0 20121008)
		 nil "tracking, setting, guessing language of text" single])
 (tex-smart-umlauts .
		    [(1 1 0)
		     nil "Smart umlaut conversion for TeX." single])
 (test-case-mode .
		 [(0 1 8)
		  nil "unit test front-end" single])
 (tango-2-theme .
		[(1 0 0)
		 nil "Tango 2 color theme for GNU Emacs 24" single])
 (tango-2 .
	  [(1 0 0)
	   nil "Tango 2 color theme for GNU Emacs 24" single])
 (tagedit .
	  [(1 4 0)
	   ((s
	     (1 3 1))
	    (dash
	     (1 0 3)))
	   "Some paredit-like features for html-mode" single])
 (tabulated-list .
		 [(0)
		  nil "generic major mode for tabulated lists." single])
 (tabula-rasa-mode .
		   [(0 1 0)
		    nil "Distraction free writing mode" single])
 (tabkey2 .
	  [(1 40)
	   nil "Use second tab key pressed for what you want" single])
 (tabbar-ruler .
	       [(0 36)
		((tabbar
		  (2 0 1)))
		"Pretty tabbar, autohide, use both tabbar/ruler" single])
 (tabbar .
	 [(2 0 1)
	  nil "Display a tab bar in the header line" single])
 (systemtap-mode .
		 [(0 2)
		  nil "A mode for SystemTap" single])
 (syntactic-sugar .
		  [(0 9 2)
		   nil "Effect-free forms such as if/then/else" single])
 (synonyms .
	   [(1 0)
	    nil "Look up synonyms for a word or phrase in a thesaurus." single])
 (symbols-mode .
	       [(0 3)
		nil "List symbols of object files" single])
 (sws-mode .
	   [(0 1)
	    nil "SWS mode" single])
 (switch-window .
		[(0 9)
		 nil "A *visual* way to choose a window to switch to" single])
 (swarmhacker .
	      [(0 0 1)
	       nil "simple swarm chat" single])
 (swank-cdt .
	    [(1 0 1)
	     nil "swank-cdt helper functions" single])
 (surround .
	   [(0 1)
	    nil "emulate surround.vim from Vim" single])
 (supergenpass .
	       [(0 1)
		nil "SuperGenPass for Emacs" single])
 (suomalainen-kalenteri .
			[(2013 4 18)
			 nil "Finnish national and Christian holidays for calendar" tar])
 (sumatra-forward .
		  [(2008 10 8)
		   nil "Provides Sumatra Forward search" single])
 (sudden-death .
	       [(0 2)
		nil "Totsuzen-no-Shi" single])
 (subshell-proc .
		[(1 0 0)
		 nil "Functions for working with comints" single])
 (sublime .
	  [(0 0 7)
	   ((coffee-mode
	     (0 3 0))
	    (find-file-in-project
	     (3 0))
	    (haml-mode
	     (3 0 14))
	    (ido-ubiquitous
	     (1 0))
	    (less-css-mode
	     (0 6))
	    (magit
	     (1 1 1))
	    (markdown-mode
	     (1 8 1))
	    (monokai-theme
	     (0 0 6))
	    (paredit
	     (22))
	    (sass-mode
	     (3 0 14))
	    (smex
	     (1 1 2))
	    (yaml-mode
	     (0 0 7))
	    (yasnippet
	     (0 6 1)))
	   "REQUIRES EMACS 24 - Sublime Text 2 Emulation for Emacs" tar])
 (stylus-mode .
	      [(0 1)
	       nil "Major mode for editing stylus templates." single])
 (stripe-buffer .
		[(0 2 2)
		 ((cl-lib
		   (1 0)))
		 "Use a different background for even and odd lines" single])
 (string-utils .
	       [(0 2 8)
		((list-utils
		  (0 1 2)))
		"String-manipulation utilities" single])
 (string-edit .
	      [(0 1 0)
	       ((dash
		 (1 2 0)))
	       "Avoid escape nightmares by editing string in separate buffer" single])
 (starter-kit-ruby .
		   [(2 0 3)
		    ((inf-ruby
		      (2 2 3))
		     (starter-kit
		      (2 0 1)))
		    "Saner defaults and goodies for Ruby" single])
 (starter-kit-lisp .
		   [(2 0 3)
		    ((starter-kit
		      (2 0 2))
		     (elisp-slime-nav
		      (0 1)))
		    "Saner defaults and goodies for lisp languages" single])
 (starter-kit-js .
		 [(2 0 1)
		  ((starter-kit
		    (2 0 1)))
		  "Saner defaults and goodies for Javascript" single])
 (starter-kit-eshell .
		     [(2 0 3)
		      nil "Saner defaults and goodies: eshell tweaks" single])
 (starter-kit-bindings .
		       [(2 0 2)
			((starter-kit
			  (2 0 2)))
			"Saner defaults and goodies: bindings" single])
 (starter-kit .
	      [(2 0 3)
	       ((paredit
		 (22))
		(idle-highlight-mode
		 (1 1 1))
		(find-file-in-project
		 (3 0))
		(smex
		 (1 1 1))
		(ido-ubiquitous
		 (0 3))
		(magit
		 (0 8 1)))
	       "Saner defaults and goodies." tar])
 (ssh .
      [(1 2)
       nil "Support for remote logins using ssh." single])
 (sr-speedbar .
	      [(0 1 8)
	       nil "Same frame speedbar" single])
 (sql-indent .
	     [(1 10)
	      nil "indentation of SQL statements" single])
 (sprintly-mode .
		[(0 0 4)
		 ((furl
		   (0 0 2)))
		 "Major mode for dealing with sprint.ly" single])
 (spotify .
	  [(0 2)
	   nil "Control the spotify application from emacs" single])
 (speck .
	[(2010 5 25)
	 nil "minor mode for spell checking" single])
 (sparql-mode .
	      [(0 6 1)
	       nil "Edit and interactively evaluate SPARQL queries." single])
 (soothe-theme .
	       [(0 3 16)
		((emacs
		  (24 1)))
		"a dark colorful theme for Emacs24." single])
 (solarized-theme .
		  [(1 0 0)
		   nil "The Solarized color theme, ported to Emacs." tar])
 (sokoban .
	  [(1 23)
	   nil "Play the Sokoban game in emacs" single])
 (smooth-scrolling .
		   [(1 0 1)
		    nil "Make emacs scroll smoothly" single])
 (smooth-scroll .
		[(1 2)
		 nil "Minor mode for smooth scrolling and in-place scrolling." single])
 (sml-modeline .
	       [(0 5)
		nil "Show position in a scrollbar like way in mode-line" single])
 (smex .
       [(2 0)
	nil "M-x interface with Ido-style fuzzy matching." single])
 (smartrep .
	   [(0 0 3)
	    nil "Support sequential operation which omitted prefix keys." single])
 (smartparens .
	      [(1 4)
	       ((dash
		 (1 1 0)))
	       "Automatic insertion, wrapping and paredit-like navigation with user defined pairs." tar])
 (smarter-compile .
		  [(2012 4 9)
		   nil "a smarter wrapper for `compile'" single])
 (smart-window .
	       [(0 6)
		nil "vim-like window controlling plugin" single])
 (smart-tab .
	    [(0 3)
	     nil "Intelligent tab completion and indentation." single])
 (smart-operator .
		 [(2 0 20110812)
		  nil "Insert operators with surrounding spaces smartly" single])
 (smart-mode-line .
		  [(1 7 1)
		   nil "A color coded smart mode-line." single])
 (smart-forward .
		[(1 0 0)
		 ((expand-region
		   (0 8 0)))
		 "Semantic navigatioin" single])
 (slough .
	 [(0 1)
	  ((nrepl
	    (0 1 7))
	   (smartparens
	    (1 4 3)))
	  "package for slough - this is for a secret TW thing" single])
 (slime-scratch .
		[(1 0 0)
		 ((slime
		   (20100404)))
		 "Imitate Emacs' *scratch* buffer" single])
 (slime-ritz .
	     [(0 6 0)
	      nil "slime extensions for ritz" single])
 (slime-repl .
	     [(20100404)
	      ((slime
		(20100404)))
	      "Read-Eval-Print Loop written in Emacs Lisp" single])
 (slime-js .
	   [(0 0 1)
	    ((slime-repl
	      (20100404))
	     (slime
	      (20100404)))
	    "Slime extension for swank-js." single])
 (slime-fuzzy .
	      [(20100404)
	       ((slime
		 (20100404)))
	       "Fuzzy symbol completion for Slime" single])
 (slime-clj .
	    [(0 1 6)
	     nil "slime extensions for swank-clj" single])
 (slime .
	[(20100404 1)
	 nil "Superior Lisp Interaction Mode for Emacs" single])
 (slim-mode .
	    [(1 1)
	     nil "Major mode for editing Slim files" single])
 (slamhound .
	    [(2 0 0)
	     nil "Rip Clojure namespaces apart and rebuild them." single])
 (skinny .
	 [(0 0 3)
	  ((elnode
	    (0 9 9 6 1))
	   (creole
	    (0 8 17)))
	  "a blog engine with elnode" single])
 (simplezen .
	    [(0 1 1)
	     nil "A simple subset of zencoding-mode for Emacs." single])
 (simpleclip .
	     [(0 2 2)
	      nil "Simplified access to the system clipboard" single])
 (simple-mode-line .
		   [(0 3)
		    nil "Simplified Mode Line for Emacs 24" single])
 (simp .
       [(0 2 0)
	nil "Simple project definition, chiefly for project file finding and grepping." tar])
 (show-marks .
	     [(0 3)
	      ((fm
		(1 0)))
	      "Navigate and visualize the mark-ring" single])
 (show-css .
	   [(1 1)
	    nil "Show the css of the html attribute the cursor is on" single])
 (shorten .
	  [(0 2)
	   nil "component-wise string shortener" single])
 (shoes-off .
	    [(0 1 8)
	     ((kv
	       (0 0 5))
	      (anaphora
	       (0 0 4)))
	     "irc bouncer" single])
 (shell-switcher .
		 [(0 1 5 1)
		  nil "Easily switch between shell buffers, like with alt+tab." tar])
 (shell-here .
	     [(1 1)
	      nil "Open a shell relative to the working directory" single])
 (setup-cygwin .
	       [(21 0)
		nil "Set up Emacs for using Cygwin" single])
 (session-manager .
		  [(0 5)
		   nil "Support for the Gnome Session Manager" single])
 (session .
	  [(2 2 1)
	   nil "use variables, registers and buffer places across sessions" single])
 (sequence .
	   [(0 0 1)
	    nil "makes sequences of numbers" single])
 (sentence-highlight .
		     [(0 1)
		      nil "highlight the current sentence" single])
 (seclusion-mode .
		 [(1 1 1)
		  nil "Edit in seclusion. A Dark Room mode." single])
 (sea-before-storm-theme .
			 [(0 3)
			  nil "Sea Before Storm color theme for Emacs 24" single])
 (scss-mode .
	    [(0 5 0)
	     nil "Major mode for editing SCSS files" single])
 (scrolloff .
	    [(1 0)
	     nil "This mode ofers vim-like scrolloff function" single])
 (screen-lines .
	       [(0 55)
		nil "a minor mode for screen-line-based point motion" single])
 (scratch-pop .
	      [(1 0 0)
	       nil "popup scratch" single])
 (scratch-palette .
		  [(1 0 1)
		   nil "add scratch notes for each file" single])
 (scratch .
	  [(20110708)
	   nil "Mode-specific scratch buffers" single])
 (scpaste .
	  [(0 6)
	   ((htmlize
	     (1 39)))
	   "Paste to the web via scp." single])
 (scheme-complete .
		  [(0 8 2)
		   nil "Smart tab completion for Emacs" single])
 (scala-mode .
	     [(0 0 2)
	      nil "Scala major mode" tar])
 (scad-mode .
	    [(90 0)
	     nil "SCAD mode derived mode" single])
 (sawfish .
	  [(1 32)
	   nil "Sawfish mode." single])
 (save-visited-files .
		     [(1 3)
		      nil "save opened files across sessions" single])
 (save-packages .
		[(0 20121012)
		 nil "save and restore installed packages" single])
 (sauron .
	 [(0 8)
	  nil "Track (erc/org/dbus/...) events and react to them." tar])
 (sass-mode .
	    [(3 0 14)
	     ((haml-mode
	       (3 0 14)))
	     "Major mode for editing Sass files" single])
 (sackspace .
	    [(0 8 1)
	     nil "A better backspace" single])
 (s-buffer .
	   [(0 0 4)
	    ((s
	      (1 6 0))
	     (noflet
		 (0 0 3)))
	    "s operations for buffers" single])
 (rw-language-and-country-codes .
				[(0 1)
				 nil "Language & Country Codes" single])
 (rw-ispell .
	    [(0 1)
	     nil "additional functions for ispell.el" single])
 (rw-hunspell .
	      [(0 2)
	       nil "special functions for Hunspell in ispell.el" single])
 (rvm .
      [(1 3 0)
       nil "Emacs integration for rvm" single])
 (rust-mode .
	    [(0 1 0)
	     ((cm-mode
	       (0 1 0)))
	     "A major emacs mode for editing Rust source code" single])
 (rudel .
	[(0 3)
	 ((eieio
	   (1 4)))
	 "A collaborative editing framework for Emacs" tar])
 (rubyinterpol .
	       [(0 1)
		nil "Ruby-like String Interpolation for format" single])
 (ruby-tools .
	     [(0 1 0)
	      nil "Collection of handy functions for ruby-mode" single])
 (ruby-test-mode .
		 [(1 5)
		  ((ruby-mode
		    (1 0)))
		  "Minor mode for Behaviour and Test Driven" single])
 (ruby-mode .
	    [(1 1)
	     nil "ruby-mode package" tar])
 (ruby-hash-syntax .
		   [(0 1)
		    nil "Toggle ruby hash syntax between classic and 1.9 styles" single])
 (ruby-end .
	   [(0 2 0)
	    nil "Automatic insertion of end blocks for Ruby" single])
 (ruby-compilation .
		   [(2 10)
		    ((inf-ruby
		      (2 2 1)))
		    "run a ruby process in a compilation buffer" single])
 (ruby-block .
	     [(0 0 11)
	      nil "highlight matching block" single])
 (rubocop .
	  [(0 1)
	   ((dash
	     (1 0 0)))
	   "An Emacs interface for RuboCop" single])
 (rspec-mode .
	     [(1 7)
	      ((ruby-mode
		(1 0)))
	      "Enhance ruby-mode for RSpec" single])
 (roy-mode .
	   [(0 1 0)
	    nil "Roy major mode" single])
 (robe .
       [(0 7 4)
	((inf-ruby
	  (2 2 4)))
	"Code navigation, documentation lookup and completion for Ruby" tar])
 (rinari .
	 [(2 10)
	  ((ruby-mode
	    (1 0))
	   (inf-ruby
	    (2 2 1))
	   (ruby-compilation
	    (0 8))
	   (jump
	    (2 0)))
	  "Rinari Is Not A Rails IDE" single])
 (rfringe .
	  [(1 0 1)
	   nil "indicate relative locations in the fringe" single])
 (revive .
	 [(2 19)
	  nil "Resume Emacs." single])
 (requirejs-mode .
		 [(1 1)
		  nil "Improved AMD module management" single])
 (request-deferred .
		   [(0 2 0)
		    ((deferred
			 (0 3 1))
		     (request
		      (0 2 0)))
		    "Wrap request.el by deferred" single])
 (request .
	  [(0 2 0)
	   nil "Compatible layer for URL request in Emacs" single])
 (repository-root .
		  [(1 0 3)
		   nil "deduce the repository root directory for a given file" single])
 (region-list-edit .
		   [(20100530 808)
		    nil "Add/delete a region into/from a region list, such as ((4 . 7) (11 . 15) (17 . 17) (20 . 25))." single])
 (region-bindings-mode .
		       [(0 1)
			nil "Enable custom bindings when mark is active." single])
 (regex-tool .
	     [(1 2)
	      nil "A regular expression evaluation tool for programmers" single])
 (refheap .
	  [(0 0 3)
	   nil "A library for pasting to https://refheap.com" single])
 (recursive-narrow .
		   [(1 0)
		    nil "narrow-to-region that operates recursively" single])
 (rect-mark .
	    [(1 4)
	     nil "Mark a rectangle of text with highlighting." single])
 (rcirc-ucomplete .
		  [(1 0 1)
		   nil "Unambiguous non-cycling completion for rcirc" single])
 (rcirc-ssh .
	    [(0 0 7)
	     ((kv
	       (0 0 3)))
	     "do irc over ssh sessions" single])
 (rcirc-robots .
	       [(0 0 7)
		((kv
		  (0 0 8))
		 (anaphora
		  (0 0 5)))
		"robots based on rcirc irc" single])
 (rcirc-notify .
	       [(0 6)
		nil "libnotify popups" single])
 (rcirc-color .
	      [(0 2)
	       nil "color nicks" single])
 (rbenv .
	[(0 0 1)
	 nil "Emacs integration for rbenv" single])
 (rainbow-delimiters .
		     [(1 3 21)
		      nil "Highlight nested parens, brackets, braces a different color at each depth." single])
 (r5rs .
       [(1 0)
	nil "Browse documentation from the R5RS Revised5 Report" single])
 (r-autoyas .
	    [(2011 3 13)
	     nil "Provides automatically created yasnippets for R function argument lists." single])
 (quickrun .
	   [(1 8 4)
	    nil "Run commands quickly" single])
 (quack .
	[(0 42)
	 nil "enhanced support for editing and running Scheme code" single])
 (qsimpleq-theme .
		 [(0 1 3)
		  nil "Based on solarized color theme for Emacs." single])
 (pyvirtualenv .
	       [(1 1)
		nil "Python Pyvirtualenv support" single])
 (python-pylint .
		[(1 1)
		 nil "minor mode for running `pylint'" single])
 (python-pep8 .
	      [(1 1)
	       nil "minor mode for running `pep8'" single])
 (python-mode .
	      [(6 0 10)
	       nil "Python major mode" tar])
 (python-django .
		[(0 1)
		 nil "A Jazzy package for managing Django projects" single])
 (python .
	 [(20120402)
	  nil "Python's flying circus support for Emacs" single])
 (pytest .
	 [(0 2 1)
	  nil "Easy Python test running in Emacs" single])
 (pysmell .
	  [(0 7 2)
	   nil "Complete python code using heuristic static analysis" single])
 (pymacs .
	 [(0 25)
	  nil "Interface between Emacs Lisp and Python" single])
 (pylint .
	 [(1 0)
	  nil "run the python pylint checker putting hits in a grep buffer" single])
 (pyflakes .
	   [(1 0)
	    nil "run the python pyflakes checker putting hits in a grep buffer" single])
 (pyde .
       [(0 6)
	((pymacs
	  (0 25))
	 (auto-complete
	  (1 4))
	 (yasnippet
	  (0 8))
	 (fuzzy
	  (0 1))
	 (pyvirtualenv
	  (1 0)))
	"Python Development Environment" single])
 (pycomplete .
	     [(1 0)
	      nil "Complete symbols at point using Pymacs." single])
 (purple-haze-theme .
		    [(0 0 7)
		     nil "an overtly purple color theme for Emacs24." single])
 (puppet-mode .
	      [(0 2)
	       nil "A simple mode for editing puppet manifests" single])
 (psvn .
       [(1 1 1)
	nil "Subversion interface for emacs" single])
 (psgml .
	[(1 4 0)
	 nil "Lennart Staflin's Psgml package, with Elisp syntax fixed for Emacsen >=24." tar])
 (protobuf-mode .
		[(0 3)
		 nil "major mode for editing protocol buffers." single])
 (prolog .
	 [(1 22)
	  nil "major mode for editing and running Prolog (and Mercury) code" single])
 (projectile .
	     [(0 9 1)
	      ((s
		(1 0 0))
	       (dash
		(1 0 0)))
	      "Manage and navigate projects in Emacs easily" single])
 (project-mode .
	       [(1 0)
		((levenshtein
		  (1 0)))
		"Define code projects. Full-text search, etc." single])
 (project .
	  [(1 0)
	   nil "Keep track of the current project" single])
 (proc-net .
	   [(0 0 1)
	    nil "network process tools" single])
 (pretty-mode-plus .
		   [(1 1)
		    nil "Redisplay parts of the buffer as pretty symbols." tar])
 (pretty-lambdada .
		  [(22 0)
		   nil "Show the word `lambda' as the Greek letter." single])
 (pp-c-l .
	 [(1 0)
	  nil "Display Control-l characters in a pretty way" single])
 (powershell .
	     [(0 2 1)
	      nil "run powershell as an inferior shell in emacs" single])
 (pov-mode .
	   [(3 3)
	    nil "Major mode for editing POV-Ray scene files." tar])
 (pos-tip .
	  [(0 4 5)
	   nil "Show tooltip at point" single])
 (popwin .
	 [(0 4)
	  nil "Popup Window Manager." single])
 (popup .
	[(0 5)
	 nil "Visual Popup User Interface" single])
 (pony-mode .
	    [(0 2)
	     nil "Minor mode for working with Django Projects" tar])
 (pointback .
	    [(0 2)
	     nil "Restore window points when returning to buffers" single])
 (pod-mode .
	   [(20121117 2120)
	    nil "Major mode for editing .pod-files." tar])
 (po-elscreen .
	      [(1 4 6)
	       nil "Screen for Emacsen(this is not original. original is http://www.morishima.net/~naoto/elscreen-en/?lang=en)" single])
 (plantuml-mode .
		[(0 2)
		 nil "Major mode for plantuml" single])
 (pivotal-tracker .
		  [(1 2 0)
		   nil "Interact with Pivotal Tracker through its API" single])
 (pinboard .
	   [(0 0 1)
	    nil "get stuff from pinboard" single])
 (php-mode .
	   [(1 5 0)
	    nil "major mode for editing PHP code" single])
 (php-extras .
	     [(0 4 4 20130612)
	      ((php-mode
		(1 5 0)))
	      "Extra features for `php-mode'" tar])
 (php-completion .
		 [(0 3)
		  nil "complete everything PHP with Anything.el" single])
 (phi-search .
	     [(1 1 0)
	      nil "inferior isearch compatible with \"multiple-cursors\"" single])
 (phantomjs .
	    [(0 0 11)
	     nil "Control phantomjs from Emacs			" tar])
 (pg .
     [(0 12)
      nil "Emacs Lisp interface to the PostgreSQL RDBMS" single])
 (perspective .
	      [(1 9)
	       nil "switch between named \"perspectives\" of the editor" single])
 (persistent-soft .
		  [(0 8 6)
		   ((pcache
		     (0 2 3))
		    (list-utils
		     (0 2 0)))
		   "Persistent storage, returning nil on failure" single])
 (perlcritic .
	     [(1 10)
	      nil "minor mode for Perl::Critic integration" single])
 (perlbrew .
	   [(0 1)
	    ((cl
	      (0)))
	    "basic support for perlbrew environments" single])
 (perl-myvar .
	     [(1 23)
	      nil "Declare lexicaly scoped vars as my()." single])
 (pep8 .
       [(1 2)
	nil "run the python pep8 checker putting hits in a grep buffer" single])
 (peep-open .
	    [(0 0 2)
	     nil "PeepOpen plugin for emacs." single])
 (pde .
      [(0 2 16)
       nil "Perl Development Environment" tar])
 (pcsv .
       [(1 3 2)
	nil "Parser of csv" single])
 (pcre2el .
	  [(1 5)
	   ((cl-lib
	     (0 3)))
	   "parse, convert, and font-lock PCRE, Emacs and rx regexps" single])
 (pcmpl-args .
	     [(0 1 1)
	      nil "Enhanced shell command completion" single])
 (pcache .
	 [(0 2 3)
	  ((eieio
	    (1 3)))
	  "persistent caching for Emacs" single])
 (pc-mode .
	  [(0 1)
	   nil "major mode for editing PC code," single])
 (pastels-on-dark-theme .
			[(0 3)
			 nil "Pastels on Dark theme for Emacs 24" single])
 (pastebin .
	   [(0 1)
	    nil "A simple interface to the www.pastebin.com webservice" single])
 (paste-kde .
	    [(0 2 1)
	     ((web
	       (0 3 6)))
	     "paste text to KDE's pastebin service" single])
 (parenface-plus .
		 [(1 1)
		  nil "Provide a face for parens in lispy modes." tar])
 (parenface .
	    [(1 1)
	     nil "Provide a face for parens in lisp modes." single])
 (paredit-menu .
	       [(1 0)
		nil "Adds a menu to paredit.el as memory aid" single])
 (paredit-everywhere .
		     [(0 2)
		      ((paredit
			(22)))
		      "Enable some paredit features in non-lisp buffers" single])
 (paredit .
	  [(22)
	   nil "minor mode for editing parentheses" single])
 (pager .
	[(2 0)
	 nil "windows-scroll commands" single])
 (page-break-lines .
		   [(0 7)
		    nil "Display ugly ^L page breaks as tidy horizontal lines" single])
 (package-store .
		[(0 3)
		 nil "a package cache" single])
 (package .
	  [(1 0)
	   ((tabulated-list
	     (0)))
	   "Simple package system for Emacs" single])
 (pabbrev .
	  [(3 1)
	   nil "Predictive abbreviation expansion" single])
 (p4 .
     [(11 0)
      nil "Perforce-Emacs Integration Library" single])
 (oz .
     [(16513)
      nil "Major mode for editing Oz programs" tar])
 (outlined-elisp-mode .
		      [(1 0 5)
		       nil "outline-minor-mode settings for emacs lisp" single])
 (otter-mode .
	     [(1 2)
	      nil "Major mode for source files of the Otter automated theorem prover" single])
 (otp .
      [(1 0)
       nil "a one-time password creator" single])
 (osx-location .
	       [(0 2)
		nil "Watch and respond to changes in geographical location on OS X" tar])
 (osx-browse .
	     [(0 8 6)
	      ((browse-url-dwim
		(0 6 2)))
	      "Web browsing helpers for OS X" single])
 (org2blog .
	   [(0 5)
	    ((org
	      (7 7))
	     (xml-rpc
	      (1 6 8)))
	    "Blog from Org mode to wordpress" tar])
 (org-table-comment .
		    [(0 2)
		     nil "Org table comment modes." single])
 (org-readme .
	     [(20130322 926)
	      ((http-post-simple
		(1 0))
	       (yaoddmuse
		(0 1 1))
	       (header2
		(21 0))
	       (lib-requires
		(21 0)))
	      "Integrates Readme.org and Commentary/Change-logs." single])
 (org-presie .
	     [(0 0 5)
	      ((framesize
		(0 0 1))
	       (eimp
		(1 4 0))
	       (org
		(7 8 9)))
	      "simple presentation with an org file" single])
 (org-outlook .
	      [(0 3)
	       nil "Outlook org" single])
 (org-mime .
	   [(20120112)
	    nil "org html export for text/html MIME emails" single])
 (org-magit .
	    [(0 2 0)
	     ((magit
	       (0 8))
	      (org
	       (6 1)))
	     "basic support for magit links" single])
 (org-journal .
	      [(1 3 4)
	       nil "a simple org-mode based journaling mode" single])
 (org-email .
	    [(1 0)
	     nil "use org for an email database" single])
 (org-ehtml .
	    [(0 20120928)
	     ((elnode
	       (0 9 9))
	      (org-plus-contrib
	       (20120928)))
	     "Export Org-mode files as editable web pages" tar])
 (org-dotemacs .
	       [(0 2)
		((org
		  (7 9 3))
		 (cl-lib
		  (1 0)))
		"Store your emacs config as an org file, and choose which bits to load." single])
 (org-cua-dwim .
	       [(0 5)
		nil "Org-mode and Cua mode compatibility layer" single])
 (org-blog .
	   [(1 18 1 1)
	    nil "create and publish a blog with org-mode" single])
 (openwith .
	   [(20120531)
	    nil "Open files with external programs" single])
 (oddmuse .
	  [(20090222)
	   nil "edit pages on an Oddmuse wiki" single])
 (octomacs .
	   [(0 0 1)
	    nil "Octopress interface for Emacs" single])
 (occur-x .
	  [(0 1 1)
	   nil "Extra functionality for occur" single])
 (ob-sml .
	 [(0 2)
	  ((sml-mode
	    (6 4)))
	  "org-babel functions for template evaluation" single])
 (oauth .
	[(1 0 3)
	 nil "An Emacs oauth client. See https://github.com/psanford/emacs-oauth/" tar])
 (nzenburn-theme .
		 [(20130513)
		  nil "A low contrast color theme for Emacs." single])
 (nurumacs .
	   [(3 5 4)
	    nil "smooth-scrolling and minimap, like sublime editor" single])
 (ntcmd .
	[(1 0)
	 nil "major mode for editing cmd scripts" single])
 (nsis-mode .
	    [(0 44)
	     nil "NSIS-mode" single])
 (nrepl-ritz .
	     [(0 6 0)
	      ((nrepl
		(0 1 5)))
	      "nrepl extensions for ritz" single])
 (nrepl .
	[(0 1 7)
	 ((clojure-mode
	   (2 0 0)))
	 "Client for Clojure nREPL" single])
 (notmuch-labeler .
		  [(0 1)
		   nil "Improves notmuch way of displaying labels through fonts, pictures, and hyperlinks." tar])
 (notify .
	 [(2010 8 20)
	  nil "notification front-end" single])
 (nose .
       [(0 1 1)
	nil "Easy Python test running in Emacs" single])
 (noflet .
   [(0 0 7)
    nil "locally override functions" single])
 (no-easy-keys .
	       [(1 0 2)
		nil "Learn the proper Emacs movement keys" single])
 (nimrod-mode .
	      [(0 1 5)
	       ((auto-complete
		 (1 4)))
	       "A major mode for the Nimrod programming language" single])
 (nginx-mode .
	     [(1 1)
	      nil "major mode for editing nginx config files" single])
 (nemerle .
	  [(0 2)
	   nil "major mode for editing nemerle programs" single])
 (nav-flash .
	    [(1 0 8)
	     nil "Briefly highlight the current line" single])
 (namakemono .
	     [(0 0 1)
	      nil "utility function set for namakemono" single])
 (n3-mode .
	  [(20071215)
	   nil "mode for Notation 3" single])
 (my-packages .
	      [(0 1 0)
	       nil "Package Initialization." single])
 (mwe-log-commands .
		   [(20041106)
		    nil "log keyboard commands to buffer" single])
 (mustache-mode .
		[(1 2)
		 nil "A major mode for editing Mustache files." single])
 (mustache .
	   [(0 20)
	    ((ht
	      (0 9))
	     (s
	      (1 3 0))
	     (dash
	      (1 2 0)))
	    "a mustache templating library in emacs lisp" tar])
 (multiple-cursors .
		   [(1 2 1)
		    nil "Multiple cursors for Emacs." tar])
 (multi-web-mode .
		 [(0 1)
		  nil "multiple major mode support for web editing" single])
 (multi-term .
	     [(0 8 8)
	      nil "Managing multiple terminal buffers in Emacs." single])
 (multi-project .
		[(0 0 8)
		 nil "Easily work with multiple projects." single])
 (multi-eshell .
	       [(0 0 1)
		nil "makes it easier to use multiple shells within emacs" single])
 (move-text .
	    [(1 0)
	     nil "Move current line or region with M-up or M-down." single])
 (mote-mode .
	    [(1 0 0)
	     ((ruby-mode
	       (1 1)))
	     "Mote minor mode" single])
 (monokai-theme .
		[(0 0 10)
		 nil "REQUIRES EMACS 24: Monokai Color Theme for Emacs." single])
 (monky .
	[(0 1)
	 nil "control Hg from Emacs." single])
 (mongo-elnode .
	       [(0 5 0)
		((mongo
		  (0 5))
		 (elnode
		  (0 9 9)))
		"elnode adapter for mongo-el" single])
 (mongo .
	[(0 5)
	 nil "A MongoDB client." tar])
 (moinmoin-mode .
		[(1 0)
		 ((screen-lines
		   (0 55)))
		 "a major mode to edit MoinMoin wiki pages" single])
 (modeline-posn .
		[(22 0)
		 nil "Set up `mode-line-position'." single])
 (mode-icons .
	     [(0 1 0)
	      nil "Show icons for modes" tar])
 (mode-compile .
	       [(2 29)
		nil "Smart command for compiling files" single])
 (mocker .
	 [(0 2 6)
	  ((eieio
	    (1 3))
	   (el-x
	    (0 2 2)))
	  "mocking framework for emacs" single])
 (mo-git-blame .
	       [(0 1 0)
		nil "An interactive, iterative 'git blame' mode for Emacs" single])
 (mldonkey .
	   [(0 0 4)
	    nil "Multi-networks peer-to-peer client." tar])
 (minimap .
	  [(1 0)
	   nil "Sidebar showing a \"mini-map\" of a buffer" single])
 (minimal-session-saver .
			[(0 6 0)
			 nil "Very lean session saver" single])
 (midje-mode .
	     [(0 1 2)
	      ((slime
		(1 0))
	       (clojure-mode
		(1 0)))
	      "Minor mode for running Midje tests in emacs, see: https://github.com/dnaumov/midje-mode" tar])
 (mic-paren .
	    [(3 8)
	     nil "advanced highlighting of matching parentheses" single])
 (member-function .
		  [(0 3 1)
		   nil "expand member functions for C++ classes" single])
 (mediawiki .
	    [(2 2 3)
	     nil "mediawiki frontend" single])
 (mc-jump .
	  [(1 0 0)
	   nil "like \"jump-char\", but \"multiple-cursors\" friendly" single])
 (maxframe .
	   [(0 5 1)
	    nil "maximize the emacs frame based on display size" single])
 (master-mode .
	      [(0 1)
	       nil "Become an Emacs master" single])
 (marmalade-test .
		 [(0 0 1)
		  nil "A test tarball package." tar])
 (marmalade-service .
		    [(2 0 9)
		     ((dash
		       (1 1 0))
		      (s
		       (1 6 0))
		      (elnode
		       (0 9 9 6 10)))
		     "The Marmalade package store service." tar])
 (marmalade .
	    [(0 0 4)
	     ((furl
	       (0 0 2)))
	     "Elisp interface for the Emacs Lisp package server." single])
 (markup-faces .
	       [(1 0 0)
		nil "collection of faces for markup language modes" single])
 (markdown-mode .
		[(1 9)
		 nil "Emacs Major mode for Markdown-formatted text files" single])
 (mark-tools .
	     [(0 3)
	      nil "Some simple tools to access the mark-ring in Emacs" single])
 (mark-multiple .
		[(1 0)
		 nil "A library that sorta lets you mark several regions at once" single])
 (mark-more-like-this .
		      [(1 0)
		       nil "Mark additional regions in buffer matching current region." single])
 (mark .
       [(0 3)
	((fm
	  (1 0)))
	"Navigate and visualize the mark-ring" single])
 (margo .
	[(2012 9 18)
	 ((web
	   (0 1 8))
	  (json
	   (1 2)))
	 "Client for MarGo, providing Go utilities" single])
 (makefile-runner .
		  [(1 1 2)
		   nil "Searches for Makefile and fetches targets" single])
 (main-line .
	    [(1 2 2)
	     nil "modeline replacement forked from an early version of powerline.el" single])
 (maildir .
	  [(0 0 18)
	   nil "Simple maildir based MUA." tar])
 (magithub .
	   [(0 2)
	    ((magit
	      (0 8))
	     (json
	      (1 2)))
	    "Magit extensions for using GitHub" single])
 (magit-simple-keys .
		    [(1 0 0)
		     ((magit
		       (1 0 0)))
		     "simple keybindings for Magit" single])
 (magit-gh-pulls .
		 [(0 3)
		  ((gh
		    (0 4 3))
		   (magit
		    (1 1 0)))
		  "GitHub pull requests extension for Magit" single])
 (magit .
	[(1 2 0)
	 nil "Control Git from Emacs." tar])
 (mactag .
	 [(0 0 1)
	  nil "Mode for automatically handle multiple tags files with Mactag rubygem" single])
 (macrostep .
	    [(0 6)
	     nil "interactive macro stepper for Emacs Lisp" single])
 (macro-utils .
	      [(1 0)
	       nil "Utilities for writing macros." single])
 (macro-math .
	     [(1 0)
	      nil "in-buffer mathematical operations" single])
 (mac-key-mode .
	       [(2010 1 3)
		nil "provide mac-style key bindings on Carbon Emacs" single])
 (lui .
      [(1 2)
       ((tracking
	 (1 3)))
       "Linewise User Interface" tar])
 (lua-mode .
	   [(20110428)
	    nil "a major-mode for editing Lua scripts" single])
 (lorem-ipsum .
	      [(0 1)
	       nil "Insert dummy pseudo Latin text." single])
 (loop .
    [(1 1)
     nil "friendly imperative loop structures" single])
 (look-mode .
	    [(1 0)
	     nil "quick file viewer for image and text file browsing" single])
 (look-dired .
	     [(0 1)
	      ((look-mode
		(1 0)))
	      "Extensions to look-mode for dired buffers" single])
 (lolcode-mode .
	       [(0 2)
		nil "Major mode for editing LOLCODE" single])
 (logito .
	 [(0 1)
	  ((eieio
	    (1 3)))
	  "logging library for Emacs" single])
 (loccur .
	 [(1 1 1)
	  nil "Perform an occur-like folding in current buffer" single])
 (load-theme-buffer-local .
			  [(0 0 2)
			   nil "Install emacs24 color themes by buffer." single])
 (livescript-mode .
		  [(0 0 1)
		   nil "Major mode for LiveScript files in Emacs" single])
 (list-utils .
	     [(0 3 0)
	      nil "List-manipulation utility functions" single])
 (lispyscript-mode .
		   [(0 3 1)
		    nil "Major mode for LispyScript code." single])
 (lisp-infection .
		 [(0 0 10)
		  nil "Commands to *enhance* S-exp editing" single])
 (lisp-editing .
	       [(0 0 5)
		nil "lisp editing tools" single])
 (linum-off .
	    [(0 1)
	     nil "Provides an interface for turning line-numbering off" single])
 (lineno .
	 [(0 1)
	  nil "Alternate mode to display line numbers." single])
 (linear-undo .
	      [(5 2)
	       nil "Intuitive undo/redo." single])
 (lib-requires .
	       [(21 0)
		nil "Commands to list Emacs Lisp library dependencies." single])
 (lexbind-mode .
	       [(0 8)
		nil "Puts the value of lexical-binding in the mode line" single])
 (levenshtein .
	      [(1 0)
	       nil "Edit distance between two strings." single])
 (letcheck .
	   [(0 2)
	    nil "Check the erroneous assignments in let forms" single])
 (let-recur .
	    [(0 0 5)
	     nil "Simplified implementation of recur" single])
 (less-css-mode .
		[(0 15)
		 nil "Major mode for editing LESS CSS files (lesscss.org)" single])
 (legalese .
	   [(20120706)
	    nil "Add legalese to your program files" single])
 (lcs .
      [(1 1)
       nil "find out the longest common sequence" single])
 (layout-restore .
		 [(0 4)
		  nil "keep window configuration as layout and restore it simply." single])
 (latex-pretty-symbols .
		       [(1 0)
			nil "Display many latex symbols as their unicode counterparts" single])
 (latest-clojure-libraries .
			   [(0 1)
			    ((nrepl
			      (0 1 7)))
			    "Clojure dependency resolver" single])
 (latest-clojars .
		 [(0 3)
		  nil "Clojure dependency resolver" single])
 (late-night-theme .
		   [(0 0)
		    nil "Late Night theme for Emacs 24" single])
 (langtool .
	   [(1 2 0)
	    nil "Grammer check utility using LanguageTool" single])
 (lang-refactor .
		[(0 1 1)
		 nil "Simple refactorings, primarily for Perl" single])
 (lacarte .
	  [(22 0)
	   nil "Execute menu items as commands, with completion." single])
 (kwin .
       [(0 1)
	nil "communcate with the KWin window manager" single])
 (kv .
     [(0 0 17)
      nil "key/value data structure functions" single])
 (kpm-list .
	   [(1 0)
	    nil "An emacs buffer list that tries to intelligently group together buffers." single])
 (kmacro-decision .
		  [(0 9)
		   ((el-x
		     (1 0)))
		   "Add conditional branching to keyboard macros" single])
 (keywiz .
	 [(1 4)
	  nil "Emacs key sequence quiz" single])
 (keyfreq .
	  [(0 0 3)
	   ((json
	     (1 2)))
	   "track command frequencies" single])
 (key-combo .
	    [(1 5 1)
	     nil "map key sequence to commands" single])
 (key-chord .
	    [(0 5 20080915)
	     nil "map pairs of simultaneously pressed keys to commands" single])
 (key-choices .
	      [(0 201)
	       ((color-theme-vim-insert-mode
		 (0 1))
		(color-theme-emacs-revert-theme
		 (0 1)))
	       "Key Choices -- Also Viper has different colors in different modes" single])
 (kanban .
	 [(0 1 2)
	  nil "Parse org-todo headlines to use org-tables as Kanban tables" single])
 (jump-char .
	    [(0 1)
	     nil "navigation by char" single])
 (jump .
       [(2 2)
	((findr
	  (0 7))
	 (inflections
	  (1 1)))
	"build functions which contextually jump between files" single])
 (jtags-extras .
	       [(0 3 0)
		nil "jtags related functionality for Java development" single])
 (jtags .
	[(0 97)
	 nil "enhanced tags functionality for Java development" single])
 (jsshell-bundle .
		 [(2012 4 7)
		  nil "JSShell generated bundle" single])
 (jsshell .
	  [(2012 4 7)
	   nil "Run a javascript command interpreter in emacs on Windows." single])
 (json-mode .
	    [(0 1 2)
	     nil "Major mode for editing JSON files" single])
 (json .
       [(1 2)
	nil "JavaScript Object Notation parser / generator" single])
 (js-comint .
	    [(0 0 1)
	     nil "Run javascript in an inferior process window." single])
 (journal .
	  [(1 2 1)
	   nil "a simple org-mode based journaling mode" single])
 (jira .
       [(0 3 3)
	nil "Connect to JIRA issue tracking software" single])
 (jinja2-mode .
	      [(0 1)
	       nil "A major mode for jinja2" single])
 (jenkins-watch .
		[(1 2)
		 nil "Watch continuous integration build status" single])
 (jedi .
       [(0 1 2)
	((epc
	  (0 1 0))
	 (auto-complete
	  (1 4)))
	"Python auto-completion for Emacs" tar])
 (jcuken-fix .
	     [(1 0)
	      nil "Map Modifier-CyrillicLetter to the underlying Modifier-LatinLetter." single])
 (javarun .
	  [(0 1 1)
	   nil "Minor mode for quick development of Java programs" single])
 (javap-mode .
	     [(9)
	      nil "Javap major mode" single])
 (javap .
	[(8)
	 nil "Javap major mode" single])
 (javadoc-help .
	       [(1 0)
		nil "Javadoc-Help.  Look up Java class on online javadocs in browser." single])
 (jaunte .
	 [(0 0 0)
	  nil "Emacs Hit a Hint" single])
 (jasmin .
	 [(1 2)
	  nil "major editing mode for Jasmin Java bytecode assembler files" single])
 (jade-mode .
	    [(0 1)
	     nil "Major mode for editing jade templates." single])
 (jabber .
	 [(0 8 90)
	  nil "A Jabber client for Emacs." tar])
 (j-mode .
	 [(0 3)
	  nil "Major mode for editing J programs" single])
 (iy-go-to-char .
		[(1 0)
		 nil "Go to next CHAR which is similar to \"f\" in vim" single])
 (isea .
       [(0 0 2)
	((elpakit
	  (0 0 18)))
	"interactive server eval at mode, a comint for a daemonized emacs" single])
 (irfc .
       [(0 5 6)
	nil "Interface for IETF RFC document." single])
 (ir-black-theme .
		 [(1 0)
		  nil "Port of ir-black theme" single])
 (ipython .
	  [(2927)
	   nil "Adds support for IPython to python-mode.el" single])
 (ioccur .
	 [(0 2)
	  nil "Incremental occur." single])
 (inline-crypt .
	       [(0 1 4)
		nil "Simple inline encryption via openssl" tar])
 (inform-mode .
	      [(1 6 1)
	       nil "Major mode for Inform 6 interactive fiction code" single])
 (inflections .
	      [(1 1)
	       nil "convert english words between singular and plural" single])
 (inf-ruby .
	   [(2 2 5)
	    nil "Run a ruby process in a buffer" single])
 (inf-groovy .
	     [(2 0)
	      nil "minor-mode that adds some Grails project management to a grails project" single])
 (indent-guide .
	       [(1 0 1)
		nil "show vertical lines to guide indentation" single])
 (imgur .
	[(0 1)
	 ((anything
	   (1 287)))
	 "imgur client for Emacs" single])
 (igrep .
	[(2 113)
	 nil "An improved interface to `grep` and `find`" single])
 (ignoramus .
	    [(0 6 4)
	     nil "Ignore backups, build files, et al." single])
 (iedit .
	[(0 97)
	 nil "Edit multiple regions in the same way simultaneously." tar])
 (idomenu .
	  [(0 1)
	   nil "imenu tag selection with ido" single])
 (ido-yes-or-no .
		[(1 1)
		 ((ido
		   (0)))
		 "Use Ido to answer yes-or-no questions" single])
 (ido-ubiquitous .
		 [(1 6)
		  nil "Use ido (nearly) everywhere." single])
 (ido-load-library .
		   [(0 1 2)
		    ((persistent-soft
		      (0 8 6))
		     (pcache
		      (0 2 3)))
		    "Load-library alternative using ido-completing-read" single])
 (ido-better-flex .
		  [(0 2)
		   nil "A better flex (fuzzy) algorithm for Ido." single])
 (idle-require .
	       [(1 0)
		nil "load elisp libraries while Emacs is idle" single])
 (idle-highlight-mode .
		      [(1 1 2)
		       nil "highlight the word the point is on" single])
 (idle-highlight .
		 [(1 0)
		  nil "highlight the word the point is on" single])
 (ibuffer-vc .
	     [(0 6)
	      ((cl-lib
		(0 2)))
	      "Group ibuffer's list by VC project, or show VC status" single])
 (huskie .
	 [(0 0 2)
	  ((anaphora
	    (0 0 6)))
	  "chainsaw powered logging" single])
 (hungry-delete .
		[(1 0)
		 nil "hungry delete minor mode" single])
 (httpd .
	[(1 0 1)
	 nil "HTTP/1.0 web server for emacs" single])
 (httpcode .
	   [(0 1)
	    nil "explains the meaning of an HTTP status code" single])
 (http-twiddle .
	       [(1 0)
		nil "send & twiddle & resend HTTP requests" single])
 (htmlize .
	  [(1 39)
	   nil "Convert buffer text and decorations to HTML." single])
 (htmlfontify .
	      [(0 21)
	       nil "htmlise a buffer/source tree with optional hyperlinks" single])
 (html-script-src .
		  [(0 0 2)
		   nil "Insert <script src=\"..\"> for popular JavaScript libraries" single])
 (ht .
     [(0 8)
      nil "The missing hash table library for Emacs" single])
 (hlinum .
	 [(1 0)
	  nil "Extension for linum.el to highlight current line number" single])
 (hl-sexp .
	  [(1 0 0)
	   nil "highlight the current sexp" single])
 (hl-sentence .
	      [(2)
	       nil "highlight a sentence based on customizable face" single])
 (hjkl-mode .
	    [(0 1)
	     ((key-chord
	       (0 5)))
	     "import some vim's key bindings" tar])
 (hive .
       [(0 1 1)
	((sql
	  (3 0)))
	"Hive SQL mode extension" single])
 (hippie-namespace .
		   [(0 5 6)
		    nil "Special treatment for namespace prefixes in hippie-expand" single])
 (hippie-expand-slime .
		      [(0 1)
		       nil "Hook slime's completion into hippie-expand" single])
 (hippie-expand-haskell .
			[(0 0 1)
			 nil "Hippie expand try function using ghc's completion function." single])
 (highline .
	   [(7 2 2)
	    nil "minor mode to highlight current line in buffer" single])
 (highlight-symbol .
		   [(1 1)
		    nil "automatic and manual symbol highlighting" single])
 (highlight-parentheses .
			[(1 0 1)
			 nil "highlight surrounding parentheses" single])
 (highlight-indentation .
			[(0 5 0)
			 nil "Function for highlighting indentation" single])
 (highlight-escape-sequences .
			     [(0 1)
			      nil "Highlight escape sequences" single])
 (highlight .
	    [(21 0)
	     nil "Highlighting commands." single])
 (hideshowvis .
	      [(0 3)
	       nil "Add markers to the fringe for regions foldable by hideshow.el" single])
 (hide-comnt .
	     [(40)
	      nil "Hide/show comments in code." tar])
 (hexrgb .
	 [(21 0)
	  nil "Functions to manipulate colors, including RGB hex strings." single])
 (heroku .
	 [(1 1 0)
	  nil "Interface to Heroku apps." single])
 (helm-projectile .
		  [(0 9 1)
		   ((helm
		     (1 4 0))
		    (projectile
		     (0 9 1)))
		   "Helm integration for Projectile" single])
 (helm-gtags .
	     [(0 9 2)
	      ((helm
		(1 0)))
	      "GNU GLOBAL helm interface" single])
 (helm-ag .
	  [(0 4)
	   ((helm
	     (1 0)))
	   "the silver search with helm interface" single])
 (header2 .
	  [(21 0)
	   nil "Support for creation and update of file headers." single])
 (haxe-mode .
	    [(0 3 1)
	     nil "An Emacs major mode for haXe" single])
 (haste .
	[(1)
	 ((json
	   (1 2)))
	 "Emacs client for hastebin (http://hastebin.com/about.md)" single])
 (haskell-mode .
	       [(13 6)
		nil "A Haskell editing mode" tar])
 (hardhat .
	  [(0 3 6)
	   ((ignoramus
	     (0 6 2)))
	   "Protect against clobbering user-writable files" single])
 (hardcore-mode .
		[(1 0 0)
		 nil "Disable arrow keys + optionally backspace and return" single])
 (handlebars-sgml-mode .
		       [(0 1 0)
			nil "Add Handlebars contextual indenting support to sgml-mode" single])
 (handlebars-mode .
		  [(1 3)
		   nil "A major mode for editing Handlebars files." single])
 (haml-mode .
	    [(3 1 0)
	     ((ruby-mode
	       (1 0)))
	     "Major mode for editing Haml files" single])
 (hackernews .
	     [(0 1)
	      ((json
		(1 2)))
	      "Access the hackernews aggregator from Emacs" tar])
 (guru-mode .
	    [(0 1)
	     nil "Become an Emacs guru" single])
 (guile-scheme .
	       [(0 1)
		nil "Guile Scheme editing mode" single])
 (guess-offset .
	       [(0 1 1)
		nil "Automatically determine c-basic-offset" single])
 (gtags .
	[(3 3)
	 nil "gtags facility for Emacs" single])
 (gruber-darker-theme .
		      [(0 4)
		       nil "Gruber Darker color theme for Emacs 24." single])
 (grr .
      [(1 0 0)
       nil "Simple Growl notifications for Emacs and Mac OS X" single])
 (groovy-mode .
	      [(201203310931)
	       nil "Groovy mode derived mode" single])
 (grin .
       [(1 0)
	nil "run grin and grind (python replacements for grep and find) putting hits in a grep buffer" single])
 (grep-o-matic .
	       [(1 0 4)
		nil "auto grep word under cursor" single])
 (grep-a-lot .
	     [(1 0 6)
	      nil "manages multiple search results buffers for grep.el" single])
 (grapnel .
	  [(0 5 1)
	   nil "HTTP request lib with flexible callback dispatch" single])
 (graphviz-dot-mode .
		    [(0 3 7)
		     nil "Mode for the dot-language used by graphviz (att)." single])
 (gplusify .
	   [(1 0)
	    nil "Add Google Plus markup to a piece of code" single])
 (goto-last-change .
		   [(1 2)
		    nil "Move point through buffer-undo-list positions" single])
 (gopher .
	 [(0 0 2)
	  nil "easily access and navigate Gopher servers" single])
 (google-translate .
		   [(0 4)
		    nil "Emacs interface to Google Translate" single])
 (go-play .
	  [(0 0 1)
	   nil "Paste to play.golang.org" single])
 (go-mode .
	  [(12869)
	   nil "Major mode for the Go programming language." tar])
 (gnusnotes .
	    [(0 91)
	     nil "Adding per-message notes in gnus summary buffer" single])
 (gnuplot .
	  [(0 6 0)
	   nil "drive gnuplot from within emacs" single])
 (gnugo .
	[(2 2 12)
	 nil "Play a game of Go against gnugo" single])
 (gnomenm .
	  [(0 0 3)
	   nil "Emacs interface to Gnome nmcli command" single])
 (gitty .
	[(1 0)
	 nil "vc-mode extension for fast git interaction" single])
 (gitignore-mode .
		 [(0 1)
		  nil "Major mode for editing .gitconfig files" single])
 (github-theme .
	       [(0 0 3)
		nil "Github color theme for GNU Emacs 24" single])
 (github-browse-file .
		     [(0 2 1)
		      nil "View the file you're editing on GitHub" single])
 (gitconfig-mode .
		 [(0 3)
		  nil "Major mode for editing .gitconfig files" single])
 (git-gutter-fringe .
		    [(0 12)
		     ((git-gutter
		       (0 42))
		      (fringe-helper
		       (0 1 1)))
		     "Fringe version of git-gutter.el" single])
 (git-gutter .
	     [(0 42)
	      nil "Port of Sublime Text plugin GitGutter" single])
 (git-commit-mode .
		  [(0 12)
		   nil "Major mode for editing git commit messages" single])
 (git-commit .
	     [(0 1)
	      nil "Major mode for editing git commit messages" single])
 (git-auto-commit-mode .
		       [(4 2 1)
			nil "Emacs Minor mode to automatically commit and push" single])
 (gist .
       [(1 1 1)
	((eieio
	  (1 3))
	 (gh
	  (0 7 2))
	 (tabulated-list
	  (0)))
	"Emacs integration for gist.github.com" single])
 (gimme .
	[(2 1)
	 nil "The XMMS2 interface we all love! Check out http://gimmeplayer.org for more info." tar])
 (ghci-completion .
		  [(0 1 3)
		   nil "Completion for GHCi commands in inferior-haskell buffers" single])
 (ghc .
      [(1 10 2)
       ((haskell-mode
	 (2 8 0)))
       "Happy Haskell programming on Emacs" tar])
 (gh .
     [(0 7 2)
      ((eieio
	(1 3))
       (pcache
	(0 2 3))
       (logito
	(0 1)))
      "A GitHub library for Emacs" tar])
 (generate-autoloads .
		     [(0 0 10)
		      nil "A package to help you lazy-load everything" single])
 (geiser .
	 [(0 4)
	  nil "GNU Emacs and Scheme talk to each other" tar])
 (geben .
	[(0 26)
	 nil "A remote debugging environment for Emacs." tar])
 (gccsense .
	   [(0 2)
	    nil "GCCSense client for Emacs" single])
 (gather .
	 [(1 0 4)
	  nil "Gather string in buffer." single])
 (fuzzy-match .
	      [(1 4)
	       nil "fuzzy matching" single])
 (fuzzy-format .
	       [(0 1 1)
		nil "select indent-tabs-mode and format code automatically." single])
 (fuzzy .
	[(0 1)
	 nil "Fuzzy Matching" single])
 (furl .
       [(0 0 2)
	nil "Friendly URL retrieval" single])
 (fullscreen-mode .
		  [(0 0 1)
		   nil "fullscreen window support for Emacs" single])
 (full-ack .
	   [(0 2 3)
	    nil "a front-end for ack" single])
 (fsvn .
       [(0 9 13)
	nil "Another frontend of subversion." tar])
 (framesize .
	    [(0 0 1)
	     ((key-chord
	       (0 5 20080915)))
	     "change the size of frames in Emacs" single])
 (frame-tag .
	    [(0 1 0)
	     nil "Minor mode that assigns a unique number to each frame for easy switching" single])
 (foo .
      [(3 0 20)
       ((haml-mode
	 (3 0 20)))
       "Sass major mode" single])
 (font-utils .
	     [(0 6 8)
	      ((persistent-soft
		(0 8 6))
	       (pcache
		(0 2 3)))
	      "Utility functions for working with fonts" single])
 (fold-this .
	    [(0 1 0)
	     nil "Just fold this region please" single])
 (fold-dwim-org .
		[(0 2)
		 ((fold-dwim
		   (1 2)))
		 "Fold DWIM bound to org key-strokes." single])
 (fold-dwim .
	    [(1 2)
	     nil "Unified user interface for Emacs folding modes" single])
 (fm .
     [(20130612 1)
      nil "follow mode for compilation/output buffers" single])
 (flyspell-lazy .
		[(0 6 4)
		 nil "Improve flyspell responsiveness using idle timers" single])
 (flyphpcs .
	   [(1 0 1)
	    nil "Flymake for PHP via PHP-CodeSniffer" single])
 (flymake-shell .
		[(0 8)
		 ((flymake-easy
		   (0 1)))
		 "A flymake syntax-checker for shell scripts" single])
 (flymake-sass .
	       [(0 6)
		((flymake-easy
		  (0 1)))
		"Flymake handler for sass files" single])
 (flymake-ruby .
	       [(0 8)
		((flymake-easy
		  (0 1)))
		"A flymake handler for ruby-mode files" single])
 (flymake-python-pyflakes .
			  [(0 8)
			   ((flymake-easy
			     (0 8)))
			   "A flymake handler for python-mode files using pyflakes (or flake8)" single])
 (flymake-phpcs .
		[(1 0 5)
		 ((flymake
		   (0 3)))
		 "Flymake handler for PHP to invoke PHP-CodeSniffer" tar])
 (flymake-php .
	      [(0 5)
	       ((flymake-easy
		 (0 1)))
	       "A flymake handler for php-mode files" single])
 (flymake-perlcritic .
		     [(1 0 3)
		      ((flymake
			(0 3)))
		      "Flymake handler for Perl to invoke Perl::Critic" tar])
 (flymake-lua .
	      [(1)
	       nil "Flymake for Lua" single])
 (flymake-less .
	       [(0 2)
		((less-css-mode
		  (0 15)))
		"Flymake handler for LESS stylesheets (lesscss.org)" single])
 (flymake-json .
	       [(0 1)
		((flymake-easy
		  (0 1)))
		"A flymake handler for json using jsonlint" single])
 (flymake-jslint .
		 [(0 10)
		  ((flymake-easy
		    (0 1)))
		  "A flymake handler for javascript using jslint" single])
 (flymake-jshint .
		 [(1 0)
		  nil "making flymake work with JSHint" single])
 (flymake-hlint .
		[(0 2)
		 ((flymake-easy
		   (0 1)))
		 "A flymake handler for haskell-mode files using hlint" single])
 (flymake-haskell-multi .
			[(0 3)
			 ((flymake-easy
			   (0 1)))
			 "Syntax-check haskell-mode using both ghc and hlint" single])
 (flymake-haml .
	       [(0 7)
		((flymake-easy
		  (0 1)))
		"A flymake handler for haml files" single])
 (flymake-go .
	     [(2013 3 14)
	      ((flymake
		(0 4 13)))
	      "A flymake handler for go-mode files" single])
 (flymake-for-jslint-for-wsh .
			     [(1 3 0)
			      ((flymake
				(0 3)))
			      "use flymake with js code, on Windows" single])
 (flymake-elixir .
		 [(0 4)
		  nil "A flymake handler for elixir-mode .ex files." single])
 (flymake-easy .
	       [(0 9)
		nil "Helpers for easily building flymake checkers" single])
 (flymake-d .
	    [(0 1)
	     nil "A flymake handler for d-mode files" single])
 (flymake-cursor .
		 [(1 0 2)
		  ((flymake
		    (0 3)))
		  "Show flymake messages in the minibuffer after delay" tar])
 (flymake-csslint .
		  [(1 1 0)
		   ((flymake
		     (0 3)))
		   "making flymake work with CSSLint" tar])
 (flymake-css .
	      [(0 3)
	       ((flymake-easy
		 (0 1)))
	       "Flymake support for css using csslint" single])
 (flymake-coffee .
		 [(0 10)
		  ((flymake-easy
		    (0 1)))
		  "A flymake handler for coffee script" single])
 (flymake-checkers .
		   [(0 3)
		    nil "Flymake reloaded with useful checkers" single])
 (flymake .
	  [(0 4 16)
	   nil "a universal on-the-fly syntax checker" single])
 (flycheck-color-mode-line .
			   [(0 2)
			    ((flycheck
			      (0 13))
			     (dash
			      (1 2))
			     (emacs
			      (24 1)))
			    "Change mode line color with Flycheck status" single])
 (flycheck .
	   [(0 12)
	    ((s
	      (1 3 1))
	     (dash
	      (1 2))
	     (cl-lib
	      (0 1))
	     (emacs
	      (24 1)))
	    "On-the-fly syntax checking (Flymake done right)" tar])
 (flex-autopair .
		[(0 1)
		 nil "Automatically insert pair braces and quotes, insertion condition & action are highly customizable." single])
 (fixmee .
	 [(0 8 2)
	  ((button-lock
	    (0 9 8))
	   (nav-flash
	    (1 0 0))
	   (back-button
	    (0 6 0))
	   (smartrep
	    (0 0 3))
	   (string-utils
	    (0 0 6))
	   (tabulated-list
	    (0)))
	  "Quickly navigate to FIXME notices in code" single])
 (fiplr .
	[(0 1 3)
	 nil "Fuzzy finder for files in a project." single])
 (findr .
	[(0 7)
	 nil "Breadth-first file-finding facility for (X)Emacs" single])
 (find-things-fast .
		   [(20111123)
		    nil "An emacs mode to find things fast and move around in a project quickly" tar])
 (find-file-in-repository .
			  [(1 3)
			   nil "Quickly find files in a git, mercurial or other repository" single])
 (find-file-in-project .
		       [(3 2)
			nil "Find files in a project quickly." single])
 (find-file-in-git-repo .
			[(0 1 2)
			 nil "Utility to find files in a git repo" single])
 (fill-column-indicator .
			[(1 83)
			 nil "Graphically indicate the fill column" single])
 (fic-ext-mode .
	       [(0 1)
		nil "Show FIXME/TODO/BUG(...) in special face only in comments and strings" single])
 (fetchmacs .
	    [(1 0 1)
	     nil "A major mode for the Fetchnotes note taking service" single])
 (feature-mode .
	       [(0 4)
		nil "Major mode for editing Gherkin (i.e. Cucumber) user stories" tar])
 (fastnav .
	  [(1 0 7)
	   nil "Fast navigation and editing routines." single])
 (fancy-mode .
	     [(0 1)
	      nil "Major mode for programming with the Fancy language." single])
 (fakir .
	[(0 1 6)
	 ((noflet
	      (0 0 3))
	  (dash
	   (1 3 2)))
	 "fakeing bits of Emacs" single])
 (extend-dnd .
	     [(0 5)
	      nil "R drag and Drop" single])
 (express .
	  [(0 5 12)
	   ((string-utils
	     (0 0 2)))
	   "Alternatives to `message'" single])
 (expectations-mode .
		    [(0 0 4)
		     ((nrepl
		       (0 1 5))
		      (clojure-mode
		       (1 11)))
		     "Minor mode for expectations tests" single])
 (expand-region .
		[(0 8 0)
		 nil "Increase selected region by semantic units." tar])
 (exec-path-from-shell .
		       [(1 5)
			nil "Make Emacs use the $PATH set up by the user's shell" single])
 (evil-paredit .
	       [(0 0 1)
		((evil
		  (0 0 0))
		 (paredit
		  (1)))
		"Paredit support for evil keybindings" single])
 (evil-numbers .
	       [(0 3)
		nil "increment/decrement numbers like in vim" single])
 (evil-nerd-commenter .
		      [(0 0 5)
		       nil "Comment/uncomment lines efficiently. Like Nerd Commenter in Vim" tar])
 (evil-leader .
	      [(0 3 3)
	       ((evil
		 (0)))
	       "let there be <leader>" single])
 (evil .
       [(1 0 5)
	((undo-tree
	  (0 5 1)))
	"Extensible Vi layer for Emacs." tar])
 (eviews .
	 [(0 1)
	  nil "Major-mode for editing eviews program files" single])
 (everything .
	     [(0 1 5)
	      nil "Bridge to MS Windows desktop-search engine Everything" single])
 (evernote-mode .
		[(0 41)
		 nil "Evernote client for Emacs" single])
 (etags-table .
	      [(1 1)
	       nil "Set tags table(s) based on current file" single])
 (etags-select .
	       [(1 13)
		nil "Select from multiple tags" single])
 (esxml .
	[(0 3 0)
	 ((db
	   (0 0 1)))
	 "Handle HTML with lists." tar])
 (esup .
       [(0 3)
	nil "the Emacs StartUp Profiler (ESUP)" single])
 (ess-smart-underscore .
		       [(0 79)
			nil "Ess Smart Underscore" single])
 (ess-R-object-popup .
		     [(0 0 4)
		      nil "popup description of R object" single])
 (ess .
      [(5 14)
       nil "Edit and interact with statistical programs like R, S-Plus, SAS, Stata and JAGS" tar])
 (esk .
      [(0 1)
       nil "Emacs Search Kit - An easy way to find files and/or strings in a project" tar])
 (eshell-manual .
		[(1348477812)
		 nil "An updated manual for Eshell." tar])
 (ert-x .
	[(0)
	 ((ert
	   (0)))
	 "Staging area for experimental extensions to ERT" single])
 (ert .
      [(0)
       nil "Emacs Lisp Regression Testing" single])
 (erlang .
	 [(2 4 1)
	  nil "Major modes for editing and running Erlang" single])
 (erefactor .
	    [(0 6 10)
	     nil "Emacs-Lisp refactoring utilities" single])
 (eredis .
	 [(0 5 0)
	  nil "eredis, a Redis client in emacs lisp" single])
 (ercn .
       [(1 0 2)
	nil "Flexible ERC notifications" single])
 (erc-nick-notify .
		  [(0 2 1)
		   nil "Notify popup for ERC" single])
 (erc-hl-nicks .
	       [(1 3 1)
		nil "ERC nick highlighter that ignores uniquifying chars when colorizing" single])
 (epc .
      [(0 1 1)
       ((concurrent
	 (0 3 1))
	(ctable
	 (0 1 1)))
       "A RPC stack for the Emacs Lisp" single])
 (enclose .
	  [(0 0 2)
	   nil "Enclose cursor within punctuation pairs" single])
 (emstar .
	 [(1 4)
	  nil "Casual game, like a brainy Pac-Man" tar])
 (emms-mark-ext .
		[(0 3)
		 ((emms
		   (3 0)))
		 "Extra functions for emms-mark-mode and emms-tag-edit-mode" single])
 (emamux .
	 [(0 1)
	  nil "Interact with tmux" single])
 (emacsd-tile .
	      [(0 1)
	       nil "tiling windows for emacs" single])
 (emacs-droid .
	      [(0 0 0)
	       nil "Android application development tools for Emacs" single])
 (elscreen .
	   [(1 4 6)
	    nil "Screen for Emacsen" single])
 (elpy .
       [(1 0)
	((auto-complete
	  (1 4))
	 (fuzzy
	  (0 1))
	 (yasnippet
	  (0 8))
	 (virtualenv
	  (1 2))
	 (highlight-indentation
	  (0 5 0))
	 (find-file-in-project
	  (3 2))
	 (idomenu
	  (0 1))
	 (nose
	  (0 1 1))
	 (iedit
	  (0 97)))
	"Emacs Lisp Python Environment" tar])
 (elpakit .
	  [(1 0 7)
	   ((anaphora
	     (0 0 6))
	    (dash
	     (1 0 3)))
	   "package archive builder" single])
 (elpa-audit .
	     [(0 4)
	      nil "Handy functions for inspecting and comparing package archives" single])
 (elnode .
	 [(0 9 9 7 3)
	  ((web
	    (0 1 4))
	   (dash
	    (1 1 0))
	   (s
	    (1 5 0))
	   (creole
	    (0 8 14))
	   (fakir
	    (0 1 6))
	   (db
	    (0 0 5))
	   (kv
	    (0 0 17)))
	  "The Emacs webserver." tar])
 (elixir-mode .
	      [(1 0 0)
	       nil "Major mode for editing Elixir files" single])
 (elixir-mix .
	     [(0 0 2)
	      nil "Emacs integration for Elixir's elixir-mix" single])
 (elisp-slime-nav .
		  [(0 6)
		   ((cl-lib
		     (0 2)))
		   "Make M-. and M-, work in elisp like they do in slime" single])
 (elisp-depend .
	       [(1 0 2)
		nil "Parse depend libraries of elisp file." single])
 (elisp-cache .
	      [(1 15)
	       nil "Faster emacs startup through byte-compiling." single])
 (elein .
	[(0 2 2)
	 nil "running leiningen commands from emacs" single])
 (electric-case .
		[(2 2 1)
		 nil "insert camelCase, snake_case words without \"Shift\"ing" single])
 (el-x .
       [(0 2 2)
	((cl-lib
	  (0 2)))
	"Emacs-lisp extensions." tar])
 (el-swank-fuzzy .
		 [(0 1)
		  nil "fuzzy symbol completion." single])
 (el-spec .
	  [(0 2)
	   nil "ruby's rspec like syntax test frame work" single])
 (el-autoyas .
	     [(0 20)
	      nil "Automatically create Emacs-Lisp Yasnippets" single])
 (eimp .
       [(1 4 0)
	nil "Emacs Image Manipulation Package" single])
 (eieio .
	[(1 4)
	 nil "Enhanced Implementation of Emacs Interpreted Objects" single])
 (eh-keybindings .
		 [(0 0 1)
		  ((eh-functions
		    (0 0 1))
		   (starter-kit-bindings
		    (2 0 2)))
		  "tuamshu's emacs keybindings" tar])
 (eh-gnus .
	  [(0 0 6)
	   nil "tuamshu's gnus configure" tar])
 (eh-functions .
	       [(0 0 1)
		((starter-kit
		  (2 0 2)))
		"tuamshu's emacs functions" tar])
 (eh-common .
	    [(0 0 1)
	     nil "Tumashu's  emacs functions" single])
 (eh-basic .
	   [(0 0 2)
	    ((starter-kit
	      (2 0 2))
	     (browse-kill-ring
	      (1 3 1)))
	    "tuamshu's emacs basic configure" tar])
 (egison-mode .
	      [(0 1 4)
	       nil "Egison editing mode" single])
 (editorconfig .
	       [(0 2)
		nil "EditorConfig Emacs extension" single])
 (edit-list .
	    [(0 4)
	     nil "edit a single list" single])
 (edebug-x .
	   [(1 2)
	    ((dash
	      (1 1 0)))
	    "Extensions for Edebug" single])
 (edbi .
       [(0 1 1)
	((concurrent
	  (0 3 1))
	 (ctable
	  (0 1 1))
	 (epc
	  (0 1 1)))
	"Emacs Database Interface" tar])
 (ecb-snapshot .
	       [(20120830)
		nil "Emacs Code Browser CVS snapshot" tar])
 (ecb .
      [(2 40)
       nil "Emacs Code Browser" tar])
 (dynamic-fonts .
		[(0 6 2)
		 ((font-utils
		   (0 6 8))
		  (persistent-soft
		   (0 8 6))
		  (pcache
		   (0 2 3)))
		 "Set faces based on available fonts" single])
 (durendal .
	   [(0 2)
	    ((clojure-mode
	      (1 7))
	     (slime
	      (20100404))
	     (paredit
	      (22)))
	    "A bucket of tricks for Clojure and Slime." single])
 (dtrt-indent .
	      [(0 2 0)
	       nil "Adapt to foreign indentation offsets" single])
 (dsvn .
       [(922257)
	nil "Subversion interface" single])
 (drupal-spell .
	       [(0 2 2)
		nil "Aspell extra dictionary for Drupal" tar])
 (drupal-mode .
	      [(0 2 0)
	       ((php-mode
		 (1 5 0)))
	       "Advanced minor mode for Drupal development" tar])
 (dropdown-list .
		[(1 45)
		 nil "Drop-down menu interface" single])
 (dropbox .
	  [(0 9 1)
	   ((json
	     (1 2))
	    (oauth
	     (1 0 3)))
	   "Emacs backend for dropbox" single])
 (drag-stuff .
	     [(0 0 4)
	      nil "Drag stuff (lines, words, region, etc...) around" single])
 (dpaste .
	 [(0 2)
	  nil "Emacs integration for dpaste.com" single])
 (dotassoc .
	   [(0 0 1)
	    nil "dot access embedded alists" single])
 (dot-mode .
	   [(1 12)
	    nil "minor mode to repeat typing or commands" single])
 (doctags .
	  [(0 1)
	   nil "Generation of tags documentation in Doxygen syntax" single])
 (doc-mode .
	   [(0 2)
	    nil "convenient editing of in-code documentation" single])
 (dna-mode .
	   [(1 44)
	    nil "a major mode for editing dna sequences" single])
 (django-theme .
	       [(1 3 0)
		nil "Custom face theme for Emacs" single])
 (dizzee .
	 [(0 1 1)
	  nil "A more pleasant way to manage your project's subprocesses in Emacs." tar])
 (dix .
      [(0 1 0)
       nil "minor mode for editing Apertium XML dictionary files" single])
 (dispass .
	  [(1 1 2)
	   nil "Emacs wrapper for DisPass" single])
 (dired-single .
	       [(1 7)
		nil "reuse the current dired buffer to visit another directory" single])
 (dired-efap .
	     [(0 8)
	      nil "Edit Filename At Point in a dired buffer" single])
 (dired-dups .
	     [(0 3)
	      nil "Find duplicate files and display them in a dired buffer" single])
 (dired-details .
		[(1 3 1)
		 nil "make file details hide-able in dired" single])
 (dircmp .
	 [(1)
	  nil "Compare and sync directories." single])
 (diminish .
	   [(0 44)
	    nil "Diminished modes are minor modes with no modeline display" single])
 (diff-hl .
	  [(1 4 6)
	   ((cl-lib
	     (0 2)))
	   "Highlight uncommitted changes" single])
 (diatheke .
	   [(1 0)
	    nil "A minor mode using the diatheke command-line Bible tool" single])
 (desktop-registry .
		   [(1 0 0)
		    nil "Keep a central registry of desktop files" single])
 (desktop .
	  [(0 1)
	   nil "save partial status of Emacs when killed" single])
 (descbinds-anything .
		     [(1 5)
		      ((anything
			(1 287)))
		      "Yet Another `describe-bindings' with `anything'." single])
 (deft .
     [(0 3)
      nil "quickly browse, filter, and edit plain text notes" single])
 (deferred .
     [(0 3 1)
      nil "Simple asynchronous functions for emacs lisp" single])
 (defaultcontent .
     [(1 4)
      nil "a templating tool. Fill new files with default content." single])
 (deep-thought-theme .
		     [(0 1 1)
		      nil "Emacs 24 theme with the Answer to The Ultimate Question" single])
 (dedicated .
	    [(1 0 0)
	     nil "A very simple minor mode for dedicated buffers" single])
 (db-pg .
	[(0 0 3)
	 ((pg
	   (0 12))
	  (db
	   (0 0 6)))
	 "A PostgreSQL adapter for emacs-db" single])
 (db .
     [(0 0 6)
      ((kv
	(0 0 11)))
      "A database for EmacsLisp" single])
 (dash .
       [(1 4 0)
	nil "A modern list library for Emacs" single])
 (dart-mode .
	    [(0 9)
	     nil "Major mode for editing Dart files" single])
 (d-mode .
	 [(2 0 4)
	  nil "D Programming Language mode for (X)Emacs" tar])
 (cygwin-mount .
	       [(2001)
		nil "Teach EMACS about cygwin styles and mount points." single])
 (cycbuf .
	 [(0 5 0)
	  nil "Cycle buffers code by Martin Pohlack, inspired by" single])
 (cursor-chg .
	     [(20 1)
	      nil "Change cursor dynamically, depending on the context." single])
 (current-story .
		[(0 1 0)
		 nil "Track and insert current Pivotal Tracker" single])
 (cups .
       [(0 1)
	nil "CUPS features for Emacs" single])
 (ctypes .
	 [(1 2)
	  nil "Enhanced Font lock support for custom defined types." single])
 (ctags-update .
	       [(0 1 2)
		nil "auto update TAGS in parent directory using exuberant-ctags" single])
 (ctags .
	[(1 1 1)
	 nil "Exuberant Ctags utilities for Emacs" single])
 (ctable .
	 [(0 1 1)
	  nil "Table component for Emacs Lisp" single])
 (csv-mode .
	   [(1 50)
	    nil "major mode for editing comma-separated value files" single])
 (csharp-mode .
	      [(0 8 6)
	       nil "C# mode derived mode" single])
 (cryptol-mode .
	       [(0 0 2)
		nil "Cryptol major mode for Emacs" single])
 (crosshairs .
	     [(22 0)
	      nil "Highlight the current line and column." single])
 (crontab-mode .
	       [(1 2)
		nil "Mode for editing crontab files" single])
 (creole-mode .
	      [(0 0 5)
	       nil "a markup mode for creole" single])
 (creole .
	 [(0 9 20130602)
	  ((noflet
	       (0 0 3)))
	  "A parser for the Creole Wiki language" single])
 (cpputils-cmake .
		 [(0 3 0)
		  nil "Easy real time C++ syntax check and intellisense if you use CMake." tar])
 (cppcheck .
	   [(1 0)
	    nil "run cppcheck putting hits in a grep buffer" single])
 (control-lock .
	       [(1 1 2)
		nil "Like caps-lock, but for your control key.  Give your pinky a rest!" single])
 (confluence .
	     [(1 6)
	      ((xml-rpc
		(1 6 7)))
	      "Confluence major mode" tar])
 (config-block .
	       [(0 0 1)
		nil "config-block is utility for individual settings (e.g. .emacs)." single])
 (concurrent .
	     [(0 3 1)
	      ((deferred
		   (0 3 1)))
	      "Concurrent utility functions for emacs lisp" single])
 (company-cmake .
		[(0 1)
		 ((company
		   (0 6 8)))
		 "company-mode completion back-end for CMake" single])
 (command-stats .
		[(0 1)
		 nil "Track frequency of commands executed in emacs" single])
 (command-frequency .
		    [(1 1)
		     nil "Track command frequencies" single])
 (combinators .
	      [(0 0 1)
	       nil "" single])
 (colour-region .
		[(0 4)
		 nil "Toggle regions of the buffer with different text snippets" single])
 (color-theme-x .
		[(1 3)
		 nil "convert color themes to X11 resource settings" single])
 (color-theme-wombat .
		     [(0 0 1)
		      ((color-theme
			(6 6 1)))
		      "The wombat color theme for Emacs." single])
 (color-theme-vim-insert-mode .
			      [(0 1)
			       nil "Color theme VIM insert mode" single])
 (color-theme-twilight .
		       [(0 1)
			nil "Twilight Colour Theme for Emacs." single])
 (color-theme-tangotango .
			 [(0 0 2)
			  ((color-theme
			    (6 6 1)))
			  "Tango Palette color theme for Emacs." single])
 (color-theme-tango .
		    [(0 0 2)
		     ((color-theme
		       (6 6 1)))
		     "Tango palette color theme for GNU Emacs." single])
 (color-theme-solarized .
			[(20120301)
			 nil "Solarized themes for Emacs" tar])
 (color-theme-sanityinc-tomorrow .
				 [(1 10)
				  nil "A version of Chris Kempson's various Tomorrow themes" tar])
 (color-theme-sanityinc-solarized .
				  [(2 25)
				   nil "A version of Ethan Schoonover's Solarized themes" tar])
 (color-theme-railscasts .
			 [(0 0 2)
			  ((color-theme
			    (6 6 1)))
			  "Railscasts color theme for GNU Emacs." single])
 (color-theme-monokai .
		      [(0 0 5)
		       ((color-theme
			 (6 5 5)))
		       "Monokai Color Theme for Emacs." single])
 (color-theme-molokai .
		      [(0 1)
		       nil "Molokai color theme by Lloyd" single])
 (color-theme-library .
		      [(0 0 10)
		       ((color-theme
			 (6 6 1)))
		       "The real color theme functions" single])
 (color-theme-ir-black .
		       [(1 0 1)
			((color-theme
			  (6 6 1)))
			"pastel color theme" single])
 (color-theme-heroku .
		     [(1 0 0)
		      nil "Heroku color theme" single])
 (color-theme-gruber-darker .
			    [(1)
			     ((color-theme
			       (6 6 1)))
			     "Gruber Darker color theme for Emacs by Jason Blevins" single])
 (color-theme-github .
		     [(0 0 3)
		      ((color-theme
			(6 6 1)))
		      "Github color theme for GNU Emacs." single])
 (color-theme-emacs-revert-theme .
				 [(0 1)
				  nil "Color-theme revert to emacs colors" single])
 (color-theme-eclipse .
		      [(0 0 2)
		       ((color-theme
			 (6 6 1)))
		       "Eclipse color theme for GNU Emacs." single])
 (color-theme-dpaste .
		     [(0 0 1)
		      ((color-theme
			(6 6 1)))
		      "Dpaste color theme for GNU Emacs." single])
 (color-theme-dg .
		 [(0 1 0)
		  ((color-theme
		    (6 6 0)))
		  "A black and green color theme for Emacs." single])
 (color-theme-dawn-night .
			 [(2 0)
			  nil "color theme of dawn and night" single])
 (color-theme-complexity .
			 [(0 1 1)
			  ((color-theme
			    (6 6 0)))
			  "A black and green color theme for Emacs." single])
 (color-theme-colorful-obsolescence .
				    [(0 0 1)
				     ((color-theme
				       (6 6 1)))
				     "Colorful Obsolescence theme designed for partially transparent windows" single])
 (color-theme-cobalt .
		     [(0 0 2)
		      ((color-theme
			(6 6 1)))
		      "Cobalt Color Theme for Emacs" single])
 (color-theme-buffer-local .
			   [(0 0 2)
			    nil "Install color-themes by buffer." single])
 (color-theme-blackboard .
			 [(0 0 2)
			  ((color-theme
			    (6 6 1)))
			  "Blackboard Colour Theme for Emacs." single])
 (color-theme-actress .
		      [(0 2 2)
		       ((color-theme
			 (6 6 1)))
		       "A dark color theme for GNU Emacs." single])
 (color-theme-active .
		     [(0 0 1)
		      ((color-theme
			(6 6 1)))
		      "Active theme inspired by jEdit theme of the same name" single])
 (color-theme .
	      [(6 6 1)
	       nil "install color themes" single])
 (color-file-completion .
			[(1 0 1)
			 nil "add colors to file completion" single])
 (col-highlight .
		[(22 0)
		 ((vline
		   (1 10)))
		 "Highlight the current column." single])
 (coffee-mode .
	      [(0 3 0)
	       nil "Major mode to edit CoffeeScript files in Emacs" single])
 (cmake-project .
		[(0 6)
		 nil "Integrates CMake build process with Emacs" single])
 (cmake-mode .
	     [(20110824)
	      nil "major-mode for editing CMake sources" single])
 (cm-mode .
	  [(0 1 0)
	   nil "Wrapper for CodeMirror-style Emacs modes" single])
 (closure-template-html-mode .
			     [(0 1)
			      nil "highlighting for google closure templates" single])
 (closure-lint-mode .
		    [(0 1)
		     nil "minor mode for the Closure Linter" single])
 (clojurescript-mode .
		     [(0 5)
		      nil "Major mode for ClojureScript code" single])
 (clojure-test-mode .
		    [(2 1 0)
		     ((clojure-mode
		       (1 7))
		      (nrepl
		       (0 1 7)))
		     "Minor mode for Clojure tests" single])
 (clojure-project-mode .
		       [(1 0)
			((project-mode
			  (1 0)))
			"Extends project-mode for Clojure projects" single])
 (clojure-project .
		  [(1 0)
		   ((project-mode
		     (1 0)))
		   "Extends project-mode for Clojure projects" single])
 (clojure-mode .
	       [(2 1 0)
		nil "Major mode for Clojure code" single])
 (cljsbuild-mode .
		 [(0 2 0)
		  nil "A minor mode for the ClojureScript 'lein cljsbuild' command" single])
 (cljdoc .
	 [(0 1 0)
	  nil "eldoc mode for clojure" single])
 (clj-refactor .
	       [(0 2 0)
		((s
		  (1 3 1))
		 (dash
		  (1 0 3))
		 (yasnippet
		  (0 6 1)))
		"A collection of clojure refactoring functions" single])
 (clj-mode .
	   [(0 9)
	    nil "basic Major mode (clj) for Clojure code" single])
 (clips-mode .
	     [(0 6)
	      nil "Major mode for editing CLIPS code and REPL" tar])
 (clippy .
	 [(1 0)
	  ((pos-tip
	    (1 0)))
	  "Show tooltip with function documentation at point" single])
 (cl-format .
	    [(1 1)
	     nil "CL format routine." tar])
 (citrus-mode .
	      [(0 0 2)
	       nil "Major mode for editing Citrus files" single])
 (circe .
	[(1 2)
	 ((lui
	   (1 2))
	  (lcs
	   (1 1)))
	 "Client for IRC in Emacs" tar])
 (chicken-scheme .
		 [(1 0 6)
		  nil "Scheme-mode extensions for Chicken Scheme" single])
 (charmap .
	  [(0 0 0)
	   nil "Unicode table for Emacs" single])
 (centered-cursor-mode .
		       [(0 5 1)
			nil "cursor stays vertically centered" single])
 (center-text .
	      [(0 8)
	       nil "Center the text in a fixed-width column" single])
 (cedit .
	[(0 0 0)
	 nil "paredit-like commands for c-like languages" single])
 (cdlatex .
	  [(4 0)
	   nil "Fast input methods for LaTeX environments and math" single])
 (caml .
       [(3 12 0 1)
	nil "OCaml code editing commands for Emacs" tar])
 (cacoo .
	[(2 1 2)
	 ((concurrent
	   (0 3 1)))
	 "Minor mode for Cacoo : http://cacoo.com" tar])
 (cache .
	[(0 1)
	 nil "implementation of a hash table whose key-value pairs expire" single])
 (c-eldoc .
	  [(0 5)
	   nil "helpful description of the arguments to C functions" single])
 (button-lock .
	      [(0 81)
	       nil "clickable text defined by regular expression, controlled by font-lock" single])
 (butler .
	 [(0 1 3)
	  ((web
	    (0 3 7)))
	  "Client for Jenkins" single])
 (bug-reference-github .
		       [(0 1 0)
			nil "Automatically set `bug-reference-url-format' in Github repositories." single])
 (bufshow .
	  [(0 1 0)
	   nil "A simple presentation tool for Emacs." tar])
 (buffer-utils .
	       [(0 0 3)
		nil "Buffer-manipulation utility functions" single])
 (buffer-stack .
	       [(1 5)
		nil "Enhanced intelligent switch-to-other-buffer replacement." single])
 (buffer-move .
	      [(0 4)
	       nil "swap buffers between windows" single])
 (bs-ext .
	 [(0 2)
	  nil "Extensions to emacs buffer-selection library (bs.el)" single])
 (browse-url-dwim .
		  [(0 6 4)
		   ((string-utils
		     (0 0 3)))
		   "Context-sensitive external browse URL or Internet search" single])
 (browse-kill-ring .
		   [(1 3 1)
		    nil "interactively insert items from kill-ring" single])
 (boxquote .
	   [(1 23)
	    nil "Quote text with a semi-box." single])
 (bm .
     [(1 53)
      nil "Visible bookmarks in buffer." single])
 (bitly .
	[(1 0)
	 nil "Shorten URLs using the bitly.com shortener service" single])
 (bitlbee .
	  [(1 0)
	   nil "Help get Bitlbee (http://www.bitlbee.org) up and running" single])
 (bigint .
	 [(1 0 0)
	  nil "A simple bigint package for emacs" single])
 (better-defaults .
		  [(0 1 2)
		   nil "Fixing weird quirks and poor defaults" single])
 (bbdb2erc .
	   [(0 1 0)
	    nil "make bbdb show if pal is online with ERC, click i to chat" single])
 (bbdb-ext .
	   [(0 1)
	    ((bbdb
	      (2 36)))
	    "Extra commands for BBDB" single])
 (bbcode-mode .
	      [(1 1 0)
	       nil "Major mode for writing BBCode markup" single])
 (batch-mode .
	     [(1 0)
	      nil "major mode for editing ESRI batch scrips" single])
 (bar-cursor .
	     [(1 1)
	      nil "package used to switch block cursor to a bar" single])
 (bang .
       [(0 1 0)
	nil "A modern list library for Emacs" single])
 (backtrace-mode .
		 [(0 0 10)
		  nil "A better way to browse /var/log/messages files" single])
 (back-button .
	      [(0 6 4)
	       ((nav-flash
		 (1 0 0))
		(smartrep
		 (0 0 3))
		(ucs-utils
		 (0 7 2))
		(persistent-soft
		 (0 8 6))
		(pcache
		 (0 2 3)))
	       "Visual navigation through mark rings" single])
 (babcore .
	  [(0 0 2)
	   nil "Core Emacs configuration. This should be the minimum in every emacs config." single])
 (awk-it .
	 [(0 76)
	  nil "Run AWK interactively on region!" single])
 (autopair .
	   [(0 4)
	    nil "Automagically pair braces and quotes like TextMate" single])
 (auto-indent-mode .
		   [(0 99)
		    nil "Auto indent Minor mode" single])
 (auto-highlight-symbol .
			[(1 55)
			 nil "Automatic highlighting current symbol minor mode" single])
 (auto-complete-verilog .
			[(0 0)
			 nil "Verukig" single])
 (auto-complete-octave .
		       [(0 1)
			nil "Auto-complete for Octave" single])
 (auto-complete-etags .
		      [(0 2)
		       ((auto-complete
			 (1 3)))
		       "Auto-complete etags" single])
 (auto-complete .
		[(1 4)
		 ((popup
		   (0 5)))
		 "Auto Completion for GNU Emacs" tar])
 (ascii .
	[(3 1)
	 nil "ASCII code display." single])
 (apt-utils-ido .
		[(0 2)
		 ((apt-utils
		   (1 212)))
		 "Ido commands for apt-utils" single])
 (apt-utils .
	    [(1 212)
	     nil "Emacs interface to APT (Debian package management)" single])
 (applescript-mode .
		   [(1 1)
		    nil "major mode for editing AppleScript source" single])
 (apache-mode .
	      [(2 0)
	       nil "major mode for editing Apache configuration files" single])
 (anything-show-completion .
			   [(20091119)
			    nil "Show selection in buffer for anything completion" single])
 (anything-obsolete .
		    [(0 1)
		     nil "obsolete functions of anything" single])
 (anything-match-plugin .
			[(1 27)
			 nil "Humane match plug-in for anything" single])
 (anything-ipython .
		   [(0 1 2009)
		    ((ipython
		      (2927))
		     (anything
		      (1 287)))
		    "Ipython anything" single])
 (anything-git-goto .
		    [(0 1 0)
		     nil "Quick listing of:" single])
 (anything-git .
	       [(1 1 1)
		nil "Show git files in anything" single])
 (anything-extension .
		     [(0 2)
		      nil "Extension functions for anything.el" single])
 (anything-el-swank-fuzzy .
			  [(0 1 2009)
			   ((anything
			     (1 287))
			    (anything-complete
			     (1 86)))
			   "anything-sources for el-swank-fuzzy.el" single])
 (anything-config .
		  [(0 4 1)
		   nil "Predefined configurations for `anything.el'" single])
 (anything-complete .
		    [(1 86)
		     ((anything
		       (1 287))
		      (anything-obsolete
		       (0 1)))
		     "completion with anything" single])
 (anything-R .
	     [(0 1 2010)
	      nil "anything-sources and some utilities for GNU R." single])
 (anything .
	   [(1 287)
	    nil "open anything / QuickSilver-like candidate-selection framework" single])
 (angular-snippets .
		   [(0 2 3)
		    ((s
		      (1 4 0))
		     (dash
		      (1 2 0)))
		    "Yasnippets for AngularJS" tar])
 (android-mode .
	       [(0 2 1)
		nil "Minor mode for Android application development" single])
 (anaphora .
	   [(0 1 0)
	    nil "anaphoric macros providing implicit temp variables" single])
 (alpha .
	[(1 0)
	 nil "increase frame transparency" single])
 (alert .
	[(0 5 10)
	 ((string-utils
	   (0 0 2)))
	 "Alternatives to `message'" single])
 (ahg .
      [(0 99)
       nil "Alberto's Emacs interface for Mercurial (Hg)" single])
 (ag .
     [(0 20)
      nil "A front-end for ag ('the silver searcher'), the C ack replacement." single])
 (aes .
      [(0 5)
       nil "Implementation of AES" single])
 (adoc-mode .
	    [(0 6 2)
	     ((markup-faces
	       (1 0 0)))
	     "a major-mode for editing AsciiDoc files in Emacs" single])
 (ack-and-a-half .
		 [(1 1 3)
		  nil "Yet another front-end for ack" single])
 (ace-jump-mode .
		[(2 0 0 0)
		 nil "a quick cursor location minor mode for emacs" single])
 (ac-python .
	    [(20110519)
	     ((auto-complete
	       (1 4)))
	     "Simple Python Completion Source for Auto-Complete" single])
 (ac-nrepl .
	   [(0 18)
	    ((nrepl
	      (0 1))
	     (auto-complete
	      (1 4)))
	    "auto-complete sources for Clojure using nrepl completions" single])
 (ac-R .
       [(0 2)
	nil "Autocompletion routines for R" single])
 (abl-mode .
	   [(0 9 0)
	    nil "Python TDD minor mode" single]))
