'(
  (2048-game [cl-struct-package-desc 2048-game (20150404 2113) "play 2048 in Emacs" nil single "melpa" nil ((:url . "https://bitbucket.org/zck/2048.el")) nil])
  (4clojure [cl-struct-package-desc 4clojure (20131014 1507) "Open and evaluate 4clojure.com questions" ((json (1 2)) (request (0 2 0))) single "melpa" nil ((:keywords "languages" "data")) nil])
  (@ [cl-struct-package-desc @ (20140707 520) "multiple-inheritance prototype-based objects DSL" ((queue (0 1)) (emacs (24))) tar "melpa" nil ((:url . "https://github.com/skeeto/at-el")) nil])
  (abc-mode [cl-struct-package-desc abc-mode (20140225 944) "Major mode for editing abc music files" nil single "melpa" nil ((:keywords "local" "docs")) nil])
  (abl-mode [cl-struct-package-desc abl-mode (20140724 635) "Python TDD minor mode" nil single "melpa" nil ((:url . "http://github.com/afroisalreadyinu/abl-mode")) nil])
  (ac-dabbrev [cl-struct-package-desc ac-dabbrev (20130906 518) "auto-complete.el source for dabbrev" nil single "melpa" nil nil nil])
  (ac-helm [cl-struct-package-desc ac-helm (20140919 917) "Helm interface for auto-complete" ((helm (1 6 3)) (auto-complete (1 4 0)) (popup (0 5 0)) (cl-lib (0 5))) single "melpa" nil ((:keywords "completion" "convenience" "helm")) nil])
  (ac-js2 [cl-struct-package-desc ac-js2 (20140906 442) "Auto-complete source for Js2-mode, with navigation" ((js2-mode (20090723)) (skewer-mode (1 4))) tar "melpa" nil ((:url . "https://github.com/ScottyB/ac-js2")) nil])
  (ac-math [cl-struct-package-desc ac-math (20141116 1327) "Auto-complete sources for input of mathematical symbols and latex tags" ((auto-complete (1 4)) (math-symbol-lists (1 0))) single "melpa" nil ((:url . "https://github.com/vitoshka/ac-math") (:keywords "latex" "auto-complete" "unicode" "symbols")) nil])
  (ac-slime [cl-struct-package-desc ac-slime (20150729 2035) "An auto-complete source using slime completions" ((auto-complete (1 4)) (slime (2 9)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/purcell/ac-slime")) nil])
  (ace-jump-buffer [cl-struct-package-desc ace-jump-buffer (20150214 2234) "fast buffer switching extension to `ace-jump-mode'" ((ace-jump-mode (1 0)) (dash (2 4 0))) single "melpa" nil ((:url . "https://github.com/waymondo/ace-jump-buffer")) nil])
  (ace-jump-mode [cl-struct-package-desc ace-jump-mode (20140616 115) "a quick cursor location minor mode for emacs" nil single "melpa" nil ((:url . "https://github.com/winterTTr/ace-jump-mode/") (:keywords "motion" "location" "cursor")) nil])
  (ack-menu [cl-struct-package-desc ack-menu (20150504 1322) "A menu-based front-end for ack" ((mag-menu (0 1 0))) single "melpa" nil ((:url . "https://github.com/chumpage/ack-menu") (:keywords "tools" "matching" "convenience")) nil])
  (actionscript-mode [cl-struct-package-desc actionscript-mode (20140605 1128) "A simple mode for editing Actionscript 3 files" nil single "melpa" nil ((:keywords "language" "modes")) nil])
  (adoc-mode [cl-struct-package-desc adoc-mode (20150524 909) "a major-mode for editing AsciiDoc files in Emacs" ((markup-faces (1 0 0))) single "melpa" nil ((:url . "https://github.com/sensorflo/adoc-mode/wiki") (:keywords "wp" "asciidoc")) nil])
  (aes [cl-struct-package-desc aes (20150529 237) "Implementation of AES" nil single "melpa" nil ((:url . "https://github.com/Sauermann/emacs-aes") (:keywords "data" "tools")) nil])
  (ag [cl-struct-package-desc ag (20150518 1245) "A front-end for ag ('the silver searcher'), the C ack replacement." ((dash (2 8 0)) (s (1 9 0)) (cl-lib (0 5))) single "melpa" nil nil nil])
  (ahg [cl-struct-package-desc ahg (20150624 705) "Alberto's Emacs interface for Mercurial (Hg)" nil single "melpa" nil ((:url . "https://bitbucket.org/agriggio/ahg")) nil])
  (airplay [cl-struct-package-desc airplay (20130212 426) "Airplay bindings to Emacs" ((request (20130110 2144)) (simple-httpd (1 4 1)) (deferred (0 3 1))) tar "melpa" nil ((:url . "https://github.com/gongo/airplay-el") (:keywords "appletv" "airplay")) nil])
  (alert [cl-struct-package-desc alert (20150402 1246) "Growl-style notification system for Emacs" ((gntp (0 1)) (log4e (0 3 0))) single "melpa" nil ((:url . "https://github.com/jwiegley/alert") (:keywords "notification" "emacs" "message")) nil])
  (align-cljlet [cl-struct-package-desc align-cljlet (20131016 2356) "Space align various Clojure forms" ((clojure-mode (1 11 5))) single "melpa" nil ((:url . "https://github.com/gstamp/align-cljlet")) nil])
  (all-ext [cl-struct-package-desc all-ext (20130824 1206) "Extension of M-x all" ((all (1 0))) single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/all-ext.el") (:keywords "all" "search" "replace" "anything" "helm" "occur")) nil])
  (ample-theme [cl-struct-package-desc ample-theme (20150720 845) "Calm Dark Theme for Emacs" nil tar "melpa" nil ((:url . "https://github.com/jordonbiondo/ample-theme") (:keywords "theme" "dark")) nil])
  (anaphora [cl-struct-package-desc anaphora (20140728 1536) "anaphoric macros providing implicit temp variables" nil single "melpa" nil ((:url . "http://github.com/rolandwalker/anaphora") (:keywords "extensions")) nil])
  (android-mode [cl-struct-package-desc android-mode (20150106 544) "Minor mode for Android application development" nil single "melpa" nil ((:url . "https://github.com/remvee/android-mode") (:keywords "tools" "processes")) nil])
  (angry-police-captain [cl-struct-package-desc angry-police-captain (20120829 552) "Show quote from http://theangrypolicecaptain.com in the minibuffer" nil single "melpa" nil ((:keywords "games" "web" "fun")) nil])
  (angular-snippets [cl-struct-package-desc angular-snippets (20140513 2223) "Yasnippets for AngularJS" ((s (1 4 0)) (dash (1 2 0))) tar "melpa" nil nil nil])
  (annoying-arrows-mode [cl-struct-package-desc annoying-arrows-mode (20130515 1000) "Ring the bell if using arrows too much" nil single "melpa" nil ((:keywords "learning")) nil])
  (ansi [cl-struct-package-desc ansi (20150703 126) "Turn string into ansi strings" ((s (1 6 1)) (dash (1 5 0))) single "melpa" nil ((:url . "http://github.com/rejeep/ansi") (:keywords "color" "ansi")) nil])
  (anti-zenburn-theme [cl-struct-package-desc anti-zenburn-theme (20150728 1308) "Low-contrast Zenburn-inverted theme" nil single "melpa" nil ((:url . "https://github.com/m00natic/anti-zenburn-theme")) nil])
  (anything [cl-struct-package-desc anything (20130605 1746) "open anything / QuickSilver-like candidate-selection framework" nil tar "melpa" nil ((:url . "http://repo.or.cz/w/anything-config.git") (:keywords "files" "frames" "help" "matching" "outlines")) nil])
  (anything-git-files [cl-struct-package-desc anything-git-files (20130609 243) "anything for git files" ((anything (1 3 9))) single "melpa" nil ((:keywords "anything" "git")) nil])
  (anything-git-grep [cl-struct-package-desc anything-git-grep (20130608 1940) "anything for git grep" ((anything (1 3 9))) tar "melpa" nil ((:url . "https://github.com/mechairoi/anything-git-grep") (:keywords "anything" "git")) nil])
  (apache-mode [cl-struct-package-desc apache-mode (20140625 1556) "major mode for editing Apache configuration files" nil single "melpa" nil ((:keywords "languages" "faces")) nil])
  (applescript-mode [cl-struct-package-desc applescript-mode (20090320 2332) "major mode for editing AppleScript source" nil single "melpa" nil ((:keywords "languages" "tools")) nil])
  (archive-region [cl-struct-package-desc archive-region (20140201 2345) "Move region to archive file instead of killing" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/archive-region.el") (:keywords "languages")) nil])
  (ascii [cl-struct-package-desc ascii (20130824 1200) "ASCII code display." nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/ViniciusJoseLatorre") (:keywords "data" "ascii")) nil])
  (async [cl-struct-package-desc async (20150724 2211) "Asynchronous processing in Emacs" nil tar "melpa" nil nil nil])
  (auctex-latexmk [cl-struct-package-desc auctex-latexmk (20140904 1918) "Add LatexMk support to AUCTeX" ((auctex (11 87))) single "melpa" nil ((:url . "https://github.com/tom-tan/auctex-latexmk/") (:keywords "tex")) nil])
  (audio-notes-mode [cl-struct-package-desc audio-notes-mode (20140204 1154) "Play audio notes synced from somewhere else." nil single "melpa" nil ((:url . "http://github.com/Bruce-Connor/audio-notes-mode") (:keywords "hypermedia" "convenience")) nil])
  (auto-async-byte-compile [cl-struct-package-desc auto-async-byte-compile (20140212 2212) "No description available." nil single "melpa" nil nil nil])
  (auto-auto-indent [cl-struct-package-desc auto-auto-indent (20131106 1103) "Indents code as you type" ((es-lib (0 1)) (cl-lib (1 0))) single "melpa" nil ((:url . "https://github.com/sabof/auto-auto-indent")) nil])
  (auto-capitalize [cl-struct-package-desc auto-capitalize (20131014 505) "Automatically capitalize (or upcase) words" nil single "melpa" nil ((:keywords "text" "wp" "convenience rcs $id: auto-capitalize.el" "v 2.20 2005/05/25 18:47:22 kevinr exp $")) nil])
  (auto-compile [cl-struct-package-desc auto-compile (20150731 545) "automatically compile Emacs Lisp libraries" ((emacs (24 3)) (dash (2 1)) (packed (0 3 5))) single "melpa" nil ((:url . "https://github.com/tarsius/auto-compile") (:keywords "compile" "convenience" "lisp")) nil])
  (auto-complete [cl-struct-package-desc auto-complete (20150618 1949) "Auto Completion for GNU Emacs" ((popup (0 5 0)) (cl-lib (0 5))) tar "melpa" nil nil nil])
  (auto-complete-clang [cl-struct-package-desc auto-complete-clang (20140409 52) "Auto Completion source for clang for GNU Emacs" ((auto-complete (1 3 1))) single "melpa" nil ((:url . "https://github.com/brianjcj/auto-complete-clang") (:keywords "completion" "convenience")) nil])
  (auto-complete-clang-async [cl-struct-package-desc auto-complete-clang-async (20130526 814) "Auto Completion source for clang for GNU Emacs" nil single "melpa" nil ((:keywords "completion" "convenience")) nil])
  (auto-dictionary [cl-struct-package-desc auto-dictionary (20150410 910) "automatic dictionary switcher for flyspell" nil single "melpa" nil ((:url . "http://nschum.de/src/emacs/auto-dictionary/") (:keywords "wp")) nil])
  (auto-dim-other-buffers [cl-struct-package-desc auto-dim-other-buffers (20140619 902) "Makes non-current buffers less prominent" nil single "melpa" nil ((:url . "https://github.com/mina86/auto-dim-other-buffers.el")) nil])
  (auto-indent-mode [cl-struct-package-desc auto-indent-mode (20140505 655) "Auto indent Minor mode" nil tar "melpa" nil ((:url . "https://github.com/mlf176f2/auto-indent-mode.el/") (:keywords "auto" "indentation")) nil])
  (auto-install [cl-struct-package-desc auto-install (20150419 2) "Auto install elisp file" nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/auto-install.el") (:keywords "auto-install")) nil])
  (auto-save-buffers-enhanced [cl-struct-package-desc auto-save-buffers-enhanced (20130607 1949) "Automatically save buffers in a decent way" nil single "melpa" nil nil nil])
  (auto-shell-command [cl-struct-package-desc auto-shell-command (20150416 1057) "Run the shell command asynchronously that you specified when you save the file." ((deferred (20130312)) (popwin (20130329))) single "melpa" nil ((:keywords "shell" "save" "async" "deferred" "auto")) nil])
  (autopair [cl-struct-package-desc autopair (20140825 427) "Automagically pair braces and quotes like TextMate" ((cl-lib (0 3))) single "melpa" nil ((:url . "http://autopair.googlecode.com") (:keywords "convenience" "emulations")) nil])
  (awk-it [cl-struct-package-desc awk-it (20130917 1848) "Run AWK interactively on region!" nil single "melpa" nil ((:keywords "awk")) nil])
  (back-button [cl-struct-package-desc back-button (20140508 1341) "Visual navigation through mark rings" ((nav-flash (1 0 0)) (smartrep (0 0 3)) (ucs-utils (0 7 2)) (list-utils (0 4 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa" nil ((:url . "http://github.com/rolandwalker/back-button") (:keywords "convenience" "navigation" "interface")) nil])
  (backup-each-save [cl-struct-package-desc backup-each-save (20130704 1432) "backup each savepoint of a file" nil single "melpa" nil nil nil])
  (backup-walker [cl-struct-package-desc backup-walker (20130720 816) "quickly traverse all backups of a file" nil single "melpa" nil ((:url . "https://github.com/lewang/backup-walker") (:keywords "backup")) nil])
  (base16-theme [cl-struct-package-desc base16-theme (20150429 1737) "No description available." nil tar "melpa" nil nil nil])
  (bash-completion [cl-struct-package-desc bash-completion (20150514 728) "BASH completion for the shell buffer" nil tar "melpa" nil nil nil])
  (batch-mode [cl-struct-package-desc batch-mode (20140807 2050) "major mode for editing ESRI batch scrips" nil single "melpa" nil nil nil])
  (bbcode-mode [cl-struct-package-desc bbcode-mode (20141103 1341) "Major mode for writing BBCode markup" nil single "melpa" nil ((:url . "https://github.com/ejmr/bbcode-mode")) nil])
  (bbdb [cl-struct-package-desc bbdb (20150523 1239) "The Insidious Big Brother Database for GNU Emacs" nil tar "melpa" nil nil nil])
  (bbdb-ext [cl-struct-package-desc bbdb-ext (20130513 1152) "Extra commands for BBDB" ((bbdb (2 36))) single "melpa" nil ((:url . "https://github.com/vapniks/bbdb-ext") (:keywords "extensions")) nil])
  (bbdb-vcard [cl-struct-package-desc bbdb-vcard (20150713 1350) "vCard import/export for BBDB" ((bbdb (3 0))) tar "melpa" nil ((:url . "http://github.com/vgeddes/bbdb-vcard") (:keywords "data" "calendar" "mail" "news")) nil])
  (bbdb2erc [cl-struct-package-desc bbdb2erc (20130606 2329) "make bbdb show if pal is online with ERC, click i to chat" ((bbdb (3 0))) single "melpa" nil ((:keywords "irc" "contacts" "chat" "client" "internet")) nil])
  (bdo [cl-struct-package-desc bdo (20140126 101) "Do things to a browser page from Emacs. BETA!" nil tar "melpa" nil ((:keywords "development")) nil])
  (better-defaults [cl-struct-package-desc better-defaults (20150404 223) "Fixing weird quirks and poor defaults" nil single "melpa" nil ((:url . "https://github.com/technomancy/better-defaults") (:keywords "convenience")) nil])
  (bf-mode [cl-struct-package-desc bf-mode (20130403 742) "Browse file persistently on dired" nil single "melpa" nil ((:url . "https://github.com/emacs-jp/bf-mode") (:keywords "convenience")) nil])
  (bibretrieve [cl-struct-package-desc bibretrieve (20131013 1132) "Retrieving BibTeX entries from the web" ((auctex (11 87)) (emacs (24 3))) tar "melpa" nil ((:keywords "bibtex" "latex" "mathscinet" "arxiv" "zbmath")) nil])
  (bind-key [cl-struct-package-desc bind-key (20150321 213) "A simple way to manage personal keybindings" nil single "melpa" nil ((:url . "https://github.com/jwiegley/use-package") (:keywords "keys" "keybinding" "config" "dotemacs")) nil])
  (birds-of-paradise-plus-theme [cl-struct-package-desc birds-of-paradise-plus-theme (20130419 1429) "A brown/orange light-on-dark theme for Emacs 24 (deftheme)." nil single "melpa" nil ((:url . "https://github.com/jimeh/birds-of-paradise-plus-theme.el") (:keywords "themes")) nil])
  (bitlbee [cl-struct-package-desc bitlbee (20130328 1018) "Help get Bitlbee (http://www.bitlbee.org) up and running." nil single "melpa" nil nil nil])
  (bitly [cl-struct-package-desc bitly (20130503 149) "Shorten URLs using the bitly.com shortener service" nil single "melpa" nil ((:url . "https://github.com/jorgenschaefer/bitly-el")) nil])
  (blank-mode [cl-struct-package-desc blank-mode (20130824 1159) "minor mode to visualize TAB, (HARD) SPACE, NEWLINE" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/ViniciusJoseLatorre") (:keywords "data" "wp")) nil])
  (bm [cl-struct-package-desc bm (20141212 1535) "Visible bookmarks in buffer." nil single "melpa" nil ((:url . "https://github.com/joodland/bm") (:keywords "bookmark" "highlight" "faces" "persistent")) nil])
  (bookmark+ [cl-struct-package-desc bookmark+ (20150626 2156) "Bookmark+: extensions to standard library `bookmark.el'." nil tar "melpa" nil ((:url . "http://www.emacswiki.org/bookmark+.el") (:keywords "bookmarks" "bookmark+" "projects" "placeholders" "annotations" "search" "info" "url" "w3m" "gnus")) nil])
  (boxquote [cl-struct-package-desc boxquote (20081011 1326) "Quote text with a semi-box." nil single "melpa" nil nil nil])
  (browse-kill-ring [cl-struct-package-desc browse-kill-ring (20150606 1040) "interactively insert items from kill-ring" nil single "melpa" nil ((:url . "https://github.com/browse-kill-ring/browse-kill-ring") (:keywords "convenience")) nil])
  (browse-url-dwim [cl-struct-package-desc browse-url-dwim (20140731 1222) "Context-sensitive external browse URL or Internet search" ((string-utils (0 3 2))) single "melpa" nil ((:url . "http://github.com/rolandwalker/browse-url-dwim") (:keywords "hypermedia")) nil])
  (bs-ext [cl-struct-package-desc bs-ext (20130824 1159) "Extensions to emacs buffer-selection library (bs.el)" nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/bs-ext.el") (:keywords "convenience" "files")) nil])
  (buffer-move [cl-struct-package-desc buffer-move (20150523 513) "" nil single "melpa" nil ((:url . "https://github.com/lukhas/buffer-move") (:keywords "lisp" "convenience")) nil])
  (buffer-stack [cl-struct-package-desc buffer-stack (20101223 1020) "Enhanced intelligent switch-to-other-buffer replacement." nil single "melpa" nil ((:url . "http://www.sixfingeredman.net/proj/xemacs") (:keywords "buffer" "buffers" "switching buffers")) nil])
  (buffer-utils [cl-struct-package-desc buffer-utils (20140512 700) "Buffer-manipulation utility functions" nil single "melpa" nil ((:url . "http://github.com/rolandwalker/buffer-utils") (:keywords "extensions")) nil])
  (bufshow [cl-struct-package-desc bufshow (20130711 1039) "A simple presentation tool for Emacs." ((emacs (24 1))) single "melpa" nil ((:url . "https://github.com/pjones/bufshow")) nil])
  (bug-reference-github [cl-struct-package-desc bug-reference-github (20131202 1303) "Automatically set `bug-reference-url-format' in Github repositories." nil tar "melpa" nil ((:url . "https://github.com/arnested/bug-reference-github") (:keywords "programming" "tools")) nil])
  (bundler [cl-struct-package-desc bundler (20150527 646) "No description available." nil single "melpa" nil nil nil])
  (buster-mode [cl-struct-package-desc buster-mode (20140928 513) "Minor mode to speed up development when writing tests with Buster.js" nil single "melpa" nil ((:keywords "buster" "testing" "javascript")) nil])
  (buster-snippets [cl-struct-package-desc buster-snippets (20141208 238) "Yasnippets for the Buster javascript testing framework" nil tar "melpa" nil ((:keywords "snippets")) nil])
  (butler [cl-struct-package-desc butler (20150310 1605) "Emacs client for Jenkins" ((deferred (3 2)) (json (1 2)) (emacs (24))) tar "melpa" nil nil nil])
  (button-lock [cl-struct-package-desc button-lock (20150223 554) "Clickable text defined by regular expression" nil single "melpa" nil ((:url . "http://github.com/rolandwalker/button-lock") (:keywords "mouse" "button" "hypermedia" "extensions")) nil])
  (c-eldoc [cl-struct-package-desc c-eldoc (20140728 1452) "helpful description of the arguments to C functions" nil single "melpa" nil ((:url . "http://github.com/nflath/c-eldoc")) nil])
  (cache [cl-struct-package-desc cache (20111019 1600) "implementation of a hash table whose key-value pairs expire" nil single "melpa" nil nil nil])
  (cacoo [cl-struct-package-desc cacoo (20120319 1659) "Minor mode for Cacoo : http://cacoo.com" ((concurrent (0 3 1))) tar "melpa" nil nil nil])
  (calfw [cl-struct-package-desc calfw (20150703 119) "Calendar view framework on Emacs" ((google-maps (20130412 230))) tar "melpa" nil ((:url . "https://github.com/kiwanami/emacs-calfw") (:keywords "calendar")) nil])
  (calfw-gcal [cl-struct-package-desc calfw-gcal (20120111 200) "edit Google calendar for calfw.el." nil tar "melpa" nil ((:url . "https://github.com/myuhe/calfw-gcal.el") (:keywords "convenience" "calendar" "calfw.el")) nil])
  (caml [cl-struct-package-desc caml (20150717 731) "OCaml code editing commands for Emacs" nil tar "melpa" nil nil nil])
  (capture [cl-struct-package-desc capture (20130828 944) "screencasting with \"avconv\" or \"ffmpeg\"" nil tar "melpa" nil nil nil])
  (centered-cursor-mode [cl-struct-package-desc centered-cursor-mode (20150420 1942) "cursor stays vertically centered" nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/centered-cursor-mode.el") (:keywords "convenience")) nil])
  (change-inner [cl-struct-package-desc change-inner (20150707 844) "Change contents based on semantic units" ((expand-region (0 7))) single "melpa" nil ((:keywords "convenience" "extensions")) nil])
  (charmap [cl-struct-package-desc charmap (20131019 2158) "Unicode table for Emacs" nil single "melpa" nil ((:url . "https://github.com/lateau/charmap") (:keywords "unicode" "character" "ucs")) nil])
  (chicken-scheme [cl-struct-package-desc chicken-scheme (20141116 1139) "Scheme-mode extensions for Chicken Scheme" nil single "melpa" nil ((:url . "http://github.com/dleslie/chicken-scheme")) nil])
  (chm-view [cl-struct-package-desc chm-view (20110616 1719) "View CHM file." nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/chm-view.el") (:keywords "chm" "chm-view")) nil])
  (circe [cl-struct-package-desc circe (20150727 950) "Client for IRC in Emacs" ((cl-lib (0 5))) tar "melpa" nil nil nil])
  (clippy [cl-struct-package-desc clippy (20140417 414) "Show tooltip with function documentation at point" ((pos-tip (1 0))) single "melpa" nil ((:url . "https://github.com/Fuco1/clippy.el") (:keywords "docs")) nil])
  (clj-refactor [cl-struct-package-desc clj-refactor (20150731 528) "A collection of clojure refactoring functions" ((emacs (24 3)) (s (1 8 0)) (dash (2 4 0)) (yasnippet (0 6 1)) (paredit (24)) (multiple-cursors (1 2 2)) (cider (0 9 1)) (edn (1 1 2)) (inflections (2 3))) tar "melpa" nil ((:keywords "convenience" "clojure" "cider")) nil])
  (cljsbuild-mode [cl-struct-package-desc cljsbuild-mode (20140619 126) "A minor mode for the ClojureScript 'lein cljsbuild' command" nil single "melpa" nil ((:url . "http://github.com/kototama/cljsbuild-mode") (:keywords "clojure" "clojurescript" "leiningen" "compilation")) nil])
  (clojure-mode [cl-struct-package-desc clojure-mode (20150729 712) "Major mode for Clojure code" ((emacs (24 3))) single "melpa" nil ((:url . "http://github.com/clojure-emacs/clojure-mode") (:keywords "languages" "clojure" "clojurescript" "lisp")) nil])
  (clojure-snippets [cl-struct-package-desc clojure-snippets (20150504 144) "Yasnippets for clojure" ((yasnippet (0 8 0))) tar "melpa" nil nil nil])
  (closure-lint-mode [cl-struct-package-desc closure-lint-mode (20101118 1324) "minor mode for the Closure Linter" nil single "melpa" nil ((:url . "https://github.com/r0man/closure-lint-mode") (:keywords "tools" "closure" "javascript" "lint" "flymake")) nil])
  (cloud-to-butt-erc [cl-struct-package-desc cloud-to-butt-erc (20130627 1608) "Replace 'the cloud' with 'my butt'" nil single "melpa" nil ((:url . "http://www.github.com/leathekd/cloud-to-butt-erc")) nil])
  (clues-theme [cl-struct-package-desc clues-theme (20140922 2056) "an Emacs 24 theme which may well be fully awesome..." ((emacs (24 0))) single "melpa" nil ((:url . "https://github.com/jasonm23/emacs-clues-theme")) nil])
  (cm-mode [cl-struct-package-desc cm-mode (20141112 1715) "Minor mode for CriticMarkup" nil single "melpa" nil ((:keywords "text" "markdown")) nil])
  (cn-outline [cl-struct-package-desc cn-outline (20100321 914) "No description available." nil single "melpa" nil nil nil])
  (coffee-fof [cl-struct-package-desc coffee-fof (20131012 530) "A coffee-mode configuration for `ff-find-other-file'." ((coffee-mode (0 4 1))) single "melpa" nil ((:url . "http://github.com/yasuyk/coffee-fof") (:keywords "coffee-mode")) nil])
  (coffee-mode [cl-struct-package-desc coffee-mode (20150602 2205) "Major mode to edit CoffeeScript files in Emacs" ((emacs (24 1)) (cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/defunkt/coffee-mode") (:keywords "coffeescript" "major" "mode")) nil])
  (col-highlight [cl-struct-package-desc col-highlight (20150104 2134) "Highlight the current column." ((vline (0))) single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/col-highlight.el") (:keywords "faces" "frames" "emulation" "highlight" "cursor" "accessibility")) nil])
  (color-moccur [cl-struct-package-desc color-moccur (20141222 1635) "multi-buffer occur (grep) mode" nil single "melpa" nil ((:url . "http://www.bookshelf.jp/elc/color-moccur.el") (:keywords "convenience")) nil])
  (color-theme [cl-struct-package-desc color-theme (20080305 34) "install color themes" nil tar "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki.pl?ColorTheme") (:keywords "faces")) nil])
  (color-theme-approximate [cl-struct-package-desc color-theme-approximate (20140227 2036) "Makes Emacs theme works on terminal transparently" nil single "melpa" nil nil nil])
  (color-theme-buffer-local [cl-struct-package-desc color-theme-buffer-local (20120702 1336) "Install color-themes by buffer." nil single "melpa" nil ((:url . "http://github.com/vic/color-theme-buffer-local") (:keywords "faces")) nil])
  (color-theme-sanityinc-solarized [cl-struct-package-desc color-theme-sanityinc-solarized (20150710 1909) "A version of Ethan Schoonover's Solarized themes" nil tar "melpa" nil nil nil])
  (color-theme-sanityinc-tomorrow [cl-struct-package-desc color-theme-sanityinc-tomorrow (20150710 1903) "A version of Chris Kempson's various Tomorrow themes" nil tar "melpa" nil nil nil])
  (color-theme-solarized [cl-struct-package-desc color-theme-solarized (20150619 1734) "Solarized themes for Emacs" ((color-theme (6 5 5))) tar "melpa" nil nil nil])
  (column-marker [cl-struct-package-desc column-marker (20121128 843) "Highlight certain character columns" nil single "melpa" nil ((:keywords "tools" "convenience" "highlight")) nil])
  (commander [cl-struct-package-desc commander (20140120 1052) "Emacs command line parser" ((s (1 6 0)) (dash (2 0 0)) (cl-lib (0 3)) (f (0 6 1))) single "melpa" nil ((:url . "http://github.com/rejeep/commander.el") (:keywords "cli" "argv")) nil])
  (company [cl-struct-package-desc company (20150727 1415) "Modular text completion framework" ((emacs (24 1)) (cl-lib (0 5))) tar "melpa" nil ((:url . "http://company-mode.github.io/") (:keywords "abbrev" "convenience" "matching")) nil])
  (company-inf-ruby [cl-struct-package-desc company-inf-ruby (20140805 1354) "company-mode completion back-end for inf-ruby" ((company (0 6 10)) (inf-ruby (2 2 7)) (emacs (24 1))) single "melpa" nil ((:url . "https://github.com/company-mode/company-inf-ruby")) nil])
  (concurrent [cl-struct-package-desc concurrent (20150309 2052) "Concurrent utility functions for emacs lisp" ((deferred (0 3 1))) single "melpa" nil ((:url . "https://github.com/kiwanami/emacs-deferred/blob/master/README-concurrent.markdown") (:keywords "deferred" "async" "concurrent")) nil])
  (confluence [cl-struct-package-desc confluence (20140410 1723) "Emacs mode for interacting with confluence wikis" ((xml-rpc (1 6 4))) tar "melpa" nil ((:url . "http://code.google.com/p/confluence-el/") (:keywords "confluence" "wiki" "xmlrpc")) nil])
  (cperl-mode [cl-struct-package-desc cperl-mode (20140309 122) "Perl code editing commands for Emacs" nil single "melpa" nil ((:keywords "languages" "perl")) nil])
  (crab [cl-struct-package-desc crab (20150126 2137) "WebSocket server to remotely control a browser" ((websocket (1 0)) (json (1 2))) single "melpa" nil ((:url . "https://github.com/puffnfresh/crab-emacs")) nil])
  (crappy-jsp-mode [cl-struct-package-desc crappy-jsp-mode (20140311 231) "A pretty crappy major-mode for jsp." nil single "melpa" nil ((:keywords "jsp" "major" "mode")) nil])
  (creole [cl-struct-package-desc creole (20140924 800) "A parser for the Creole Wiki language" ((noflet (0 0 3)) (kv (0 0 17))) single "melpa" nil ((:keywords "lisp" "creole" "wiki")) nil])
  (crontab-mode [cl-struct-package-desc crontab-mode (20090510 1355) "Mode for editing crontab files" nil single "melpa" nil ((:url . "http://www.mahalito.net/~harley/elisp/crontab-mode.el") (:keywords "cron" "crontab" "emacs")) nil])
  (crosshairs [cl-struct-package-desc crosshairs (20150104 2139) "Highlight the current line and column." ((hl-line+ (0)) (col-highlight (0)) (vline (0))) single "melpa" nil ((:url . "http://www.emacswiki.org/crosshairs.el") (:keywords "faces" "frames" "emulation" "highlight" "cursor" "accessibility")) nil])
  (cryptol-mode [cl-struct-package-desc cryptol-mode (20140426 1004) "Cryptol major mode for Emacs" nil single "melpa" nil ((:url . "http://github.com/thoughtpolice/cryptol-mode") (:keywords "cryptol" "cryptography")) nil])
  (csharp-mode [cl-struct-package-desc csharp-mode (20150714 138) "C# mode derived mode" nil single "melpa" nil ((:url . "https://github.com/josteink/csharp-mode") (:keywords "c#" "languages" "oop" "mode")) nil])
  (csv-nav [cl-struct-package-desc csv-nav (20130407 1820) "navigate and edit CSV files" nil single "melpa" nil nil nil])
  (ctable [cl-struct-package-desc ctable (20140304 1659) "Table component for Emacs Lisp" nil single "melpa" nil ((:url . "https://github.com/kiwanami/emacs-ctable") (:keywords "table")) nil])
  (ctags [cl-struct-package-desc ctags (20110911 304) "Exuberant Ctags utilities for Emacs" nil single "melpa" nil ((:url . "https://bitbucket.org/semente/ctags.el") (:keywords "tags" "ctags" "etags")) nil])
  (ctags-update [cl-struct-package-desc ctags-update (20150427 2014) "(auto) update TAGS in parent directory using exuberant-ctags" nil single "melpa" nil ((:url . "https://github.com/jixiuf/helm-etags-plus") (:keywords "exuberant-ctags" "etags")) nil])
  (cursor-chg [cl-struct-package-desc cursor-chg (20150104 2139) "Change cursor dynamically, depending on the context." nil single "melpa" nil ((:url . "http://www.emacswiki.org/cursor-chg.el") (:keywords "cursor" "accessibility")) nil])
  (cus-edit+ [cl-struct-package-desc cus-edit+ (20150104 2141) "Enhancements to `cus-edit.el'." nil single "melpa" nil ((:url . "http://www.emacswiki.org/cus-edit+.el") (:keywords "help" "customize" "help" "faces")) nil])
  (cyberpunk-theme [cl-struct-package-desc cyberpunk-theme (20150730 2219) "Cyberpunk Color Theme" nil single "melpa" nil ((:keywords "color" "theme" "cyberpunk")) nil])
  (d-mode [cl-struct-package-desc d-mode (20150621 614) "D Programming Language major mode for (X)Emacs" nil single "melpa" nil ((:keywords "d" "programming" "language" "emacs" "cc-mode")) nil])
  (darcsum [cl-struct-package-desc darcsum (20140315 2110) "a pcl-cvs like interface for managing darcs patches" nil tar "melpa" nil ((:keywords "completion" "convenience" "tools" "vc")) nil])
  (dart-mode [cl-struct-package-desc dart-mode (20150721 1654) "Major mode for editing Dart files" ((cl-lib (0 5)) (dash (2 10 0)) (flycheck (0 23))) single "melpa" nil ((:url . "http://code.google.com/p/dart-mode") (:keywords "language")) nil])
  (dash [cl-struct-package-desc dash (20150717 1321) "A modern list library for Emacs" nil single "melpa" nil ((:keywords "lists")) nil])
  (dash-at-point [cl-struct-package-desc dash-at-point (20140626 35) "Search the word at point with Dash" nil single "melpa" nil ((:url . "https://github.com/stanaka/dash-at-point")) nil])
  (datomic-snippets [cl-struct-package-desc datomic-snippets (20130707 1315) "Yasnippets for Datomic" ((s (1 4 0)) (dash (1 2 0)) (yasnippet (0 6 1))) tar "melpa" nil nil nil])
  (db [cl-struct-package-desc db (20140421 1411) "A database for EmacsLisp" ((kv (0 0 11))) single "melpa" nil ((:keywords "data" "lisp")) nil])
  (dedicated [cl-struct-package-desc dedicated (20090428 1231) "A very simple minor mode for dedicated buffers" nil single "melpa" nil ((:keywords "dedicated" "buffer")) nil])
  (deferred [cl-struct-package-desc deferred (20150309 2052) "Simple asynchronous functions for emacs lisp" nil single "melpa" nil ((:url . "https://github.com/kiwanami/emacs-deferred") (:keywords "deferred" "async")) nil])
  (deft [cl-struct-package-desc deft (20150719 520) "quickly browse, filter, and edit plain text notes" nil single "melpa" nil ((:url . "http://jblevins.org/projects/deft/") (:keywords "plain text" "notes" "simplenote" "notational velocity")) nil])
  (delim-kill [cl-struct-package-desc delim-kill (20100516 2320) "Kill text between delimiters." nil single "melpa" nil ((:url . "http://github.com/thomas11/delim-kill/tree/master") (:keywords "convenience" "languages")) nil])
  (desktop-registry [cl-struct-package-desc desktop-registry (20140119 1343) "Keep a central registry of desktop files" nil single "melpa" nil ((:url . "http://projects.ryuslash.org/desktop-registry/") (:keywords "convenience")) nil])
  (dic-lookup-w3m [cl-struct-package-desc dic-lookup-w3m (20150706 417) "look up dictionaries on the Internet" ((w3m (20120723 324)) (stem (20120826))) tar "melpa" nil ((:keywords "emacs-w3m" "w3m" "dictionary")) nil])
  (diff-hl [cl-struct-package-desc diff-hl (20150606 643) "Highlight uncommitted changes" ((cl-lib (0 2))) tar "melpa" nil ((:url . "https://github.com/dgutov/diff-hl") (:keywords "vc" "diff")) nil])
  (diminish [cl-struct-package-desc diminish (20091203 1012) "Diminished modes are minor modes with no modeline display" nil single "melpa" nil ((:url . "http://www.eskimo.com/~seldon") (:keywords "extensions" "diminish" "minor" "codeprose")) nil])
  (dircmp [cl-struct-package-desc dircmp (20141204 956) "Compare and sync directories." nil tar "melpa" nil ((:url . "https://github.com/matthewlmcclure/dircmp-mode") (:keywords "unix" "tools")) nil])
  (dired+ [cl-struct-package-desc dired+ (20150730 1406) "Extensions to Dired." nil single "melpa" nil ((:url . "http://www.emacswiki.org/dired+.el") (:keywords "unix" "mouse" "directories" "diredp" "dired")) nil])
  (dired-details+ [cl-struct-package-desc dired-details+ (20150104 2150) "Enhancements to library `dired-details+.el'." ((dired-details (0))) single "melpa" nil ((:url . "http://www.emacswiki.org/dired-details+.el") (:keywords "dired" "frames")) nil])
  (dired-details [cl-struct-package-desc dired-details (20130824 1158) "make file details hide-able in dired" nil single "melpa" nil ((:keywords "dired" "hide")) nil])
  (dired-dups [cl-struct-package-desc dired-dups (20130527 1425) "Find duplicate files and display them in a dired buffer" nil single "melpa" nil ((:url . "https://github.com/vapniks/dired-dups") (:keywords "unix")) nil])
  (dired-efap [cl-struct-package-desc dired-efap (20140122 856) "Edit Filename At Point in a dired buffer" nil single "melpa" nil ((:url . "https://github.com/juan-leon/dired-efap") (:keywords "dired" "environment" "files" "renaming")) nil])
  (dired-single [cl-struct-package-desc dired-single (20130824 1200) "Reuse the current dired buffer to visit another directory" nil single "melpa" nil ((:keywords "dired" "reuse" "buffer")) nil])
  (direx [cl-struct-package-desc direx (20150315 302) "Simple Directory Explorer" nil tar "melpa" nil ((:keywords "convenience")) nil])
  (disaster [cl-struct-package-desc disaster (20130509 1055) "Disassemble C/C++ code under cursor in Emacs" nil single "melpa" nil ((:url . "https://github.com/jart/disaster") (:keywords "tools")) nil])
  (disk [cl-struct-package-desc disk (20081128 1506) "simplified find-file, revert-file, save-buffer interface" nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/DiskKey") (:keywords "convenience")) nil])
  (dispass [cl-struct-package-desc dispass (20140202 731) "Emacs wrapper for DisPass" ((dash (1 0 0))) single "melpa" nil ((:url . "http://projects.ryuslash.org/dispass.el/") (:keywords "processes")) nil])
  (dizzee [cl-struct-package-desc dizzee (20111009 616) "A more pleasant way to manage your project's subprocesses in Emacs." nil tar "melpa" nil nil nil])
  (django-theme [cl-struct-package-desc django-theme (20131022 202) "Custom face theme for Emacs" nil single "melpa" nil ((:url . "http://github/anrzejsliwa/django-theme")) nil])
  (dna-mode [cl-struct-package-desc dna-mode (20130821 1105) "a major mode for editing dna sequences" nil tar "melpa" nil ((:url . "http://www.mahalito.net/~harley/elisp/dna-mode.el") (:keywords "dna" "emacs" "editing")) nil])
  (docbook-snippets [cl-struct-package-desc docbook-snippets (20150714 925) "Yasnippets for DocBook" ((yasnippet (0 8 0))) tar "melpa" nil ((:url . "https://github.com/jhradilek/emacs-docbook-snippets") (:keywords "snippets" "docbook")) nil])
  (dollaro [cl-struct-package-desc dollaro (20130620 1325) "simple text templates" ((s (1 6 0))) single "melpa" nil ((:keywords "tools" "convenience")) nil])
  (dom [cl-struct-package-desc dom (20150414 1610) "DOM implementation and manipulation library" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://www.github.com/toroidal-code/dom.el/") (:keywords "xml" "dom")) nil])
  (dot-mode [cl-struct-package-desc dot-mode (20140128 1716) "No description available." nil single "melpa" nil nil nil])
  (dpaste [cl-struct-package-desc dpaste (20150528 600) "Emacs integration for dpaste.com" nil single "melpa" nil ((:keywords "paste" "pastie" "pastebin" "dpaste" "python")) nil])
  (dpaste_de [cl-struct-package-desc dpaste_de (20131015 525) "Emacs mode to paste to dpaste.de" ((web (0 3 7))) single "melpa" nil ((:keywords "pastebin")) nil])
  (drag-stuff [cl-struct-package-desc drag-stuff (20150717 532) "Drag stuff (lines, words, region, etc...) around" nil tar "melpa" nil nil nil])
  (drill-instructor-AZIK-force [cl-struct-package-desc drill-instructor-AZIK-force (20120907 1817) "Support AZIK input" ((popup (0 5))) tar "melpa" nil nil nil])
  (dropbox [cl-struct-package-desc dropbox (20130513 1537) "Emacs backend for dropbox" ((json (1 2)) (oauth (1 0 3))) single "melpa" nil ((:keywords "dropbox")) nil])
  (dropdown-list [cl-struct-package-desc dropdown-list (20120329 1636) "Drop-down menu interface" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/dropdown-list.el") (:keywords "menu" "convenience" "dropdown")) nil])
  (drupal-mode [cl-struct-package-desc drupal-mode (20150709 1219) "Advanced minor mode for Drupal development" ((php-mode (1 5 0))) tar "melpa" nil ((:url . "https://github.com/arnested/drupal-mode") (:keywords "programming" "php" "drupal")) nil])
  (drupal-spell [cl-struct-package-desc drupal-spell (20130520 955) "Aspell extra dictionary for Drupal" nil tar "melpa" nil ((:url . "https://github.com/arnested/drupal-spell") (:keywords "wp")) nil])
  (dsvn [cl-struct-package-desc dsvn (20130120 1257) "Subversion interface" nil single "melpa" nil ((:keywords "docs")) nil])
  (dummy-h-mode [cl-struct-package-desc dummy-h-mode (20140816 1233) "switch major mode to c-/c++-/objc-mode on .h file" nil single "melpa" nil ((:keywords "c-mode" "c++-mode" "objc-mode")) nil])
  (duplicate-thing [cl-struct-package-desc duplicate-thing (20120515 948) "Duplicate current line & selection" nil single "melpa" nil ((:keywords "command" "duplicate" "line" "selection")) nil])
  (dylan-mode [cl-struct-package-desc dylan-mode (20140610 2237) "Major mode for editing Dylan programs." nil tar "melpa" nil nil nil])
  (dynamic-fonts [cl-struct-package-desc dynamic-fonts (20140731 526) "Set faces based on available fonts" ((font-utils (0 7 0)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa" nil ((:url . "http://github.com/rolandwalker/dynamic-fonts") (:keywords "faces" "frames")) nil])
  (e2wm [cl-struct-package-desc e2wm (20150608 1723) "simple window manager for emacs" ((window-layout (1 2))) tar "melpa" nil ((:keywords "tools" "window manager")) nil])
  (e2wm-R [cl-struct-package-desc e2wm-R (20130505 2208) "some e2wm plugin and perspective for GNU R" ((e2wm (20130225 1602)) (inlineR (20120520 2332)) (ess (20130225 1754))) single "melpa" nil ((:url . "https://github.com/myuhe/e2wm-R.el") (:keywords "convenience" "e2wm")) nil])
  (e2wm-bookmark [cl-struct-package-desc e2wm-bookmark (20120811 2350) "Bookmark plugin for e2wm.el" ((e2wm (1 2))) single "melpa" nil ((:keywords "convenience")) nil])
  (e2wm-svg-clock [cl-struct-package-desc e2wm-svg-clock (20150106 506) "e2wm plugin for svg-clock" ((e2wm (20130225 1602)) (svg-clock (0 4))) single "melpa" nil ((:url . "https://github.com/myuhe/e2wm-svg-clock.el") (:keywords "convenience" "e2wm")) nil])
  (easy-after-load [cl-struct-package-desc easy-after-load (20121224 1849) "eval-after-load for all files in a directory" nil single "melpa" nil ((:url . "https://github.com/pd/easy-after-load")) nil])
  (ebib [cl-struct-package-desc ebib (20150722 1651) "a BibTeX database manager" ((dash (2 5 0)) (parsebib (1 0)) (emacs (24 3))) tar "melpa" nil ((:keywords "text" "bibtex")) nil])
  (ecb [cl-struct-package-desc ecb (20140215 114) "a code browser for Emacs" nil tar "melpa" nil ((:keywords "browser" "code" "programming" "tools")) nil])
  (ecukes [cl-struct-package-desc ecukes (20150717 648) "Cucumber for Emacs." ((commander (0 6 1)) (espuds (0 2 2)) (ansi (0 3 0)) (dash (2 2 0)) (s (1 8 0)) (f (0 11 0))) tar "melpa" nil nil nil])
  (edbi [cl-struct-package-desc edbi (20140920 35) "Emacs Database Interface" ((concurrent (0 3 1)) (ctable (0 1 2)) (epc (0 1 1))) tar "melpa" nil nil nil])
  (edebug-x [cl-struct-package-desc edebug-x (20130615 2325) "Extensions for Edebug" nil single "melpa" nil ((:url . "https://github.com/ScottyB/edebug-x") (:keywords "extensions")) nil])
  (edit-color-stamp [cl-struct-package-desc edit-color-stamp (20130529 1033) "Edit a hex color stamp, using a QT or the internal color picker" ((es-lib (0 2)) (cl-lib (1 0))) tar "melpa" nil ((:url . "https://github.com/sabof/edit-color-stamp")) nil])
  (edit-list [cl-struct-package-desc edit-list (20100930 743) "edit a single list" nil single "melpa" nil ((:url . "http://mwolson.org/static/dist/elisp/edit-list.el")) nil])
  (edit-server [cl-struct-package-desc edit-server (20141231 1358) "server that responds to edit requests from Chrome" nil single "melpa" nil ((:url . "https://github.com/stsquad/emacs_chrome")) nil])
  (edit-server-htmlize [cl-struct-package-desc edit-server-htmlize (20130329 1548) "(de)HTMLization hooks for edit-server.el" ((edit-server (1 9))) single "melpa" nil ((:url . "https://github.com/frobtech/edit-server-htmlize")) nil])
  (editorconfig [cl-struct-package-desc editorconfig (20150507 1431) "EditorConfig Emacs Plugin" nil single "melpa" nil ((:url . "http://github.com/editorconfig/editorconfig-emacs#readme")) nil])
  (egg [cl-struct-package-desc egg (20150208 1815) "Emacs Got Git - Emacs interface to Git" nil tar "melpa" nil ((:keywords "git" "version control" "release management")) nil])
  (egison-mode [cl-struct-package-desc egison-mode (20150629 51) "Egison editing mode" nil single "melpa" nil ((:url . "https://github.com/egisatoshi/egison3/blob/master/elisp/egison-mode.el")) nil])
  (eimp [cl-struct-package-desc eimp (20140630 1447) "Emacs Image Manipulation Package" nil single "melpa" nil nil nil])
  (ein [cl-struct-package-desc ein (20150708 1417) "Emacs IPython Notebook" ((websocket (1 3)) (request (0 2))) tar "melpa" nil nil nil])
  (el-autoyas [cl-struct-package-desc el-autoyas (20120918 617) "Automatically create Emacs-Lisp Yasnippets" nil tar "melpa" nil ((:url . "https://github.com/mlf176f2/el-autoyas.el") (:keywords "emacs" "lisp" "mode" "yasnippet")) nil])
  (el-mock [cl-struct-package-desc el-mock (20150711 150) "Tiny Mock and Stub framework in Emacs Lisp" nil single "melpa" nil ((:url . "http://github.com/rejeep/el-mock.el") (:keywords "lisp" "testing" "unittest")) nil])
  (el-spec [cl-struct-package-desc el-spec (20121018 4) "ruby's rspec like syntax test frame work" nil single "melpa" nil ((:url . "https://github.com/uk-ar/el-spec") (:keywords "test")) nil])
  (el-swank-fuzzy [cl-struct-package-desc el-swank-fuzzy (20130824 1157) "fuzzy symbol completion." nil single "melpa" nil ((:keywords "matching" "completion" "string")) nil])
  (el-x [cl-struct-package-desc el-x (20140111 1401) "main entry point for el-x package" nil tar "melpa" nil ((:keywords "lisp")) nil])
  (eldoc-eval [cl-struct-package-desc eldoc-eval (20150512 506) "Enable eldoc support when minibuffer is in use." nil single "melpa" nil nil nil])
  (eldoc-extension [cl-struct-package-desc eldoc-extension (20140306 1445) "Some extension for eldoc" nil single "melpa" nil ((:keywords "eldoc")) nil])
  (electric-case [cl-struct-package-desc electric-case (20150417 412) "insert camelCase, snake_case words without \"Shift\"ing" nil single "melpa" nil ((:url . "http://hins11.yu-yake.com/")) nil])
  (elein [cl-struct-package-desc elein (20120120 316) "running leiningen commands from emacs" nil single "melpa" nil ((:url . "https://github.com/remvee/elein") (:keywords "tools" "processes")) nil])
  (elisp-depend [cl-struct-package-desc elisp-depend (20120427 123) "Parse depend libraries of elisp file." nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/elisp-depend.el") (:keywords "elisp-depend")) nil])
  (elisp-slime-nav [cl-struct-package-desc elisp-slime-nav (20141224 854) "Make M-. and M-, work in elisp like they do in slime" nil single "melpa" nil ((:url . "https://github.com/purcell/elisp-slime-nav") (:keywords "navigation" "slime" "elisp" "emacs-lisp")) nil])
  (elixir-mode [cl-struct-package-desc elixir-mode (20150726 730) "Major mode for editing Elixir files" ((emacs (24)) (pkg-info (0 4))) tar "melpa" nil ((:url . "https://github.com/elixir-lang/emacs-elixir") (:keywords "languages" "elixir")) nil])
  (elmine [cl-struct-package-desc elmine (20130330 1300) "Redmine API access via elisp." nil single "melpa" nil ((:url . "http://github.com/leoc/elmine") (:keywords "tools")) nil])
  (elnode [cl-struct-package-desc elnode (20140203 1506) "The Emacs webserver." ((web (0 1 4)) (dash (1 1 0)) (noflet (0 0 7)) (s (1 5 0)) (creole (0 8 14)) (fakir (0 1 6)) (db (0 0 5)) (kv (0 0 17))) tar "melpa" nil nil nil])
  (elpa-audit [cl-struct-package-desc elpa-audit (20141023 631) "Handy functions for inspecting and comparing package archives" nil single "melpa" nil ((:url . "https://github.com/purcell/elpa-audit") (:keywords "maint")) nil])
  (elpy [cl-struct-package-desc elpy (20150702 1202) "Emacs Python Development Environment" ((company (0 8 2)) (find-file-in-project (3 3)) (highlight-indentation (0 5 0)) (pyvenv (1 3)) (yasnippet (0 8 0))) tar "melpa" nil nil nil])
  (elscreen [cl-struct-package-desc elscreen (20140421 414) "Emacs window session manager" nil tar "melpa" nil nil nil])
  (emacs-eclim [cl-struct-package-desc emacs-eclim (20150731 728) "An interface to the Eclipse IDE." ((dash (2 11 0)) (json (1 2)) (popup (0 5 2)) (s (1 9 0))) tar "melpa" nil nil nil])
  (emacs-setup [cl-struct-package-desc emacs-setup (20120727 726) "Package for maintaining your emacs configuration. Clean up your .emacs!" nil tar "melpa" nil nil nil])
  (emacsc [cl-struct-package-desc emacsc (20150205 2358) "helper for emacsc(1)" nil tar "melpa" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil])
  (emagician-fix-spell-memory [cl-struct-package-desc emagician-fix-spell-memory (20141229 1434) "Simple hack into ispell to fix (muscle) memory problems" nil single "melpa" nil ((:keywords "erc" "bitlbee" "bot")) nil])
  (emamux [cl-struct-package-desc emamux (20141028 503) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil])
  (emamux-ruby-test [cl-struct-package-desc emamux-ruby-test (20130812 939) "Ruby test with emamux" ((emamux (0 1)) (projectile (0 9 1))) single "melpa" nil ((:url . "https://github.com/syohex/emamux-ruby-test")) nil])
  (emmet-mode [cl-struct-package-desc emmet-mode (20150410 803) "Unofficial Emmet's support for emacs" nil single "melpa" nil ((:url . "https://github.com/smihica/emmet-mode") (:keywords "convenience")) nil])
  (emms [cl-struct-package-desc emms (20150519 736) "The Emacs Multimedia System" nil tar "melpa" nil ((:keywords "emms" "mp3" "mpeg" "multimedia")) nil])
  (emms-mark-ext [cl-struct-package-desc emms-mark-ext (20130528 2027) "Extra functions for emms-mark-mode and emms-tag-edit-mode" ((emms (3 0))) single "melpa" nil ((:url . "https://github.com/vapniks/emms-mark-ext") (:keywords "convenience" "multimedia")) nil])
  (emr [cl-struct-package-desc emr (20140817 1604) "Emacs refactoring system." ((s (1 3 1)) (dash (1 2 0)) (cl-lib (0 2)) (popup (0 5 0)) (emacs (24 1)) (list-utils (0 3 0)) (redshank (1 0 0)) (paredit (24 0 0)) (projectile (0 9 1))) tar "melpa" nil ((:keywords "tools" "convenience" "refactoring")) nil])
  (enclose [cl-struct-package-desc enclose (20121008 914) "Enclose cursor within punctuation pairs." nil tar "melpa" nil nil nil])
  (enh-ruby-mode [cl-struct-package-desc enh-ruby-mode (20150711 1530) "Major mode for editing Ruby files" nil tar "melpa" nil ((:url . "http://github.com/zenspider/Enhanced-Ruby-Mode") (:keywords "languages elisp" "ruby")) nil])
  (enotify [cl-struct-package-desc enotify (20130407 648) "A networked notification system for emacs" nil tar "melpa" nil nil nil])
  (epc [cl-struct-package-desc epc (20140609 2234) "A RPC stack for the Emacs Lisp" ((concurrent (0 3 1)) (ctable (0 1 2))) tar "melpa" nil ((:url . "https://github.com/kiwanami/emacs-epc") (:keywords "lisp" "rpc")) nil])
  (epic [cl-struct-package-desc epic (20150503 37) "Evernote Picker for Cocoa Emacs" ((htmlize (1 47))) single "melpa" nil ((:url . "https://github.com/yoshinari-nomura/epic") (:keywords "evernote" "applescript")) nil])
  (eproject [cl-struct-package-desc eproject (20141019 746) "assign files to projects, programatically" ((helm (1 6 4))) tar "melpa" nil ((:keywords "programming" "projects")) nil])
  (erc-hl-nicks [cl-struct-package-desc erc-hl-nicks (20140619 522) "ERC nick highlighter that ignores uniquifying chars when colorizing" nil single "melpa" nil ((:url . "http://www.github.com/leathekd/erc-hl-nicks")) nil])
  (erc-image [cl-struct-package-desc erc-image (20150101 1202) "Show received image urls in the ERC buffer" nil single "melpa" nil ((:keywords "multimedia")) nil])
  (erc-terminal-notifier [cl-struct-package-desc erc-terminal-notifier (20140115 224) "OSX notifications via the terminal-notifier gem for Emacs ERC." nil single "melpa" nil ((:url . "http://github.com/julienXX/") (:keywords "erc" "terminal-notifier" "nick")) nil])
  (erc-track-score [cl-struct-package-desc erc-track-score (20130328 515) "Add score support to tracked channel buffers" nil single "melpa" nil ((:url . "http://julien.danjou.info/erc-track-score.html")) nil])
  (erc-tweet [cl-struct-package-desc erc-tweet (20150603 1435) "shows text of a tweet when an url is posted in erc buffers" nil single "melpa" nil ((:keywords "extensions")) nil])
  (ercn [cl-struct-package-desc ercn (20150523 803) "Flexible ERC notifications" nil single "melpa" nil ((:url . "http://www.github.com/leathekd/ercn")) nil])
  (eredis [cl-struct-package-desc eredis (20120808 2007) "eredis, a Redis client in emacs lisp" nil single "melpa" nil ((:url . "http://code.google.com/p/eredis/")) nil])
  (erefactor [cl-struct-package-desc erefactor (20150620 1743) "Emacs-Lisp refactoring utilities" ((cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/mhayashi1120/Emacs-erefactor") (:keywords "extensions" "tools" "maint")) nil])
  (ergoemacs-mode [cl-struct-package-desc ergoemacs-mode (20150318 1413) "Emacs mode based on common modern interface and ergonomics." ((emacs (24 1)) (undo-tree (0 6 5))) tar "melpa" nil ((:url . "https://github.com/ergoemacs/ergoemacs-mode") (:keywords "convenience")) nil])
  (erlang [cl-struct-package-desc erlang (20150622 644) "Erlang major mode" nil tar "melpa" nil nil nil])
  (ert-expectations [cl-struct-package-desc ert-expectations (20130824 1200) "The simplest unit test framework in the world" nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/ert-expectations.el") (:keywords "test" "unittest" "ert" "expectations")) nil])
  (ert-runner [cl-struct-package-desc ert-runner (20150428 2328) "Opinionated Ert testing workflow" ((s (1 6 1)) (dash (1 8 0)) (f (0 10 0)) (commander (0 2 0)) (ansi (0 1 0)) (shut-up (0 1 0))) tar "melpa" nil ((:url . "http://github.com/rejeep/ert-runner.el") (:keywords "test")) nil])
  (es-lib [cl-struct-package-desc es-lib (20141111 1030) "A collection of emacs utilities" ((cl-lib (0 3))) tar "melpa" nil ((:url . "https://github.com/sabof/es-lib")) nil])
  (escreen [cl-struct-package-desc escreen (20091203 1013) "emacs window session manager" nil single "melpa" nil ((:keywords "extensions")) nil])
  (esh-buf-stack [cl-struct-package-desc esh-buf-stack (20140107 218) "Add a buffer stack feature to Eshell" nil single "melpa" nil ((:keywords "eshell" "extensions")) nil])
  (esh-help [cl-struct-package-desc esh-help (20140107 222) "Add some help functions and support for Eshell" ((dash (1 4 0))) single "melpa" nil ((:url . "https://github.com/tom-tan/esh-help/") (:keywords "eshell" "extensions")) nil])
  (espresso-theme [cl-struct-package-desc espresso-theme (20130228 2348) "Espresso Tutti Colori port for Emacs" nil single "melpa" nil ((:url . "https://github.com/dgutov/espresso-theme")) nil])
  (espuds [cl-struct-package-desc espuds (20150717 834) "Ecukes step definitions" ((s (1 7 0)) (dash (2 2 0)) (f (0 12 1))) single "melpa" nil ((:url . "http://github.com/ecukes/espuds") (:keywords "test")) nil])
  (ess [cl-struct-package-desc ess (20150729 819) "Emacs Speaks Statistics" nil tar "melpa" nil ((:url . "http://ess.r-project.org")) nil])
  (ess-R-data-view [cl-struct-package-desc ess-R-data-view (20130509 458) "Data viewer for GNU R" ((ctable (20130313 1743)) (popup (20130324 1305)) (ess (20130225 1754))) single "melpa" nil ((:url . "https://github.com/myuhe/ess-R-data-view.el") (:keywords "convenience")) nil])
  (ess-R-object-popup [cl-struct-package-desc ess-R-object-popup (20130302 336) "popup description of R object" ((popup (20130117 1954)) (ess (20130225 1754))) single "melpa" nil ((:url . "https://github.com/myuhe/ess-R-object-popup.el") (:keywords "convenience" "ess")) nil])
  (esup [cl-struct-package-desc esup (20150519 1701) "the Emacs StartUp Profiler (ESUP)" ((cl-lib (0 5)) (emacs (24))) tar "melpa" nil ((:url . "http://github.com/jschaf/esup") (:keywords "convenience" "processes")) nil])
  (esxml [cl-struct-package-desc esxml (20141203 1215) "Library for working with xml via esxml and sxml" ((kv (0 0 5))) single "melpa" nil ((:keywords "tools" "lisp" "comm")) nil])
  (etags-table [cl-struct-package-desc etags-table (20130824 1157) "Set tags table(s) based on current file" nil single "melpa" nil ((:keywords "etags" "tags" "tag")) nil])
  (ethan-wspace [cl-struct-package-desc ethan-wspace (20140709 543) "whitespace customizations for emacs" nil single "melpa" nil ((:keywords "whitespace" "tab" "newline" "trailing" "clean")) nil])
  (evil [cl-struct-package-desc evil (20150706 711) "Extensible Vi layer for Emacs." ((undo-tree (0 6 3)) (goto-chg (1 6))) tar "melpa" nil nil nil])
  (evil-leader [cl-struct-package-desc evil-leader (20140606 543) "let there be <leader>" ((evil (0))) single "melpa" nil ((:url . "http://github.com/cofi/evil-leader") (:keywords "evil" "vim-emulation" "leader")) nil])
  (evil-nerd-commenter [cl-struct-package-desc evil-nerd-commenter (20150701 1655) "Comment/uncomment lines efficiently. Like Nerd Commenter in Vim" nil tar "melpa" nil nil nil])
  (evil-numbers [cl-struct-package-desc evil-numbers (20140606 551) "increment/decrement numbers like in vim" nil single "melpa" nil ((:url . "http://github.com/cofi/evil-numbers") (:keywords "numbers" "increment" "decrement" "octal" "hex" "binary")) nil])
  (evil-paredit [cl-struct-package-desc evil-paredit (20150413 1348) "Paredit support for evil keybindings" ((evil (1 0 9)) (paredit (25 -2))) single "melpa" nil ((:url . "https://github.com/roman/evil-paredit") (:keywords "paredit" "evil")) nil])
  (exec-path-from-shell [cl-struct-package-desc exec-path-from-shell (20141212 846) "Get environment variables such as $PATH from the shell" nil single "melpa" nil ((:url . "https://github.com/purcell/exec-path-from-shell") (:keywords "environment")) nil])
  (expand-region [cl-struct-package-desc expand-region (20150718 18) "Increase selected region by semantic units." nil tar "melpa" nil nil nil])
  (express [cl-struct-package-desc express (20140508 1341) "Alternatives to `message'" ((string-utils (0 3 2))) single "melpa" nil ((:url . "http://github.com/rolandwalker/express") (:keywords "extensions" "message" "interface")) nil])
  (extend-dnd [cl-struct-package-desc extend-dnd (20130328 1034) "R drag and Drop" nil tar "melpa" nil ((:url . "https://github.com/mlf176f2/extend-dnd") (:keywords "extend" "drag and drop")) nil])
  (f [cl-struct-package-desc f (20150605 927) "Modern API for working with files and directories" ((s (1 7 0)) (dash (2 2 0))) single "melpa" nil ((:url . "http://github.com/rejeep/f.el") (:keywords "files" "directories")) nil])
  (factlog [cl-struct-package-desc factlog (20130209 1740) "File activity logger" ((deferred (0 3 1))) single "melpa" nil ((:url . "https://github.com/tkf/factlog")) nil])
  (fakespace [cl-struct-package-desc fakespace (20120817 1706) "fake namespaces with defpackage" nil single "melpa" nil ((:url . "https://github.com/skeeto/elisp-fakespace")) nil])
  (fakir [cl-struct-package-desc fakir (20140729 952) "fakeing bits of Emacs" ((noflet (0 0 8)) (dash (1 3 2)) (kv (0 0 19))) single "melpa" nil ((:url . "http://github.com/nicferrier/emacs-fakir") (:keywords "lisp" "tools")) nil])
  (fastnav [cl-struct-package-desc fastnav (20120211 657) "Fast navigation and editing routines." nil single "melpa" nil ((:keywords "nav" "fast" "fastnav" "navigation")) nil])
  (feature-mode [cl-struct-package-desc feature-mode (20141121 1030) "Major mode for editing Gherkin (i.e. Cucumber) user stories" nil tar "melpa" nil nil nil])
  (fic-mode [cl-struct-package-desc fic-mode (20140421 1622) "Show FIXME/TODO/BUG/KLUDGE in special face only in comments and strings" nil single "melpa" nil nil nil])
  (figlet [cl-struct-package-desc figlet (20141104 837) "Annoy people with big, ascii art text" nil single "melpa" nil nil nil])
  (fill-column-indicator [cl-struct-package-desc fill-column-indicator (20140509 1101) "Graphically indicate the fill column" nil tar "melpa" nil ((:keywords "convenience")) nil])
  (find-file-in-project [cl-struct-package-desc find-file-in-project (20150722 2347) "Find files in a project quickly." nil single "melpa" nil ((:url . "https://github.com/technomancy/find-file-in-project") (:keywords "project" "convenience")) nil])
  (find-file-in-repository [cl-struct-package-desc find-file-in-repository (20141214 2016) "Quickly find files in a git, mercurial or other repository" nil single "melpa" nil ((:url . "https://github.com/hoffstaetter/find-file-in-repository") (:keywords "files" "convenience" "repository" "project" "source control")) nil])
  (find-things-fast [cl-struct-package-desc find-things-fast (20150519 1526) "Find things fast, leveraging the power of git" nil single "melpa" nil ((:keywords "project" "convenience")) nil])
  (findr [cl-struct-package-desc findr (20130824 1207) "Breadth-first file-finding facility for (X)Emacs" nil single "melpa" nil ((:keywords "files")) nil])
  (fiplr [cl-struct-package-desc fiplr (20140723 2345) "Fuzzy Search for Files in Projects" ((grizzl (0 1 0)) (cl-lib (0 1))) tar "melpa" nil nil nil])
  (fixmee [cl-struct-package-desc fixmee (20150223 555) "Quickly navigate to FIXME notices in code" ((button-lock (1 0 2)) (nav-flash (1 0 0)) (back-button (0 6 0)) (smartrep (0 0 3)) (string-utils (0 3 2)) (tabulated-list (0))) single "melpa" nil ((:url . "http://github.com/rolandwalker/fixmee") (:keywords "navigation" "convenience")) nil])
  (flex-autopair [cl-struct-package-desc flex-autopair (20120809 518) "Automatically insert pair braces and quotes, insertion conditions & actions are highly customizable." nil single "melpa" nil ((:url . "https://github.com/uk-ar/flex-autopair.el") (:keywords "keyboard" "input")) nil])
  (flex-isearch [cl-struct-package-desc flex-isearch (20130508 1503) "Flex matching (like ido) in isearch." nil single "melpa" nil ((:url . "https://bitbucket.org/jpkotta/flex-isearch") (:keywords "convenience" "search")) nil])
  (flx [cl-struct-package-desc flx (20140921 739) "fuzzy matching with good sorting" ((cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/lewang/flx")) nil])
  (flx-ido [cl-struct-package-desc flx-ido (20140821 2033) "flx integration for ido" ((flx (0 1)) (cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/lewang/flx")) nil])
  (flycheck [cl-struct-package-desc flycheck (20150730 101) "On-the-fly syntax checking" ((dash (2 4 0)) (pkg-info (0 4)) (let-alist (1 0 1)) (cl-lib (0 3)) (emacs (24 3))) tar "melpa" nil ((:url . "https://www.flycheck.org") (:keywords "convenience" "languages" "tools")) nil])
  (flycheck-color-mode-line [cl-struct-package-desc flycheck-color-mode-line (20131125 2138) "Change mode line color with Flycheck status" ((flycheck (0 15)) (dash (1 2)) (emacs (24 1))) single "melpa" nil ((:keywords "convenience" "language" "tools")) nil])
  (flymake-coffee [cl-struct-package-desc flymake-coffee (20140809 324) "A flymake handler for coffee script" ((flymake-easy (0 1))) single "melpa" nil ((:url . "https://github.com/purcell/flymake-coffee")) nil])
  (flymake-css [cl-struct-package-desc flymake-css (20121104 1104) "Flymake support for css using csslint" ((flymake-easy (0 1))) single "melpa" nil ((:url . "https://github.com/purcell/flymake-css")) nil])
  (flymake-cursor [cl-struct-package-desc flymake-cursor (20130822 1032) "displays flymake error msg in minibuffer after delay" nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/flymake-cursor.el") (:keywords "languages" "mode" "flymake")) nil])
  (flymake-easy [cl-struct-package-desc flymake-easy (20140818 55) "Helpers for easily building flymake checkers" nil single "melpa" nil ((:url . "https://github.com/purcell/flymake-easy") (:keywords "convenience" "internal")) nil])
  (flymake-elixir [cl-struct-package-desc flymake-elixir (20130810 717) "A flymake handler for elixir-mode .ex files." nil single "melpa" nil nil nil])
  (flymake-gjshint [cl-struct-package-desc flymake-gjshint (20130327 532) "A flymake handler for javascript using both jshint and gjslint" nil single "melpa" nil ((:keywords "flymake" "javascript" "jshint" "gjslint")) nil])
  (flymake-go [cl-struct-package-desc flymake-go (20150714 33) "A flymake handler for go-mode files" nil single "melpa" nil ((:url . "https://github.com/robert-zaremba/flymake-go") (:keywords "go" "flymake")) nil])
  (flymake-haml [cl-struct-package-desc flymake-haml (20130324 351) "A flymake handler for haml files" ((flymake-easy (0 1))) single "melpa" nil ((:url . "https://github.com/purcell/flymake-haml")) nil])
  (flymake-haskell-multi [cl-struct-package-desc flymake-haskell-multi (20130620 422) "Syntax-check haskell-mode using both ghc and hlint" ((flymake-easy (0 1))) tar "melpa" nil nil nil])
  (flymake-hlint [cl-struct-package-desc flymake-hlint (20130309 145) "A flymake handler for haskell-mode files using hlint" ((flymake-easy (0 1))) single "melpa" nil ((:url . "https://github.com/purcell/flymake-hlint")) nil])
  (flymake-jshint [cl-struct-package-desc flymake-jshint (20140319 1500) "making flymake work with JSHint" ((flymake-easy (0 8))) single "melpa" nil ((:keywords "flymake" "jshint" "javascript")) nil])
  (flymake-jslint [cl-struct-package-desc flymake-jslint (20130613 202) "A flymake handler for javascript using jslint" ((flymake-easy (0 1))) single "melpa" nil ((:url . "https://github.com/purcell/flymake-jslint")) nil])
  (flymake-json [cl-struct-package-desc flymake-json (20130423 2357) "A flymake handler for json using jsonlint" ((flymake-easy (0 1))) single "melpa" nil ((:url . "https://github.com/purcell/flymake-json")) nil])
  (flymake-lua [cl-struct-package-desc flymake-lua (20140310 230) "Flymake for Lua" nil single "melpa" nil ((:keywords "lua")) nil])
  (flymake-perlcritic [cl-struct-package-desc flymake-perlcritic (20120328 114) "Flymake handler for Perl to invoke Perl::Critic" ((flymake (0 3))) tar "melpa" nil ((:url . "https://github.com/illusori/emacs-flymake-perlcritic")) nil])
  (flymake-php [cl-struct-package-desc flymake-php (20121104 1102) "A flymake handler for php-mode files" ((flymake-easy (0 1))) single "melpa" nil ((:url . "https://github.com/purcell/flymake-php")) nil])
  (flymake-python-pyflakes [cl-struct-package-desc flymake-python-pyflakes (20131127 6) "A flymake handler for python-mode files using pyflakes (or flake8)" ((flymake-easy (0 8))) single "melpa" nil ((:url . "https://github.com/purcell/flymake-python-pyflakes")) nil])
  (flymake-ruby [cl-struct-package-desc flymake-ruby (20121104 1059) "A flymake handler for ruby-mode files" ((flymake-easy (0 1))) single "melpa" nil ((:url . "https://github.com/purcell/flymake-ruby")) nil])
  (flymake-sass [cl-struct-package-desc flymake-sass (20140308 325) "Flymake handler for sass and scss files" ((flymake-easy (0 1))) single "melpa" nil ((:url . "https://github.com/purcell/flymake-sass")) nil])
  (flymake-shell [cl-struct-package-desc flymake-shell (20121104 1100) "A flymake syntax-checker for shell scripts" ((flymake-easy (0 1))) single "melpa" nil ((:url . "https://github.com/purcell/flymake-shell")) nil])
  (flymake-yaml [cl-struct-package-desc flymake-yaml (20130423 848) "A flymake handler for YAML" ((flymake-easy (0 1))) single "melpa" nil ((:url . "https://github.com/yasuyk/flymake-yaml") (:keywords "yaml")) nil])
  (flyspell-lazy [cl-struct-package-desc flyspell-lazy (20141222 652) "Improve flyspell responsiveness using idle timers" nil single "melpa" nil ((:url . "http://github.com/rolandwalker/flyspell-lazy") (:keywords "spelling")) nil])
  (fm [cl-struct-package-desc fm (20130126 1618) "follow mode for compilation/output buffers" nil single "melpa" nil ((:keywords "outlines")) nil])
  (fold-dwim [cl-struct-package-desc fold-dwim (20140208 837) "Unified user interface for Emacs folding modes" nil single "melpa" nil ((:url . "http://www.dur.ac.uk/p.j.heslin/Software/Emacs")) nil])
  (fold-dwim-org [cl-struct-package-desc fold-dwim-org (20131203 551) "Fold DWIM bound to org key-strokes." ((fold-dwim (1 2))) single "melpa" nil ((:url . "https://github.com/mlf176f2/fold-dwim-org") (:keywords "folding" "emacs" "org-mode")) nil])
  (fold-this [cl-struct-package-desc fold-this (20150601 342) "Just fold this region please" nil single "melpa" nil ((:keywords "convenience")) nil])
  (font-utils [cl-struct-package-desc font-utils (20140712 1258) "Utility functions for working with fonts" ((persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa" nil ((:url . "http://github.com/rolandwalker/font-utils") (:keywords "extensions")) nil])
  (foreign-regexp [cl-struct-package-desc foreign-regexp (20140823 1742) "search and replace by foreign regexp." nil tar "melpa" nil ((:keywords "convenience" "emulations" "matching" "tools" "unix" "wp")) nil])
  (frame-cmds [cl-struct-package-desc frame-cmds (20150104 2207) "Frame and window commands (interactive functions)." ((frame-fns (0))) single "melpa" nil ((:url . "http://www.emacswiki.org/frame-cmds.el") (:keywords "internal" "extensions" "mouse" "frames" "windows" "convenience")) nil])
  (frame-fns [cl-struct-package-desc frame-fns (20150104 2208) "Non-interactive frame and window functions." nil single "melpa" nil ((:url . "http://www.emacswiki.org/frame-fns.el") (:keywords "internal" "extensions" "local" "frames")) nil])
  (frame-restore [cl-struct-package-desc frame-restore (20140811 1409) "Restore Emacs frame" ((emacs (24 1))) single "melpa" nil ((:url . "https://github.com/lunaryorn/frame-restore.el") (:keywords "frames" "convenience")) nil])
  (frame-tag [cl-struct-package-desc frame-tag (20120527 136) "Minor mode that assigns a unique number to each frame for easy switching" nil single "melpa" nil ((:url . "http://github.com/liangzan/frame-tag.el") (:keywords "frame" "movement")) nil])
  (framemove [cl-struct-package-desc framemove (20130328 1133) "directional frame selection routines" nil single "melpa" nil ((:keywords "frame" "movement" "convenience")) nil])
  (fringe-helper [cl-struct-package-desc fringe-helper (20140620 1409) "helper functions for fringe bitmaps" nil single "melpa" nil ((:url . "http://nschum.de/src/emacs/fringe-helper/") (:keywords "lisp")) nil])
  (fsharp-mode [cl-struct-package-desc fsharp-mode (20150604 1028) "F# mode for Emacs" ((auto-complete (1 4)) (popup (0 5)) (pos-tip (0 4 5)) (s (1 3 1)) (dash (1 1 0))) tar "melpa" nil nil nil])
  (fuel [cl-struct-package-desc fuel (20150714 1729) "Major mode for the Factor programming language." ((cl-lib (0 2)) (emacs (24 2))) tar "melpa" nil nil nil])
  (full-ack [cl-struct-package-desc full-ack (20140223 932) "a front-end for ack" nil single "melpa" nil ((:url . "http://nschum.de/src/emacs/full-ack/") (:keywords "tools" "matching")) nil])
  (fullscreen-mode [cl-struct-package-desc fullscreen-mode (20130524 956) "fullscreen window support for Emacs" nil single "melpa" nil ((:url . "https://github.com/ryantm/fullscreen-mode") (:keywords "fullscreen" "fullscreen-mode")) nil])
  (furl [cl-struct-package-desc furl (20110112 1707) "Friendly URL retrieval" nil single "melpa" nil nil nil])
  (fuzzy [cl-struct-package-desc fuzzy (20150729 2037) "Fuzzy Matching" nil single "melpa" nil ((:keywords "convenience")) nil])
  (fuzzy-format [cl-struct-package-desc fuzzy-format (20130824 1200) "select indent-tabs-mode and format code automatically." nil single "melpa" nil ((:url . "http://code.101000lab.org, http://trac.codecheck.in")) nil])
  (fuzzy-match [cl-struct-package-desc fuzzy-match (20150104 2209) "fuzzy matching" nil single "melpa" nil ((:url . "http://www.emacswiki.org/fuzzy-match.el") (:keywords "matching" "completion" "string")) nil])
  (fwb-cmds [cl-struct-package-desc fwb-cmds (20131209 1600) "misc frame, window and buffer commands" nil single "melpa" nil ((:url . "http://github.com/tarsius/fwb-cmds") (:keywords "convenience")) nil])
  (fyure [cl-struct-package-desc fyure (20130216 514) "An interface to fix Japanese hyoki-yure" nil tar "melpa" nil ((:keywords "languages")) nil])
  (gandalf-theme [cl-struct-package-desc gandalf-theme (20130809 247) "Gandalf color theme" nil single "melpa" nil ((:keywords "color" "theme")) nil])
  (gap-mode [cl-struct-package-desc gap-mode (20140913 1258) "Major mode for editing files in the GAP programing language." nil tar "melpa" nil ((:url . "https://bitbucket.org/gvol/gap-mode") (:keywords "gap")) nil])
  (gather [cl-struct-package-desc gather (20141230 538) "Gather string in buffer." nil single "melpa" nil ((:url . "https://github.com/mhayashi1120/Emacs-gather/raw/master/gather.el") (:keywords "matching" "convenience" "tools")) nil])
  (geben [cl-struct-package-desc geben (20100330 343) "DBGp protocol frontend, a script debugger" nil tar "melpa" nil ((:url . "http://code.google.com/p/geben-on-emacs/") (:keywords "dbgp" "debugger" "php" "xdebug" "perl" "python" "ruby" "tcl" "komodo")) nil])
  (gedit-mode [cl-struct-package-desc gedit-mode (20140109 928) "Emulate the look & feel of GEdit in Emacs" ((tabbar (0)) (shell-pop (0)) (move-text (0)) (whole-line-or-region (0))) single "melpa" nil ((:url . "https://github.com/robru/gedit-mode") (:keywords "gedit" "keys" "keybindings" "easy" "cua")) nil])
  (ggo-mode [cl-struct-package-desc ggo-mode (20130524 443) "Gengetopt major mode" nil single "melpa" nil ((:keywords "extensions" "convenience" "local")) nil])
  (gh [cl-struct-package-desc gh (20150126 1125) "A GitHub library for Emacs" ((eieio (1 4)) (pcache (0 3 0)) (logito (0 1))) tar "melpa" nil nil nil])
  (ghc [cl-struct-package-desc ghc (20150713 400) "Sub mode for Haskell mode" ((haskell-mode (13 0))) tar "melpa" nil nil nil])
  (ghci-completion [cl-struct-package-desc ghci-completion (20140316 2331) "Completion for GHCi commands in inferior-haskell buffers" ((emacs (24 1))) single "melpa" nil ((:keywords "convenience")) nil])
  (gist [cl-struct-package-desc gist (20150505 1341) "Emacs integration for gist.github.com" ((emacs (24 1)) (gh (0 8 1))) single "melpa" nil ((:keywords "gist" "git" "github" "paste" "pastie" "pastebin")) nil])
  (git-auto-commit-mode [cl-struct-package-desc git-auto-commit-mode (20150404 751) "Emacs Minor mode to automatically commit and push" nil single "melpa" nil ((:url . "http://projects.ryuslash.org/git-auto-commit-mode/") (:keywords "vc")) nil])
  (git-blame [cl-struct-package-desc git-blame (20110509 926) "Minor mode for incremental blame for Git" nil single "melpa" nil ((:keywords "git" "version control" "release management")) nil])
  (git-dwim [cl-struct-package-desc git-dwim (20130130 2150) "Context-aware git commands such as branch handling" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/git-dwim.el") (:keywords "git" "tools" "convenience")) nil])
  (git-gutter+ [cl-struct-package-desc git-gutter+ (20150705 558) "Manage Git hunks straight from the buffer" ((git-commit (0))) single "melpa" nil ((:url . "https://github.com/nonsequitur/git-gutter-plus")) nil])
  (git-gutter [cl-struct-package-desc git-gutter (20150708 1021) "Port of Sublime Text plugin GitGutter" ((cl-lib (0 5)) (emacs (24))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-git-gutter")) nil])
  (git-gutter-fringe+ [cl-struct-package-desc git-gutter-fringe+ (20140729 403) "Fringe version of git-gutter+.el" ((git-gutter+ (0 1)) (fringe-helper (1 0 1))) single "melpa" nil ((:url . "https://github.com/nonsequitur/git-gutter-fringe-plus")) nil])
  (git-gutter-fringe [cl-struct-package-desc git-gutter-fringe (20150331 2139) "Fringe version of git-gutter.el" ((git-gutter (0 82)) (fringe-helper (0 1 1)) (cl-lib (0 5)) (emacs (24))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-git-gutter-fringe")) nil])
  (git-messenger [cl-struct-package-desc git-messenger (20150314 602) "Pop up last commit information of current line" ((popup (0 5 0)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-git-messenger")) nil])
  (gitconfig [cl-struct-package-desc gitconfig (20130718 235) "Emacs lisp interface to work with git-config variables" nil single "melpa" nil ((:keywords "git" "gitconfig" "git-config")) nil])
  (gitconfig-mode [cl-struct-package-desc gitconfig-mode (20150330 1048) "Major mode for editing .gitconfig files" nil single "melpa" nil ((:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git")) nil])
  (github-browse-file [cl-struct-package-desc github-browse-file (20150525 633) "View the file you're editing on GitHub" ((cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/osener/github-browse-file") (:keywords "convenience" "vc" "git" "github")) nil])
  (gitignore-mode [cl-struct-package-desc gitignore-mode (20150330 1048) "Major mode for editing .gitignore files" nil single "melpa" nil ((:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git")) nil])
  (gitty [cl-struct-package-desc gitty (20121014 742) "vc-mode extension for fast git interaction" nil single "melpa" nil ((:url . "https://github.com/jorgenschaefer/gitty") (:keywords "vc")) nil])
  (glsl-mode [cl-struct-package-desc glsl-mode (20150114 833) "major mode for Open GLSL shader files" nil single "melpa" nil ((:url . "http://artis.inrialpes.fr/~Xavier.Decoret/resources/glsl-mode/") (:keywords "languages")) nil])
  (gnuplot [cl-struct-package-desc gnuplot (20141231 1337) "drive gnuplot from within emacs" nil tar "melpa" nil ((:keywords "gnuplot" "plotting")) nil])
  (gnuplot-mode [cl-struct-package-desc gnuplot-mode (20131203 2159) "Major mode for editing gnuplot scripts" nil single "melpa" nil ((:url . "https://github.com/mkmcc/gnuplot") (:keywords "gnuplot" "plotting")) nil])
  (gnus-alias [cl-struct-package-desc gnus-alias (20150315 1742) "an alternative to gnus-posting-styles" nil single "melpa" nil ((:keywords "personality" "identity" "news" "mail" "gnus")) nil])
  (go-autocomplete [cl-struct-package-desc go-autocomplete (20150404 2351) "auto-complete-mode backend for go-mode" ((auto-complete (1 4 0))) single "melpa" nil ((:keywords "languages")) nil])
  (go-eldoc [cl-struct-package-desc go-eldoc (20150713 27) "eldoc for go-mode" ((go-mode (1 0 0)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-go-eldoc")) nil])
  (go-errcheck [cl-struct-package-desc go-errcheck (20150302 1629) "errcheck integration for go-mode" nil single "melpa" nil nil nil])
  (go-mode [cl-struct-package-desc go-mode (20150709 1243) "Major mode for the Go programming language" nil tar "melpa" nil ((:url . "https://github.com/dominikh/go-mode.el") (:keywords "languages" "go")) nil])
  (go-play [cl-struct-package-desc go-play (20120914 1248) "Paste to play.golang.org" nil single "melpa" nil nil nil])
  (go-snippets [cl-struct-package-desc go-snippets (20130821 844) "Yasnippets for go" ((yasnippet (0 8 0))) tar "melpa" nil nil nil])
  (golden-ratio [cl-struct-package-desc golden-ratio (20150526 1200) "Automatic resizing of Emacs windows to the golden ratio" nil single "melpa" nil ((:keywords "window" "resizing")) nil])
  (google-c-style [cl-struct-package-desc google-c-style (20140929 1118) "Google's C/C++ style for c-mode" nil single "melpa" nil ((:keywords "c" "tools")) nil])
  (google-contacts [cl-struct-package-desc google-contacts (20140530 233) "Support for Google Contacts in Emacs" ((oauth2 (0 10))) tar "melpa" nil ((:url . "http://julien.danjou.info/projects/emacs-packages#google-contacts") (:keywords "comm")) nil])
  (google-maps [cl-struct-package-desc google-maps (20130412 230) "Access Google Maps from Emacs" nil tar "melpa" nil ((:keywords "comm")) nil])
  (google-this [cl-struct-package-desc google-this (20150522 240) "A set of functions and bindings to google under point." ((emacs (24 1))) single "melpa" nil ((:url . "http://github.com/Malabarba/emacs-google-this") (:keywords "convenience" "hypermedia")) nil])
  (google-translate [cl-struct-package-desc google-translate (20150707 1634) "Emacs interface to Google Translate." nil tar "melpa" nil nil nil])
  (goto-chg [cl-struct-package-desc goto-chg (20131228 1459) "goto last change" nil single "melpa" nil ((:keywords "convenience" "matching")) nil])
  (goto-last-change [cl-struct-package-desc goto-last-change (20150109 1023) "Move point through buffer-undo-list positions" nil single "melpa" nil ((:url . "https://github.com/camdez/goto-last-change.el") (:keywords "convenience")) nil])
  (gplusify [cl-struct-package-desc gplusify (20150312 1244) "Add Google Plus markup to a piece of code" nil single "melpa" nil ((:url . "https://github.com/jorgenschaefer/gplusify")) nil])
  (grandshell-theme [cl-struct-package-desc grandshell-theme (20150404 501) "Dark color theme for Emacs > 24 with intensive colors." nil tar "melpa" nil nil nil])
  (graphene [cl-struct-package-desc graphene (20150704 619) "Friendly Emacs defaults" ((dash (2 10 0)) (exec-path-from-shell (1 9)) (ppd-sr-speedbar (0 0 4)) (sr-speedbar (20140505)) (ido-ubiquitous (3 6)) (smex (3 0)) (web-mode (11 2)) (smartparens (1 6 3)) (flycheck (0 23)) (company (0 8 12))) tar "melpa" nil nil nil])
  (graphviz-dot-mode [cl-struct-package-desc graphviz-dot-mode (20150525 1000) "Mode for the dot-language used by graphviz (att)." nil single "melpa" nil ((:url . "http://ppareit.github.com/graphviz-dot-mode/") (:keywords "mode" "dot" "dot-language" "dotlanguage" "graphviz" "graphs" "att")) nil])
  (grapnel [cl-struct-package-desc grapnel (20131001 834) "HTTP request lib with flexible callback dispatch" nil single "melpa" nil ((:url . "http://www.github.com/leathekd/grapnel")) nil])
  (grep-a-lot [cl-struct-package-desc grep-a-lot (20131006 647) "manages multiple search results buffers for grep.el" nil single "melpa" nil ((:url . "https://github.com/ZungBang/emacs-grep-a-lot") (:keywords "tools" "convenience" "search")) nil])
  (grin [cl-struct-package-desc grin (20110805 2358) "run grin and grind (python replacements for grep and find) putting hits in a grep buffer" nil single "melpa" nil ((:url . "http://bitbucket.org/dariusp686/emacs-grin") (:keywords "python" "grin" "grind" "grep" "find")) nil])
  (grizzl [cl-struct-package-desc grizzl (20150711 2230) "Fast fuzzy search index for Emacs." ((cl-lib (0 5)) (emacs (24 3))) single "melpa" nil ((:url . "https://github.com/grizzl/grizzl") (:keywords "convenience" "usability")) nil])
  (groovy-mode [cl-struct-package-desc groovy-mode (20150725 1050) "Major mode for Groovy source files" nil tar "melpa" nil ((:keywords "languages")) nil])
  (gruber-darker-theme [cl-struct-package-desc gruber-darker-theme (20141010 105) "Gruber Darker color theme for Emacs 24." nil single "melpa" nil ((:url . "http://github.com/rexim/gruber-darker-theme")) nil])
  (guide-key [cl-struct-package-desc guide-key (20150107 2235) "Guide the following key bindings automatically and dynamically" ((dash (2 10 0)) (popwin (0 3 0)) (s (1 9 0))) single "melpa" nil ((:url . "https://github.com/kai2nenobu/guide-key") (:keywords "help" "convenience")) nil])
  (guru-mode [cl-struct-package-desc guru-mode (20140905 702) "Become an Emacs guru" nil single "melpa" nil ((:url . "https://github.com/bbatsov/guru-mode") (:keywords "convenience")) nil])
  (hackernews [cl-struct-package-desc hackernews (20150725 856) "Access the hackernews aggregator from Emacs" ((json (1 2))) tar "melpa" nil nil nil])
  (haml-mode [cl-struct-package-desc haml-mode (20150508 2011) "Major mode for editing Haml files" ((ruby-mode (1 0))) single "melpa" nil ((:url . "http://github.com/nex3/haml/tree/master") (:keywords "markup" "language" "html")) nil])
  (handlebars-mode [cl-struct-package-desc handlebars-mode (20150211 949) "A major mode for editing Handlebars files." nil single "melpa" nil nil nil])
  (handlebars-sgml-mode [cl-struct-package-desc handlebars-sgml-mode (20130623 1633) "Add Handlebars contextual indenting support to sgml-mode" nil single "melpa" nil ((:url . "http://github.com/jacott/handlebars-sgml-mode")) nil])
  (hardcore-mode [cl-struct-package-desc hardcore-mode (20111204 2216) "Disable arrow keys + optionally backspace and return" nil single "melpa" nil ((:keywords "marking" "region")) nil])
  (hardhat [cl-struct-package-desc hardhat (20140827 1856) "Protect against clobbering user-writable files" ((ignoramus (0 7 0))) single "melpa" nil ((:url . "http://github.com/rolandwalker/hardhat") (:keywords "convenience")) nil])
  (haskell-mode [cl-struct-package-desc haskell-mode (20150729 316) "A Haskell editing mode" ((cl-lib (0 5))) tar "melpa" nil nil nil])
  (haste [cl-struct-package-desc haste (20141030 1334) "Emacs client for hastebin (http://hastebin.com/about.md)" ((json (1 2))) single "melpa" nil ((:url . "http://github.com/rlister/emacs-haste-client")) nil])
  (haxe-mode [cl-struct-package-desc haxe-mode (20131004 142) "An Emacs major mode for Haxe" nil single "melpa" nil ((:url . "http://people.debian.org/~jps/misc/haxe-mode.el")) nil])
  (header2 [cl-struct-package-desc header2 (20150104 2210) "Support for creation and update of file headers." nil single "melpa" nil ((:url . "http://www.emacswiki.org/header2.el") (:keywords "tools" "docs" "maint" "abbrev" "local")) nil])
  (helm [cl-struct-package-desc helm (20150727 1011) "Helm is an Emacs incremental and narrowing framework" ((emacs (24)) (cl-lib (0 5)) (async (1 3)) (helm-core (1 7 4))) tar "melpa" nil ((:url . "https://emacs-helm.github.io/helm/")) nil])
  (helm-R [cl-struct-package-desc helm-R (20120819 1714) "helm-sources and some utilities for GNU R." ((helm (20120517)) (ess (20120509))) single "melpa" nil ((:url . "https://github.com/myuhe/helm-R.el") (:keywords "convenience")) nil])
  (helm-ack [cl-struct-package-desc helm-ack (20141030 526) "Ack command with helm interface" ((helm (1 0)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-helm-ack")) nil])
  (helm-ag [cl-struct-package-desc helm-ag (20150729 1953) "the silver searcher with helm interface" ((helm (1 5 6)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-helm-ag")) nil])
  (helm-anything [cl-struct-package-desc helm-anything (20141126 231) "Bridge between anything and helm" ((helm (20130406)) (anything (20120101))) single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/helm-anything.el") (:keywords "helm" "anything" "convenience" "search" "tools")) nil])
  (helm-c-moccur [cl-struct-package-desc helm-c-moccur (20150213 1942) "helm source for color-moccur.el" ((helm (20120811)) (color-moccur (2 71))) single "melpa" nil ((:keywords "convenience" "emulation")) nil])
  (helm-c-yasnippet [cl-struct-package-desc helm-c-yasnippet (20140131 226) "helm source for yasnippet.el" ((helm (1 5 8)) (yasnippet (0 8 0)) (cl-lib (0 3))) single "melpa" nil ((:keywords "convenience" "emulation")) nil])
  (helm-cmd-t [cl-struct-package-desc helm-cmd-t (20150213 636) "cmd-t style completion" nil tar "melpa" nil ((:url . "https://github.com/lewang/helm-cmd-t") (:keywords "helm" "project-management" "completion" "convenience" "cmd-t" "textmate")) nil])
  (helm-descbinds [cl-struct-package-desc helm-descbinds (20140122 2158) "Yet Another `describe-bindings' with `helm'." ((helm (1 5))) single "melpa" nil ((:keywords "helm" "help")) nil])
  (helm-dired-recent-dirs [cl-struct-package-desc helm-dired-recent-dirs (20131228 614) "Show recent dirs with helm.el support." ((helm (1 0))) single "melpa" nil ((:keywords "helm" "dired" "zsh")) nil])
  (helm-flymake [cl-struct-package-desc helm-flymake (20130716 2244) "helm interface for flymake" ((helm (1 0))) single "melpa" nil ((:url . "https://github.com/tam17aki")) nil])
  (helm-gist [cl-struct-package-desc helm-gist (20120819 1735) "helm-sources and some utilities for gist." ((helm (20120811)) (gist (1 0 1))) single "melpa" nil ((:keywords "convenience" "emulation")) nil])
  (helm-git [cl-struct-package-desc helm-git (20120630 1403) "Helm extension for Git." nil single "melpa" nil ((:url . "https://github.com/maio/helm-git") (:keywords "helm" "git")) nil])
  (helm-git-grep [cl-struct-package-desc helm-git-grep (20140222 1822) "helm for git grep, an incremental git-grep(1)" ((helm (1 5 9))) single "melpa" nil ((:url . "https://github.com/yasuyk/helm-git-grep") (:keywords "helm" "git")) nil])
  (helm-go-package [cl-struct-package-desc helm-go-package (20150603 604) "helm sources for Go programming language's package" ((helm (1 0)) (go-mode (9)) (deferred (0 3 2))) single "melpa" nil ((:url . "https://github.com/yasuyk/helm-go-package") (:keywords "helm" "go")) nil])
  (helm-gtags [cl-struct-package-desc helm-gtags (20150617 1931) "GNU GLOBAL helm interface" ((helm (1 5 6)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-helm-gtags")) nil])
  (helm-ls-git [cl-struct-package-desc helm-ls-git (20150720 1116) "list git files." ((helm (1 5))) single "melpa" nil nil nil])
  (helm-migemo [cl-struct-package-desc helm-migemo (20150317 422) "Migemo plug-in for helm" ((helm (1 5 3)) (migemo (1 9)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/emacs-helm/helm-migemo") (:keywords "matching" "convenience" "tools" "i18n")) nil])
  (helm-open-github [cl-struct-package-desc helm-open-github (20150615 45) "Utilities of Opening Github Page" ((helm (1 0)) (gh (0 8 2)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-helm-open-github")) nil])
  (helm-orgcard [cl-struct-package-desc helm-orgcard (20130608 430) "browse the orgcard by helm" ((helm (1 5 2))) single "melpa" nil ((:url . "https://github.com/emacs-helm/helm-orgcard") (:keywords "convenience" "helm" "org")) nil])
  (helm-project-persist [cl-struct-package-desc helm-project-persist (20150612 910) "Helm integration for project-persist package" ((helm (1 5 2)) (project-persist (0 1 4))) single "melpa" nil ((:keywords "project-persist" "project" "helm")) nil])
  (helm-projectile [cl-struct-package-desc helm-projectile (20150731 926) "Helm integration for Projectile" ((helm (1 4 0)) (projectile (0 12 0)) (dash (1 5 0)) (cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/bbatsov/projectile") (:keywords "project" "convenience")) nil])
  (helm-rails [cl-struct-package-desc helm-rails (20130424 819) "Helm extension for Rails projects." ((helm (1 5 1)) (inflections (1 1))) single "melpa" nil ((:url . "https://github.com/asok/helm-rails") (:keywords "helm" "rails" "git")) nil])
  (helm-rubygems-local [cl-struct-package-desc helm-rubygems-local (20130711 1811) "Installed local rubygems find-file for helm" ((helm (1 5 3))) single "melpa" nil ((:url . "https://github.com/f-kubotar/helm-rubygems-local")) nil])
  (helm-sheet [cl-struct-package-desc helm-sheet (20130630 539) "helm sources for sheet" ((helm (1 0))) single "melpa" nil ((:url . "https://github.com/yasuyk/helm-sheet") (:keywords "helm" "sheet")) nil])
  (helm-spaces [cl-struct-package-desc helm-spaces (20130605 900) "helm sources for spaces" ((helm (1 0)) (spaces (0 1 0))) single "melpa" nil ((:url . "https://github.com/yasuyk/helm-spaces") (:keywords "helm" "frames" "convenience")) nil])
  (helm-themes [cl-struct-package-desc helm-themes (20141117 740) "Color theme selection with helm interface" ((helm (1 0))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-helm-themes")) nil])
  (hemisu-theme [cl-struct-package-desc hemisu-theme (20130508 1144) "Hemisu for Emacs." nil tar "melpa" nil ((:url . "http://github/anrzejsliwa/django-theme")) nil])
  (heroku [cl-struct-package-desc heroku (20120629 1113) "Interface to Heroku apps." nil single "melpa" nil ((:url . "https://github.com/technomancy/heroku.el") (:keywords "convenience" "api" "database")) nil])
  (hexrgb [cl-struct-package-desc hexrgb (20150709 136) "Functions to manipulate colors, including RGB hex strings." nil single "melpa" nil ((:url . "http://www.emacswiki.org/hexrgb.el") (:keywords "number" "hex" "rgb" "color" "background" "frames" "display")) nil])
  (hi2 [cl-struct-package-desc hi2 (20141005 1231) "indentation module for Haskell Mode" nil single "melpa" nil ((:url . "https://github.com/errge/hi2") (:keywords "indentation" "haskell")) nil])
  (hide-comnt [cl-struct-package-desc hide-comnt (20150729 2026) "Hide/show comments in code." nil single "melpa" nil ((:url . "http://www.emacswiki.org/hide-comnt.el") (:keywords "comment" "hide" "show")) nil])
  (hide-lines [cl-struct-package-desc hide-lines (20130824 1207) "Commands for hiding lines based on a regexp" nil single "melpa" nil ((:url . "https://github.com/vapniks/hide-lines") (:keywords "convenience")) nil])
  (highlight [cl-struct-package-desc highlight (20150731 1443) "Highlighting commands." nil single "melpa" nil ((:url . "http://www.emacswiki.org/highlight.el") (:keywords "faces" "help" "local")) nil])
  (highlight-cl [cl-struct-package-desc highlight-cl (20091012 1730) "Highlighting `cl' functions." nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/highlight-cl.el") (:keywords "faces")) nil])
  (highlight-escape-sequences [cl-struct-package-desc highlight-escape-sequences (20150729 1910) "Highlight escape sequences" nil single "melpa" nil ((:url . "https://github.com/dgutov/highlight-escape-sequences") (:keywords "convenience")) nil])
  (highlight-indentation [cl-struct-package-desc highlight-indentation (20150307 208) "Minor modes for highlighting indentation" nil single "melpa" nil ((:url . "https://github.com/antonj/Highlight-Indentation-for-Emacs")) nil])
  (highlight-parentheses [cl-struct-package-desc highlight-parentheses (20150421 2328) "highlight surrounding parentheses" nil single "melpa" nil ((:url . "https://github.com/tsdh/highlight-parentheses.el") (:keywords "faces" "matching")) nil])
  (highlight-symbol [cl-struct-package-desc highlight-symbol (20150617 1500) "automatic and manual symbol highlighting" nil single "melpa" nil ((:url . "http://nschum.de/src/emacs/highlight-symbol/") (:keywords "faces" "matching")) nil])
  (hippie-exp-ext [cl-struct-package-desc hippie-exp-ext (20130824 1207) "Extension of hippie-expand" nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/hippie-exp-ext.el") (:keywords "abbrev" "convenience" "completions" "hippie-expand")) nil])
  (hippie-expand-slime [cl-struct-package-desc hippie-expand-slime (20130907 132) "Hook slime's completion into hippie-expand" nil single "melpa" nil ((:url . "https://github.com/purcell/hippie-expand-slime")) nil])
  (hippie-namespace [cl-struct-package-desc hippie-namespace (20140508 1341) "Special treatment for namespace prefixes in hippie-expand" nil single "melpa" nil ((:url . "http://github.com/rolandwalker/hippie-namespace") (:keywords "convenience" "lisp" "tools" "completion")) nil])
  (hive [cl-struct-package-desc hive (20131217 712) "Hive SQL mode extension" ((sql (3 0))) single "melpa" nil ((:keywords "sql" "hive")) nil])
  (hl-line+ [cl-struct-package-desc hl-line+ (20150104 2222) "Extensions to hl-line.el." nil single "melpa" nil ((:url . "http://www.emacswiki.org/hl-line+.el") (:keywords "highlight" "cursor" "accessibility")) nil])
  (hl-sentence [cl-struct-package-desc hl-sentence (20140802 920) "highlight a sentence based on customizable face" nil single "melpa" nil ((:url . "http://github.com/milkypostman/hl-sentence") (:keywords "highlighting")) nil])
  (hl-sexp [cl-struct-package-desc hl-sexp (20101130 443) "highlight the current sexp" nil single "melpa" nil ((:keywords "faces" "frames" "emulation")) nil])
  (hl-todo [cl-struct-package-desc hl-todo (20150731 811) "highlight TODO keywords" nil single "melpa" nil ((:url . "http://github.com/tarsius/hl-todo") (:keywords "convenience")) nil])
  (hlinum [cl-struct-package-desc hlinum (20150621 1933) "Extension for linum.el to highlight current line number" ((cl-lib (0 2))) single "melpa" nil ((:url . "https://github.com/tom-tan/hlinum-mode/") (:keywords "convenience" "extensions")) nil])
  (ht [cl-struct-package-desc ht (20140122 1555) "The missing hash table library for Emacs" nil single "melpa" nil ((:keywords "hash table" "hash map" "hash")) nil])
  (html-script-src [cl-struct-package-desc html-script-src (20120403 1115) "Insert <script src=\"..\"> for popular JavaScript libraries" nil single "melpa" nil ((:url . "http://github.com/rejeep/html-script-src") (:keywords "tools" "convenience")) nil])
  (htmlize [cl-struct-package-desc htmlize (20130207 1202) "Convert buffer text and decorations to HTML." nil single "melpa" nil ((:keywords "hypermedia" "extensions")) nil])
  (http-post-simple [cl-struct-package-desc http-post-simple (20131011 358) "HTTP POST requests using the url library" nil single "melpa" nil ((:keywords "comm" "data" "processes" "hypermedia")) nil])
  (http-twiddle [cl-struct-package-desc http-twiddle (20121117 812) "send & twiddle & resend HTTP requests" nil single "melpa" nil ((:url . "https://github.com/hassy/http-twiddle/blob/master/http-twiddle.el") (:keywords "http" "rest" "soap")) nil])
  (httpcode [cl-struct-package-desc httpcode (20121001 2045) "explains the meaning of an HTTP status code" nil single "melpa" nil ((:url . "http://github.com/rspivak/httpcode.el")) nil])
  (hungry-delete [cl-struct-package-desc hungry-delete (20141207 2125) "hungry delete minor mode" nil single "melpa" nil ((:url . "http://github.com/nflath/hungry-delete")) nil])
  (hy-mode [cl-struct-package-desc hy-mode (20150102 1857) "Major mode for Hy code" nil single "melpa" nil ((:url . "http://github.com/hylang/hy-mode") (:keywords "languages" "lisp")) nil])
  (ibuffer-vc [cl-struct-package-desc ibuffer-vc (20150714 1320) "Group ibuffer's list by VC project, or show VC status" ((cl-lib (0 2))) single "melpa" nil ((:url . "http://github.com/purcell/ibuffer-vc") (:keywords "themes")) nil])
  (icicles [cl-struct-package-desc icicles (20150729 1905) "Minibuffer input completion and cycling." nil tar "melpa" nil ((:url . "http://www.emacswiki.org/icicles.el") (:keywords "extensions" "help" "abbrev" "local" "minibuffer" "projects" "keys" "apropos" "completion" "matching" "regexp" "command")) nil])
  (icomplete+ [cl-struct-package-desc icomplete+ (20150619 1503) "Extensions to `icomplete.el'." nil single "melpa" nil ((:url . "http://www.emacswiki.org/icomplete+.el") (:keywords "help" "abbrev" "internal" "extensions" "local" "completion" "matching")) nil])
  (identica-mode [cl-struct-package-desc identica-mode (20130204 1453) "Major mode API client for status.net open microblogging" nil tar "melpa" nil ((:url . "http://blog.gabrielsaldana.org/identica-mode-for-emacs/") (:keywords "identica" "web")) nil])
  (idle-highlight-mode [cl-struct-package-desc idle-highlight-mode (20120920 948) "highlight the word the point is on" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/IdleHighlight") (:keywords "convenience")) nil])
  (idle-require [cl-struct-package-desc idle-require (20090715 1503) "load elisp libraries while Emacs is idle" nil single "melpa" nil ((:url . "http://nschum.de/src/emacs/idle-require/") (:keywords "internal")) nil])
  (ido-complete-space-or-hyphen [cl-struct-package-desc ido-complete-space-or-hyphen (20130228 208) "Complete SPACE or HYPHEN when type SPACE in ido" nil single "melpa" nil ((:url . "https://github.com/doitian/ido-complete-space-or-hyphen") (:keywords "ido" "completion")) nil])
  (ido-gnus [cl-struct-package-desc ido-gnus (20140216 846) "Access gnus groups or servers using ido" ((gnus (5 13))) single "melpa" nil ((:url . "https://github.com/vapniks/ido-gnus") (:keywords "comm")) nil])
  (ido-hacks [cl-struct-package-desc ido-hacks (20150331 1209) "Put more IDO in your IDO" nil single "melpa" nil ((:keywords "convenience")) nil])
  (ido-load-library [cl-struct-package-desc ido-load-library (20140611 900) "Load-library alternative using ido-completing-read" ((persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa" nil ((:url . "http://github.com/rolandwalker/ido-load-library") (:keywords "maint" "completion")) nil])
  (ido-sort-mtime [cl-struct-package-desc ido-sort-mtime (20131117 530) "Sort Ido's file list by modification time" nil single "melpa" nil ((:keywords "convenience" "files")) nil])
  (ido-ubiquitous [cl-struct-package-desc ido-ubiquitous (20150630 926) "Use ido (nearly) everywhere." ((emacs (24 1)) (ido-completing-read+ (3 0))) single "melpa" nil ((:url . "https://github.com/DarwinAwardWinner/ido-ubiquitous") (:keywords "convenience" "completion" "ido")) nil])
  (ido-vertical-mode [cl-struct-package-desc ido-vertical-mode (20150724 2337) "Makes ido-mode display vertically." nil single "melpa" nil ((:url . "https://github.com/creichert/ido-vertical-mode.el") (:keywords "convenience")) nil])
  (idomenu [cl-struct-package-desc idomenu (20141123 1320) "imenu tag selection a la ido" nil single "melpa" nil nil nil])
  (iedit [cl-struct-package-desc iedit (20150415 1804) "Edit multiple regions in the same way simultaneously." nil tar "melpa" nil ((:url . "http://www.emacswiki.org/emacs/Iedit") (:keywords "occurrence" "region" "simultaneous" "refactoring")) nil])
  (iflipb [cl-struct-package-desc iflipb (20130331 1108) "interactively flip between recently visited buffers" nil single "melpa" nil ((:url . "http://hg.rosdahl.net/iflipb")) nil])
  (ignoramus [cl-struct-package-desc ignoramus (20150216 1342) "Ignore backups, build files, et al." nil single "melpa" nil ((:url . "http://github.com/rolandwalker/ignoramus") (:keywords "convenience" "tools")) nil])
  (igrep [cl-struct-package-desc igrep (20130824 1207) "An improved interface to `grep` and `find`" nil single "melpa" nil ((:keywords "tools" "processes" "search")) nil])
  (image+ [cl-struct-package-desc image+ (20150707 916) "Image manipulate extensions for Emacs" ((cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/mhayashi1120/Emacs-imagex") (:keywords "multimedia" "extensions")) nil])
  (image-dired+ [cl-struct-package-desc image-dired+ (20150429 2244) "Image-dired extensions" ((cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/mhayashi1120/Emacs-image-diredx") (:keywords "extensions" "multimedia")) nil])
  (imenu-anywhere [cl-struct-package-desc imenu-anywhere (20150523 537) "ido/helm imenu tag selection across all buffers with the same mode" ((cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/vitoshka/imenu-anywhere") (:keywords "ido" "imenu" "tags")) nil])
  (impatient-mode [cl-struct-package-desc impatient-mode (20150501 247) "Serve buffers live over HTTP" ((cl-lib (0 3)) (simple-httpd (1 4 0)) (htmlize (1 40))) tar "melpa" nil ((:url . "https://github.com/netguy204/imp.el")) nil])
  (import-popwin [cl-struct-package-desc import-popwin (20150716 233) "popwin buffer near by import statements with popwin" ((popwin (0 6)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-import-popwin")) nil])
  (indent-guide [cl-struct-package-desc indent-guide (20150713 2327) "show vertical lines to guide indentation" nil single "melpa" nil ((:url . "http://hins11.yu-yake.com/")) nil])
  (inf-mongo [cl-struct-package-desc inf-mongo (20131216 228) "Run a MongoDB shell process in a buffer" nil single "melpa" nil ((:url . "http://github.com/tobiassvn/inf-mongo") (:keywords "databases" "mongodb")) nil])
  (inf-php [cl-struct-package-desc inf-php (20130414 21) "Run a php interactive shell in a buffer" ((php-mode (1 5 0))) single "melpa" nil ((:url . "https://github.com/taksatou/inf-php") (:keywords "languages" "php")) nil])
  (inf-ruby [cl-struct-package-desc inf-ruby (20150728 1635) "Run a Ruby process in a buffer" nil single "melpa" nil ((:url . "http://github.com/nonsequitur/inf-ruby") (:keywords "languages" "ruby")) nil])
  (inflections [cl-struct-package-desc inflections (20121016 157) "convert english words between singular and plural" nil single "melpa" nil ((:url . "https://github.com/eschulte/jump.el") (:keywords "ruby" "rails" "languages" "oop")) nil])
  (info+ [cl-struct-package-desc info+ (20150520 1807) "Extensions to `info.el'." nil single "melpa" nil ((:url . "http://www.emacswiki.org/info+.el") (:keywords "help" "docs" "internal")) nil])
  (init-loader [cl-struct-package-desc init-loader (20141030 2333) "Loader for configuration files" nil single "melpa" nil ((:url . "https://github.com/emacs-jp/init-loader/")) nil])
  (initsplit [cl-struct-package-desc initsplit (20141219 1629) "code to split customizations into different files" nil single "melpa" nil ((:url . "http://www.gci-net.com/users/j/johnw/emacs.html") (:keywords "lisp")) nil])
  (inkpot-theme [cl-struct-package-desc inkpot-theme (20120505 708) "port of vim's inkpot theme" nil single "melpa" nil ((:url . "http://github.com/siovan/emacs24-inkpot.git")) nil])
  (inline-crypt [cl-struct-package-desc inline-crypt (20130409 507) "Simple inline encryption via openssl" nil tar "melpa" nil nil nil])
  (inlineR [cl-struct-package-desc inlineR (20120520 732) "insert Tag for inline image of R graphics" nil single "melpa" nil ((:url . "https://github.com/myuhe/inlineR.el") (:keywords "convenience" "iimage.el" "cacoo.el")) nil])
  (instapaper [cl-struct-package-desc instapaper (20130104 621) "add URLs to instapaper from emacs" nil single "melpa" nil ((:url . "htts://bitbucket.org/jfm/emacs-instapaper")) nil])
  (interaction-log [cl-struct-package-desc interaction-log (20150603 1010) "exhaustive log of interactions with Emacs" ((cl-lib (0))) single "melpa" nil ((:url . "https://github.com/michael-heerdegen/interaction-log.el") (:keywords "convenience")) nil])
  (interval-tree [cl-struct-package-desc interval-tree (20130325 707) "Interval tree data structure for 1D range queries" ((dash (1 1 0))) single "melpa" nil ((:url . "https://github.com/Fuco1/interval-tree") (:keywords "extensions" "data structure")) nil])
  (iplayer [cl-struct-package-desc iplayer (20150101 255) "Browse and download BBC TV/radio shows" nil single "melpa" nil ((:url . "https://github.com/csrhodes/iplayer-el") (:keywords "multimedia" "bbc")) nil])
  (ir-black-theme [cl-struct-package-desc ir-black-theme (20130302 2355) "Port of ir-black theme" nil single "melpa" nil ((:keywords "faces")) nil])
  (irfc [cl-struct-package-desc irfc (20130824 1207) "Interface for IETF RFC document." nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/irfc.el") (:keywords "rfc" "ietf")) nil])
  (isearch+ [cl-struct-package-desc isearch+ (20150728 1516) "Extensions to `isearch.el' (incremental search)." nil single "melpa" nil ((:url . "http://www.emacswiki.org/isearch+.el") (:keywords "help" "matching" "internal" "local")) nil])
  (isearch-symbol-at-point [cl-struct-package-desc isearch-symbol-at-point (20130728 1521) "Use isearch to search for the symbol at point" nil single "melpa" nil ((:url . "https://github.com/re5et/isearch-symbol-at-point") (:keywords "isearch")) nil])
  (isend-mode [cl-struct-package-desc isend-mode (20130419 258) "Interactively send parts of an Emacs buffer to an interpreter" nil single "melpa" nil ((:url . "https://github.com/ffevotte/isend-mode.el")) nil])
  (itail [cl-struct-package-desc itail (20150301 2247) "An interactive tail mode" nil single "melpa" nil ((:url . "https://github.com/re5et/itail") (:keywords "tail")) nil])
  (iy-go-to-char [cl-struct-package-desc iy-go-to-char (20141029 1549) "Go to next CHAR which is similar to \"f\" and \"t\" in vim" nil single "melpa" nil ((:url . "https://github.com/doitian/iy-go-to-char") (:keywords "navigation" "search")) nil])
  (j-mode [cl-struct-package-desc j-mode (20140702 809) "Major mode for editing J programs" nil tar "melpa" nil ((:url . "http://github.com/zellio/j-mode") (:keywords "j" "langauges")) nil])
  (jade-mode [cl-struct-package-desc jade-mode (20150402 2053) "Major mode for editing .jade files" nil single "melpa" nil ((:url . "https://github.com/brianc/jade-mode")) nil])
  (japanlaw [cl-struct-package-desc japanlaw (20150621 2141) "Japan law from law.e-gov.go.jp" nil single "melpa" nil ((:keywords "docs" "help")) nil])
  (jaunte [cl-struct-package-desc jaunte (20130413 219) "Emacs Hit a Hint" nil single "melpa" nil nil nil])
  (javadoc-lookup [cl-struct-package-desc javadoc-lookup (20150425 1003) "Javadoc Emacs integration with Maven" ((cl-lib (0 3))) tar "melpa" nil ((:url . "https://github.com/skeeto/javadoc-lookup")) nil])
  (javap-mode [cl-struct-package-desc javap-mode (20120223 1408) "Javap major mode" nil single "melpa" nil ((:url . "http://github.com/hiredman/javap-mode")) nil])
  (jedi [cl-struct-package-desc jedi (20150623 2335) "a Python auto-completion for Emacs" ((emacs (24)) (jedi-core (0 2 2)) (auto-complete (1 4))) single "melpa" nil nil nil])
  (jenkins-watch [cl-struct-package-desc jenkins-watch (20121004 1626) "Watch continuous integration build status" nil single "melpa" nil ((:url . "https://github.com/ataylor284/jenkins-watch")) nil])
  (jinja2-mode [cl-struct-package-desc jinja2-mode (20141128 207) "A major mode for jinja2" nil single "melpa" nil nil nil])
  (jira [cl-struct-package-desc jira (20131210 1822) "Connect to JIRA issue tracking software" nil single "melpa" nil nil nil])
  (jknav [cl-struct-package-desc jknav (20121006 1325) "Automatically enable j/k keys for line-based navigation" nil single "melpa" nil ((:keywords "keyboard" "navigation")) nil])
  (js-comint [cl-struct-package-desc js-comint (20080530 757) "Run javascript in an inferior process window." nil single "melpa" nil ((:keywords "javascript" "inferior-mode" "convenience")) nil])
  (js2-mode [cl-struct-package-desc js2-mode (20150726 1330) "Improved JavaScript editing mode" ((emacs (24 1)) (cl-lib (0 5))) tar "melpa" nil ((:url . "https://github.com/mooz/js2-mode/") (:keywords "languages" "javascript")) nil])
  (js2-refactor [cl-struct-package-desc js2-refactor (20150621 1035) "A JavaScript refactoring library for emacs." ((js2-mode (20101228)) (s (1 9 0)) (multiple-cursors (1 0 0)) (dash (1 0 0)) (s (1 0 0)) (yasnippet (20130218))) tar "melpa" nil nil nil])
  (js3-mode [cl-struct-package-desc js3-mode (20140805 1529) "An improved JavaScript editing mode" nil tar "melpa" nil ((:keywords "javascript" "languages")) nil])
  (jss [cl-struct-package-desc jss (20130508 723) "An emacs interface to webkit and mozilla debuggers" ((emacs (24 1)) (websocket (0)) (js2-mode (0))) tar "melpa" nil ((:keywords "languages")) nil])
  (jtags [cl-struct-package-desc jtags (20111208 1022) "enhanced tags functionality for Java development" nil tar "melpa" nil ((:url . "http://jtags.sourceforge.net") (:keywords "languages" "tools")) nil])
  (jump [cl-struct-package-desc jump (20130702 33) "build functions which contextually jump between files" ((findr (0 7)) (inflections (1 1))) single "melpa" nil ((:url . "http://github.com/eschulte/jump.el/tree/master") (:keywords "project" "convenience" "navigation")) nil])
  (jump-char [cl-struct-package-desc jump-char (20150108 1235) "navigation by char" nil single "melpa" nil ((:url . "https://github.com/lewang/jump-char")) nil])
  (jump-to-line [cl-struct-package-desc jump-to-line (20130122 853) "Jump to line number at point." nil single "melpa" nil ((:keywords "jump" "line" "back" "file" "ruby" "csharp" "python" "perl")) nil])
  (kanban [cl-struct-package-desc kanban (20130815 48) "Parse org-todo headlines to use org-tables as Kanban tables" nil single "melpa" nil ((:keywords "outlines" "convenience")) nil])
  (key-chord [cl-struct-package-desc key-chord (20140929 2246) "map pairs of simultaneously pressed keys to commands" nil single "melpa" nil ((:keywords "keyboard" "chord" "input")) nil])
  (key-combo [cl-struct-package-desc key-combo (20150324 739) "map key sequence to commands" nil single "melpa" nil ((:url . "https://github.com/uk-ar/key-combo") (:keywords "keyboard" "input")) nil])
  (keychain-environment [cl-struct-package-desc keychain-environment (20150416 1258) "load keychain environment variables" nil single "melpa" nil ((:url . "https://github.com/tarsius/keychain-environment") (:keywords "gnupg" "pgp" "ssh")) nil])
  (keydef [cl-struct-package-desc keydef (20090428 1231) "a simpler way to define keys, with kbd syntax" nil single "melpa" nil ((:keywords "convenience" "lisp" "customization" "keyboard" "keys")) nil])
  (keyfreq [cl-struct-package-desc keyfreq (20141124 805) "track command frequencies" nil single "melpa" nil nil nil])
  (keymap-utils [cl-struct-package-desc keymap-utils (20150531 1541) "keymap utilities" ((cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/tarsius/keymap-utils") (:keywords "convenience" "extensions")) nil])
  (kill-ring-search [cl-struct-package-desc kill-ring-search (20140422 855) "incremental search for the kill ring" nil single "melpa" nil ((:url . "http://nschum.de/src/emacs/kill-ring-search/") (:keywords "convenience" "matching")) nil])
  (killer [cl-struct-package-desc killer (20120808 422) "kill and delete text" nil single "melpa" nil ((:url . "http://github.com/tarsius/killer") (:keywords "convenience")) nil])
  (kite [cl-struct-package-desc kite (20130201 1138) "WebKit inspector front-end" ((json (1 2)) (websocket (0 93 1))) tar "melpa" nil ((:keywords "tools")) nil])
  (kivy-mode [cl-struct-package-desc kivy-mode (20140524 557) "Emacs major mode for editing Kivy files" nil single "melpa" nil nil nil])
  (kv [cl-struct-package-desc kv (20140108 734) "key/value data structure functions" nil single "melpa" nil ((:keywords "lisp")) nil])
  (kwin [cl-struct-package-desc kwin (20150308 1112) "communicatewith the KWin window manager" nil single "melpa" nil ((:url . "http://github.com/reactormonk/kwin-minor-mode")) nil])
  (lacarte [cl-struct-package-desc lacarte (20150104 2350) "Execute menu items as commands, with completion." nil single "melpa" nil ((:url . "http://www.emacswiki.org/lacarte.el") (:keywords "menu-bar" "menu" "command" "help" "abbrev" "minibuffer" "keys" "completion" "matching" "local" "internal" "extensions")) nil])
  (lang-refactor-perl [cl-struct-package-desc lang-refactor-perl (20131122 1327) "Simple refactorings, primarily for Perl" nil single "melpa" nil ((:url . "https://github.com/jplindstrom/emacs-lang-refactor-perl") (:keywords "languages" "refactoring" "perl")) nil])
  (langdoc [cl-struct-package-desc langdoc (20150217 2245) "Help to define help document mode for various languages" ((cl-lib (0 2))) single "melpa" nil ((:url . "https://github.com/tom-tan/langdoc/") (:keywords "convenience" "eldoc")) nil])
  (latex-pretty-symbols [cl-struct-package-desc latex-pretty-symbols (20150409 240) "Display many latex symbols as their unicode counterparts" nil single "melpa" nil ((:url . "https://bitbucket.org/mortiferus/latex-pretty-symbols.el") (:keywords "convenience" "display")) nil])
  (launch [cl-struct-package-desc launch (20130619 1504) "launch files with OS-standard associated applications." nil single "melpa" nil ((:url . "https://github.com/sfllaw/emacs-launch") (:keywords "convenience" "processes")) nil])
  (legalese [cl-struct-package-desc legalese (20100119 2148) "Add legalese to your program files" nil single "melpa" nil ((:keywords "convenience")) nil])
  (lemon-mode [cl-struct-package-desc lemon-mode (20130216 504) "A major mode for editing lemon grammar files" nil single "melpa" nil ((:keywords "lemon")) nil])
  (less-css-mode [cl-struct-package-desc less-css-mode (20150511 319) "Major mode for editing LESS CSS files (lesscss.org)" nil single "melpa" nil ((:url . "https://github.com/purcell/less-css-mode") (:keywords "less" "css" "mode")) nil])
  (letcheck [cl-struct-package-desc letcheck (20150726 912) "Check the erroneous assignments in let forms" nil single "melpa" nil ((:url . "https://github.com/Fuco1/letcheck") (:keywords "convenience")) nil])
  (leuven-theme [cl-struct-package-desc leuven-theme (20150622 306) "Awesome Emacs color theme on white background" nil single "melpa" nil ((:url . "https://github.com/fniessen/emacs-leuven-theme") (:keywords "color" "theme")) nil])
  (levenshtein [cl-struct-package-desc levenshtein (20051013 1756) "Edit distance between two strings." nil single "melpa" nil ((:keywords "lisp")) nil])
  (lexbind-mode [cl-struct-package-desc lexbind-mode (20141027 729) "Puts the value of lexical-binding in the mode line" nil single "melpa" nil ((:url . "https://github.com/spacebat/lexbind-mode") (:keywords "convenience" "lisp")) nil])
  (lib-requires [cl-struct-package-desc lib-requires (20150104 2351) "Commands to list Emacs Lisp library dependencies." nil single "melpa" nil ((:url . "http://www.emacswiki.org/lib-requires.el") (:keywords "libraries" "files")) nil])
  (linphone [cl-struct-package-desc linphone (20130524 409) "Emacs interface to Linphone" nil tar "melpa" nil ((:url . "https://github.com/zabbal/emacs-linphone") (:keywords "comm")) nil])
  (linum-relative [cl-struct-package-desc linum-relative (20150730 212) "display relative line number in emacs." nil single "melpa" nil ((:url . "http://github.com/coldnew/linum-relative") (:keywords "converience")) nil])
  (lispxmp [cl-struct-package-desc lispxmp (20130824 1207) "Automagic emacs lisp code annotation" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/lispxmp.el") (:keywords "lisp" "convenience")) nil])
  (lispyscript-mode [cl-struct-package-desc lispyscript-mode (20130828 719) "Major mode for LispyScript code." nil single "melpa" nil ((:url . "https://github.com/krisajenkins/lispyscript-mode") (:keywords "lisp" "languages")) nil])
  (list-utils [cl-struct-package-desc list-utils (20140508 1341) "List-manipulation utility functions" nil single "melpa" nil ((:url . "http://github.com/rolandwalker/list-utils") (:keywords "extensions")) nil])
  (litable [cl-struct-package-desc litable (20140306 236) "dynamic evaluation replacement with emacs" ((dash (2 6 0))) single "melpa" nil ((:keywords "lisp")) nil])
  (lively [cl-struct-package-desc lively (20120728 1413) "Interactively updating text" nil single "melpa" nil nil nil])
  (livescript-mode [cl-struct-package-desc livescript-mode (20140612 2121) "Major mode for editing LiveScript files" nil single "melpa" nil ((:url . "https://github.com/yhisamatsu/livescript-mode") (:keywords "languages" "livescript")) nil])
  (load-relative [cl-struct-package-desc load-relative (20150224 1722) "relative file load (within a multi-file Emacs package)" nil single "melpa" nil ((:url . "http://github.com/rocky/emacs-load-relative") (:keywords "internal")) nil])
  (load-theme-buffer-local [cl-struct-package-desc load-theme-buffer-local (20120702 1336) "Install emacs24 color themes by buffer." nil single "melpa" nil ((:url . "http://github.com/vic/color-theme-buffer-local") (:keywords "faces")) nil])
  (loc-changes [cl-struct-package-desc loc-changes (20150302 848) "keep track of positions even after buffer changes" nil single "melpa" nil ((:url . "http://github.com/rocky/emacs-loc-changes")) nil])
  (loccur [cl-struct-package-desc loccur (20150611 1037) "Performs an occur-like folding in current buffer." nil single "melpa" nil ((:url . "https://github.com/fourier/loccur") (:keywords "matching")) nil])
  (log4e [cl-struct-package-desc log4e (20150105 505) "provide logging framework for elisp" nil single "melpa" nil ((:url . "https://github.com/aki2o/log4e") (:keywords "log")) nil])
  (log4j-mode [cl-struct-package-desc log4j-mode (20101016 822) "major mode for viewing log files" nil single "melpa" nil ((:keywords "log" "log4j" "java")) nil])
  (logalimacs [cl-struct-package-desc logalimacs (20131021 1129) "Front-end to logaling-command for Ruby gems" ((popwin (0 6 2)) (popup (0 5 0)) (stem (20130120))) single "melpa" nil ((:url . "https://github.com/logaling/logalimacs") (:keywords "translation" "logaling-command")) nil])
  (logito [cl-struct-package-desc logito (20120225 1255) "logging library for Emacs" ((eieio (1 3))) single "melpa" nil ((:keywords "lisp" "tool")) nil])
  (lolcode-mode [cl-struct-package-desc lolcode-mode (20111002 147) "Major mode for editing LOLCODE" nil single "melpa" nil ((:url . "http://github.com/bodil/lolcode-mode") (:keywords "lolcode" "major" "mode")) nil])
  (look-dired [cl-struct-package-desc look-dired (20130511 1624) "Extensions to look-mode for dired buffers" ((look-mode (1 0))) single "melpa" nil ((:url . "https://github.com/vapniks/look-dired") (:keywords "convenience")) nil])
  (look-mode [cl-struct-package-desc look-mode (20130824 1206) "quick file viewer for image and text file browsing" nil single "melpa" nil nil nil])
  (loop [cl-struct-package-desc loop (20130309 805) "friendly imperative loop structures" nil single "melpa" nil ((:keywords "loop" "while" "for each" "break" "continue")) nil])
  (lorem-ipsum [cl-struct-package-desc lorem-ipsum (20140911 1408) "Insert dummy pseudo Latin text." nil single "melpa" nil ((:keywords "tools" "language" "convenience")) nil])
  (love-minor-mode [cl-struct-package-desc love-minor-mode (20130429 1459) "Minor mode for working on LÖVE projects" ((lua-mode (20130419))) single "melpa" nil ((:url . "https://github.com/ejmr/love-minor-mode")) nil])
  (lua-mode [cl-struct-package-desc lua-mode (20150518 942) "a major-mode for editing Lua scripts" nil single "melpa" nil ((:url . "http://immerrr.github.com/lua-mode") (:keywords "languages" "processes" "tools")) nil])
  (lusty-explorer [cl-struct-package-desc lusty-explorer (20150508 1557) "Dynamic filesystem explorer and buffer switcher" nil single "melpa" nil ((:keywords "convenience" "files" "matching")) nil])
  (macro-math [cl-struct-package-desc macro-math (20130328 904) "in-buffer mathematical operations" nil single "melpa" nil ((:url . "http://nschum.de/src/emacs/macro-math/") (:keywords "convenience")) nil])
  (macrostep [cl-struct-package-desc macrostep (20150416 1831) "interactive macro stepper for Emacs Lisp" nil single "melpa" nil ((:url . "https://github.com/joddie/macrostep") (:keywords "lisp" "languages" "macro" "debugging")) nil])
  (mag-menu [cl-struct-package-desc mag-menu (20150505 1150) "Intuitive keyboard-centric menu system" ((splitter (0 1 0))) single "melpa" nil ((:url . "https://github.com/chumpage/mag-menu") (:keywords "convenience")) nil])
  (magit [cl-struct-package-desc magit (20150731 828) "A Git porcelain inside Emacs" ((emacs (24 4)) (dash (2 10 0)) (with-editor (2 1 0)) (git-commit (2 1 0)) (magit-popup (2 1 0))) tar "melpa" nil ((:url . "https://github.com/magit/magit") (:keywords "git" "tools" "vc")) nil])
  (magit-filenotify [cl-struct-package-desc magit-filenotify (20150125 1456) "Refresh status buffer when git tree changes" ((magit (1 3 0)) (emacs (24 4))) single "melpa" nil ((:keywords "tools")) nil])
  (magit-gh-pulls [cl-struct-package-desc magit-gh-pulls (20150723 1144) "GitHub pull requests extension for Magit" ((emacs (24)) (gh (0 9 1)) (magit (2 1 0)) (pcache (0 2 3)) (s (1 6 1))) single "melpa" nil ((:url . "https://github.com/sigma/magit-gh-pulls") (:keywords "git" "tools")) nil])
  (main-line [cl-struct-package-desc main-line (20130404 1904) "modeline replacement forked from an early version of powerline.el" nil single "melpa" nil ((:url . "https://github.com/jasonm23/emacs-mainline") (:keywords "statusline" "/" "modeline")) nil])
  (mallard-mode [cl-struct-package-desc mallard-mode (20131203 2025) "Major mode for editing Mallard files" nil tar "melpa" nil ((:url . "https://github.com/jhradilek/emacs-mallard-mode") (:keywords "xml" "mallard")) nil])
  (mallard-snippets [cl-struct-package-desc mallard-snippets (20131023 1151) "Yasnippets for Mallard" ((yasnippet (0 8 0)) (mallard-mode (0 1 1))) tar "melpa" nil ((:url . "https://github.com/jhradilek/emacs-mallard-snippets") (:keywords "snippets" "mallard")) nil])
  (man-commands [cl-struct-package-desc man-commands (20130627 1653) "Add interactive commands for every manpages installed in your computer." nil single "melpa" nil ((:url . "http://github.com/nflath/man-commands")) nil])
  (map-progress [cl-struct-package-desc map-progress (20140310 1432) "mapping macros that report progress" nil single "melpa" nil ((:url . "https://github.com/tarsius/map-progress/") (:keywords "convenience")) nil])
  (map-regexp [cl-struct-package-desc map-regexp (20130522 1403) "map over matches of a regular expression" ((cl-lib (0 2))) single "melpa" nil ((:url . "https://github.com/tarsius/map-regexp") (:keywords "convenience")) nil])
  (mark-multiple [cl-struct-package-desc mark-multiple (20121118 754) "Sorta lets you mark several regions at once." nil tar "melpa" nil nil nil])
  (mark-tools [cl-struct-package-desc mark-tools (20130614 325) "Some simple tools to access the mark-ring in Emacs" nil single "melpa" nil ((:url . "https://github.com/stsquad/emacs-mark-tools")) nil])
  (markdown-mode+ [cl-struct-package-desc markdown-mode+ (20120829 510) "extra functions for markdown-mode" ((markdown-mode (20111229))) tar "melpa" nil ((:url . "http://github.com/milkypostman/markdown-mode+.el") (:keywords "markdown" "latex" "osx" "rtf")) nil])
  (markdown-mode [cl-struct-package-desc markdown-mode (20150727 855) "Emacs Major mode for Markdown-formatted text files" nil single "melpa" nil ((:url . "http://jblevins.org/projects/markdown-mode/") (:keywords "markdown" "github flavored markdown" "itex")) nil])
  (markup [cl-struct-package-desc markup (20130207 1309) "Simple markup generation helpers." nil single "melpa" nil ((:url . "http://github.com/leoc/markup.el") (:keywords "convenience" "markup" "html")) nil])
  (markup-faces [cl-struct-package-desc markup-faces (20130117 246) "collection of faces for markup language modes" nil single "melpa" nil ((:url . "https://github.com/sensorflo/markup-faces") (:keywords "wp" "faces")) nil])
  (maude-mode [cl-struct-package-desc maude-mode (20140212 302) "Emacs mode for the programming language Maude" nil single "melpa" nil ((:keywords "maude")) nil])
  (maxframe [cl-struct-package-desc maxframe (20140916 754) "maximize the emacs frame based on display size" nil single "melpa" nil ((:keywords "display" "frame" "window" "maximize")) nil])
  (mediawiki [cl-struct-package-desc mediawiki (20150711 1734) "mediawiki frontend" nil single "melpa" nil ((:url . "http://github.com/hexmode/mediawiki-el") (:keywords "mediawiki" "wikipedia" "network" "wiki")) nil])
  (melpa-upstream-visit [cl-struct-package-desc melpa-upstream-visit (20130720 333) "A set of kludges to visit a melpa-hosted package's homepage" ((s (1 6 0))) single "melpa" nil ((:keywords "convenience")) nil])
  (memoize [cl-struct-package-desc memoize (20130421 1234) "Memoization functions" nil single "melpa" nil ((:url . "https://github.com/skeeto/emacs-memoize")) nil])
  (mentor [cl-struct-package-desc mentor (20140904 1710) "Frontend for the rTorrent bittorrent client" ((xml-rpc (1 6 9))) tar "melpa" nil ((:keywords "bittorrent" "rtorrent")) nil])
  (metaweblog [cl-struct-package-desc metaweblog (20141130 605) "An emacs library to access metaweblog based weblogs" ((xml-rpc (1 6 8))) tar "melpa" nil nil nil])
  (mew [cl-struct-package-desc mew (20150702 2124) "Messaging in the Emacs World" nil tar "melpa" nil nil nil])
  (mic-paren [cl-struct-package-desc mic-paren (20140714 719) "advanced highlighting of matching parentheses" nil single "melpa" nil ((:keywords "languages" "faces" "parenthesis" "matching")) nil])
  (midje-mode [cl-struct-package-desc midje-mode (20150707 1352) "Minor mode for running Midje tests in emacs" ((cider (0 1 4)) (clojure-mode (1 0))) tar "melpa" nil nil nil])
  (migemo [cl-struct-package-desc migemo (20150412 741) "Japanese incremental search through dynamic pattern expansion" ((cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/emacs-jp/migemo")) nil])
  (minimal-session-saver [cl-struct-package-desc minimal-session-saver (20140508 1341) "Very lean session saver" nil single "melpa" nil ((:url . "http://github.com/rolandwalker/minimal-session-saver") (:keywords "tools" "frames" "project")) nil])
  (minimap [cl-struct-package-desc minimap (20150108 1615) "Minimap sidebar for Emacs" nil single "melpa" nil ((:keywords "minimap")) nil])
  (minor-mode-hack [cl-struct-package-desc minor-mode-hack (20141226 2020) "Change priority of minor-mode keymaps" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/minor-mode-hack.el") (:keywords "lisp")) nil])
  (misc-fns [cl-struct-package-desc misc-fns (20150403 1621) "Miscellaneous non-interactive functions." nil single "melpa" nil ((:url . "http://www.emacswiki.org/misc-fns.el") (:keywords "internal" "unix" "lisp" "extensions" "local")) nil])
  (mmm-mako [cl-struct-package-desc mmm-mako (20121019 2351) "MMM submode class for Mako Templates" ((mmm-mode (0 4 8))) single "melpa" nil ((:url . "https://bitbucket.org/pjenvey/mmm-mako")) nil])
  (mmm-mode [cl-struct-package-desc mmm-mode (20150729 2022) "Allow Multiple Major Modes in a buffer" nil tar "melpa" nil ((:url . "https://github.com/purcell/mmm-mode") (:keywords "convenience" "faces" "languages" "tools")) nil])
  (mo-git-blame [cl-struct-package-desc mo-git-blame (20140409 320) "An interactive, iterative 'git blame' mode for Emacs" nil single "melpa" nil ((:keywords "tools")) nil])
  (mo-vi-ment-mode [cl-struct-package-desc mo-vi-ment-mode (20131028 2333) "Provide vi-like cursor movement that's easy on the fingers" nil single "melpa" nil ((:keywords "convenience")) nil])
  (mocker [cl-struct-package-desc mocker (20131006 934) "mocking framework for emacs" ((eieio (1 3)) (el-x (0 2 4))) single "melpa" nil ((:keywords "lisp" "testing")) nil])
  (mode-icons [cl-struct-package-desc mode-icons (20130602 548) "Show icons for modes" nil tar "melpa" nil ((:url . "http://ryuslash.org/projects/mode-icons.html") (:keywords "multimedia")) nil])
  (mode-line-debug [cl-struct-package-desc mode-line-debug (20150307 512) "show status of `debug-on-error' in the mode-line" nil single "melpa" nil ((:url . "https://github.com/tarsius/mode-line-debug") (:keywords "convenience" "lisp")) nil])
  (modeline-posn [cl-struct-package-desc modeline-posn (20150228 1813) "Set up `mode-line-position'." nil single "melpa" nil ((:url . "http://www.emacswiki.org/modeline-posn.el") (:keywords "mode-line" "region" "column")) nil])
  (modtime-skip-mode [cl-struct-package-desc modtime-skip-mode (20140128 1401) "Minor mode for disabling modtime and supersession checks on files." nil single "melpa" nil ((:url . "http://www.github.com/jordonbiondo/modtime-skip-mode")) nil])
  (moe-theme [cl-struct-package-desc moe-theme (20150707 656) "A colorful eye-candy theme. Moe, moe, kyun!" nil tar "melpa" nil ((:url . "https://github.com/kuanyui/moe-theme.el")) nil])
  (molokai-theme [cl-struct-package-desc molokai-theme (20130828 0) "molokai theme with Emacs theme engine" nil single "melpa" nil ((:url . "https://github.com/alloy-d/color-theme-molokai")) nil])
  (mongo [cl-struct-package-desc mongo (20150315 519) "MongoDB driver for Emacs Lisp" nil tar "melpa" nil ((:keywords "convenience")) nil])
  (monky [cl-struct-package-desc monky (20150404 18) "Control Hg from Emacs." nil tar "melpa" nil nil nil])
  (monokai-theme [cl-struct-package-desc monokai-theme (20150521 2257) "A fruity color theme for Emacs." nil single "melpa" nil ((:url . "http://github.com/oneKelvinSmith/monokai-emacs")) nil])
  (mote-mode [cl-struct-package-desc mote-mode (20121014 2119) "Mote minor mode" ((ruby-mode (1 1))) single "melpa" nil ((:url . "http://inkel.github.com/mote-mode/")) nil])
  (motion-mode [cl-struct-package-desc motion-mode (20140919 1856) "major mode for RubyMotion enviroment" ((flymake-easy (0 7)) (flymake-cursor (1 0 2))) tar "melpa" nil ((:url . "https://github.com/ainame/motion-mode")) nil])
  (mouse+ [cl-struct-package-desc mouse+ (20150105 29) "Extensions to `mouse.el'." nil single "melpa" nil ((:url . "http://www.emacswiki.org/mouse+.el") (:keywords "mouse")) nil])
  (mouse-slider-mode [cl-struct-package-desc mouse-slider-mode (20130609 826) "scale numbers dragged under the mouse" nil single "melpa" nil ((:url . "https://github.com/skeeto/mouse-slider-mode")) nil])
  (move-text [cl-struct-package-desc move-text (20140307 1644) "Move current line or region with M-up or M-down." nil single "melpa" nil ((:keywords "edit")) nil])
  (multi-eshell [cl-struct-package-desc multi-eshell (20120608 1835) "Create and manage multiple shells within Emacs" nil single "melpa" nil ((:url . "http://cims.nyu.edu/~stucchio")) nil])
  (multi-term [cl-struct-package-desc multi-term (20150220 1320) "Managing multiple terminal buffers in Emacs." nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/multi-term.el") (:keywords "term" "terminal" "multiple buffer")) nil])
  (multi-web-mode [cl-struct-package-desc multi-web-mode (20130823 2054) "multiple major mode support for web editing" nil tar "melpa" nil ((:url . "https://github.com/fgallina/multi-web-mode") (:keywords "convenience" "languages" "wp")) nil])
  (multifiles [cl-struct-package-desc multifiles (20130615 1433) "View and edit parts of multiple files in one buffer" nil single "melpa" nil ((:keywords "multiple" "files")) nil])
  (multiple-cursors [cl-struct-package-desc multiple-cursors (20150710 456) "Multiple cursors for Emacs." nil tar "melpa" nil nil nil])
  (mustache [cl-struct-package-desc mustache (20131117 1407) "a mustache templating library in emacs lisp" ((ht (0 9)) (s (1 3 0)) (dash (1 2 0))) tar "melpa" nil nil nil])
  (mustache-mode [cl-struct-package-desc mustache-mode (20141024 732) "A major mode for editing Mustache files." nil single "melpa" nil nil nil])
  (muttrc-mode [cl-struct-package-desc muttrc-mode (20090804 2252) "Major mode to edit muttrc under Emacs" nil single "melpa" nil nil nil])
  (mwe-log-commands [cl-struct-package-desc mwe-log-commands (20100703 541) "log keyboard commands to buffer" nil single "melpa" nil ((:keywords "help")) nil])
  (mysql2sqlite [cl-struct-package-desc mysql2sqlite (20120514 731) "Convert mysql databases into sqlite databases." nil single "melpa" nil nil nil])
  (n3-mode [cl-struct-package-desc n3-mode (20141027 1057) "mode for Notation 3" nil single "melpa" nil nil nil])
  (namespaces [cl-struct-package-desc namespaces (20130326 1550) "An implementation of namespaces for Elisp, with an emphasis on immutabilty." nil single "melpa" nil ((:url . "https://github.com/chrisbarrett/elisp-namespaces")) nil])
  (naquadah-theme [cl-struct-package-desc naquadah-theme (20150720 709) "A theme based on Tango color set" nil single "melpa" nil nil nil])
  (nav [cl-struct-package-desc nav (20120507 7) "Emacs mode for filesystem navigation" nil tar "melpa" nil nil nil])
  (nav-flash [cl-struct-package-desc nav-flash (20140508 1341) "Briefly highlight the current line" nil single "melpa" nil ((:url . "http://github.com/rolandwalker/nav-flash") (:keywords "extensions" "navigation" "interface")) nil])
  (ncl-mode [cl-struct-package-desc ncl-mode (20150525 929) "Major Mode for editing NCL scripts and other goodies" ((emacs (24))) tar "melpa" nil nil nil])
  (nclip [cl-struct-package-desc nclip (20130617 1315) "Network (HTTP) Clipboard" nil tar "melpa" nil ((:url . "http://www.github.com/maio/nclip.el") (:keywords "nclip" "clipboard" "network")) nil])
  (nemerle [cl-struct-package-desc nemerle (20130328 746) "major mode for editing nemerle programs" nil single "melpa" nil ((:keywords "nemerle" "mode" "languages")) nil])
  (nginx-mode [cl-struct-package-desc nginx-mode (20140321 2028) "major mode for editing nginx config files" nil single "melpa" nil ((:keywords "nginx")) nil])
  (noctilux-theme [cl-struct-package-desc noctilux-theme (20150723 747) "Dark theme inspired by LightTable" nil tar "melpa" nil nil nil])
  (nodejs-repl [cl-struct-package-desc nodejs-repl (20130520 1635) "Run Node.js REPL" nil single "melpa" nil nil nil])
  (noflet [cl-struct-package-desc noflet (20141102 654) "locally override functions" nil single "melpa" nil ((:url . "https://github.com/nicferrier/emacs-noflet") (:keywords "lisp")) nil])
  (nose [cl-struct-package-desc nose (20140520 948) "Easy Python test running in Emacs" nil single "melpa" nil ((:keywords "nose" "python" "testing")) nil])
  (notmuch [cl-struct-package-desc notmuch (20150630 1237) "No description available." nil tar "melpa" nil nil nil])
  (nrepl-eval-sexp-fu [cl-struct-package-desc nrepl-eval-sexp-fu (20140311 341) "Tiny functionality enhancements for evaluating sexps." ((highlight (0 0 0)) (smartparens (0 0 0)) (thingatpt (0 0 0))) single "melpa" nil ((:keywords "lisp" "highlight" "convenience")) nil])
  (nsis-mode [cl-struct-package-desc nsis-mode (20130723 1928) "NSIS-mode" nil tar "melpa" nil ((:url . "http://github.com/mlf176f2/nsis-mode") (:keywords "nsis")) nil])
  (nyan-mode [cl-struct-package-desc nyan-mode (20150128 1218) "Nyan Cat shows position in current buffer in mode-line." nil tar "melpa" nil ((:url . "http://nyan-mode.buildsomethingamazing.com") (:keywords "nyan" "cat" "lulz" "pop tart cat" "build something amazing")) nil])
  (nyan-prompt [cl-struct-package-desc nyan-prompt (20140809 2208) "Nyan Cat on the eshell prompt." nil tar "melpa" nil ((:url . "http://github.com/PuercoPop/nyan-prompt") (:keywords "nyan" "cat" "lulz" "eshell" "rainbow dependencies ((rx 0))")) nil])
  (o-blog [cl-struct-package-desc o-blog (20140711 832) "" nil tar "melpa" nil ((:keywords "emacs")) nil])
  (oauth [cl-struct-package-desc oauth (20130127 1751) "Oauth library." nil tar "melpa" nil ((:keywords "comm")) nil])
  (ob-browser [cl-struct-package-desc ob-browser (20150101 710) "Render HTML in org-mode blocks." ((org (8))) tar "melpa" nil ((:url . "https://github.com/krisajenkins/ob-browser") (:keywords "org" "babel" "browser" "phantomjs")) nil])
  (ob-mongo [cl-struct-package-desc ob-mongo (20130718 732) "Execute mongodb queries within org-mode blocks." ((org (8))) single "melpa" nil ((:url . "https://github.com/krisajenkins/ob-mongo") (:keywords "org" "babel" "mongo" "mongodb")) nil])
  (ob-sml [cl-struct-package-desc ob-sml (20130829 1143) "org-babel functions for template evaluation" ((sml-mode (6 4))) single "melpa" nil ((:url . "http://orgmode.org") (:keywords "literate programming" "reproducible research")) nil])
  (ob-translate [cl-struct-package-desc ob-translate (20130718 729) "Translation of text blocks in org-mode." ((google-translate (0 4)) (org (8))) single "melpa" nil ((:url . "https://github.com/krisajenkins/ob-translate") (:keywords "org" "babel" "translate" "translation")) nil])
  (occidental-theme [cl-struct-package-desc occidental-theme (20130312 1258) "Custom theme for faces based on Adwaita" nil single "melpa" nil ((:url . "http://github.com/olcai/occidental-theme")) nil])
  (occur-x [cl-struct-package-desc occur-x (20130610 643) "Extra functionality for occur" nil single "melpa" nil ((:keywords "occur" "search" "convenience")) nil])
  (offlineimap [cl-struct-package-desc offlineimap (20130331 741) "Run OfflineIMAP from Emacs" nil single "melpa" nil ((:url . "http://julien.danjou.info/offlineimap-el.html")) nil])
  (open-junk-file [cl-struct-package-desc open-junk-file (20130131 720) "Open a junk (memo) file to try-and-error" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/open-junk-file.el") (:keywords "convenience" "tools")) nil])
  (openwith [cl-struct-package-desc openwith (20120531 1436) "Open files with external programs" nil single "melpa" nil ((:url . "https://bitbucket.org/jpkotta/openwith") (:keywords "files" "processes")) nil])
  (org-agenda-property [cl-struct-package-desc org-agenda-property (20140626 1416) "Display org properties in the agenda buffer." ((emacs (24 2))) single "melpa" nil ((:url . "http://github.com/Bruce-Connor/org-agenda-property") (:keywords "calendar")) nil])
  (org-bullets [cl-struct-package-desc org-bullets (20140918 1137) "Show bullets in org-mode as UTF-8 characters" nil single "melpa" nil ((:url . "https://github.com/sabof/org-bullets")) nil])
  (org-context [cl-struct-package-desc org-context (20150106 1306) "Contextual capture and agenda commands for Org-mode" nil single "melpa" nil ((:url . "https://github.com/thisirs/org-context") (:keywords "org" "capture" "agenda" "convenience")) nil])
  (org-cua-dwim [cl-struct-package-desc org-cua-dwim (20120202 2134) "Org-mode and Cua mode compatibility layer" nil single "melpa" nil ((:keywords "org-mode" "cua-mode")) nil])
  (org-dotemacs [cl-struct-package-desc org-dotemacs (20150118 1941) "Store your emacs config as an org file, and choose which bits to load." ((org (7 9 3)) (cl-lib (1 0))) single "melpa" nil ((:url . "https://github.com/vapniks/org-dotemacs") (:keywords "local")) nil])
  (org-elisp-help [cl-struct-package-desc org-elisp-help (20130423 1545) "org links to emacs-lisp documentation" ((cl-lib (0 2)) (org (8 0))) single "melpa" nil ((:url . "https://github.com/tarsius/org-elisp-help") (:keywords "org" "remember" "lisp")) nil])
  (org-fstree [cl-struct-package-desc org-fstree (20090723 819) "include a filesystem subtree into an org file" nil single "melpa" nil ((:url . "http://www.burtzlaff.de/org-fstree/org-fstree.el") (:keywords "org-mode" "filesystem" "tree")) nil])
  (org-jekyll [cl-struct-package-desc org-jekyll (20130508 239) "Export jekyll-ready posts form org-mode entries" ((org (8 0))) single "melpa" nil ((:url . "http://juanreyero.com/open/org-jekyll/") (:keywords "hypermedia")) nil])
  (org-jira [cl-struct-package-desc org-jira (20150528 132) "Syncing between Jira and Org-mode." nil tar "melpa" nil ((:url . "https://github.com/baohaojun/org-jira")) nil])
  (org-journal [cl-struct-package-desc org-journal (20150709 43) "a simple org-mode based journaling mode" nil single "melpa" nil ((:url . "http://github.com/bastibe/org-journal")) nil])
  (org-mac-iCal [cl-struct-package-desc org-mac-iCal (20140107 519) "Imports events from iCal.app to the Emacs diary" nil single "melpa" nil ((:keywords "outlines" "calendar")) nil])
  (org-octopress [cl-struct-package-desc org-octopress (20150628 1637) "Compose octopress articles using org-mode." ((org (8 0)) (orglue (0 1)) (ctable (0 1 1))) tar "melpa" nil ((:keywords "org" "jekyll" "octopress" "blog")) nil])
  (org-outlook [cl-struct-package-desc org-outlook (20140807 714) "Outlook org" nil tar "melpa" nil ((:url . "https://github.com/mlf176f2/org-outlook.el") (:keywords "org-outlook")) nil])
  (org-pomodoro [cl-struct-package-desc org-pomodoro (20150621 552) "Pomodoro implementation for org-mode." ((alert (0 5 10)) (cl-lib (0 5))) tar "melpa" nil nil nil])
  (org-present [cl-struct-package-desc org-present (20141109 1756) "Minimalist presentation minor-mode for Emacs org-mode." ((org (7))) single "melpa" nil ((:url . "https://github.com/rlister/org-present")) nil])
  (org-protocol-jekyll [cl-struct-package-desc org-protocol-jekyll (20130810 1450) "Jekyll's handler for org-protocol" nil single "melpa" nil nil nil])
  (org-readme [cl-struct-package-desc org-readme (20130508 705) "Integrates Readme.org and Commentary/Change-logs." ((http-post-simple (1 0)) (yaoddmuse (0 1 1)) (header2 (21 0)) (lib-requires (21 0))) tar "melpa" nil ((:url . "https://github.com/mlf176f2/org-readme") (:keywords "header2" "readme.org" "emacswiki" "git")) nil])
  (org-toodledo [cl-struct-package-desc org-toodledo (20150301 313) "Toodledo integration for Emacs Org mode" ((request-deferred (0 2 0)) (emacs (24)) (cl-lib (0 5))) tar "melpa" nil ((:keywords "outlines" "data")) nil])
  (org-trello [cl-struct-package-desc org-trello (20150712 720) "Minor mode to synchronize org-mode buffer and trello board" ((request-deferred (0 2 0)) (deferred (0 3 2)) (s (1 9 0)) (dash-functional (2 11 0)) (dash (2 11 0)) (emacs (24))) tar "melpa" nil nil nil])
  (org2blog [cl-struct-package-desc org2blog (20150509 2301) "Blog from Org mode to wordpress" ((org (8 1)) (xml-rpc (1 6 8)) (metaweblog (0 1))) tar "melpa" nil nil nil])
  (orglink [cl-struct-package-desc orglink (20141207 533) "use Org Mode links in other modes" ((dash (1 3 2)) (org (8 0))) single "melpa" nil ((:url . "http://github.com/tarsius/orglink") (:keywords "hypertext")) nil])
  (orglue [cl-struct-package-desc orglue (20150430 513) "more functionality to org-mode." ((org (8 1)) (epic (0 2)) (org-mac-link (1 2))) tar "melpa" nil ((:keywords "org")) nil])
  (osx-browse [cl-struct-package-desc osx-browse (20140508 1341) "Web browsing helpers for OS X" ((string-utils (0 3 2)) (browse-url-dwim (0 6 6))) single "melpa" nil ((:url . "http://github.com/rolandwalker/osx-browse") (:keywords "hypermedia" "external")) nil])
  (osx-location [cl-struct-package-desc osx-location (20150613 217) "Watch and respond to changes in geographical location on OS X" nil tar "melpa" nil nil nil])
  (osx-plist [cl-struct-package-desc osx-plist (20101130 448) "Apple plist file parser" nil single "melpa" nil ((:keywords "convenience")) nil])
  (otter-mode [cl-struct-package-desc otter-mode (20121202 903) "Major mode for source files of the Otter automated theorem prover" nil single "melpa" nil ((:url . "https://github.com/scvalex/script-fu/blob/master/otter-mode.el")) nil])
  (outline-magic [cl-struct-package-desc outline-magic (20150209 1426) "outline mode extensions for Emacs" nil single "melpa" nil ((:keywords "outlines")) nil])
  (outlined-elisp-mode [cl-struct-package-desc outlined-elisp-mode (20131108 327) "outline-minor-mode settings for emacs lisp" nil single "melpa" nil ((:url . "http://hins11.yu-yake.com/")) nil])
  (p4 [cl-struct-package-desc p4 (20150721 1237) "Simple Perforce-Emacs Integration" nil single "melpa" nil ((:url . "https://github.com/gareth-rees/p4.el")) nil])
  (pabbrev [cl-struct-package-desc pabbrev (20150218 1443) "Predictive abbreviation expansion" nil single "melpa" nil nil nil])
  (package-build [cl-struct-package-desc package-build (20150719 443) "Tools for assembling a package archive" ((cl-lib (0 5))) single "melpa" nil ((:keywords "tools")) nil])
  (packed [cl-struct-package-desc packed (20150723 438) "package manager agnostic Emacs Lisp package utilities" ((emacs (24 3)) (dash (2 10 0))) single "melpa" nil ((:url . "https://github.com/tarsius/packed") (:keywords "compile" "convenience" "lisp" "package" "library")) nil])
  (page-break-lines [cl-struct-package-desc page-break-lines (20150226 817) "Display ugly ^L page breaks as tidy horizontal lines" nil single "melpa" nil ((:url . "https://github.com/purcell/page-break-lines") (:keywords "convenience" "faces")) nil])
  (pager [cl-struct-package-desc pager (20100330 1131) "windows-scroll commands" nil single "melpa" nil nil nil])
  (pager-default-keybindings [cl-struct-package-desc pager-default-keybindings (20130719 1357) "Add the default keybindings suggested for pager.el" ((pager (1 0))) single "melpa" nil ((:url . "http://github.com/nflath/pager-default-keybindings")) nil])
  (pallet [cl-struct-package-desc pallet (20150512 2) "A package management tool for Emacs, using Cask." ((dash (2 10 0)) (s (1 9 0)) (f (0 17 1)) (cask (0 7))) tar "melpa" nil nil nil])
  (pandoc-mode [cl-struct-package-desc pandoc-mode (20150722 1613) "Minor mode for interacting with Pandoc" ((hydra (0 10 0)) (dash (2 10 0))) tar "melpa" nil ((:keywords "text" "pandoc")) nil])
  (pangu-spacing [cl-struct-package-desc pangu-spacing (20150210 1710) "Minor-mode to add space between Chinese and English characters." nil single "melpa" nil ((:url . "http://github.com/coldnew/pangu-spacing")) nil])
  (paredit [cl-struct-package-desc paredit (20150217 713) "minor mode for editing parentheses" nil single "melpa" nil ((:keywords "lisp")) nil])
  (paredit-everywhere [cl-struct-package-desc paredit-everywhere (20140906 210) "Enable some paredit features in non-lisp buffers" ((paredit (22))) single "melpa" nil ((:keywords "languages" "convenience")) nil])
  (paredit-menu [cl-struct-package-desc paredit-menu (20130923 1254) "Adds a menu to paredit.el as memory aid" nil single "melpa" nil ((:keywords "paredit")) nil])
  (parenface [cl-struct-package-desc parenface (20141125 828) "Provide a face for parens in lispy modes." nil tar "melpa" nil nil nil])
  (pastebin [cl-struct-package-desc pastebin (20101125 1955) "A simple interface to the www.pastebin.com webservice" nil single "melpa" nil nil nil])
  (pastehub [cl-struct-package-desc pastehub (20140614 2320) "A client for the PasteHub cloud service" nil single "melpa" nil ((:url . "https://github.com/kiyoka/pastehub")) nil])
  (pastels-on-dark-theme [cl-struct-package-desc pastels-on-dark-theme (20120304 1022) "Pastels on Dark theme for Emacs 24" nil single "melpa" nil ((:url . "http://gist.github.com/1906662") (:keywords "theme" "color")) nil])
  (path-headerline-mode [cl-struct-package-desc path-headerline-mode (20140423 632) "Displaying file path on headerline." nil single "melpa" nil ((:url . "https://github.com/7696122/path-headerline-mode") (:keywords "headerline")) nil])
  (pcache [cl-struct-package-desc pcache (20150125 1653) "persistent caching for Emacs" ((eieio (1 3))) single "melpa" nil nil nil])
  (pcmpl-args [cl-struct-package-desc pcmpl-args (20120911 2224) "Enhanced shell command completion" nil single "melpa" nil ((:url . "https://github.com/JonWaltman/pcmpl-args.el") (:keywords "abbrev" "completion" "convenience" "processes" "terminals" "unix")) nil])
  (pcmpl-git [cl-struct-package-desc pcmpl-git (20140218 1804) "pcomplete for git" nil tar "melpa" nil ((:keywords "tools")) nil])
  (pcre2el [cl-struct-package-desc pcre2el (20150502 851) "parse, convert, and font-lock PCRE, Emacs and rx regexps" ((cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/joddie/pcre2el")) nil])
  (peg [cl-struct-package-desc peg (20150707 2341) "Parsing Expression Grammars in Emacs Lisp" nil single "melpa" nil nil nil])
  (perlbrew [cl-struct-package-desc perlbrew (20130127 324) "A perlbrew wrapper for Emacs" nil single "melpa" nil ((:keywords "emacs" "perl")) nil])
  (persistent-soft [cl-struct-package-desc persistent-soft (20150223 1053) "Persistent storage, returning nil on failure" ((pcache (0 3 1)) (list-utils (0 4 2))) single "melpa" nil ((:url . "http://github.com/rolandwalker/persistent-soft") (:keywords "data" "extensions")) nil])
  (persp-mode [cl-struct-package-desc persp-mode (20150529 313) "\"perspectives\" shared among frames + save/load - bugs." nil single "melpa" nil ((:url . "https://github.com/Bad-ptr/persp-mode.el") (:keywords "perspectives" "session" "workspace" "persistence" "windows" "buffers" "convenience")) nil])
  (perspective [cl-struct-package-desc perspective (20150508 1805) "switch between named \"perspectives\" of the editor" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/nex3/perspective-el") (:keywords "workspace" "convenience" "frames")) nil])
  (pg [cl-struct-package-desc pg (20130731 1442) "Emacs Lisp interface to the PostgreSQL RDBMS" nil single "melpa" nil ((:keywords "data" "comm" "database" "postgresql")) nil])
  (pgdevenv [cl-struct-package-desc pgdevenv (20150105 1436) "Manage your PostgreSQL development envs" nil tar "melpa" nil ((:keywords "emacs" "postgresql" "development" "environment" "shell" "debug" "gdb")) nil])
  (ph [cl-struct-package-desc ph (20130312 1137) "A global minor mode for managing multiple projects." ((emacs (24 3))) tar "melpa" nil nil nil])
  (phi-search [cl-struct-package-desc phi-search (20150419 2332) "another incremental search & replace, compatible with \"multiple-cursors\"" nil tar "melpa" nil ((:url . "http://hins11.yu-yake.com/")) nil])
  (phoenix-dark-mono-theme [cl-struct-package-desc phoenix-dark-mono-theme (20130306 1215) "Monochromatic version of the Phoenix theme" nil single "melpa" nil ((:url . "http://github.com/j0ni/phoenix-dark-mono")) nil])
  (phoenix-dark-pink-theme [cl-struct-package-desc phoenix-dark-pink-theme (20150406 2002) "Port of the Sublime Text 2 theme of the same name" nil single "melpa" nil ((:url . "http://github.com/j0ni/phoenix-dark-pink")) nil])
  (php+-mode [cl-struct-package-desc php+-mode (20121129 1252) "A better PHP mode with Zend Framework 1 support." nil tar "melpa" nil nil nil])
  (php-boris [cl-struct-package-desc php-boris (20130527 121) "Run boris php REPL" nil single "melpa" nil ((:keywords "php" "commint" "repl" "boris")) nil])
  (php-eldoc [cl-struct-package-desc php-eldoc (20140202 1141) "eldoc backend for php" nil tar "melpa" nil ((:url . "https://github.com/sabof/php-eldoc")) nil])
  (php-mode [cl-struct-package-desc php-mode (20150729 213) "Major mode for editing PHP code" nil single "melpa" nil ((:url . "https://github.com/ejmr/php-mode")) nil])
  (pig-mode [cl-struct-package-desc pig-mode (20140617 1058) "Major mode for Pig files" nil single "melpa" nil nil nil])
  (pivotal-tracker [cl-struct-package-desc pivotal-tracker (20140805 501) "Interact with Pivotal Tracker through its API" nil single "melpa" nil ((:url . "http://github.com/jxa/pivotal-tracker")) nil])
  (pkgbuild-mode [cl-struct-package-desc pkgbuild-mode (20150321 1558) "Interface to the ArchLinux package manager" nil single "melpa" nil nil nil])
  (plenv [cl-struct-package-desc plenv (20130706 2316) "A plenv wrapper for Emacs" nil single "melpa" nil ((:keywords "emacs" "perl")) nil])
  (point-undo [cl-struct-package-desc point-undo (20100504 829) "undo/redo position" nil single "melpa" nil nil nil])
  (pointback [cl-struct-package-desc pointback (20100210 752) "Restore window points when returning to buffers" nil single "melpa" nil ((:keywords "convenience")) nil])
  (pomodoro [cl-struct-package-desc pomodoro (20150716 1046) "A timer for the Pomodoro Technique" nil single "melpa" nil nil nil])
  (pony-mode [cl-struct-package-desc pony-mode (20150308 937) "Minor mode for working with Django Projects" nil tar "melpa" nil nil nil])
  (pophint [cl-struct-package-desc pophint (20141217 107) "Provide navigation using pop-up tips, like Firefox's Vimperator Hint Mode" ((popup (0 5 0)) (log4e (0 2 0)) (yaxception (0 1))) tar "melpa" nil ((:url . "https://github.com/aki2o/emacs-pophint") (:keywords "popup")) nil])
  (popup [cl-struct-package-desc popup (20150626 711) "Visual Popup User Interface" ((cl-lib (0 3))) single "melpa" nil ((:keywords "lisp")) nil])
  (popup-switcher [cl-struct-package-desc popup-switcher (20150331 708) "switch to other buffers and files via popup." ((cl-lib (0 3)) (popup (0 5 2))) single "melpa" nil ((:url . "https://github.com/kostafey/popup-switcher") (:keywords "popup" "switch" "buffers" "functions")) nil])
  (popwin [cl-struct-package-desc popwin (20150315 600) "Popup Window Manager." nil single "melpa" nil ((:keywords "convenience")) nil])
  (pos-tip [cl-struct-package-desc pos-tip (20150318 813) "Show tooltip at point" nil single "melpa" nil ((:keywords "tooltip")) nil])
  (pov-mode [cl-struct-package-desc pov-mode (20120825 716) "Major mode for editing POV-Ray scene files." nil tar "melpa" nil nil nil])
  (powerline [cl-struct-package-desc powerline (20150628 1957) "Rewrite of Powerline" ((cl-lib (0 2))) tar "melpa" nil ((:url . "http://github.com/milkypostman/powerline/") (:keywords "mode-line")) nil])
  (powershell [cl-struct-package-desc powershell (20150428 1421) "No description available." nil single "melpa" nil nil nil])
  (pretty-mode [cl-struct-package-desc pretty-mode (20141207 1152) "Redisplay parts of the buffer as pretty symbols." nil single "melpa" nil ((:url . "https://github.com/akatov/pretty-mode") (:keywords "pretty" "unicode" "symbols")) nil])
  (proc-net [cl-struct-package-desc proc-net (20130321 1712) "network process tools" nil single "melpa" nil ((:url . "http://github.com/nicferrier/emacs-procnet") (:keywords "processes")) nil])
  (processing-mode [cl-struct-package-desc processing-mode (20150217 432) "Major mode for Processing 2.0" nil single "melpa" nil ((:url . "https://github.com/ptrv/processing2-emacs") (:keywords "languages" "snippets")) nil])
  (processing-snippets [cl-struct-package-desc processing-snippets (20140426 728) "Snippets for processing-mode" ((yasnippet (0 8 0))) tar "melpa" nil nil nil])
  (project-local-variables [cl-struct-package-desc project-local-variables (20080502 1652) "Set project-local variables from a file." nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/ProjectLocalVariables") (:keywords "project" "convenience")) nil])
  (project-persist [cl-struct-package-desc project-persist (20150519 1324) "A minor mode to allow loading and saving of project settings." nil tar "melpa" nil nil nil])
  (projectile [cl-struct-package-desc projectile (20150728 2141) "Manage and navigate projects in Emacs easily" ((dash (2 11 0)) (pkg-info (0 4))) single "melpa" nil ((:url . "https://github.com/bbatsov/projectile") (:keywords "project" "convenience")) nil])
  (projmake-mode [cl-struct-package-desc projmake-mode (20150619 1420) "Project oriented automatic builder and error highlighter, flymake for projects" ((dash (20150611 922)) (indicators (20130217 1405))) tar "melpa" nil nil nil])
  (protobuf-mode [cl-struct-package-desc protobuf-mode (20091217 1755) "major mode for editing protocol buffers." nil single "melpa" nil ((:keywords "google" "protobuf" "languages")) nil])
  (psvn [cl-struct-package-desc psvn (20120401 1440) "Subversion interface for emacs" nil single "melpa" nil nil nil])
  (puppet-mode [cl-struct-package-desc puppet-mode (20150730 1208) "Major mode for Puppet manifests" ((emacs (24 1)) (pkg-info (0 4))) single "melpa" nil ((:url . "https://github.com/lunaryorn/puppet-mode") (:keywords "languages")) nil])
  (purty-mode [cl-struct-package-desc purty-mode (20131004 1559) "Safely pretty-print greek letters, mathematical symbols, or anything else." nil single "melpa" nil nil nil])
  (pylint [cl-struct-package-desc pylint (20150123 1600) "minor mode for running `pylint'" nil single "melpa" nil ((:keywords "languages" "python")) nil])
  (python-django [cl-struct-package-desc python-django (20150525 1251) "A Jazzy package for managing Django projects" nil single "melpa" nil ((:url . "https://github.com/fgallina/python-django.el") (:keywords "languages")) nil])
  (python-environment [cl-struct-package-desc python-environment (20150310 153) "virtualenv API for Emacs Lisp" ((deferred (0 3 1))) tar "melpa" nil ((:keywords "applications" "tools")) nil])
  (qml-mode [cl-struct-package-desc qml-mode (20130427 808) "Major mode for editing QT Declarative (QML) code." nil single "melpa" nil ((:url . "https://github.com/coldnew/qml-mode") (:keywords "qml" "qt" "qt declarative")) nil])
  (quick-buffer-switch [cl-struct-package-desc quick-buffer-switch (20141112 252) "Quick switch to file or dir buffers." nil single "melpa" nil ((:keywords "emacs" "configuration")) nil])
  (quickref [cl-struct-package-desc quickref (20130113 1500) "Display relevant notes-to-self in the echo area" ((dash (1 0 3)) (s (1 0 0))) single "melpa" nil ((:url . "https://github.com/pd/quickref.el")) nil])
  (quickrun [cl-struct-package-desc quickrun (20150728 2150) "Run commands quickly" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-quickrun")) nil])
  (railgun [cl-struct-package-desc railgun (20121016 2257) "No description available." nil single "melpa" nil nil nil])
  (rainbow-delimiters [cl-struct-package-desc rainbow-delimiters (20150320 17) "Highlight brackets according to their depth" nil single "melpa" nil ((:url . "https://github.com/Fanael/rainbow-delimiters") (:keywords "faces" "convenience" "lisp" "tools")) nil])
  (rase [cl-struct-package-desc rase (20120928 1345) "Run At Sun Event daemon" nil single "melpa" nil ((:url . "https://github.com/m00natic/rase/") (:keywords "solar" "sunrise" "sunset" "midday" "midnight")) nil])
  (rbenv [cl-struct-package-desc rbenv (20141119 2349) "Emacs integration for rbenv" nil single "melpa" nil ((:url . "https://github.com/senny/rbenv.el") (:keywords "ruby" "rbenv")) nil])
  (rdp [cl-struct-package-desc rdp (20120928 1854) "Recursive Descent Parser library" nil single "melpa" nil ((:url . "https://github.com/skeeto/rdp")) nil])
  (realgud [cl-struct-package-desc realgud (20150719 1657) "A modular front-end for interacting with external debuggers" ((load-relative (1 0)) (list-utils (0 4 2)) (loc-changes (1 1)) (test-simple (1 0))) tar "melpa" nil ((:url . "http://github.com/rocky/emacs-dbgr")) nil])
  (rebox2 [cl-struct-package-desc rebox2 (20121113 500) "Handling of comment boxes in various styles." nil single "melpa" nil ((:url . "https://github.com/lewang/rebox2")) nil])
  (recentf-ext [cl-struct-package-desc recentf-ext (20130130 2150) "Recentf extensions" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/recentf-ext.el") (:keywords "convenience" "files")) nil])
  (rect+ [cl-struct-package-desc rect+ (20150620 1744) "Extensions to rect.el" nil single "melpa" nil ((:url . "https://github.com/mhayashi1120/Emacs-rectplus") (:keywords "extensions" "data" "tools")) nil])
  (recursive-narrow [cl-struct-package-desc recursive-narrow (20140902 1027) "narrow-to-region that operates recursively" nil single "melpa" nil ((:url . "http://github.com/nflath/recursive-narrow")) nil])
  (redo+ [cl-struct-package-desc redo+ (20131117 1151) "Redo/undo system for Emacs" nil single "melpa" nil ((:keywords "lisp" "extensions")) nil])
  (redshank [cl-struct-package-desc redshank (20120510 1230) "No description available." nil tar "melpa" nil nil nil])
  (regex-dsl [cl-struct-package-desc regex-dsl (20100124 228) "lisp syntax for regexps" nil single "melpa" nil nil nil])
  (regex-tool [cl-struct-package-desc regex-tool (20131104 1434) "A regular expression evaluation tool for programmers" nil single "melpa" nil ((:url . "http://www.newartisans.com/") (:keywords "regex" "languages" "programming" "development")) nil])
  (region-bindings-mode [cl-struct-package-desc region-bindings-mode (20140407 1514) "Enable custom bindings when mark is active." nil single "melpa" nil ((:url . "https://github.com/fgallina/region-bindings-mode") (:keywords "convenience")) nil])
  (repl-toggle [cl-struct-package-desc repl-toggle (20140501 531) "Switch to/from repl buffer for current major-mode" ((fullframe (0 0 5))) single "melpa" nil ((:keywords "repl" "buffers" "toggle")) nil])
  (replace-from-region [cl-struct-package-desc replace-from-region (20150407 30) "Replace commands whose query is from region" nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/replace-from-region.el") (:keywords "replace" "search" "region")) nil])
  (request [cl-struct-package-desc request (20140316 417) "Compatible layer for URL request in Emacs" nil single "melpa" nil nil nil])
  (requirejs-mode [cl-struct-package-desc requirejs-mode (20130215 1304) "Improved AMD module management" nil single "melpa" nil ((:keywords "javascript" "amd" "requirejs")) nil])
  (restclient [cl-struct-package-desc restclient (20150513 131) "An interactive HTTP client for Emacs" nil single "melpa" nil ((:keywords "http")) nil])
  (reverse-theme [cl-struct-package-desc reverse-theme (20141204 1745) "Reverse theme for Emacs" nil single "melpa" nil ((:url . "https://github.com/syohex/emacs-reverse-theme")) nil])
  (revive [cl-struct-package-desc revive (20150417 1555) "Resume Emacs" nil single "melpa" nil nil nil])
  (rfringe [cl-struct-package-desc rfringe (20110405 1520) "display the relative location of the region, in the fringe." nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/rfringe.el") (:keywords "fringe" "bitmap")) nil])
  (rhtml-mode [cl-struct-package-desc rhtml-mode (20130422 611) "major mode for editing RHTML files" nil tar "melpa" nil nil nil])
  (rinari [cl-struct-package-desc rinari (20150708 2340) "Rinari Is Not A Rails IDE" ((ruby-mode (1 0)) (inf-ruby (2 2 5)) (ruby-compilation (0 16)) (jump (2 0))) single "melpa" nil ((:url . "https://github.com/eschulte/rinari") (:keywords "ruby" "rails" "project" "convenience" "web")) nil])
  (rings [cl-struct-package-desc rings (20140102 1536) "Buffer rings. Like tabs, but better." nil single "melpa" nil ((:url . "http://github.com/konr/rings") (:keywords "utilities" "productivity")) nil])
  (rnc-mode [cl-struct-package-desc rnc-mode (20121227 1502) "A major mode for editing RELAX NG Compact syntax." nil single "melpa" nil nil nil])
  (robe [cl-struct-package-desc robe (20150726 1423) "Code navigation, documentation lookup and completion for Ruby" ((inf-ruby (2 3 0))) tar "melpa" nil ((:url . "https://github.com/dgutov/robe") (:keywords "ruby" "convenience" "rails")) nil])
  (roy-mode [cl-struct-package-desc roy-mode (20121208 358) "Roy major mode" nil single "melpa" nil ((:url . "https://github.com/folone/roy-mode") (:keywords "extensions")) nil])
  (rsense [cl-struct-package-desc rsense (20100510 2105) "RSense client for Emacs" nil single "melpa" nil ((:keywords "convenience")) nil])
  (rspec-mode [cl-struct-package-desc rspec-mode (20150727 1418) "Enhance ruby-mode for RSpec" ((ruby-mode (1 0)) (cl-lib (0 4))) tar "melpa" nil ((:url . "http://github.com/pezra/rspec-mode") (:keywords "rspec" "ruby")) nil])
  (rubocop [cl-struct-package-desc rubocop (20150630 1003) "An Emacs interface for RuboCop" ((dash (1 0 0)) (emacs (24))) single "melpa" nil ((:url . "https://github.com/bbatsov/rubocop-emacs") (:keywords "project" "convenience")) nil])
  (ruby-block [cl-struct-package-desc ruby-block (20131211 331) "highlight matching block" nil single "melpa" nil ((:keywords "languages" "faces" "ruby")) nil])
  (ruby-compilation [cl-struct-package-desc ruby-compilation (20150708 2340) "run a ruby process in a compilation buffer" ((inf-ruby (2 2 1))) single "melpa" nil ((:url . "https://github.com/eschulte/rinari") (:keywords "test" "convenience")) nil])
  (ruby-dev [cl-struct-package-desc ruby-dev (20130811 151) "Interactive developement environment for Ruby." nil tar "melpa" nil nil nil])
  (ruby-electric [cl-struct-package-desc ruby-electric (20150424 752) "Minor mode for electrically editing ruby code" nil single "melpa" nil ((:url . "https://github.com/knu/ruby-electric.el") (:keywords "languages" "ruby")) nil])
  (ruby-end [cl-struct-package-desc ruby-end (20141215 423) "Automatic insertion of end blocks for Ruby" nil single "melpa" nil ((:url . "http://github.com/rejeep/ruby-end") (:keywords "speed" "convenience" "ruby")) nil])
  (ruby-hash-syntax [cl-struct-package-desc ruby-hash-syntax (20141010 839) "Toggle ruby hash syntax between classic and 1.9 styles" nil single "melpa" nil ((:url . "https://github.com/purcell/ruby-hash-syntax") (:keywords "languages")) nil])
  (ruby-interpolation [cl-struct-package-desc ruby-interpolation (20131112 852) "Ruby string interpolation helpers" nil single "melpa" nil ((:url . "http://github.com/leoc/ruby-interpolation.el")) nil])
  (ruby-test-mode [cl-struct-package-desc ruby-test-mode (20140727 204) "Minor mode for Behaviour and Test Driven" ((ruby-mode (1 0))) single "melpa" nil ((:keywords "ruby" "unit" "test" "rspec")) nil])
  (ruby-tools [cl-struct-package-desc ruby-tools (20140113 45) "Collection of handy functions for ruby-mode." nil tar "melpa" nil nil nil])
  (rust-mode [cl-struct-package-desc rust-mode (20150731 536) "A major emacs mode for editing Rust source code" nil single "melpa" nil ((:url . "https://github.com/rust-lang/rust-mode") (:keywords "languages")) nil])
  (rvm [cl-struct-package-desc rvm (20150402 742) "Emacs integration for rvm" nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/RvmEl") (:keywords "ruby" "rvm")) nil])
  (s [cl-struct-package-desc s (20140910 334) "The long lost Emacs string manipulation library." nil single "melpa" nil ((:keywords "strings")) nil])
  (s-buffer [cl-struct-package-desc s-buffer (20130605 1424) "s operations for buffers" ((s (1 6 0)) (noflet (0 0 3))) single "melpa" nil ((:url . "http://github.com/nicferrier/emacs-s-buffer") (:keywords "lisp")) nil])
  (sackspace [cl-struct-package-desc sackspace (20130719 256) "A better backspace" nil single "melpa" nil ((:url . "http://github.com/cofi/sackspace.el") (:keywords "delete" "convenience")) nil])
  (sass-mode [cl-struct-package-desc sass-mode (20150508 2012) "Major mode for editing Sass files" ((haml-mode (3 0 15)) (cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/nex3/haml/tree/master") (:keywords "markup" "language" "css")) nil])
  (sauron [cl-struct-package-desc sauron (20150614 46) "Track (erc/org/dbus/...) events and react to them." nil tar "melpa" nil nil nil])
  (save-load-path [cl-struct-package-desc save-load-path (20131228 1952) "save load-path and reuse it to test" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/save-load-path.el") (:keywords "lisp")) nil])
  (save-sexp [cl-struct-package-desc save-sexp (20130106 642) "save variables in files using setter forms like `setq'" nil tar "melpa" nil ((:url . "https://github.com/tarsius/save-sexp") (:keywords "convenience")) nil])
  (save-visited-files [cl-struct-package-desc save-visited-files (20141120 2031) "save opened files across sessions" nil single "melpa" nil ((:url . "http://github.com/nflath/save-visited-files")) nil])
  (savekill [cl-struct-package-desc savekill (20140418 234) "Save kill ring to disk" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/savekill.el") (:keywords "tools")) nil])
  (scala-mode [cl-struct-package-desc scala-mode (20141205 1251) "Major mode for editing Scala code." nil tar "melpa" nil ((:keywords "scala" "languages" "oop")) nil])
  (scala-mode2 [cl-struct-package-desc scala-mode2 (20150617 2350) "Major mode for editing Scala >= 2.9" nil tar "melpa" nil nil nil])
  (scf-mode [cl-struct-package-desc scf-mode (20111202 707) "shorten file-names in compilation type buffers" nil single "melpa" nil ((:url . "https://github.com/lewang/scf-mode") (:keywords "compilation")) nil])
  (scheme-complete [cl-struct-package-desc scheme-complete (20130220 403) "Smart tab completion for Scheme in Emacs" nil single "melpa" nil nil nil])
  (scheme-here [cl-struct-package-desc scheme-here (20141028 18) "cmuscheme extension for multiple inferior processes" nil single "melpa" nil ((:url . "https://github.com/kaihaosw/scheme-here") (:keywords "scheme")) nil])
  (scion [cl-struct-package-desc scion (20130315 555) "Haskell Minor Mode for Interacting with the Scion Library" nil single "melpa" nil ((:url . "https://code.google.com/p/scion-lib/")) nil])
  (sclang-extensions [cl-struct-package-desc sclang-extensions (20131117 1439) "Extensions for the SuperCollider Emacs mode." ((auto-complete (1 4 0)) (s (1 3 1)) (dash (1 2 0)) (emacs (24 1))) tar "melpa" nil ((:keywords "sclang" "supercollider" "languages" "tools")) nil])
  (sclang-snippets [cl-struct-package-desc sclang-snippets (20130513 51) "Snippets for the SuperCollider Emacs mode" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "snippets")) nil])
  (scpaste [cl-struct-package-desc scpaste (20110617 1856) "Paste to the web via scp." ((htmlfontify (0 21))) single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/SCPaste") (:keywords "convenience" "hypermedia")) nil])
  (scratch [cl-struct-package-desc scratch (20120830 1028) "Mode-specific scratch buffers" nil tar "melpa" nil ((:keywords "editing")) nil])
  (scratch-log [cl-struct-package-desc scratch-log (20141114 2343) "Utility for *scratch* buffer." nil single "melpa" nil nil nil])
  (scratch-palette [cl-struct-package-desc scratch-palette (20150225 42) "make scratch buffer for each files" ((popwin (0 7 0 -3))) single "melpa" nil ((:url . "http://hins11.yu-yake.com/")) nil])
  (scratch-pop [cl-struct-package-desc scratch-pop (20150716 2122) "Generate, popup (& optionally backup) scratch buffer(s)." ((popwin (0 7 0 -3))) single "melpa" nil ((:url . "http://hins11.yu-yake.com/")) nil])
  (screenshot [cl-struct-package-desc screenshot (20120509 1105) "Take a screenshot in Emacs" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/screenshot.el") (:keywords "images" "hypermedia")) nil])
  (scss-mode [cl-struct-package-desc scss-mode (20150107 1400) "Major mode for editing SCSS files" nil single "melpa" nil ((:url . "https://github.com/antonj/scss-mode") (:keywords "scss" "css" "mode")) nil])
  (sentence-highlight [cl-struct-package-desc sentence-highlight (20121026 1450) "highlight the current sentence" nil single "melpa" nil ((:keywords "plain text" "writing" "highlight" "editing" "focus")) nil])
  (session [cl-struct-package-desc session (20120510 1700) "use variables, registers and buffer places across sessions" nil single "melpa" nil ((:url . "http://emacs-session.sourceforge.net/") (:keywords "session" "session management" "desktop" "data" "tools")) nil])
  (shell-command [cl-struct-package-desc shell-command (20090621 1332) "enables tab-completion for `shell-command'" nil single "melpa" nil ((:keywords "shell")) nil])
  (shell-here [cl-struct-package-desc shell-here (20150728 1004) "Open a shell relative to the working directory" nil single "melpa" nil ((:keywords "unix" "tools" "processes")) nil])
  (shell-history [cl-struct-package-desc shell-history (20100504 850) "integration with shell history" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/shell-history.el") (:keywords "processes" "convenience")) nil])
  (shell-pop [cl-struct-package-desc shell-pop (20150727 2314) "helps you to use shell easily on Emacs. Only one key action to work." ((emacs (24))) single "melpa" nil ((:url . "http://github.com/kyagi/shell-pop-el") (:keywords "shell" "terminal" "tools")) nil])
  (shell-switcher [cl-struct-package-desc shell-switcher (20141211 734) "Provide fast switching between shell buffers." ((names (20141119))) tar "melpa" nil nil nil])
  (shift-text [cl-struct-package-desc shift-text (20130831 955) "Move the region in 4 directions, in a way similar to Eclipse's" ((cl-lib (1 0)) (es-lib (0 3))) single "melpa" nil ((:url . "https://github.com/sabof/shift-text")) nil])
  (shimbun [cl-struct-package-desc shimbun (20120718 2038) "interfacing with web newspapers" nil tar "melpa" nil ((:keywords "news")) nil])
  (show-marks [cl-struct-package-desc show-marks (20130805 749) "Navigate and visualize the mark-ring" ((fm (1 0))) single "melpa" nil ((:url . "https://github.com/vapniks/mark") (:keywords "convenience")) nil])
  (sicp [cl-struct-package-desc sicp (20121014 1314) "No description available." nil tar "melpa" nil nil nil])
  (simp [cl-struct-package-desc simp (20150427 932) "Simple project definition, chiefly for file finding, and grepping" nil tar "melpa" nil ((:url . "https://github.com/re5et/simp") (:keywords "project" "grep" "find")) nil])
  (simple-call-tree+ [cl-struct-package-desc simple-call-tree+ (20131009 1412) "Extensions to simple-call-tree" nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/simple-call-tree+.el") (:keywords "programming")) nil])
  (simple-call-tree [cl-struct-package-desc simple-call-tree (20130330 940) "analyze source code based on font-lock text-properties" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki.pl?CallTree") (:keywords "programming")) nil])
  (simple-httpd [cl-struct-package-desc simple-httpd (20150430 1755) "pure elisp HTTP server" ((cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/skeeto/emacs-http-server")) nil])
  (simpleclip [cl-struct-package-desc simpleclip (20140508 1341) "Simplified access to the system clipboard" nil single "melpa" nil ((:url . "http://github.com/rolandwalker/simpleclip") (:keywords "convenience")) nil])
  (simplenote [cl-struct-package-desc simplenote (20141118 640) "Interact with simple-note.appspot.com" nil single "melpa" nil ((:keywords "simplenote")) nil])
  (simplezen [cl-struct-package-desc simplezen (20130421 300) "A simple subset of zencoding-mode for Emacs." ((s (1 4 0)) (dash (1 1 0))) single "melpa" nil nil nil])
  (skewer-mode [cl-struct-package-desc skewer-mode (20150422 1818) "live browser JavaScript, CSS, and HTML interaction" ((simple-httpd (1 4 0)) (js2-mode (20090723)) (emacs (24))) tar "melpa" nil nil nil])
  (slamhound [cl-struct-package-desc slamhound (20140506 1618) "Rip Clojure namespaces apart and rebuild them." nil single "melpa" nil ((:url . "https://github.com/technomancy/slamhound") (:keywords "tools" "lisp")) nil])
  (slideview [cl-struct-package-desc slideview (20150324 1540) "File slideshow" ((cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/mhayashi1120/Emacs-slideview") (:keywords "files")) nil])
  (slim-mode [cl-struct-package-desc slim-mode (20140611 950) "Major mode for editing Slim files" nil single "melpa" nil ((:url . "http://github.com/slim-template/emacs-slim") (:keywords "markup" "language")) nil])
  (slime [cl-struct-package-desc slime (20150731 1337) "Superior Lisp Interaction Mode for Emacs" ((cl-lib (0 5))) tar "melpa" nil ((:url . "https://github.com/slime/slime") (:keywords "languages" "lisp" "slime")) nil])
  (slime-ritz [cl-struct-package-desc slime-ritz (20130218 1537) "slime extensions for ritz" nil single "melpa" nil ((:url . "https://github.com/pallet/ritz") (:keywords "languages" "lisp" "slime")) nil])
  (smart-compile [cl-struct-package-desc smart-compile (20150519 1647) "an interface to `compile'" nil single "melpa" nil ((:keywords "tools" "unix")) nil])
  (smart-forward [cl-struct-package-desc smart-forward (20140430 13) "Semantic navigation" ((expand-region (0 8 0))) single "melpa" nil ((:keywords "navigation")) nil])
  (smart-mode-line [cl-struct-package-desc smart-mode-line (20150721 551) "A color coded smart mode-line." ((emacs (24 3)) (rich-minority (0 1 1))) tar "melpa" nil ((:url . "http://github.com/Malabarba/smart-mode-line") (:keywords "mode-line" "faces" "themes")) nil])
  (smart-operator [cl-struct-package-desc smart-operator (20051013 1756) "Beautify the operators in codes" nil single "melpa" nil nil nil])
  (smart-tab [cl-struct-package-desc smart-tab (20150703 917) "Intelligent tab completion and indentation." nil single "melpa" nil ((:url . "http://github.com/genehack/smart-tab/tree/master") (:keywords "extensions")) nil])
  (smart-tabs-mode [cl-struct-package-desc smart-tabs-mode (20140331 1629) "Intelligently indent with tabs, align with spaces!" nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/SmartTabs") (:keywords "languages")) nil])
  (smart-window [cl-struct-package-desc smart-window (20130214 1142) "vim-like window controlling plugin" nil single "melpa" nil ((:url . "https://github.com/dryman/smart-window.el") (:keywords "window")) nil])
  (smartparens [cl-struct-package-desc smartparens (20150729 1315) "Automatic insertion, wrapping and paredit-like navigation with user defined pairs." ((cl-lib (0 3)) (dash (2 10 0))) tar "melpa" nil nil nil])
  (smartrep [cl-struct-package-desc smartrep (20150508 1930) "Support sequential operation which omitted prefix keys." nil single "melpa" nil ((:url . "https://github.com/myuhe/smartrep.el") (:keywords "convenience")) nil])
  (smarty-mode [cl-struct-package-desc smarty-mode (20100703 458) "major mode for editing smarty templates" nil single "melpa" nil ((:url . "none yet") (:keywords "smarty" "php" "languages" "templates")) nil])
  (smex [cl-struct-package-desc smex (20141210 1422) "M-x interface with Ido-style fuzzy matching." ((emacs (24))) single "melpa" nil ((:url . "http://github.com/nonsequitur/smex/") (:keywords "convenience" "usability")) nil])
  (smooth-scroll [cl-struct-package-desc smooth-scroll (20130321 2114) "Minor mode for smooth scrolling and in-place scrolling." nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/smooth-scroll.el") (:keywords "convenience" "emulations" "frames")) nil])
  (smooth-scrolling [cl-struct-package-desc smooth-scrolling (20131219 2039) "Make emacs scroll smoothly" nil single "melpa" nil ((:url . "http://github.com/aspiers/smooth-scrolling/") (:keywords "convenience")) nil])
  (smotitah [cl-struct-package-desc smotitah (20150218 230) "Modular emacs configuration framework" nil tar "melpa" nil nil nil])
  (snippet [cl-struct-package-desc snippet (20130210 1515) "Insert snippets of text into a buffer" nil single "melpa" nil nil nil])
  (solarized-theme [cl-struct-package-desc solarized-theme (20150725 730) "The Solarized color theme, ported to Emacs." ((dash (2 6 0))) tar "melpa" nil nil nil])
  (soothe-theme [cl-struct-package-desc soothe-theme (20141027 741) "a dark colorful theme for Emacs24." ((emacs (24 1))) single "melpa" nil ((:url . "https://github.com/jasonm23/emacs-soothe-theme")) nil])
  (sourcetalk [cl-struct-package-desc sourcetalk (20140823 739) "SourceTalk (http://sourcetalk.net) plugin for Emacs" ((request (0 2 0))) single "melpa" nil ((:url . "https://github.com/malroc/sourcetalk_emacs") (:keywords "sourcetalk" "code" "discussion")) nil])
  (spaces [cl-struct-package-desc spaces (20130610 49) "Create and switch between named window configurations." nil single "melpa" nil ((:url . "https://github.com/chumpage/chumpy-windows") (:keywords "frames" "convenience")) nil])
  (sparql-mode [cl-struct-package-desc sparql-mode (20150629 449) "Edit and interactively evaluate SPARQL queries." ((cl-lib (0 5))) tar "melpa" nil ((:url . "https://github.com/ljos/sparql-mode")) nil])
  (splitter [cl-struct-package-desc splitter (20130705 50) "Manage window splits" nil single "melpa" nil ((:url . "https://github.com/chumpage/chumpy-windows") (:keywords "frames" "convenience")) nil])
  (spotify [cl-struct-package-desc spotify (20150108 803) "Control the spotify application from emacs" nil single "melpa" nil ((:url . "https://github.com/remvee/spotify-el") (:keywords "convenience")) nil])
  (sprintly-mode [cl-struct-package-desc sprintly-mode (20121005 2234) "Major mode for dealing with sprint.ly" ((furl (0 0 2))) single "melpa" nil ((:url . "https://github.com/sprintly/sprintly-mode")) nil])
  (sql-indent [cl-struct-package-desc sql-indent (20150424 1716) "indentation of SQL statements" nil single "melpa" nil ((:url . "https://github.com/bsvingen/sql-indent") (:keywords "languages")) nil])
  (sr-speedbar [cl-struct-package-desc sr-speedbar (20141004 532) "Same frame speedbar" nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/sr-speedbar.el") (:keywords "speedbar" "sr-speedbar.el")) nil])
  (ssh [cl-struct-package-desc ssh (20120904 1342) "Support for remote logins using ssh." nil single "melpa" nil ((:keywords "unix" "comm")) nil])
  (ssh-config-mode [cl-struct-package-desc ssh-config-mode (20141219 846) "Mode for fontification of ~/.ssh/config" nil single "melpa" nil ((:url . "http://www.mahalito.net/~harley/elisp/ssh-config-mode.el") (:keywords "ssh" "config" "emacs")) nil])
  (stan-mode [cl-struct-package-desc stan-mode (20150727 1252) "Major mode for editing Stan files" nil tar "melpa" nil ((:url . "http://github.com/stan-dev/stan-mode") (:keywords "languanges")) nil])
  (starter-kit [cl-struct-package-desc starter-kit (20130904 1547) "Saner defaults and goodies." ((paredit (22)) (idle-highlight-mode (1 1 1)) (find-file-in-project (3 0)) (smex (1 1 2)) (ido-ubiquitous (0 3)) (magit (0 8 1))) tar "melpa" nil nil nil])
  (starter-kit-bindings [cl-struct-package-desc starter-kit-bindings (20120101 1955) "Saner defaults and goodies: bindings" ((starter-kit (2 0 2))) single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience")) nil])
  (starter-kit-eshell [cl-struct-package-desc starter-kit-eshell (20121001 1714) "Saner defaults and goodies: eshell tweaks" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience")) nil])
  (starter-kit-js [cl-struct-package-desc starter-kit-js (20111009 2054) "Saner defaults and goodies for Javascript" ((starter-kit (2 0 1))) single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience")) nil])
  (starter-kit-lisp [cl-struct-package-desc starter-kit-lisp (20120504 1225) "Saner defaults and goodies for lisp languages" ((starter-kit (2 0 2)) (elisp-slime-nav (0 1))) single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience")) nil])
  (starter-kit-perl [cl-struct-package-desc starter-kit-perl (20120202 1132) "Some helpful Perl code" nil single "melpa" nil nil nil])
  (starter-kit-ruby [cl-struct-package-desc starter-kit-ruby (20120202 1132) "Saner defaults and goodies for Ruby" ((inf-ruby (2 2 3)) (starter-kit (2 0 1))) single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience")) nil])
  (stem [cl-struct-package-desc stem (20131102 409) "Routines for stemming" nil single "melpa" nil ((:url . "https://github.com/yuutayamada/stem") (:keywords "stemming")) nil])
  (sticky [cl-struct-package-desc sticky (20101130 252) "Sticky key for capital letters" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/sticky.el") (:keywords "convenience")) nil])
  (string-edit [cl-struct-package-desc string-edit (20130815 2115) "Avoid escape nightmares by editing string in separate buffer" ((dash (1 2 0))) single "melpa" nil nil nil])
  (string-utils [cl-struct-package-desc string-utils (20140508 1341) "String-manipulation utilities" ((list-utils (0 4 2))) single "melpa" nil ((:url . "http://github.com/rolandwalker/string-utils") (:keywords "extensions")) nil])
  (stripe-buffer [cl-struct-package-desc stripe-buffer (20141208 708) "Use a different background for even and odd lines" ((cl-lib (1 0))) single "melpa" nil ((:url . "https://github.com/sabof/stripe-buffer")) nil])
  (stumpwm-mode [cl-struct-package-desc stumpwm-mode (20140130 1816) "special lisp mode for evaluating code into running stumpwm" nil single "melpa" nil ((:keywords "comm" "lisp" "tools")) nil])
  (stupid-indent-mode [cl-struct-package-desc stupid-indent-mode (20130816 1354) "Plain stupid indentation minor mode" nil single "melpa" nil nil nil])
  (stylus-mode [cl-struct-package-desc stylus-mode (20150313 812) "Major mode for editing .jade files" ((sws-mode (0))) single "melpa" nil ((:url . "https://github.com/brianc/jade-mode")) nil])
  (subatomic-theme [cl-struct-package-desc subatomic-theme (20150704 809) "Low contrast bluish color theme" nil single "melpa" nil ((:url . "https://github.com/cryon/subatomic") (:keywords "color-theme" "blue" "low contrast")) nil])
  (subatomic256-theme [cl-struct-package-desc subatomic256-theme (20130620 1910) "Fork of subatomic-theme for terminals." nil single "melpa" nil ((:url . "https://github.com/cryon/subatomic256")) nil])
  (sublime-themes [cl-struct-package-desc sublime-themes (20150328 131) "A collection of themes based on Sublime Text" nil tar "melpa" nil ((:keywords "faces")) nil])
  (sublimity [cl-struct-package-desc sublimity (20150601 1137) "smooth-scrolling, minimap and distraction-free mode" nil tar "melpa" nil ((:url . "http://hins11.yu-yake.com/")) nil])
  (subshell-proc [cl-struct-package-desc subshell-proc (20130122 1322) "Functions for working with comints" nil single "melpa" nil ((:url . "https://github.com/andrewmains12/subshell-proc")) nil])
  (sudden-death [cl-struct-package-desc sudden-death (20140829 538) "Totsuzen-no-Shi" nil single "melpa" nil ((:url . "https://github.com/yewton/sudden-death.el")) nil])
  (sudo-ext [cl-struct-package-desc sudo-ext (20130130 2151) "sudo support" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/sudo-ext.el") (:keywords "unix")) nil])
  (summarye [cl-struct-package-desc summarye (20130328 1027) "list up matched strings from a buffer, and display them in summary buffer" nil single "melpa" nil nil nil])
  (suomalainen-kalenteri [cl-struct-package-desc suomalainen-kalenteri (20140614 2350) "Finnish national and Christian holidays for calendar" nil tar "melpa" nil nil nil])
  (supergenpass [cl-struct-package-desc supergenpass (20130328 2248) "SuperGenPass for Emacs" nil single "melpa" nil ((:keywords "supergenpass")) nil])
  (svg-mode-line-themes [cl-struct-package-desc svg-mode-line-themes (20150425 1306) "SVG-based themes for mode-line" ((xmlgen (0 4))) tar "melpa" nil ((:url . "https://github.com/sabof/svg-mode-line-themes")) nil])
  (swbuff [cl-struct-package-desc swbuff (20041012 718) "Quick switch between Emacs buffers." nil single "melpa" nil ((:keywords "extensions" "convenience")) nil])
  (swbuff-x [cl-struct-package-desc swbuff-x (20130607 1014) "Modifications to David Ponce's swbuff" ((swbuff (19991231 1800))) single "melpa" nil ((:url . "http://www.emacswiki.org/elisp/swbuff-x.el") (:keywords "files" "convenience")) nil])
  (switch-window [cl-struct-package-desc switch-window (20150114 215) "A *visual* way to choose a window to switch to" nil single "melpa" nil ((:url . "http://tapoueh.org/emacs/switch-window.html") (:keywords "window" "navigation")) nil])
  (sws-mode [cl-struct-package-desc sws-mode (20150317 1245) "(S)ignificant (W)hite(S)pace mode" nil single "melpa" nil ((:url . "https://github.com/brianc/jade-mode")) nil])
  (synonyms [cl-struct-package-desc synonyms (20150105 56) "Look up synonyms for a word or phrase in a thesaurus." nil single "melpa" nil ((:url . "http://www.emacswiki.org/synonyms.el") (:keywords "text" "dictionary" "thesaurus" "spelling" "apropos" "help")) nil])
  (syntactic-sugar [cl-struct-package-desc syntactic-sugar (20140508 1341) "Effect-free forms such as if/then/else" nil single "melpa" nil ((:url . "http://github.com/rolandwalker/syntactic-sugar") (:keywords "extensions")) nil])
  (syslog-mode [cl-struct-package-desc syslog-mode (20140217 1618) "Major-mode for viewing log files" ((hide-lines (20130623))) single "melpa" nil ((:url . "https://github.com/vapniks/syslog-mode") (:keywords "unix")) nil])
  (systemtap-mode [cl-struct-package-desc systemtap-mode (20121209 1510) "A mode for SystemTap" nil single "melpa" nil ((:url . "https://github.com/ruediger/systemtap-mode") (:keywords "tools" "languages")) nil])
  (tabbar [cl-struct-package-desc tabbar (20141109 143) "Display a tab bar in the header line" nil tar "melpa" nil ((:keywords "convenience")) nil])
  (tabbar-ruler [cl-struct-package-desc tabbar-ruler (20150428 611) "Pretty tabbar, autohide, use both tabbar/ruler" ((tabbar (2 0 1))) tar "melpa" nil ((:url . "http://github.com/mlf176f2/tabbar-ruler.el") (:keywords "tabbar" "ruler mode" "menu" "tool bar.")) nil])
  (tabulated-list [cl-struct-package-desc tabulated-list (20120406 1351) "generic major mode for tabulated lists." nil single "melpa" nil ((:keywords "extensions" "lisp")) nil])
  (tagedit [cl-struct-package-desc tagedit (20150727 224) "Some paredit-like features for html-mode" ((s (1 3 1)) (dash (1 0 3))) single "melpa" nil ((:keywords "convenience")) nil])
  (tango-2-theme [cl-struct-package-desc tango-2-theme (20120312 1325) "Tango 2 color theme for GNU Emacs 24" nil single "melpa" nil nil nil])
  (tangotango-theme [cl-struct-package-desc tangotango-theme (20150702 104) "Tango Palette color theme for Emacs 24." nil single "melpa" nil ((:url . "https://github.com/juba/color-theme-tangotango") (:keywords "tango" "palette" "color" "theme" "emacs")) nil])
  (tc [cl-struct-package-desc tc (20150113 1926) "a Japanese input method with T-Code on Emacs" nil tar "melpa" nil nil nil])
  (tea-time [cl-struct-package-desc tea-time (20120331 120) "Simple timer package, useful to make perfect tea." nil single "melpa" nil ((:keywords "timer" "tea-time")) nil])
  (test-case-mode [cl-struct-package-desc test-case-mode (20150703 1225) "unit test front-end" ((fringe-helper (0 1 1))) single "melpa" nil ((:url . "http://nschum.de/src/emacs/test-case-mode/") (:keywords "tools")) nil])
  (test-simple [cl-struct-package-desc test-simple (20150331 302) "Simple Unit Test Framework for Emacs Lisp" nil single "melpa" nil ((:url . "http://github.com/rocky/emacs-test-simple") (:keywords "unit-test")) nil])
  (tex-smart-umlauts [cl-struct-package-desc tex-smart-umlauts (20131210 2346) "Smart umlaut conversion for TeX." nil single "melpa" nil ((:url . "http://hub.darcs.net/lyro/tex-smart-umlauts") (:keywords "tex" "wp")) nil])
  (textile-mode [cl-struct-package-desc textile-mode (20120721 1258) "Textile markup editing major mode" nil single "melpa" nil nil nil])
  (textmate [cl-struct-package-desc textmate (20110816 1446) "TextMate minor mode for Emacs" nil single "melpa" nil ((:keywords "textmate" "osx" "mac")) nil])
  (textmate-to-yas [cl-struct-package-desc textmate-to-yas (20130509 854) "Import Textmate macros into yasnippet syntax" nil tar "melpa" nil ((:url . "https://github.com/mlf176f2/textmate-to-yas.el/") (:keywords "yasnippet" "textmate")) nil])
  (tfs [cl-struct-package-desc tfs (20120508 1820) "MS Team Foundation Server commands for Emacs." nil single "melpa" nil ((:url . "http://cheeso.members.winisp.net/srcview.aspx?dir=emacs&file=tfs.el")) nil])
  (theme-changer [cl-struct-package-desc theme-changer (20130725 1919) "Sunrise/Sunset Theme Changer for Emacs" nil single "melpa" nil ((:url . "https://github.com/hadronzoo/theme-changer") (:keywords "color-theme" "deftheme" "solar" "sunrise" "sunset")) nil])
  (thesaurus [cl-struct-package-desc thesaurus (20121125 1937) "replace a word with a synonym looked up in a web service." nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/thesaurus.el") (:keywords "thesaurus" "synonym")) nil])
  (thingopt [cl-struct-package-desc thingopt (20150315 523) "Thing at Point optional utilities" nil single "melpa" nil ((:keywords "convenience")) nil])
  (thread-dump [cl-struct-package-desc thread-dump (20130323 1025) "Java thread dump viewer" nil single "melpa" nil ((:url . "http://github.com/nd/thread-dump.el")) nil])
  (thumb-through [cl-struct-package-desc thumb-through (20120118 2134) "Plain text reader of HTML documents" nil single "melpa" nil ((:keywords "html")) nil])
  (tidy [cl-struct-package-desc tidy (20111222 1756) "Interface to the HTML Tidy program" nil single "melpa" nil ((:url . "http://www.emacswiki.org/elisp/tidy.el") (:keywords "languages")) nil])
  (time-ext [cl-struct-package-desc time-ext (20130130 2151) "more function for time/date" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/time-ext.el") (:keywords "lisp")) nil])
  (tmmofl [cl-struct-package-desc tmmofl (20121025 401) "Calls functions dependant on font lock highlighting at point" nil single "melpa" nil ((:keywords "minor mode" "font lock" "toggling.")) nil])
  (todochiku [cl-struct-package-desc todochiku (20150112 2054) "A mode for interfacing with Growl, Snarl, and the like." nil single "melpa" nil nil nil])
  (todotxt [cl-struct-package-desc todotxt (20150513 1929) "A major mode for editing todo.txt files" nil single "melpa" nil ((:url . "https://github.com/rpdillon/todotxt.el") (:keywords "todo.txt" "todotxt" "todotxt.el")) nil])
  (tomatinho [cl-struct-package-desc tomatinho (20140120 1540) "Tomatinho" nil tar "melpa" nil ((:keywords "time" "productivity" "pomodoro technique")) nil])
  (toml-mode [cl-struct-package-desc toml-mode (20150702 2125) "Mojor mode for editing TOML files" nil single "melpa" nil ((:url . "https://github.com/dryman/toml-mode.el") (:keywords "data" "toml")) nil])
  (top-mode [cl-struct-package-desc top-mode (20130605 1739) "run \"top\" from emacs" nil single "melpa" nil ((:keywords "extensions" "processes")) nil])
  (toxi-theme [cl-struct-package-desc toxi-theme (20130418 1239) "A dark color theme by toxi" ((emacs (24))) single "melpa" nil ((:url . "http://hg.postspectacular.com/toxi-theme/")) nil])
  (tracking [cl-struct-package-desc tracking (20150724 1403) "Buffer modification tracking" nil tar "melpa" nil ((:url . "https://github.com/jorgenschaefer/circe/wiki/Tracking")) nil])
  (tree-mode [cl-struct-package-desc tree-mode (20150227 216) "A mode to manage tree widgets" nil single "melpa" nil ((:keywords "help" "convenience" "widget")) nil])
  (trident-mode [cl-struct-package-desc trident-mode (20130726 1207) "Live Parenscript interaction" ((emacs (24)) (slime (20130526)) (skewer-mode (1 5 0)) (dash (1 0 3))) single "melpa" nil ((:url . "https://github.com/johnmastro/trident-mode.el") (:keywords "languages" "lisp" "processes" "tools")) nil])
  (truthy [cl-struct-package-desc truthy (20140508 1341) "Test the content of a value" ((list-utils (0 4 2))) single "melpa" nil ((:url . "http://github.com/rolandwalker/truthy") (:keywords "extensions")) nil])
  (ttrss [cl-struct-package-desc ttrss (20130409 1049) "Tiny Tiny RSS elisp bindings" ((emacs (23 1))) single "melpa" nil ((:url . "https://github.com/pedros/ttrss.el") (:keywords "news" "local")) nil])
  (tuareg [cl-struct-package-desc tuareg (20150626 1222) "OCaml mode for Emacs." ((caml (3 12 0 1))) tar "melpa" nil ((:url . "https://github.com/ocaml/tuareg") (:keywords "ocaml" "languages")) nil])
  (tumble [cl-struct-package-desc tumble (20130327 1007) "an Tumblr mode for Emacs" ((http-post-simple (0))) single "melpa" nil ((:keywords "tumblr")) nil])
  (tumblesocks [cl-struct-package-desc tumblesocks (20140215 1247) "An Emacs tumblr client." ((htmlize (1 39)) (oauth (1 0 3)) (markdown-mode (1 8 1))) tar "melpa" nil nil nil])
  (tup-mode [cl-struct-package-desc tup-mode (20140410 914) "Major mode for editing files for Tup" nil single "melpa" nil ((:url . "https://github.com/ejmr/tup-mode")) nil])
  (twilight-anti-bright-theme [cl-struct-package-desc twilight-anti-bright-theme (20140810 34) "A soothing Emacs 24 light-on-dark theme" nil single "melpa" nil ((:url . "https://github.com/jimeh/twilight-anti-bright-theme.el") (:keywords "themes")) nil])
  (twilight-bright-theme [cl-struct-package-desc twilight-bright-theme (20130605 143) "A Emacs 24 faces port of the TextMate theme" nil single "melpa" nil ((:url . "https://github.com/jimeh/twilight-bright-theme.el") (:keywords "themes")) nil])
  (twilight-theme [cl-struct-package-desc twilight-theme (20120412 603) "Twilight theme for GNU Emacs 24 (deftheme)" nil single "melpa" nil nil nil])
  (twittering-mode [cl-struct-package-desc twittering-mode (20150131 708) "Major mode for Twitter" nil single "melpa" nil ((:url . "http://twmode.sf.net/") (:keywords "twitter" "web")) nil])
  (typing [cl-struct-package-desc typing (20121026 2118) "The Typing Of Emacs" nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/TypingOfEmacs") (:keywords "games")) nil])
  (typo [cl-struct-package-desc typo (20150726 149) "Minor mode for typographic editing" nil single "melpa" nil ((:url . "https://github.com/jorgenschaefer/typoel") (:keywords "convenience" "wp")) nil])
  (ucs-utils [cl-struct-package-desc ucs-utils (20140626 534) "Utilities for Unicode characters" ((persistent-soft (0 8 8)) (pcache (0 2 3)) (list-utils (0 4 2))) tar "melpa" nil ((:url . "http://github.com/rolandwalker/ucs-utils") (:keywords "i18n" "extensions")) nil])
  (ukrainian-holidays [cl-struct-package-desc ukrainian-holidays (20130720 649) "Ukrainian holidays for Emacs calendar." nil single "melpa" nil ((:url . "https://github.com/abo-abo/ukrainian-holidays")) nil])
  (uncrustify-mode [cl-struct-package-desc uncrustify-mode (20130707 659) "Minor mode to automatically uncrustify." nil single "melpa" nil ((:keywords "uncrustify")) nil])
  (underwater-theme [cl-struct-package-desc underwater-theme (20131117 1602) "A gentle, deep blue color theme" nil single "melpa" nil ((:keywords "faces")) nil])
  (undo-tree [cl-struct-package-desc undo-tree (20140509 522) "Treat undo history as a tree" nil single "melpa" nil ((:url . "http://www.dr-qubit.org/emacs.php") (:keywords "convenience" "files" "undo" "redo" "history" "tree")) nil])
  (undohist [cl-struct-package-desc undohist (20150315 542) "Persistent undo history for GNU Emacs" ((cl-lib (1 0))) single "melpa" nil ((:keywords "convenience")) nil])
  (unfill [cl-struct-package-desc unfill (20131103 213) "The inverse of fill-paragraph and fill-region" nil single "melpa" nil ((:keywords "utilities")) nil])
  (unicode-enbox [cl-struct-package-desc unicode-enbox (20140508 1341) "Surround a string with box-drawing characters" ((string-utils (0 3 2)) (ucs-utils (0 7 6)) (list-utils (0 4 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa" nil ((:url . "http://github.com/rolandwalker/unicode-enbox") (:keywords "extensions" "interface")) nil])
  (unicode-fonts [cl-struct-package-desc unicode-fonts (20150223 1059) "Configure Unicode fonts" ((font-utils (0 7 2)) (ucs-utils (0 8 0)) (list-utils (0 4 2)) (persistent-soft (0 8 10)) (pcache (0 3 1))) single "melpa" nil ((:url . "http://github.com/rolandwalker/unicode-fonts") (:keywords "i18n" "faces" "frames" "wp" "interface")) nil])
  (unicode-progress-reporter [cl-struct-package-desc unicode-progress-reporter (20140508 1341) "Progress-reporter with fancy characters" ((emacs (24 1 0)) (ucs-utils (0 7 6)) (list-utils (0 4 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa" nil ((:url . "http://github.com/rolandwalker/unicode-progress-reporter") (:keywords "interface")) nil])
  (unicode-whitespace [cl-struct-package-desc unicode-whitespace (20140508 1341) "teach whitespace-mode about fancy characters" ((ucs-utils (0 7 6)) (list-utils (0 4 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) single "melpa" nil ((:url . "http://github.com/rolandwalker/unicode-whitespace") (:keywords "faces" "wp" "interface")) nil])
  (usage-memo [cl-struct-package-desc usage-memo (20110722 1551) "integration of Emacs help system and memo" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/usage-memo.el") (:keywords "convenience" "languages" "lisp" "help" "tools" "docs")) nil])
  (use-package [cl-struct-package-desc use-package (20150622 1044) "A use-package declaration for simplifying your .emacs" ((bind-key (1 0)) (diminish (0 44))) single "melpa" nil ((:url . "https://github.com/jwiegley/use-package") (:keywords "dotemacs" "startup" "speed" "config" "package")) nil])
  (uuid [cl-struct-package-desc uuid (20120910 151) "UUID's for EmacsLisp" nil single "melpa" nil ((:keywords "lisp")) nil])
  (vc-darcs [cl-struct-package-desc vc-darcs (20141122 1326) "a VC backend for darcs" nil single "melpa" nil ((:keywords "vc")) nil])
  (vcl-mode [cl-struct-package-desc vcl-mode (20121129 1314) "Syntax highlighting for Varnish Command Language" nil single "melpa" nil nil nil])
  (vcomp [cl-struct-package-desc vcomp (20140906 1508) "compare version strings" nil single "melpa" nil ((:url . "https://github.com/tarsius/vcomp") (:keywords "versions")) nil])
  (vector-utils [cl-struct-package-desc vector-utils (20140508 1341) "Vector-manipulation utility functions" nil single "melpa" nil ((:url . "http://github.com/rolandwalker/vector-utils") (:keywords "extensions")) nil])
  (vertica [cl-struct-package-desc vertica (20131217 711) "Vertica SQL mode extension" ((sql (3 0))) single "melpa" nil ((:keywords "sql" "vertica")) nil])
  (viewer [cl-struct-package-desc viewer (20141021 1838) "View-mode extension" nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/viewer.el") (:keywords "view" "extensions")) nil])
  (vimgolf [cl-struct-package-desc vimgolf (20140814 1448) "VimGolf interface for the One True Editor" nil single "melpa" nil ((:keywords "games" "vimgolf" "vim")) nil])
  (vimrc-mode [cl-struct-package-desc vimrc-mode (20150607 913) "Major mode for vimrc files" nil single "melpa" nil ((:url . "https://github.com/mcandre/vimrc-mode") (:keywords "languages" "vim")) nil])
  (virtualenv [cl-struct-package-desc virtualenv (20140220 1501) "Virtualenv for Python" nil single "melpa" nil ((:keywords "python" "virtualenv")) nil])
  (visible-mark [cl-struct-package-desc visible-mark (20150623 2150) "Make marks visible." nil single "melpa" nil ((:url . "https://gitlab.com/iankelling/visible-mark") (:keywords "marking" "color" "faces")) nil])
  (visual-regexp [cl-struct-package-desc visual-regexp (20150329 954) "A regexp/replace command for Emacs with interactive visual feedback" ((cl-lib (0 2))) single "melpa" nil ((:url . "https://github.com/benma/visual-regexp.el/") (:keywords "regexp" "replace" "visual" "feedback")) nil])
  (visual-regexp-steroids [cl-struct-package-desc visual-regexp-steroids (20150411 416) "Extends visual-regexp to support other regexp engines" ((visual-regexp (0 8))) tar "melpa" nil ((:url . "https://github.com/benma/visual-regexp-steroids.el/") (:keywords "external" "foreign" "regexp" "replace" "python" "visual" "feedback")) nil])
  (vline [cl-struct-package-desc vline (20120108 1245) "show vertical line (column highlighting) mode." nil single "melpa" nil ((:url . "http://www.emacswiki.org/cgi-bin/wiki/vline.el") (:keywords "faces" "editing" "emulating")) nil])
  (volatile-highlights [cl-struct-package-desc volatile-highlights (20141004 2240) "Minor mode for visual feedback on some operations." nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/volatile-highlights.el") (:keywords "emulations" "convenience" "wp")) nil])
  (w3m [cl-struct-package-desc w3m (20150608 1838) "an Emacs interface to w3m" nil tar "melpa" nil ((:keywords "w3m" "www" "hypermedia")) nil])
  (wacspace [cl-struct-package-desc wacspace (20140826 2232) "The WACky WorkSPACE manager for emACS" ((dash (1 2 0)) (cl-lib (0 2))) tar "melpa" nil nil nil])
  (watch-buffer [cl-struct-package-desc watch-buffer (20120331 1344) "run a shell command when saving a buffer" nil single "melpa" nil ((:url . "https://github.com/mjsteger/watch-buffer") (:keywords "automation" "convenience")) nil])
  (wc-mode [cl-struct-package-desc wc-mode (20150117 502) "show wc-like information in status bar" nil single "melpa" nil ((:url . "http://www.dr-qubit.org/emacs.php") (:keywords "length" "characters" "words" "lines" "mode line")) nil])
  (wcheck-mode [cl-struct-package-desc wcheck-mode (20140621 1033) "General interface for text checkers" nil tar "melpa" nil nil nil])
  (web [cl-struct-package-desc web (20141231 1201) "useful HTTP client" ((dash (2 9 0)) (s (1 5 0))) single "melpa" nil ((:url . "http://github.com/nicferrier/emacs-web") (:keywords "lisp" "http" "hypermedia")) nil])
  (web-mode [cl-struct-package-desc web-mode (20150722 12) "major mode for editing web templates" nil single "melpa" nil ((:url . "http://web-mode.org") (:keywords "languages")) nil])
  (weblogger [cl-struct-package-desc weblogger (20110926 918) "Weblog maintenance via XML-RPC APIs" ((xml-rpc (1 6 8))) single "melpa" nil ((:url . "http://launchpad.net/weblogger-el") (:keywords "weblog" "blogger" "cms" "movable" "type" "openweblog" "blog")) nil])
  (websocket [cl-struct-package-desc websocket (20150719 1048) "Emacs WebSocket client and server" nil single "melpa" nil ((:keywords "communication" "websocket" "server")) nil])
  (weechat [cl-struct-package-desc weechat (20150703 247) "Chat via WeeChat's relay protocol in Emacs" ((s (1 3 1)) (cl-lib (0 2)) (emacs (24)) (tracking (1 2))) tar "melpa" nil nil nil])
  (wgrep [cl-struct-package-desc wgrep (20141016 1656) "Writable grep buffer and apply the changes to files" nil single "melpa" nil ((:url . "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep.el") (:keywords "grep" "edit" "extensions")) nil])
  (wgrep-ack [cl-struct-package-desc wgrep-ack (20141012 311) "Writable ack-and-a-half buffer and apply the changes to files" ((wgrep (2 1 1))) single "melpa" nil ((:url . "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep-ack.el") (:keywords "grep" "edit" "extensions")) nil])
  (wgrep-helm [cl-struct-package-desc wgrep-helm (20140528 1427) "Writable helm-grep-mode buffer and apply the changes to files" ((wgrep (2 1 1))) single "melpa" nil ((:url . "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep-helm.el") (:keywords "grep" "edit" "extensions")) nil])
  (whole-line-or-region [cl-struct-package-desc whole-line-or-region (20110901 130) "operate on current line if region undefined" nil single "melpa" nil ((:keywords "kill" "yank" "cut" "copy" "paste" "whole" "lines")) nil])
  (wide-column [cl-struct-package-desc wide-column (20120814 112) "Calls functions dependant on column position." nil single "melpa" nil ((:keywords "minor mode" "cursor colour" "column width")) nil])
  (widget-mvc [cl-struct-package-desc widget-mvc (20150101 2006) "MVC framework for the emacs widgets" nil single "melpa" nil ((:keywords "lisp" "widget")) nil])
  (wiki-nav [cl-struct-package-desc wiki-nav (20150223 554) "Simple file navigation using [[WikiStrings]]" ((button-lock (1 0 2)) (nav-flash (1 0 0))) single "melpa" nil ((:url . "http://github.com/rolandwalker/button-lock") (:keywords "mouse" "button" "hypermedia" "navigation")) nil])
  (win-switch [cl-struct-package-desc win-switch (20150208 1911) "fast, dynamic bindings for window-switching/resizing" nil single "melpa" nil ((:url . "http://www.stat.cmu.edu/~genovese/emacs/win-switch/") (:keywords "window" "switch" "key bindings" "ergonomic" "efficient")) nil])
  (window-end-visible [cl-struct-package-desc window-end-visible (20140508 1341) "Find the last visible point in a window" nil single "melpa" nil ((:url . "http://github.com/rolandwalker/window-end-visible") (:keywords "extensions")) nil])
  (window-jump [cl-struct-package-desc window-jump (20150213 1236) "Move left/right/up/down through your windows." nil single "melpa" nil ((:url . "https://github.com/chumpage/chumpy-windows") (:keywords "frames" "convenience")) nil])
  (window-layout [cl-struct-package-desc window-layout (20150716 2207) "window layout manager" nil single "melpa" nil ((:keywords "window" "layout")) nil])
  (window-number [cl-struct-package-desc window-number (20140124 302) "Select windows by numbers." nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/window-number.el")) nil])
  (windsize [cl-struct-package-desc windsize (20110728 1336) "Simple, intuitive window resizing" nil single "melpa" nil ((:url . "http://github.com/grammati/windsize") (:keywords "window" "resizing" "convenience")) nil])
  (winpoint [cl-struct-package-desc winpoint (20131023 1013) "Remember buffer positions per-window, not per buffer" nil single "melpa" nil ((:url . "https://github.com/jorgenschaefer/winpoint") (:keywords "convenience")) nil])
  (wisp-mode [cl-struct-package-desc wisp-mode (20150623 1034) "Tools for wisp: the Whitespace-to-Lisp preprocessor" nil single "melpa" nil ((:keywords "languages" "lisp")) nil])
  (with-namespace [cl-struct-package-desc with-namespace (20130407 1122) "interoperable elisp namespaces" ((dash (1 1 0)) (loop (1 1))) single "melpa" nil ((:keywords "namespaces")) nil])
  (workgroups [cl-struct-package-desc workgroups (20110726 941) "workgroups for windows (for Emacs)" nil single "melpa" nil ((:keywords "session" "management" "window-configuration" "persistence")) nil])
  (workgroups2 [cl-struct-package-desc workgroups2 (20141102 1122) "New workspaces for Emacs" ((cl-lib (0 4)) (dash (2 8 0)) (anaphora (1 0 0)) (f (0 17))) single "melpa" nil ((:url . "https://github.com/pashinin/workgroups2") (:keywords "session" "management" "window-configuration" "persistence")) nil])
  (world-time-mode [cl-struct-package-desc world-time-mode (20140627 107) "show whole days of world-time diffs" nil single "melpa" nil ((:keywords "tools" "calendar")) nil])
  (wrap-region [cl-struct-package-desc wrap-region (20140116 2320) "Wrap text with punctation or tag" ((dash (1 0 3))) single "melpa" nil ((:url . "http://github.com/rejeep/wrap-region") (:keywords "speed" "convenience")) nil])
  (writegood-mode [cl-struct-package-desc writegood-mode (20150325 1115) "Polish up poor writing on the fly" nil single "melpa" nil ((:url . "http://github.com/bnbeckwith/writegood-mode") (:keywords "writing" "weasel-words" "grammar")) nil])
  (writeroom-mode [cl-struct-package-desc writeroom-mode (20150719 1708) "Minor mode for distraction-free writing" ((emacs (24 1)) (visual-fill-column (1 4))) tar "melpa" nil ((:keywords "text")) nil])
  (xml-rpc [cl-struct-package-desc xml-rpc (20150529 832) "An elisp implementation of clientside XML-RPC" nil single "melpa" nil ((:url . "http://github.com/hexmode/xml-rpc-el") (:keywords "xml" "rpc" "network")) nil])
  (xmlgen [cl-struct-package-desc xmlgen (20130219 219) "A DSL for generating XML." nil single "melpa" nil nil nil])
  (xterm-frobs [cl-struct-package-desc xterm-frobs (20091211 1555) "manipulate xterm when running emacs in tty mode" nil single "melpa" nil nil nil])
  (yagist [cl-struct-package-desc yagist (20150425 551) "Yet Another Emacs integration for gist.github.com" ((cl-lib (0 3))) single "melpa" nil ((:url . "https://github.com/mhayashi1120/yagist.el") (:keywords "tools")) nil])
  (yalinum [cl-struct-package-desc yalinum (20130217 243) "yet another display line numbers." nil single "melpa" nil ((:keywords "convenience" "tools")) nil])
  (yaml-mode [cl-struct-package-desc yaml-mode (20141125 37) "Major mode for editing YAML files" nil single "melpa" nil ((:keywords "data" "yaml")) nil])
  (yaoddmuse [cl-struct-package-desc yaoddmuse (20150524 313) "Major mode for EmacsWiki and other Oddmuse wikis" nil single "melpa" nil ((:url . "http://www.emacswiki.org/emacs/download/yaoddmuse.el") (:keywords "yaoddmuse" "oddmuse")) nil])
  (yard-mode [cl-struct-package-desc yard-mode (20140816 1044) "Minor mode for Ruby YARD comments" nil single "melpa" nil ((:url . "https://github.com/pd/yard-mode.el")) nil])
  (yari [cl-struct-package-desc yari (20140206 611) "Yet Another RI interface for Emacs" nil single "melpa" nil ((:keywords "tools")) nil])
  (yascroll [cl-struct-package-desc yascroll (20150315 605) "Yet Another Scroll Bar Mode" ((cl-lib (0 3))) single "melpa" nil ((:keywords "convenience")) nil])
  (yasnippet [cl-struct-package-desc yasnippet (20150415 244) "Yet another snippet extension for Emacs." nil tar "melpa" nil ((:url . "http://github.com/capitaomorte/yasnippet") (:keywords "convenience" "emulation")) nil])
  (yaxception [cl-struct-package-desc yaxception (20150105 652) "Provide framework about exception like Java for Elisp" nil single "melpa" nil ((:url . "https://github.com/aki2o/yaxception") (:keywords "exception" "error" "signal")) nil])
  (zeitgeist [cl-struct-package-desc zeitgeist (20131228 1009) "No description available." nil single "melpa" nil nil nil])
  (zen-and-art-theme [cl-struct-package-desc zen-and-art-theme (20120622 737) "zen and art color theme for GNU Emacs 24" nil single "melpa" nil nil nil])
  (zenburn-theme [cl-struct-package-desc zenburn-theme (20150727 2148) "A low contrast color theme for Emacs." nil single "melpa" nil ((:url . "http://github.com/bbatsov/zenburn-emacs")) nil])
  (zencoding-mode [cl-struct-package-desc zencoding-mode (20140213 22) "Unfold CSS-selector-like expressions to markup" nil single "melpa" nil ((:url . "https://github.com/rooney/zencoding") (:keywords "convenience")) nil])
  (zlc [cl-struct-package-desc zlc (20150321 2028) "Provides zsh like completion system to Emacs" nil single "melpa" nil ((:keywords "matching" "convenience")) nil])
  (znc [cl-struct-package-desc znc (20140722 1421) "ZNC + ERC" ((cl-lib (0 2)) (erc (5 3))) single "melpa" nil ((:url . "https://github.com/sshirokov/ZNC.el")) nil])
  (zoom-frm [cl-struct-package-desc zoom-frm (20150110 2052) "Commands to zoom frame font size." ((frame-fns (0)) (frame-cmds (0))) single "melpa" nil ((:url . "http://www.emacswiki.org/zoom-frm.el") (:keywords "frames" "extensions" "convenience")) nil])
  (zossima [cl-struct-package-desc zossima (20121123 1635) "Ruby from Emacs" ((inf-ruby (2 2 3))) tar "melpa" nil ((:url . "https://github.com/technomancy/zossima") (:keywords "ruby" "convenience")) nil])
  (zotelo [cl-struct-package-desc zotelo (20150531 1225) "Manage Zotero collections from emacs" nil single "melpa" nil ((:url . "https://github.com/vitoshka/zotelo") (:keywords "zotero" "emacs" "reftex" "bibtex" "mozrepl" "bibliography manager")) nil])
 )
